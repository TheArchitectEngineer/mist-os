# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bind/bind.gni")
import("//build/components.gni")
import("//build/drivers.gni")
import("//build/test.gni")

driver_bind_rules("intel-display-bind") {
  rules = "meta/intel-display.bind"
  tests = "meta/intel-display-bind-tests.json"

  deps = [
    "//sdk/fidl/fuchsia.hardware.pci:fuchsia.hardware.pci_bindlib",
    "//src/devices/bind/fuchsia.acpi",
    "//src/devices/bind/fuchsia.pci",
  ]
}

source_set("common_srcs") {
  public_configs = [ "//build/config/fuchsia:enable_zircon_asserts" ]

  sources = [
    "acpi-memory-region-util.h",
    "acpi-memory-region.cc",
    "acpi-memory-region.h",
    "clock/cdclk.cc",
    "clock/cdclk.h",
    "ddi-aux-channel.cc",
    "ddi-aux-channel.h",
    "ddi-physical-layer-manager.cc",
    "ddi-physical-layer-manager.h",
    "ddi-physical-layer.cc",
    "ddi-physical-layer.h",
    "ddi.cc",
    "ddi.h",
    "display-device.cc",
    "display-device.h",
    "dp-aux-channel-impl.cc",
    "dp-aux-channel-impl.h",
    "dp-aux-channel.h",
    "dp-capabilities.cc",
    "dp-capabilities.h",
    "dp-display.cc",
    "dp-display.h",
    "dpcd.h",
    "dpll-config.cc",
    "dpll-config.h",
    "dpll.cc",
    "dpll.h",
    "edid-reader.cc",
    "edid-reader.h",
    "firmware-bridge.cc",
    "firmware-bridge.h",
    "fuse-config.cc",
    "fuse-config.h",
    "gtt.cc",
    "gtt.h",
    "hardware-common.h",
    "hdmi-display.cc",
    "hdmi-display.h",
    "i2c/gmbus-gpio.h",
    "i2c/gmbus-i2c.cc",
    "i2c/gmbus-i2c.h",
    "igd.cc",
    "igd.h",
    "intel-display-driver.cc",
    "intel-display-driver.h",
    "intel-display.cc",
    "intel-display.h",
    "interrupts.cc",
    "interrupts.h",
    "pch-engine.cc",
    "pch-engine.h",
    "pci-ids.h",
    "pipe-manager.cc",
    "pipe-manager.h",
    "pipe.cc",
    "pipe.h",
    "power-controller.cc",
    "power-controller.h",
    "power.cc",
    "power.h",
    "registers-ddi-phy-tiger-lake.h",
    "registers-ddi.h",
    "registers-dpll.h",
    "registers-gmbus.h",
    "registers-gt-mailbox.h",
    "registers-pch.h",
    "registers-pipe-scaler.h",
    "registers-pipe.h",
    "registers-transcoder.h",
    "registers-typec.h",
    "registers.h",
    "tiling.h",
  ]
  public_deps = [
    ":intel-display-bind",
    "//sdk/banjo/fuchsia.hardware.display.controller:fuchsia.hardware.display.controller_banjo_cpp",
    "//sdk/banjo/fuchsia.hardware.intelgpucore:fuchsia.hardware.intelgpucore_banjo_cpp",
    "//sdk/fidl/fuchsia.boot:fuchsia.boot_cpp",
    "//sdk/fidl/fuchsia.hardware.backlight:fuchsia.hardware.backlight_cpp",
    "//sdk/fidl/fuchsia.hardware.sysmem:fuchsia.hardware.sysmem_cpp",
    "//sdk/fidl/fuchsia.kernel:fuchsia.kernel_cpp",
    "//sdk/fidl/fuchsia.sysmem2:fuchsia.sysmem2_cpp",
    "//sdk/fidl/fuchsia.system.state:fuchsia.system.state_cpp",
    "//sdk/lib/async-loop:async-loop-cpp",
    "//sdk/lib/driver/compat/cpp",
    "//sdk/lib/driver/component/cpp",
    "//sdk/lib/driver/incoming/cpp",
    "//sdk/lib/driver/logging/cpp",
    "//sdk/lib/driver/runtime:driver_runtime_cpp",
    "//sdk/lib/stdcompat",
    "//sdk/lib/zbi-format",
    "//src/devices/bind/fuchsia:fuchsia_cpp",
    "//src/devices/bind/fuchsia.display:fuchsia.display_cpp",
    "//src/devices/bind/fuchsia.intel.platform.gpucore:fuchsia.intel.platform.gpucore_cpp",
    "//src/devices/bind/fuchsia.sysmem.heap:fuchsia.sysmem.heap_cpp",
    "//src/devices/lib/driver:driver_runtime",
    "//src/devices/lib/mmio",
    "//src/devices/pci/lib/device-protocol-pci",
    "//src/devices/pci/lib/pci",
    "//src/graphics/display/lib/api-types/cpp",
    "//src/graphics/display/lib/driver-utils",
    "//src/graphics/display/lib/edid",
    "//src/lib/ddk:ddk-hw-headers",
    "//src/lib/fxl",
    "//src/lib/zbitl",
    "//zircon/system/ulib/fbl",
    "//zircon/system/ulib/hwreg",
    "//zircon/system/ulib/image-format",
    "//zircon/system/ulib/inspect",
    "//zircon/system/ulib/region-alloc",
    "//zircon/system/ulib/sync:sync-cpp",
    "//zircon/system/ulib/zircon-internal",
    "//zircon/system/ulib/zx",
  ]
}

fuchsia_cc_driver("driver") {
  output_name = "intel-display"
  deps = [ ":common_srcs" ]
}

fuchsia_driver_component("intel-display") {
  component_name = "intel-display"
  deps = [ ":driver" ]
  info = "meta/intel-display-info.json"
  manifest = "meta/intel-display.cml"
}

fuchsia_driver_package("package") {
  package_name = "intel-display"
  driver_components = [ ":intel-display" ]
}

test("intel-display-tests") {
  sources = [
    "acpi-memory-region-unittest.cc",
    "acpi-memory-region-util-unittest.cc",
    "ddi-aux-channel-unittest.cc",
    "ddi-physical-layer-manager-unittest.cc",
    "ddi-physical-layer-unittest.cc",
    "dp-capabilities-unittest.cc",
    "dp-display-unittest.cc",
    "dpll-config-unittest.cc",
    "dpll-unittest.cc",
    "fake-dp-aux-channel.cc",
    "fake-dp-aux-channel.h",
    "firmware-bridge-unittest.cc",
    "fuse-config-unittest.cc",
    "gtt-unittest.cc",
    "hardware-common-unittest.cc",
    "i2c/gmbus-gpio-unittest.cc",
    "intel-display-driver-test.cc",
    "intel-display-test.cc",
    "interrupts-unittest.cc",
    "pch-engine-unittest.cc",
    "pipe-manager-unittest.cc",
    "pipe-unittest.cc",
    "power-controller-unittest.cc",
    "power-unittest.cc",
    "registers-arbiter-unittest.cc",
    "registers-arbiter.h",
    "registers-ddi-phy-tiger-lake-unittest.cc",
    "registers-ddi-unittest.cc",
    "registers-dpll-unittest.cc",
    "registers-gmbus-unittest.cc",
    "registers-memory-controller-unittest.cc",
    "registers-memory-controller.h",
    "registers-pipe-scaler-unittest.cc",
    "registers-pipe-unittest.cc",
    "registers-transcoder-unittest.cc",
    "registers-typec-unittest.cc",
    "registers-unittest.cc",
  ]
  deps = [
    ":common_srcs",
    "testing:fake-framebuffer",
    "testing:mock-allocator",
    "//sdk/fidl/fuchsia.hardware.sysmem:fuchsia.hardware.sysmem_cpp_testing",
    "//sdk/fidl/fuchsia.kernel:fuchsia.kernel_cpp",
    "//sdk/fidl/fuchsia.sysmem2:fuchsia.sysmem2_cpp",
    "//sdk/fidl/fuchsia.sysmem2:fuchsia.sysmem2_cpp_testing",
    "//sdk/fidl/fuchsia.system.state:fuchsia.system.state_cpp",
    "//sdk/lib/async-loop:async-loop-cpp",
    "//sdk/lib/async-loop:async-loop-default",
    "//sdk/lib/async-loop-testing/cpp",
    "//sdk/lib/async_patterns/testing/cpp",
    "//sdk/lib/component/outgoing/cpp",
    "//sdk/lib/driver/fake-mmio-reg/cpp",
    "//sdk/lib/driver/mock-mmio/cpp",
    "//sdk/lib/driver/runtime:driver_runtime_cpp",
    "//sdk/lib/driver/testing/cpp",
    "//sdk/lib/driver/testing/cpp:scoped_global_logger",
    "//sdk/lib/zbi-format",
    "//src/devices/bin/driver_runtime",
    "//src/devices/bind/fuchsia:fuchsia_cpp",
    "//src/devices/bind/fuchsia.display:fuchsia.display_cpp",
    "//src/devices/bind/fuchsia.intel.platform.gpucore:fuchsia.intel.platform.gpucore_cpp",
    "//src/devices/lib/mmio:test_helper",
    "//src/devices/pci/testing:pci-protocol-fake",
    "//src/devices/testing/fake-resource",
    "//src/graphics/display/lib/api-types/cpp",
    "//src/graphics/display/lib/edid-values",
    "//src/lib/fsl",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/testing/predicates",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/mmio-ptr",
  ]
}

group("tests") {
  testonly = true
  deps = [
    ":intel-display-bind_test",
    ":intel-display-tests-package",
    "testing:tests",
  ]
}

fuchsia_unittest_package("intel-display-tests-package") {
  package_name = "intel-display-tests"
  deps = [ ":intel-display-tests" ]
  manifest = "meta/intel-display-tests.cml"
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
  }
}
