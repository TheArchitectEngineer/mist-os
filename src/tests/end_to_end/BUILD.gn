# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

############# STEPS FOR ADDING LACEWING USER TEST TO INFRA - START #############
# 1. Identify which all <PRODUCT>.<BOARD> you like to run this test on
# 2. For each of the <PRODUCT>.<BOARD> there is a Test group defined below.
#    Accordingly update each of <PRODUCT>.<BOARD> Infra Test group where you
#    like to run the test
############## STEPS FOR ADDING LACEWING SELF TEST TO INFRA - END ##############

# Infra Test groups:
# For every <PRODUCT>.<BOARD> that we plan to run the tests on, below test
# groups are created:
#
# <PRODUCT>.<BOARD>
#     Stable (Tests that passed for at least 1000+ consecutive runs)
#         Tests that require SL4F transport, if any
#         Tests that does not require SL4F transport
#     Unstable (Tests that are yet to pass 1000 consecutive runs)
#         Tests that require SL4F transport, if any
#         Tests that does not require SL4F transport
#
# Note: Each entry in test group should refer to a test case along with its
# dependencies (if any). For example,
#   * `src/testing/end_to_end/honeydew/tests/functional_tests/affordance_tests/test_session:test_session`
#     is a group that contains
#     `src/testing/end_to_end/honeydew/tests/functional_tests/affordance_tests/test_session:session_test_fc`
#      test and its dependencies
#     `src/testing/end_to_end/honeydew/tests/functional_tests/affordance_tests/test_session:packages`.
#     So include this group name (not the test name)
#   * `src/testing/end_to_end/honeydew/tests/functional_tests/affordance_tests/test_rtc:rtc_test_fc`
#     is a test and it does not have any dependencies. So you can include this test name directly

template("group_with_no_dir_target_deps") {
  group(target_name) {
    forward_variables_from(invoker, "*")
    assert_no_deps = [ ":*" ]
    if (defined(invoker.assert_no_deps)) {
      assert_no_deps += invoker.assert_no_deps
    }
  }
}

############################# Test groups - Start ##############################
# workbench.x64
group_with_no_dir_target_deps("workbench_x64_stable_tests") {
  testonly = true
  public_deps = [
    "//scripts/lib/ffx_cmd:ffx_cmd_inspect_e2e_test($host_toolchain)",
    "//src/developer/ffx/lib/fuchsia-controller/end_to_end_tests/mobly:fuchsia_controller_tests($host_toolchain)",
    "//src/performance/experimental/profiler:e2e_tests",
    "//src/storage/blackout/host:blackout_emulator_stable",
    "//src/tests/end_to_end/diagnostics:diagnostics_test($host_toolchain)",
    "//src/tests/end_to_end/snapshot:snapshot_test($host_toolchain)",
  ]
}

group_with_no_dir_target_deps("workbench_x64_unstable_tests") {
  testonly = true
  public_deps = [
    "//src/developer/ffx/lib/fuchsia-controller/end_to_end_tests/mobly:fuchsia_controller_tests_staging",
    "//src/storage/blackout/host:blackout_emulator_unstable",
    "//src/tests/end_to_end/power_framework:tests",
  ]
}

group("workbench_x64_staging_tests") {
  testonly = true
  public_deps = [
    ":workbench_x64_stable_tests",
    ":workbench_x64_unstable_tests",
  ]
}

# workbench.vim3
group_with_no_dir_target_deps("workbench_vim3_stable_tests") {
  testonly = true
  public_deps = [
    "//src/developer/ffx/lib/fuchsia-controller/end_to_end_tests/mobly:fuchsia_controller_tests($host_toolchain)",
    "//src/firmware/tests/lacewing:lacewing($host_toolchain)",
    "//src/performance/experimental/profiler:e2e_tests",
    "//src/storage/blackout/host:blackout_workbench_vim3_stable",
    "//src/tests/end_to_end/diagnostics:diagnostics_test($host_toolchain)",
    "//src/tests/end_to_end/rtc:rtc_conformance_test($host_toolchain)",
    "//src/tests/end_to_end/snapshot:snapshot_test($host_toolchain)",
  ]
}

group_with_no_dir_target_deps("workbench_vim3_unstable_tests") {
  testonly = true
  public_deps = [
    "//src/developer/ffx/lib/fuchsia-controller/end_to_end_tests/mobly:fuchsia_controller_tests_staging",
    "//src/firmware/tests/lacewing:lacewing($host_toolchain)",
    "//src/storage/blackout/host:blackout_workbench_vim3_unstable",
    "//src/tests/end_to_end/power_framework:tests",
  ]
}

group("workbench_vim3_staging_tests") {
  testonly = true
  public_deps = [
    ":workbench_vim3_stable_tests",
    ":workbench_vim3_unstable_tests",
  ]
}

# minimal.vim3
group_with_no_dir_target_deps("minimal_vim3_stable_tests") {
  testonly = true
  public_deps = []
}

group_with_no_dir_target_deps("minimal_vim3_unstable_tests") {
  testonly = true
  public_deps =
      [ "//src/tests/end_to_end/rtc:rtc_conformance_test($host_toolchain)" ]
}

group("minimal_vim3_staging_tests") {
  testonly = true
  public_deps = [
    ":minimal_vim3_stable_tests",
    ":minimal_vim3_unstable_tests",
  ]
}

# starnix.arm64
# Note: This will be run on internal *.arm64 builder, hence using `starnix` here
# instead of internal `<PRODUCT>` name.
#
# Tests should be included in this list if they are stable and can run on
# userdebug products. If the test should only run on eng products use the _eng
# group below.
group_with_no_dir_target_deps("starnix_arm64_stable_tests") {
  testonly = true
  public_deps = [
    "//src/tests/end_to_end/diagnostics:diagnostics_test($host_toolchain)",
    "//src/tests/end_to_end/snapshot:snapshot_test($host_toolchain)",
  ]
}

# Tests should be included in this list if they are unstable and can run on
# userdebug products. If the test should only run on eng products use the _eng
# group below.
group_with_no_dir_target_deps("starnix_arm64_unstable_tests") {
  testonly = true
  public_deps =
      [ "//src/tests/end_to_end/rtc:rtc_conformance_test($host_toolchain)" ]
}

group("starnix_arm64_staging_tests") {
  testonly = true
  public_deps = [
    ":starnix_arm64_stable_tests",
    ":starnix_arm64_unstable_tests",
  ]
}

# This group includes a subset of tests that are depended on in vendor/google.
#
# Tests should be included in this list if they are stable but should only be
# ran on eng products
group_with_no_dir_target_deps("starnix_arm64_stable_eng_tests") {
  testonly = true
  public_deps = []
}

# This group includes a subset of tests that are depended on in vendor/google.
#
# Tests should be included in this list if they are unstable and should only be
# ran on eng products
group_with_no_dir_target_deps("starnix_arm64_unstable_eng_tests") {
  testonly = true
  public_deps =
      [ "//src/performance/memory/attribution/monitor/tests/e2e:tests" ]
}
############################## Test groups - End ###############################
