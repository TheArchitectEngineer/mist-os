# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
# Tests that we want to run in an FYI builder.
# We do not want failures from these tests to break the tree.

############# STEPS FOR ADDING LACEWING SELF TEST TO INFRA - START #############
# 1. Identify which all <PRODUCT>.<BOARD> you like to run this test on
# 2. For each of the <PRODUCT>.<BOARD> there is a Test group defined below.
#    Accordingly update each of <PRODUCT>.<BOARD> Infra Test group where you
#    like to run the test
############## STEPS FOR ADDING LACEWING SELF TEST TO INFRA - END ##############

# Infra Test groups:
# For every <PRODUCT>.<BOARD> that we plan to run the tests on, below test
# groups are created:
#
# <PRODUCT>.<BOARD>
#     Stable (Tests that passed for at least 1000+ consecutive runs)
#         Tests that require SL4F transport, if any
#         Tests that does not require SL4F transport
#     Unstable (Tests that are yet to pass 1000 consecutive runs)
#         Tests that require SL4F transport, if any
#         Tests that does not require SL4F transport
#
# Note: Each entry in test group should refer to a test case along with its
# dependencies (if any). For example,
#   * `//src/testing/end_to_end/honeydew/honeydew/transports/ffx/tests/functional_tests:test_ffx_on_vim3`
#     is a group that contains
#     `//src/testing/end_to_end/honeydew/honeydew/transports/ffx/tests/functional_tests:ffx_test_on_vim3`
#      test and its dependencies
#     `//src/testing/end_to_end/honeydew/honeydew/transports/ffx/tests/functional_tests:packages`.
#     So include this group name (not the test name)
#   * `//src/testing/end_to_end/honeydew/honeydew/affordances/rtc/tests/functional_tests:rtc_test`
#     is a test and it does not have any dependencies. So you can include this test name directly
#
# Note - Except in `Staging` groups, please refrain from referencing one group
# in another one (such as including `core_x64_stable_tests` in
# `workbench_x64_stable_tests`) as it is not guaranteed that every single
# test case supported by <product-#1>.<board-#1> is supported by other
# <product-#2>.<board-#2>

template("group_with_no_dir_target_deps") {
  group(target_name) {
    forward_variables_from(invoker, "*")
    assert_no_deps = [ ":*" ]
    if (defined(invoker.assert_no_deps)) {
      assert_no_deps += invoker.assert_no_deps
    }
  }
}

############################# Test groups - Start ##############################

# core.x64
group_with_no_dir_target_deps("core_x64_stable_sl4f_tests") {
  testonly = true
  public_deps = [ "examples/test_soft_reboot:test_soft_reboot_sl4f" ]
}

group_with_no_dir_target_deps("core_x64_stable_tests") {
  testonly = true
  public_deps = [
    "examples/test_case_revive_example:run_wo_test_case_revive($host_toolchain)",
    "examples/test_case_revive_example:test_case_revive_with_hard_reboot($host_toolchain)",
    "examples/test_case_revive_example:test_case_revive_with_soft_reboot($host_toolchain)",
    "examples/test_power_cycle:power_cycle_test($host_toolchain)",
    "examples/test_soft_reboot:soft_reboot_test($host_toolchain)",
    "examples/test_soft_reboot:soft_reboot_test.hermetic($host_toolchain)",
    "honeydew/honeydew/affordances/tracing/tests/functional_tests:tracing_test($host_toolchain)",
    "honeydew/honeydew/auxiliary_devices/power_switch/tests/functional_tests:power_switch_dmc_test($host_toolchain)",
    "honeydew/honeydew/fuchsia_device/tests/functional_tests:x64_emu_test($host_toolchain)",
    "honeydew/honeydew/fuchsia_device/tests/functional_tests:x64_nuc_test($host_toolchain)",
    "honeydew/honeydew/transports/ffx/tests/functional_tests:ffx_wait_for_rcs_disconnection_test($host_toolchain)",
    "honeydew/honeydew/transports/ffx/tests/functional_tests:test_ffx_on_x64",
    "honeydew/honeydew/transports/serial/tests/functional_tests:serial_test($host_toolchain)",
  ]
}

group_with_no_dir_target_deps("core_x64_unstable_sl4f_tests") {
  testonly = true
  public_deps = []
}

group_with_no_dir_target_deps("core_x64_unstable_tests") {
  testonly = true
  public_deps = []
}

group("core_x64_staging_sl4f_tests") {
  testonly = true
  public_deps = [
    ":core_x64_stable_sl4f_tests",
    ":core_x64_unstable_sl4f_tests",
  ]
}

group("core_x64_staging_tests") {
  testonly = true
  public_deps = [
    ":core_x64_stable_tests",
    ":core_x64_unstable_tests",
  ]
}

# workbench.x64
group_with_no_dir_target_deps("workbench_x64_stable_tests") {
  testonly = true
  public_deps = [
    "examples/test_case_revive_example:run_wo_test_case_revive($host_toolchain)",
    "examples/test_case_revive_example:test_case_revive_with_hard_reboot($host_toolchain)",
    "examples/test_case_revive_example:test_case_revive_with_soft_reboot($host_toolchain)",
    "examples/test_power_cycle:power_cycle_test($host_toolchain)",
    "examples/test_soft_reboot:soft_reboot_test($host_toolchain)",
    "examples/test_soft_reboot:soft_reboot_test.hermetic($host_toolchain)",
    "honeydew/honeydew/affordances/connectivity/netstack/tests/functional_tests:netstack_test($host_toolchain)",
    "honeydew/honeydew/affordances/location/tests/functional_tests:location_test($host_toolchain)",
    "honeydew/honeydew/affordances/session/tests/functional_tests:test_session",
    "honeydew/honeydew/affordances/tracing/tests/functional_tests:tracing_test($host_toolchain)",
    "honeydew/honeydew/affordances/ui/screenshot/tests/functional_tests:test_screenshot",
    "honeydew/honeydew/affordances/ui/user_input/tests/functional_tests:test_user_input",
    "honeydew/honeydew/auxiliary_devices/power_switch/tests/functional_tests:power_switch_dmc_test($host_toolchain)",
    "honeydew/honeydew/fuchsia_device/tests/functional_tests:x64_emu_test($host_toolchain)",
    "honeydew/honeydew/fuchsia_device/tests/functional_tests:x64_nuc_test($host_toolchain)",
    "honeydew/honeydew/transports/ffx/tests/functional_tests:ffx_wait_for_rcs_disconnection_test($host_toolchain)",
    "honeydew/honeydew/transports/ffx/tests/functional_tests:test_ffx_on_x64",
    "honeydew/honeydew/transports/serial/tests/functional_tests:serial_test($host_toolchain)",
  ]
}

group_with_no_dir_target_deps("workbench_x64_unstable_tests") {
  testonly = true
  public_deps = []
}

group("workbench_x64_staging_tests") {
  testonly = true
  public_deps = [
    ":workbench_x64_stable_tests",
    ":workbench_x64_unstable_tests",
  ]
}

# core.vim3
group_with_no_dir_target_deps("core_vim3_stable_tests") {
  testonly = true
  public_deps = [
    "examples/test_case_revive_example:run_wo_test_case_revive($host_toolchain)",
    "examples/test_case_revive_example:test_case_revive_with_hard_reboot($host_toolchain)",
    "examples/test_case_revive_example:test_case_revive_with_soft_reboot($host_toolchain)",
    "examples/test_power_cycle:power_cycle_test($host_toolchain)",
    "examples/test_soft_reboot:soft_reboot_test($host_toolchain)",
    "examples/test_soft_reboot:soft_reboot_test.hermetic($host_toolchain)",
    "honeydew/honeydew/affordances/power/system_power_state_controller/tests/functional_tests/test_system_power_state_controller:system_power_state_controller_test_on_non_starnix($host_toolchain)",
    "honeydew/honeydew/affordances/tracing/tests/functional_tests:tracing_test($host_toolchain)",
    "honeydew/honeydew/auxiliary_devices/power_switch/tests/functional_tests:power_switch_dmc_test($host_toolchain)",
    "honeydew/honeydew/fuchsia_device/tests/functional_tests:vim3_test($host_toolchain)",
    "honeydew/honeydew/transports/fastboot/tests/functional_tests:fastboot_using_serial_test($host_toolchain)",
    "honeydew/honeydew/transports/ffx/tests/functional_tests:ffx_wait_for_rcs_disconnection_test($host_toolchain)",
    "honeydew/honeydew/transports/ffx/tests/functional_tests:test_ffx_on_vim3",
    "honeydew/honeydew/transports/serial/tests/functional_tests:serial_test($host_toolchain)",
  ]
}

group_with_no_dir_target_deps("core_vim3_unstable_tests") {
  testonly = true
  public_deps = [ "honeydew/honeydew/transports/fastboot/tests/functional_tests:fastboot_test($host_toolchain)" ]
}

group("core_vim3_staging_tests") {
  testonly = true
  public_deps = [
    ":core_vim3_stable_tests",
    ":core_vim3_unstable_tests",
  ]
}

# workbench.vim3
group_with_no_dir_target_deps("workbench_vim3_stable_tests") {
  testonly = true
  public_deps = [
    "examples/test_case_revive_example:run_wo_test_case_revive($host_toolchain)",
    "examples/test_case_revive_example:test_case_revive_with_hard_reboot($host_toolchain)",
    "examples/test_case_revive_example:test_case_revive_with_soft_reboot($host_toolchain)",
    "examples/test_power_cycle:power_cycle_test($host_toolchain)",
    "examples/test_soft_reboot:soft_reboot_test($host_toolchain)",
    "examples/test_soft_reboot:soft_reboot_test.hermetic($host_toolchain)",
    "honeydew/honeydew/affordances/connectivity/netstack/tests/functional_tests:netstack_test($host_toolchain)",
    "honeydew/honeydew/affordances/location/tests/functional_tests:location_test($host_toolchain)",
    "honeydew/honeydew/affordances/power/system_power_state_controller/tests/functional_tests/test_system_power_state_controller:system_power_state_controller_test_on_non_starnix($host_toolchain)",
    "honeydew/honeydew/affordances/rtc/tests/functional_tests:rtc_test($host_toolchain)",
    "honeydew/honeydew/affordances/session/tests/functional_tests:test_session",
    "honeydew/honeydew/affordances/tracing/tests/functional_tests:tracing_test($host_toolchain)",
    "honeydew/honeydew/affordances/ui/screenshot/tests/functional_tests:test_screenshot",
    "honeydew/honeydew/affordances/ui/user_input/tests/functional_tests:test_user_input",
    "honeydew/honeydew/auxiliary_devices/power_switch/tests/functional_tests:power_switch_dmc_test($host_toolchain)",
    "honeydew/honeydew/fuchsia_device/tests/functional_tests:vim3_test($host_toolchain)",
    "honeydew/honeydew/transports/fastboot/tests/functional_tests:fastboot_using_serial_test($host_toolchain)",
    "honeydew/honeydew/transports/ffx/tests/functional_tests:ffx_wait_for_rcs_disconnection_test($host_toolchain)",
    "honeydew/honeydew/transports/ffx/tests/functional_tests:test_ffx_on_vim3",
    "honeydew/honeydew/transports/serial/tests/functional_tests:serial_test($host_toolchain)",
  ]
}

group_with_no_dir_target_deps("workbench_vim3_unstable_tests") {
  testonly = true
  public_deps = [ "honeydew/honeydew/transports/fastboot/tests/functional_tests:fastboot_test($host_toolchain)" ]
}

group("workbench_vim3_staging_tests") {
  testonly = true
  public_deps = [
    ":workbench_vim3_stable_tests",
    ":workbench_vim3_unstable_tests",
  ]
}

# smart_display.nelson
group_with_no_dir_target_deps("smart_display_nelson_stable_tests") {
  testonly = true
  public_deps = [
    "examples/test_power_cycle:power_cycle_test($host_toolchain)",
    "examples/test_soft_reboot:soft_reboot_test($host_toolchain)",
    "honeydew/honeydew/affordances/connectivity/netstack/tests/functional_tests:netstack_test($host_toolchain)",
    "honeydew/honeydew/affordances/location/tests/functional_tests:location_test($host_toolchain)",
    "honeydew/honeydew/affordances/session/tests/functional_tests:test_session",
    "honeydew/honeydew/affordances/ui/screenshot/tests/functional_tests:test_screenshot",
    "honeydew/honeydew/auxiliary_devices/power_switch/tests/functional_tests:power_switch_dmc_test($host_toolchain)",
    "honeydew/honeydew/fuchsia_device/tests/functional_tests:nelson_test($host_toolchain)",
    "honeydew/honeydew/transports/fastboot/tests/functional_tests:fastboot_test($host_toolchain)",
    "honeydew/honeydew/transports/fastboot/tests/functional_tests:fastboot_using_serial_test($host_toolchain)",
    "honeydew/honeydew/transports/ffx/tests/functional_tests:ffx_wait_for_rcs_disconnection_test($host_toolchain)",
    "honeydew/honeydew/transports/ffx/tests/functional_tests:test_ffx_on_nelson",
  ]
}

group_with_no_dir_target_deps("smart_display_nelson_unstable_tests") {
  testonly = true
  public_deps = [ "honeydew/honeydew/affordances/tracing/tests/functional_tests:tracing_test($host_toolchain)" ]
}

group("smart_display_nelson_staging_tests") {
  testonly = true
  public_deps = [
    ":smart_display_nelson_stable_tests",
    ":smart_display_nelson_unstable_tests",
  ]
}

############################## Test groups - End ###############################

############################## WLAN Test groups - Start ###############################
group("wlan_core_vim3_stable_tests") {
  testonly = true
  public_deps = []
}

group("wlan_core_vim3_unstable_tests") {
  testonly = true
  public_deps = [
    "honeydew/honeydew/affordances/connectivity/wlan/wlan/tests/functional_tests:wlan_test_fc($host_toolchain)",
    "honeydew/honeydew/affordances/connectivity/wlan/wlan_policy/tests/functional_tests:wlan_policy_test_fc($host_toolchain)",
    "honeydew/honeydew/affordances/connectivity/wlan/wlan_policy_ap/tests/functional_tests:wlan_policy_ap_test_fc($host_toolchain)",
  ]
}

group("wlan_core_vim3_staging_tests") {
  testonly = true
  public_deps = [ ":wlan_core_vim3_unstable_tests" ]
}
############################## WLAN Test groups - End ###############################
