# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/host.gni")
import("//build/icu/config.gni")
import("//build/rust/rustc_library.gni")

assert(is_host, "Assembly libraries are host-only")

generated_file("git_info_json") {
  # Prepare the ICU git flavor information for inclusion in the library source.
  # Write it out in json format, then we'll use `include_str!` to bake it into
  # the compiled library.
  outputs = [ "${target_gen_dir}/icu_git_info.json" ]
  contents = icu_git_info
  output_conversion = "json"
}

rustc_library("config_schema") {
  edition = "2021"
  name = "assembly_config_schema"
  with_unit_tests = true
  _git_info = "${target_gen_dir}/icu_git_info.json"
  _git_info_path = rebase_path(_git_info, root_build_dir)
  rustenv = [
    # Needed because `include_str_from_working_dir_env!` is relative to
    # the root_build_dir. We provide the path into `_git_info_path`.
    # See `src/platform_config/icu_config.rs` for the inclusion details.
    "ICU_GIT_INFO_JSON_FILE=${_git_info_path}",
  ]

  inputs = [ _git_info ]

  deps = [
    "//src/lib/assembly/constants",
    "//src/lib/assembly/container",
    "//src/lib/assembly/file_relative_path",
    "//src/lib/assembly/image_assembly_config",
    "//src/lib/assembly/images_config",
    "//src/lib/assembly/package_utils",
    "//src/lib/assembly/product_input_bundle",
    "//src/lib/assembly/release_info",
    "//src/lib/diagnostics/log/types",
    "//src/lib/fuchsia-url",
    "//src/lib/include_str_from_working_dir",
    "//src/sys/lib/moniker",
    "//src/sys/pkg/lib/fuchsia-pkg",
    "//src/ui/lib/input-device-constants:lib",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:camino",
    "//third_party/rust_crates:derivative",
    "//third_party/rust_crates:schemars",
    "//third_party/rust_crates:serde",
    "//third_party/rust_crates:serde_json",
    "//third_party/rust_crates:uuid",
  ]

  test_deps = [
    "//src/lib/assembly/util",
    "//third_party/rust_crates:tempfile",
  ]

  non_rust_deps = [ ":git_info_json" ]

  sources = [
    "src/board_config.rs",
    "src/board_input_bundle_set.rs",
    "src/common.rs",
    "src/developer_overrides.rs",
    "src/lib.rs",
    "src/platform_settings.rs",
    "src/platform_settings/battery_config.rs",
    "src/platform_settings/bluetooth_config.rs",
    "src/platform_settings/connectivity_config.rs",
    "src/platform_settings/development_support_config.rs",
    "src/platform_settings/diagnostics_config.rs",
    "src/platform_settings/driver_framework_config.rs",
    "src/platform_settings/example_config.rs",
    "src/platform_settings/factory_store_providers_config.rs",
    "src/platform_settings/fonts_config.rs",
    "src/platform_settings/forensics_config.rs",
    "src/platform_settings/graphics_config.rs",
    "src/platform_settings/health_check_config.rs",
    "src/platform_settings/icu_config.rs",
    "src/platform_settings/intl_config.rs",
    "src/platform_settings/kernel_config.rs",
    "src/platform_settings/media_config.rs",
    "src/platform_settings/memory_monitor_config.rs",
    "src/platform_settings/paravirtualization_config.rs",
    "src/platform_settings/power_config.rs",
    "src/platform_settings/recovery_config.rs",
    "src/platform_settings/session_config.rs",
    "src/platform_settings/setui_config.rs",
    "src/platform_settings/starnix_config.rs",
    "src/platform_settings/storage_config.rs",
    "src/platform_settings/swd_config.rs",
    "src/platform_settings/sysmem_config.rs",
    "src/platform_settings/system_sounds_config.rs",
    "src/platform_settings/timekeeper_config.rs",
    "src/platform_settings/ui_config.rs",
    "src/platform_settings/usb_config.rs",
    "src/platform_settings/virtualization_config.rs",
    "src/product_config.rs",
    "src/product_settings.rs",
  ]
  configs += [ "//build/config/rust/lints:clippy_warn_all" ]
}
