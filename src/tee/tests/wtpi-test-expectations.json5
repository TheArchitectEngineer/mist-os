// Copyright 2024 The Fuchsia Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
{
    actions: [
        {
            type: "expect_pass",
            matchers: [
                "ClockInterfaceTest.ClockBasic",
                "ClockInterfaceTest.TrustedTimeNULL",
                "CryptoTest.AESCBCDecryptFailsForBadInput",
                "CryptoTest.AESCBCDecryptHelloWorld",
                "CryptoTest.AESCBCEncryptDecryptLoop",
                "CryptoTest.AESCBCEncryptFailsForBadInput",
                "CryptoTest.AESCBCEncryptHelloWorld",
                "CryptoTest.AESDecryptAndCreateKeyHandleBasic",
                "CryptoTest.AESDecryptAndCreateKeyHandleFailsForBadInput",
                "CryptoTest.AESDecryptAndCreateKeyHandleForMacKeysFailsForBadInput",
                "CryptoTest.AESDecryptAndCreateKeyHandleForMacKeysBasic",
                "CryptoTest.CRC32Basic",
                "CryptoTest.CRC32ContFailsForBadInputs",
                "CryptoTest.CRC32FailsWhenInitialIsNull",
                "CryptoTest.CopyToOutputBufferBasicInsecure",
                "CryptoTest.CopyToOutputBufferBasicInsecureOverlap",
                "CryptoTest.CopyToOutputBufferBasicInsecureWithOffset",
                "CryptoTest.CopyToOutputBufferFailsWithBadInput",
                "CryptoTest.CreateAsymmetricKeyHandleECC",
                "CryptoTest.CreateAsymmetricKeyHandleFailsForBadInput",
                "CryptoTest.CreateAsymmetricKeyHandleRSA",
                "CryptoTest.CreateKeyHandleFailsWithBadParams",
                "CryptoTest.CreateKeyHandleWorksWithTypicalKeySize",
                "CryptoTest.DeriveKeyFromKeyHandleFailsForBadInputs",
                "CryptoTest.DeriveKeyFromKeyHandleWorks1",
                "CryptoTest.DeriveKeyFromKeyHandleWorks2",
                "CryptoTest.DeriveKeyFromKeyHandleWorks256BitDerivingKey",
                "CryptoTest.ECCLoadKeyAndSign",
                "CryptoTest.ECCSignFailsForBadInput",
                "CryptoTest.GetBCCTypeNULL",
                "CryptoTest.GetBCCTypeProv4AndOthers",
                "CryptoTest.GetKeySizeBasic",
                "CryptoTest.GetKeySizeFailsForBadInput",
                "CryptoTest.GetSignatureSize",
                "CryptoTest.GetSignatureSizeFailsForBadInputs",
                "CryptoTest.HMAC_SHA256FailsWithBadInput",
                "CryptoTest.RandomBytesFailsForBadInputs",
                "CryptoTest.RSADecrypt",
                "CryptoTest.RSADecryptFailsForBadInput",
                "CryptoTest.RSASign",
                "CryptoTest.RSASignFailsWithBadInput",
                "CryptoTest.SHA256Basic",
                "CryptoTest.SHA256FailsWithBadInput",
                "CryptoTest.SHA256Medium",
                "CryptoTest.SHA256Small",
                "CryptoTest.SHA512Basic",
                "CryptoTest.SHA512FailsWithBadInput",
                "CryptoTest.SHA512Medium",
                "CryptoTest.UnwrapAsymmetricKeyFailsForBadInputs",
                "CryptoTest.UnwrapKeyFailsForBadInputs",
                "CryptoTest.WTPI_EncryptAndSignFailsForBadInput",
                "CryptoTest.WTPI_EncryptAndSignFailsForShortBuffer",
                "CryptoTest.WTPI_EncryptAndSign_Then_VerifyAndDecrypt_Works",
                "CryptoTest.WTPI_VerifyAndDecryptFailsForBadInput",
                "CryptoTest.WTPI_VerifyAndDecryptFailsForShortBuffer",
                "CryptoTest.WrapAndUnwrapAsymmetricKeyWorks",
                "CryptoTest.WrapAndUnwrapKeyWorks",
                "CryptoTest.WrapAsymmetricKeyFailsForBadInputs",
                "CryptoTest.WrapKeyFailsForBadInputs",
                "HmacTests/HmacTest.HMAC_SHA1Basic/0",
                "HmacTests/HmacTest.HMAC_SHA1Basic/1",
                "HmacTests/HmacTest.HMAC_SHA1FailsWithBadInput/0",
                "HmacTests/HmacTest.HMAC_SHA1FailsWithBadInput/1",
                "HmacTests/HmacTest.HMAC_SHA256Basic/0",
                "HmacTests/HmacTest.HMAC_SHA256Basic/1",
                "HmacTests/HmacTest.HMAC_SHA256_VerifyBasic/0",
                "HmacTests/HmacTest.HMAC_SHA256_VerifyBasic/1",
                "HmacTests/HmacTest.HMAC_SHA256_VerifyFailsWithBadInput/0",
                "HmacTests/HmacTest.HMAC_SHA256_VerifyFailsWithBadInput/1",
                "GenerationNumberInterfaceTest.LoadGenerationNumberFailsForNullInput",
                "GenerationNumberInterfaceTest.SaveLoadGenerationNumber",
                "Prov4Test.ECCDeriveSessionKeyFailsForBadInput",
                "Prov4Test.ECCDeriveSessionKeySuccess",
                "Prov4Test.GenerateRandomCertificateKeyPairFailsForBadInput",
                "Prov4Test.GenerateRandomCertificateKeyPairSuccess",
                "Prov4Test.GetBootCertificateChainSuccess",
                "Prov4Test.UseBootCertificateChainToValidateCoseSign1",
                "Prov4Test.WTPI_BccKeyCoseSign1FailsForBadInput",
                "Prov4Test.WTPI_BccKeyCoseSign1Success",
            ],
        },
        {
            type: "skip",
            matchers: [
                // TODO(https://fxbug.dev/397778461): Ordering matters for these pairs of tests.
                // Skip until we can get that right.
                "ClockRebootTest.SaveClockBeforeReboot",
                "ClockRebootTest.CheckClockAfterReboot",
                "GenerationNumberRebootTest.LoadAfterReboot",
                "GenerationNumberRebootTest.SaveBeforeReboot",

                // TODO(https://fxbug.dev/348474598): These succeed in ARM builds but fail in x86 ones.
                // Maybe not unrelatedly, they also generate ASan failures. More investigation is
                // needed.
                "CryptoTest.Crc32Cont_OutputBufferBasic",
                "CryptoTest.Crc32Cont_OutputBufferFailsWithBadInput",

                // TODO(https://fxbug.dev/348474598): Seems to pass spuriously sometimes. Perhaps related
                // to the ASAN issues cited above.
                "CryptoTest.DeriveDeviceKeyIntoHandleFailsForBadInput",
            ],
        },
    ],
}
