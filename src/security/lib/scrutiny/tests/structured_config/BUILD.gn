# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/assembled_system.gni")
import("//build/assembly/board_configuration.gni")
import("//build/assembly/generated_partitions_config.gni")
import("//build/assembly/product_assembly_configuration.gni")
import("//build/assembly/update_package.gni")
import("//build/components.gni")
import("//build/images/args.gni")
import("//build/product.gni")
import("//build/python/python_binary.gni")
import("//build/sdk/product_bundle.gni")
import("//build/security/verifier/verify_structured_config.gni")
import("//build/testing/host_test.gni")
import("//src/developer/ffx/config.gni")
import("//src/storage/fshost/generated_fshost_config.gni")
import("//zircon/kernel/phys/qemu.gni")

if (is_fuchsia) {
  files = {
    board_config = "$target_out_dir/fuchsia.board_config.json"
    partitions_config = "$target_out_dir/partitions/partitions_config.json"

    outdir = target_out_dir + "/assembly"
    packages_json = "${outdir}/packages.json"
    images_json = "${outdir}/images.json"

    blobfs = "${outdir}/blob.blk"
    zbi = "${outdir}/assembly.zbi"
    fvm = "${outdir}/fvm.blk"
    fvm_sparse = "${outdir}/fvm.sparse.blk"

    qemu_kernel = qemu_boot_shim.path

    product_bundle = target_out_dir + "/product_bundle"
  }

  board_configuration("board_config") {
    name = "test"
    version = "fake_version"
    filesystems = {
      fvm = {
        sparse_output = {
        }
      }
    }
  }

  product_assembly_configuration("product_assembly_config") {
    testonly = true
    platform = {
      build_type = "user"
      feature_set_level = "utility"
      example_config = {
        include_example_aib = true
      }
      storage = {
        filesystems = {
          image_name = "assembly"
          volume = {
            fvm = {
              data = {
              }
              blob = {
              }
            }
          }
        }
      }
    }
  }

  assembled_system("assembly") {
    testonly = true
    product_assembly_config_label = ":product_assembly_config"
    board_config_label = ":board_config"
    enable_example_aib = true
    generate_fvm = true
    generate_fvm_fastboot = false
    generate_vbmeta = false
    generate_image_metadata = false
  }

  generated_partitions_config("partitions_config") {
    testonly = true
    output_path = get_path_info(files.partitions_config, "dir")
    hw_revision = board_name
  }

  update_package("update") {
    testonly = true
    deps = [
      ":assembly",
      ":partitions_config",
      "//build/info:build_info_files",
    ]
    partitions = files.partitions_config
    system_a = files.images_json
    version_file = build_info_files.version
    board_name = "fake_board"
    epoch = "1"
  }

  product_bundle("product_bundle") {
    testonly = true
    name = "scrutiny-structured-config-test"
    deps = [
      ":assembly",
      ":partitions_config",
      "//build/info:build_info_files",
    ]

    update = {
      version_file = build_info_files.version
      epoch = "1"
    }

    partitions = files.partitions_config
    system_a = files.images_json

    # Create lists of the files that are referenced by the assembly manifests.
    _assembly_contents = [
      files.blobfs,
      files.fvm,
      files.fvm_sparse,
      files.qemu_kernel,
      files.zbi,
    ]
    system_a_contents = _assembly_contents
  }

  extract_assembled_structured_config("extractor") {
    testonly = true
    product_bundle_path = "$target_out_dir/product_bundle"
    output = "$target_out_dir/structured_config.json"
    deps = [ ":product_bundle" ]
  }
}

if (is_host) {
  group("host_tests") {
    testonly = true

    deps = [
      ":check_extracted_config",
      ":check_failing_policy",
      ":verifier_pass",
    ]
  }

  labels = {
    extractor = ":extractor($target_toolchain)"
    image_assembler = ":assembly.image_assembler($target_toolchain)"
    product_bundle = ":product_bundle($target_toolchain)"
    update_package = ":update($target_toolchain)"
  }

  files = {
    ffx = "$ffx_test_host_tools_out_dir/ffx-scrutiny"

    product_bundle_target_out_dir =
        get_label_info(labels.product_bundle, "target_out_dir")
    product_bundle_target_name = get_label_info(labels.product_bundle, "name")

    product_bundle_dir =
        "$product_bundle_target_out_dir/$product_bundle_target_name"
  }

  python_binary("check_extracted_config_bin") {
    main_source = "check_extracted_structured_config.py"
  }

  host_test_data("test_bin") {
    sources = get_target_outputs(":check_extracted_config_bin")
    deps = [ ":check_extracted_config_bin" ]
  }

  extracted_config_target_dir =
      get_label_info(labels.extractor, "target_out_dir")
  extracted_config_path = "$extracted_config_target_dir/structured_config.json"
  host_test_data("extracted_config") {
    sources = [ extracted_config_path ]
    deps = [ labels.extractor ]
  }
  check_extracted_python_binary =
      get_target_outputs(":check_extracted_config_bin")
  check_extracted_python_binary = check_extracted_python_binary[0]

  host_test("check_extracted_config") {
    binary_path = python_exe_src
    args = [
      rebase_path(check_extracted_python_binary, root_build_dir),
      "--extracted-config",
      rebase_path(extracted_config_path, root_build_dir),
    ]
    deps = [
      ":extracted_config",
      ":test_bin",
      "//build/python:interpreter",
    ]
  }

  verify_assembled_structured_config("verifier_pass") {
    testonly = true
    product_bundle_path = files.product_bundle_dir
    policy = "passing_policy.json5"
    deps = [ labels.product_bundle ]
  }

  python_binary("check_failed_verifier_bin") {
    main_source = "check_failed_verifier_policy.py"
  }

  host_test_data("failed_policy_test_data") {
    sources = get_target_outputs(":check_failed_verifier_bin")
    sources += [
      "failing_policy.json5",
      files.product_bundle_dir,
    ]
    deps = [
      ":check_failed_verifier_bin",
      labels.product_bundle,
    ]
  }

  check_failed_verifier_binary =
      get_target_outputs(":check_failed_verifier_bin")
  check_failed_verifier_binary = check_failed_verifier_binary[0]
  host_test("check_failing_policy") {
    binary_path = python_exe_src

    depfile = "$target_out_dir/check_failed_policy.d"
    args = [
      rebase_path(check_failed_verifier_binary, root_build_dir),
      "--ffx-bin",
      rebase_path(files.ffx, root_build_dir),
      "--policy",
      rebase_path("failing_policy.json5", root_build_dir),
      "--depfile",
      rebase_path(depfile, root_build_dir),
      "--product-bundle",
      rebase_path(files.product_bundle_dir, root_build_dir),
    ]
    depfile = [ depfile ]

    deps = [
      ":failed_policy_test_data",
      "//build/python:interpreter",
      "//src/developer/ffx/plugins/scrutiny:ffx_scrutiny_tool_test_data",
    ]
  }
}
