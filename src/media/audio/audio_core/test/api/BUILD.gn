# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/testing/environments.gni")
import("//src/media/audio/audio_core/package.gni")
import("//src/media/audio/audio_core/test/api/api_test_component.gni")
import("//src/media/audio/hardware.gni")

group("api") {
  testonly = true

  deps = [
    ":audio_core_api_error_tests",
    ":audio_core_api_test_effects",
    ":audio_core_api_tests",
  ]

  # These have real-time requirements and must run in release builds (debug builds are too slow).
  if (!is_debug) {
    deps += [
      ":audio_core_api_pipeline_error_tests",
      ":audio_core_api_pipeline_tests",
      ":audio_core_fidelity_tests",
      ":audio_core_thermal_tests",
    ]
  }
}

loadable_module("audio_core_api_test_effects") {
  sources = [ "effects.cc" ]

  deps = [
    "//sdk/lib/media/audio/effects",
    "//sdk/lib/syslog/cpp",
    "//third_party/rapidjson",
    "//zircon/system/ulib/fzl",
  ]
}

source_set("audio_api_pipeline_test_shared") {
  testonly = true
  sources = [ "audio_renderer_pipeline_test_shared.h" ]
  deps = [
    "//src/media/audio/audio_core/testing/integration:hermetic_pipeline_test",
  ]
}

source_set("audio_api_test_shared") {
  testonly = true
  sources = [
    "audio_capturer_test_shared.h",
    "audio_renderer_test_shared.h",
    "gain_control_test_shared.h",
    "ultrasound_test_shared.h",
  ]
  deps = [
    "//sdk/lib/media/audio/cpp",
    "//src/media/audio/audio_core/testing/integration:hermetic_audio_test",
  ]
}

source_set("fidelity_results") {
  testonly = true
  sources = [
    "fidelity_results.cc",
    "fidelity_results.h",
  ]
  deps = [
    "//src/media/audio/audio_core/testing/integration:hermetic_pipeline_test",
  ]
}

audio_core_api_test_component("audio-activity-reporter-test") {
  source = "activity_reporter_test.cc"
  executable_deps = []
  test_type = "system"
}

audio_core_api_test_component("audio-capturer-test") {
  source = "audio_capturer_test.cc"
  executable_deps = [
    ":audio_api_test_shared",
    "//src/media/audio/lib/clock",
    "//src/media/audio/lib/clock/testing",
  ]
  test_type = "system"
}

audio_core_api_test_component("audio-capturer-error-test") {
  source = "audio_capturer_error_test.cc"
  executable_deps = [ ":audio_api_test_shared" ]
  test_type = "system"
}

audio_core_api_test_component("audio-capturer-pipeline-test") {
  source = "audio_capturer_pipeline_test.cc"
  executable_deps = [ "//sdk/lib/media/audio/cpp" ]
  test_type = "system"
}

audio_core_api_test_component("audio-clock-pipeline-test") {
  source = "audio_clock_pipeline_test.cc"
  executable_deps = [
    "//sdk/lib/media/audio/cpp",
    "//sdk/lib/stdcompat",
    "//src/media/audio/audio_core/mixer",
  ]
  test_type = "system"
}

audio_core_api_test_component("audio-core-fidelity-test") {
  source = "audio_core_fidelity_test.cc"
  executable_deps = [
    ":fidelity_results",
    "//src/media/audio/lib/analysis",
    "//src/media/audio/lib/processing:coefficient_table",
  ]
  test_type = "system"
}

audio_core_api_test_component("audio-core-thermal-test") {
  source = "audio_core_thermal_test.cc"
  executable_deps = [
    "//src/media/audio/lib/analysis",
    "//src/media/audio/lib/processing:coefficient_table",
  ]
  test_type = "system"
}

audio_core_api_test_component("audio-device-enumerator-test") {
  source = "audio_device_enumerator_test.cc"
  executable_deps = [ "//src/media/audio/audio_core/testing:unittest_support" ]
  test_type = "system"
}

audio_core_api_test_component("audio-gain-control-test") {
  source = "gain_control_test.cc"
  executable_deps = [ ":audio_api_test_shared" ]
  test_type = "system"
}

audio_core_api_test_component("audio-gain-control-error-test") {
  source = "gain_control_error_test.cc"
  executable_deps = [ ":audio_api_test_shared" ]
  test_type = "system"
}

audio_core_api_test_component("audio-policy-pipeline-test") {
  source = "audio_policy_pipeline_test.cc"
  executable_deps = [ "//src/lib/fxl" ]
  test_type = "system"
}

audio_core_api_test_component("audio-renderer-test") {
  source = "audio_renderer_test.cc"
  executable_deps = [
    ":audio_api_test_shared",
    "//src/media/audio/lib/clock",
    "//src/media/audio/lib/clock/testing",
  ]
  test_type = "system"
}

audio_core_api_test_component("audio-renderer-pipeline-test") {
  source = "audio_renderer_pipeline_test.cc"
  executable_deps = [
    ":audio_api_pipeline_test_shared",
    "//src/media/audio/audio_core/mixer",
    "//src/media/audio/lib/analysis",
  ]
  test_type = "system"
}

audio_core_api_test_component("audio-renderer-error-test") {
  source = "audio_renderer_error_test.cc"
  executable_deps = [ ":audio_api_test_shared" ]
  test_type = "system"
}

audio_core_api_test_component("audio-renderer-pipeline-error-test") {
  source = "audio_renderer_pipeline_error_test.cc"
  executable_deps = [ ":audio_api_pipeline_test_shared" ]
  test_type = "system"
}

audio_core_api_test_component("audio-test") {
  source = "audio_test.cc"
  executable_deps = [ "//sdk/fidl/fuchsia.media:fuchsia.media_hlcpp" ]
  test_type = "system"
}

audio_core_api_test_component("audio-tuner-test") {
  source = "audio_tuner_test.cc"
  executable_deps =
      [ "//sdk/fidl/fuchsia.media.tuning:fuchsia.media.tuning_hlcpp" ]
  test_type = "system"
}

audio_core_api_test_component("audio-usage-gain-reporter-test") {
  source = "usage_gain_reporter_test.cc"
  executable_deps =
      [ "//sdk/fidl/fuchsia.media.audio:fuchsia.media.audio_hlcpp" ]
  test_type = "system"
}

audio_core_api_test_component("audio-usage-reporter-test") {
  source = "usage_reporter_test.cc"
  executable_deps = []
  test_type = "system"
}

audio_core_api_test_component("audio-volume-control-test") {
  source = "volume_control_test.cc"
  executable_deps = []
  test_type = "system"
}

audio_core_api_test_component("ultrasound-test") {
  source = "ultrasound_test.cc"
  executable_deps = [
    ":audio_api_test_shared",
    "//src/media/audio/lib/clock",
    "//src/media/audio/lib/clock/testing",
  ]
  test_type = "system"
}

audio_core_api_test_component("ultrasound-error-test") {
  source = "ultrasound_error_test.cc"
  executable_deps = [ ":audio_api_test_shared" ]
  test_type = "system"
}

# These tests can run anywhere, including in emulators.
audio_core_test_package("audio_core_api_tests") {
  package_deps = [ ":audio_core_api_test_effects" ]
  audio_core_manifest_shards =
      [ "//src/media/audio/audio_core/meta/audio_core.shard.ultrasound.cml" ]

  test_components = [
    ":audio-activity-reporter-test",
    ":audio-capturer-test",
    ":audio-device-enumerator-test",
    ":audio-gain-control-test",
    ":audio-renderer-test",
    ":audio-test",
    ":audio-usage-gain-reporter-test",
    ":audio-usage-reporter-test",
    ":audio-volume-control-test",
    ":ultrasound-test",
  ]

  # Tests that intentionally cause ERROR logs in audio_core have been moved to another test suite.
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
  }
}

# These tests can run anywhere, including in emulators.
audio_core_test_package("audio_core_api_error_tests") {
  package_deps = [ ":audio_core_api_test_effects" ]
  audio_core_manifest_shards =
      [ "//src/media/audio/audio_core/meta/audio_core.shard.ultrasound.cml" ]

  test_components = [
    ":audio-capturer-error-test",
    ":audio-gain-control-error-test",
    ":audio-renderer-error-test",
    ":audio-tuner-test",
    ":ultrasound-error-test",
  ]

  # This suite includes cases from audio_core_api_tests and audio_core_api_pipeline_tests that
  # intentionally cause audio_core to log at the ERROR level.
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
  }
}

# These tests have real-time constraints and must run on real hardware (emulators are too slow).
audio_core_test_package("audio_core_api_pipeline_tests") {
  package_deps = [ ":audio_core_api_test_effects" ]
  audio_core_manifest_shards =
      [ "//src/media/audio/audio_core/meta/audio_core.shard.ultrasound.cml" ]

  test_components = [
    ":audio-capturer-pipeline-test",
    ":audio-clock-pipeline-test",
    ":audio-policy-pipeline-test",
    ":audio-renderer-pipeline-test",
  ]

  # Tests that intentionally cause ERROR logs in audio_core have been moved to another test suite.
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
    environments = hardware_envs
  }
}

# These tests have real-time constraints and must run on real hardware (emulators are too slow).
audio_core_test_package("audio_core_api_pipeline_error_tests") {
  package_deps = [ ":audio_core_api_test_effects" ]
  audio_core_manifest_shards =
      [ "//src/media/audio/audio_core/meta/audio_core.shard.ultrasound.cml" ]

  test_components = [ ":audio-renderer-pipeline-error-test" ]

  # This suite includes cases from audio_core_api_pipeline_tests that intentionally cause audio_core
  # to log at the ERROR level.
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
    environments = hardware_envs
  }
}

# These tests have real-time constraints and must run on real hardware (emulators are too slow).
audio_core_test_package("audio_core_fidelity_tests") {
  audio_core_manifest_shards =
      [ "//src/media/audio/audio_core/meta/audio_core.shard.ultrasound.cml" ]

  test_components = [ ":audio-core-fidelity-test" ]

  # Many of the above tests print ERROR logs in cases where the client makes an error.
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
    environments = hardware_envs
  }
}

# These tests have real-time constraints and must run on real hardware (emulators are too slow).
audio_core_test_package("audio_core_thermal_tests") {
  package_deps = [ ":audio_core_api_test_effects" ]
  audio_core_manifest_shards = [
    "//sdk/lib/syslog/client.shard.cml",
    "//src/media/audio/audio_core/meta/audio_core.shard.ultrasound.cml",
  ]

  test_components = [ ":audio-core-thermal-test" ]

  # AudioCore emits ERRORs upon output pipeline underflows, which are not incorrect audio,
  # but they are system failures (and are no longer expected) so we consider them failures.
  test_specs = {
    log_settings = {
      max_severity = "WARN"
    }
    environments = hardware_envs
  }
}
