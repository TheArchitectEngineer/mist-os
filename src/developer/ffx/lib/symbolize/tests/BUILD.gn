# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/assembled_system.gni")
import("//build/assembly/generated_partitions_config.gni")
import("//build/assembly/product_assembly_configuration.gni")
import("//build/components.gni")
import("//build/rust/rustc_binary.gni")
import("//build/sdk/product_bundle.gni")
import("//build/testing/symbols_dir_test_data.gni")
import("//src/developer/ffx/lib/e2e_emu/ffx_e2e_test.gni")

assert(
    has_board,
    "This file must only be included in build configurations that have a board.")

if (is_host) {
  ffx_e2e_test("ffx_symbolize_lib_e2e_test") {
    edition = "2021"
    source_root = "e2e_test.rs"
    sources = [
      "shared.rs",
      source_root,
    ]
    deps = [
      "//src/developer/ffx/config:lib",
      "//src/developer/ffx/lib/e2e_emu",
      "//src/developer/ffx/lib/symbolize",
      "//src/lib/diagnostics/log/rust_cpp_bridge",
      "//src/lib/fuchsia",
      "//third_party/rust_crates:serde",
      "//third_party/rust_crates:serde_json",
      "//third_party/rust_crates:tracing",
    ]

    product_bundle = ":product_bundle($default_toolchain)"
  }

  group("host_tests") {
    testonly = true
    deps = [ ":ffx_symbolize_lib_e2e_test" ]
  }
} else if (is_fuchsia) {
  # A helper library that defines a memory area not covered by any symbol.
  shared_library("no_symbol_area") {
    sources = [ "no_symbol_area.c" ]
  }

  rustc_binary("print_fn_ptr_bin") {
    edition = "2021"
    source_root = "print_fn_ptr.rs"
    sources = [
      "shared.rs",
      source_root,
    ]
    deps = [
      ":no_symbol_area",
      "//sdk/rust/zx",
      "//src/lib/process_builder",
      "//third_party/rust_crates:libc",
      "//third_party/rust_crates:serde",
      "//third_party/rust_crates:serde_json",
      "//third_party/rust_crates:zerocopy",
    ]
  }

  fuchsia_component("print_fn_ptr") {
    testonly = true
    manifest = "meta/print_fn_ptr.cml"
    deps = [ ":print_fn_ptr_bin($target_toolchain)" ]
  }

  fuchsia_package("package") {
    testonly = true
    package_name = "print_fn_ptr"
    deps = [ ":print_fn_ptr" ]
  }

  # Don't let the assembly templates expand except on the default toolchain. Weirndess ensures if
  # they're expanded on variant toolchains like for asan.
  if (current_toolchain == default_toolchain) {
    files = {
      partitions_config = "$target_out_dir/partitions/partitions_config.json"
      outdir = target_out_dir + "/fuchsia"
      images_json = "${outdir}/images.json"
    }

    product_bundle("product_bundle") {
      testonly = true
      name = "ffx-symbolize-test"

      partitions = files.partitions_config
      system_a = files.images_json

      deps = [
        ":assembly",
        ":partitions_config",
      ]
    }

    assembled_system("assembly") {
      testonly = true
      image_name = "fuchsia"

      generate_fxfs = true
      generate_vbmeta = true
      board_config_label = board_configuration_label
      product_assembly_config_label = ":product_assembly_config"
    }

    generated_partitions_config("partitions_config") {
      testonly = true
      output_path = get_path_info(files.partitions_config, "dir")
      hw_revision = board_name
    }

    product_assembly_configuration("product_assembly_config") {
      testonly = true
      platform = {
        build_type = "eng"
      }
      base_packages = [
        {
          package_target = ":package"
        },
      ]
    }
  }
}
