# Copyright 2025 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/assembled_system.gni")
import("//build/assembly/product_assembly_configuration.gni")
import("//build/components.gni")
import("//build/rust/rustc_binary.gni")
import("//build/sdk/product_bundle.gni")
import("//build/testing/symbols_dir_test_data.gni")
import("//src/developer/ffx/lib/e2e_emu/ffx_e2e_test.gni")

assert(
    has_board,
    "This file must only be included in build configurations that have a board.")

if (is_host) {
  ffx_e2e_test("ffx_profiler_lib_e2e_test") {
    edition = "2021"
    source_root = "e2e_test.rs"
    sources = [ source_root ]
    deps = [
      "//src/developer/ffx/lib/e2e_emu",
      "//src/developer/ffx/lib/profiler:profiler",
      "//src/lib/fuchsia",
      "//third_party/rust_crates:log",
      "//third_party/rust_crates:serde_json",
      "//third_party/rust_crates:tempfile",
    ]

    product_bundle = ":product_bundle($default_toolchain)"
  }

  group("host_tests") {
    testonly = true
    deps = [ ":ffx_profiler_lib_e2e_test" ]
  }
} else if (is_fuchsia) {
  rustc_binary("print_symbolize_data_bin") {
    edition = "2021"
    source_root = "print_symbolize_data.rs"
    sources = [ source_root ]
    deps = [
      "//sdk/rust/zx",
      "//src/developer/ffx/lib/symbolize/test-utils:symbolize_test_utils",
      "//third_party/rust_crates:hex",
      "//third_party/rust_crates:paste",
      "//third_party/rust_crates:serde_json",
    ]
  }

  fuchsia_component("print_symbolize_data") {
    testonly = true
    manifest = "meta/print_symbolize_data.cml"
    deps = [ ":print_symbolize_data_bin($target_toolchain)" ]
  }

  fuchsia_package("package") {
    testonly = true
    package_name = "print_symbolize_data"
    deps = [ ":print_symbolize_data" ]
  }

  # Don't let the assembly templates expand except on the default toolchain. Weirndess ensures if
  # they're expanded on variant toolchains like for asan.
  if (current_toolchain == default_toolchain) {
    files = {
      outdir = target_out_dir + "/fuchsia"
      images_json = "${outdir}/images.json"
    }

    product_bundle("product_bundle") {
      testonly = true
      name = "ffx-profiler-test"

      system_a = files.outdir

      deps = [ ":assembly" ]
    }

    assembled_system("assembly") {
      testonly = true
      image_name = "fuchsia"

      generate_fxfs = true
      generate_vbmeta = true
      board_config_label = board_configuration_label
      product_assembly_config_label = ":product_assembly_config"
    }

    product_assembly_configuration("product_assembly_config") {
      testonly = true
      platform = {
        build_type = "eng"
      }
      base_packages = [
        {
          package_target = ":package"
        },
      ]
    }
  }
}
