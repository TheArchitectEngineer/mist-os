# Copyright 2025 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")

_config_schema = "//src/starnix/containers/container_config.shard.cml"

# Create a component that exposes configuration capabilities for a Starnix test container.
#
# Arguments:
#   config (scope)
#     Defines the actual configuration values. Can include any of the keys listed for capabilities
#     in //src/starnix/containers/container_config.shard.json. Provided values for each key must
#     match the type specified in the schema.
template("starnix_container_config_component") {
  assert(defined(invoker.config), "must define a config")
  _config = invoker.config

  _config_as_json_label = "${target_name}_overrides"
  _config_as_json_path = "${target_gen_dir}/${_config_as_json_label}.json"
  generated_file(_config_as_json_label) {
    outputs = [ _config_as_json_path ]
    output_conversion = "json"
    contents = _config
  }

  _generator_label = "${target_name}_generated"
  _generated_manifest = "${target_gen_dir}/${_generator_label}.cml"
  python_action(_generator_label) {
    binary_label = "//src/starnix/build:generate_container_config_component"
    inputs = [
      _config_schema,
      _config_as_json_path,
    ]
    outputs = [ _generated_manifest ]
    args = [
      "--schema",
      rebase_path(_config_schema, root_build_dir),
      "--overrides",
      rebase_path(_config_as_json_path, root_build_dir),
      "--output",
      rebase_path(_generated_manifest, root_build_dir),
    ]

    deps = [ ":${_config_as_json_label}" ]
  }

  fuchsia_component(target_name) {
    manifest = _generated_manifest
    deps = [ ":${_generator_label}" ]
  }
}

# Create a CML shard that offers all the configuration capabilities for a Starnix test container
# from `offer_from` child to `offer_to`.
#
# Arguments:
#   output (path)
#     Path to which to write the generated shard. Typically this is a path within target_gen_dir.
#   offer_from (string)
#     CF `from` for config capability offers.
#   offer_to (string)
#     CF `to` for config capability offers.
template("starnix_container_config_offers") {
  assert(defined(invoker.output), "must define an output path")
  _output = invoker.output
  assert(defined(invoker.offer_from), "must define an offer_from")
  _offer_from = invoker.offer_from
  assert(defined(invoker.offer_to), "must define an offer_to")
  _offer_to = invoker.offer_to

  python_action(target_name) {
    binary_label = "//src/starnix/build:generate_container_config_shard"
    inputs = [ _config_schema ]
    outputs = [ _output ]
    args = [
      "--schema",
      rebase_path(_config_schema, root_build_dir),
      "--output",
      rebase_path(_output, root_build_dir),
      "--offer-from",
      _offer_from,
      "--offer-to",
      _offer_to,
    ]
  }
}
