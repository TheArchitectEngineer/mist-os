// Copyright 2025 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

use async_trait::async_trait;

use crate::puppet::{PuppetFileDescriptor, PuppetInstance};

/// Represents a method for waiting and querying the events generated by a PSI
/// file descriptor. Functions below build specializations backed by poll and
/// epoll. Thanks to unifying them under this generic interface, tests can be
/// written once and executed on the three of them, to prove that they all
/// behave coherently.
#[async_trait]
pub trait EventWaiter<'p>: Send {
    /// Returns true if the PSI file descriptor delivered a stall event or false
    /// the wait timed out.
    async fn wait(&mut self, timeout_ms: usize) -> bool;

    /// Tears down this instance and the resources it allocated in the puppet.
    async fn destroy(self: Box<Self>);
}

pub async fn make_poll_waiter<'p>(
    puppet: &'p mut PuppetInstance,
    psi_fd: PuppetFileDescriptor,
) -> Box<dyn EventWaiter<'p> + 'p> {
    struct PollEventWaiter<'p> {
        puppet: &'p mut PuppetInstance,
        psi_fd: PuppetFileDescriptor,
    }

    #[async_trait]
    impl<'p> EventWaiter<'p> for PollEventWaiter<'p> {
        async fn wait(&mut self, timeout_ms: usize) -> bool {
            self.puppet.poll_pollpri(self.psi_fd, timeout_ms).await
        }

        async fn destroy(self: Box<Self>) {}
    }

    Box::new(PollEventWaiter { puppet, psi_fd })
}

pub async fn make_epoll_waiter<'p>(
    puppet: &'p mut PuppetInstance,
    psi_fd: PuppetFileDescriptor,
) -> Box<dyn EventWaiter<'p> + 'p> {
    struct EPollEventWaiter<'p> {
        puppet: &'p mut PuppetInstance,
        epoll_fd: PuppetFileDescriptor,
    }

    #[async_trait]
    impl<'p> EventWaiter<'p> for EPollEventWaiter<'p> {
        async fn wait(&mut self, timeout_ms: usize) -> bool {
            self.puppet.epoll_wait_epollpri(self.epoll_fd, timeout_ms).await
        }

        async fn destroy(self: Box<Self>) {
            self.puppet.close(self.epoll_fd).await;
        }
    }

    let epoll_fd = puppet.epoll_create_and_add_epollpri(psi_fd).await;
    Box::new(EPollEventWaiter { puppet, epoll_fd })
}
