# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/test.gni")
import("//build/testing/host_test.gni")
import("//build/testing/host_test_data.gni")
import("//src/lib/testing/expectation/generated_expectations_file.gni")
import("//src/starnix/kernel/args.gni")
import("//src/starnix/kernel/starnix.gni")
import("//src/starnix/tests/build/starnix_linux_test_component.gni")
import("//src/starnix/tests/environments.gni")
import("//src/starnix/tests/starnix_test_subpackages.gni")

# We want to use a newer sysroot than is available by default in $host_toolchain.
_host_linux_toolchain = "//build/toolchain:linux_$host_cpu"

# syscall tests that can be run on both arch32 and arch64.
syscall_tests = [
  # go/keep-sorted start

  "abort_test",
  "ashmem_test",
  "aspace_test",
  "capabilities_test",
  "cgroup_freezer_test",
  "cgroup_test",
  "custom_artifact_test",
  "epoll_test",
  "fcntl_test",
  "futex_test",
  "getrandom_test",
  "loop_test",
  "memfd_test",
  "mmap_test",
  "mount_test",
  "nmfs_test",
  "pipe_test",
  "poll_test",
  "prctl_test",
  "read_write_test",
  "restart_read_test",
  "sendfile_test",
  "setpriority_test",
  "signal_handling_test",
  "suid_test",
  "sw_breakpoint_test",
  "symlink_test",
  "sysfs_kernel_test",
  "syslog_test",
  "task_test",
  "test_helper_test",
  "time_test",
  "timerfd_test",
  "timers_test",
  "tmpfs_test",
  "touch_standby_test",
  "trivial_test",
  "vmsplice_test",
  "waitpid_exit_signal_test",

  # go/keep-sorted end
]

# syscall tests that can only be run on arch64.
# TODO(https://fxbug.dev/389018266): Fix and move most of these tests to `syscall_tests`.
arch64_syscall_tests = [
  # go/keep-sorted start

  "bpf_test",
  "extended_pstate_test",
  "fs_test",
  "fsverity_test",
  "fuse_test",
  "input_test",
  "ioctl_test",
  "overlayfs_test",
  "perf_event_open_test",
  "pidfd_test",
  "procfs_mem_test",
  "procfs_test",
  "ptrace_test",
  "reboot_test",
  "rlimit_test",
  "seccomp_test",
  "socket_test",
  "sysfs_power_test",
  "terminal_test",
  "tun_test",
  "udev_test",
  "uio_test",
  "userfaultfd_test",
  "vdso_test",
  "waitpid_flags_test",

  # go/keep-sorted end
]

if (target_cpu == "x64") {
  # TODO(https://fxbug.dev/42059962): arm64 emulator does not have Vulkan support yet.
  # This test requires test-ui-stack.
  syscall_tests += [ "uinput_test" ]
}

group("tests") {
  testonly = true
  deps = [ ":starnix_syscalls_cpp_tests" ]
  if (starnix_enable_arch32) {
    deps += [ ":starnix_arch32_syscalls_cpp_tests" ]
  }
  if (host_os == "linux" && host_cpu == "x64") {
    foreach(test_name, syscall_tests + arch64_syscall_tests) {
      deps += [
        # These are Linux tests, so we can run them as host tests on our host Linux bot.
        ":starnix_${test_name}_baseline($host_toolchain)",
      ]
    }
  }
}

if (is_host) {
  host_test_data("host_runtime_deps") {
    sources = [
      get_label_info(
              ":extended_pstate_initial_state_child($_host_linux_toolchain)",
              "root_out_dir") + "/extended_pstate_initial_state_child",
      get_label_info(":syscall_test_exec_child($_host_linux_toolchain)",
                     "root_out_dir") + "/syscall_test_exec_child",
      get_label_info(":ptrace_test_exec_child($_host_linux_toolchain)",
                     "root_out_dir") + "/ptrace_test_exec_child",
      get_label_info(":suid_test_exec_child($_host_linux_toolchain)",
                     "root_out_dir") + "/suid_test_exec_child",
      get_label_info("test_programs:print_helper($_host_linux_toolchain)",
                     "root_out_dir") + "/print_helper",
    ]
    deps = [
      ":extended_pstate_initial_state_child($_host_linux_toolchain)",
      ":ptrace_test_exec_child($_host_linux_toolchain)",
      ":suid_test_exec_child($_host_linux_toolchain)",
      ":syscall_test_exec_child($_host_linux_toolchain)",
      "test_programs:print_helper($_host_linux_toolchain)",
    ]
  }
}

source_set("test_utils") {
  testonly = true

  sources = [
    "capabilities_helper.cc",
    "capabilities_helper.h",
    "fault_test.h",
    "fault_test_suite.h",
    "proc_test_base.h",
    "syscall_matchers.h",
    "task_test.h",
    "test_helper.cc",
    "test_helper.h",
  ]
  public_deps = [
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
  deps = [ "//src/lib/fxl" ]
  configs += [ "//build/config:rtti" ]
}

if (current_cpu == "x64" || current_cpu == "arm64") {
  resource("fuse_overlayfs") {
    sources = []
    if (current_cpu == "x64") {
      sources += [ "//prebuilt/starnix/fuse-overlayfs-amd64/fuse-overlayfs" ]
    }
    if (current_cpu == "arm64") {
      sources += [ "//prebuilt/starnix/fuse-overlayfs-arm64/fuse-overlayfs" ]
    }
    outputs = [ "data/fuse-overlayfs" ]
  }
} else {
  group("fuse_overlayfs") {
  }
}

resource("simple_ext4_image") {
  sources = [
    "data/hello_world.txt",
    "data/simple_ext4.img",
  ]
  outputs = [ "data/{{source_file_part}}" ]
}

config("march") {
  if (current_cpu == "riscv64") {
    # Keep `march` consistent with the value used by Android, see
    # https://cs.android.com/android/platform/superproject/+/master:build/soong/cc/config/riscv64_device.go;drc=726b001ae1a3388f65b571350bef4d373a3768c8;l=36
    cflags = [ "-march=rv64gcv_zba_zbb_zbs" ]
  }
}

template("syscall_test") {
  test_name = invoker.test_name

  # Generate the manifest
  _manifest_label = "${test_name}.cml"
  _manifest_file = "$target_gen_dir/${_manifest_label}"
  generated_file(_manifest_label) {
    outputs = [ _manifest_file ]
    output_conversion = "json"
    contents = {
      include =
          [ "//src/starnix/tests/syscalls/cpp/meta/syscalls_cpp_test.cml" ]
      program = {
        binary = "data/tests/${test_name}_bin"
      }
    }
  }

  _target_test_label = "${test_name}_bin"
  _host_test_label = "starnix_${test_name}_host"
  if (is_linux) {
    _test_deps = [
      ":test_utils",
      "//sdk/lib/fit",
      "//src/lib/fxl",
      "//src/lib/fxl/test:gtest_main",
      "//third_party/googletest:gmock",
      "//third_party/googletest:gtest",
      "//zircon/system/ulib/fbl",
    ]
    if (current_cpu != "arm") {
      _test_deps += [ "//sdk/fidl/fuchsia.fs:fuchsia.fs_cpp" ]
    }
    _test_configs = [
      "//build/config:rtti",
      "//build/config:thread_safety_annotations",

      # TODO(https://fxbug.dev/42085293): delete the below and fix compiler warnings
      "//build/config:Wno-vla-cxx-extension",

      # TODO(b/307959737): Compile syscall test on target with the bionic toolchain and then move this
      # to the bionic toolchain.
      ":march",

      # TODO(b/331282813): 'ENODATA' is deprecated in ISO C++, disable the warning for now.
      "//build/config:Wno-deprecated-pragma",
    ]

    test(_target_test_label) {
      # TODO(https://fxbug.dev/297293167) enable ASan instrumentation for Linux binaries in Starnix
      exclude_toolchain_tags = [ "instrumented" ]
      sources = [ "${test_name}.cc" ]
      deps = _test_deps
      configs += _test_configs
    }

    test(_host_test_label) {
      sources = [ "${test_name}.cc" ]
      deps = _test_deps
      configs += _test_configs
    }
  } else {
    not_needed([
                 "_target_test_label",
                 "_host_test_label",
               ])
  }

  if (is_host) {
    host_test("starnix_${target_name}_baseline") {
      binary_path =
          get_label_info(":${_host_test_label}($_host_linux_toolchain)",
                         "root_out_dir") + "/$_host_test_label"
      deps = [
        ":${_host_test_label}($_host_linux_toolchain)",
        ":host_runtime_deps",
      ]
    }
  }

  starnix_linux_test_component(target_name) {
    test_label = ":${_target_test_label}"
    test_binary = _target_test_label
    manifest = _manifest_file
    deps = [
      ":${_manifest_label}",
      ":fuse_overlayfs",
      ":ptrace_test_exec_child_resource($target_linux_toolchain)",
      ":simple_ext4_image",
      ":suid_test_exec_child_resource($target_linux_toolchain)",
      ":syscall_test_exec_child_resource($target_linux_toolchain)",
      "test_programs:print_helper_resource($target_linux_toolchain)",
    ]
    uses_expectations = true
    generated_expectations = ":syscalls_cpp_test_expectations"
    test_type = "starnix"
  }

  if (!invoker.arch64_only && starnix_enable_arch32) {
    starnix_linux_test_component("${target_name}_arch32") {
      test_toolchain = target_linux_arch32_toolchain
      test_label = ":${_target_test_label}"
      test_binary = _target_test_label
      manifest = _manifest_file
      deps = [
        ":${_manifest_label}",
        ":fuse_overlayfs",
        ":ptrace_test_exec_child_resource($target_linux_arch32_toolchain)",
        ":simple_ext4_image",
        ":suid_test_exec_child_resource($target_linux_arch32_toolchain)",
        ":syscall_test_exec_child_resource($target_linux_arch32_toolchain)",
        "test_programs:print_helper_resource($target_linux_arch32_toolchain)",
      ]
      uses_expectations = true
      generated_expectations =
          ":syscalls_cpp_test_expectations($target_linux_arch32_toolchain)"
      test_type = "starnix"
    }
  }
}

foreach(test_name, syscall_tests) {
  syscall_test(test_name) {
    test_name = test_name
    arch64_only = false
  }
}

foreach(test_name, arch64_syscall_tests) {
  syscall_test(test_name) {
    test_name = test_name
    arch64_only = true
  }
}

test("crash") {
  # TODO(https://fxbug.dev/297293167) enable ASan instrumentation for Linux binaries in Starnix
  exclude_toolchain_tags = [ "asan" ]
  sources = [ "crash.cc" ]
  deps = [
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gtest",
  ]
}

test("syslog_non_root") {
  # TODO(https://fxbug.dev/297293167) enable ASan instrumentation for Linux binaries in Starnix
  exclude_toolchain_tags = [ "asan" ]
  sources = [ "syslog_non_root_test.cc" ]
  deps = [
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gtest",
  ]
}

if (is_linux) {
  executable("extended_pstate_initial_state_child") {
    testonly = true
    emit_tool_path = false

    # TODO(https://fxbug.dev/297293167) enable ASan instrumentation for Linux binaries in Starnix
    exclude_toolchain_tags = [ "instrumented" ]
    sources = [ "extended_pstate_initial_state_child.cc" ]

    # This binary does not use libc or a dynamic linker since it is testing the state
    # presented to _start.
    disable_syslog_backend = true
    cflags = [ "-fno-builtin" ]
    ldflags = [
      "-nostdlib",
      "-nostartfiles",
      "-static",
    ]

    configs -= [
      "//build/config/linux:default-pie",
      "//build/config/linux:implicit-host-libs",
    ]
  }

  executable("ptrace_test_exec_child") {
    testonly = true
    emit_tool_path = false
    sources = [ "ptrace_test_exec_child.cc" ]

    # TODO(https://fxbug.dev/297293167) enable ASan instrumentation for Linux binaries in Starnix
    exclude_toolchain_tags = [
      "asan",
      "coverage",
    ]
    deps = [ ":test_utils" ]
  }

  resource("ptrace_test_exec_child_resource") {
    testonly = true
    sources = [ "$root_out_dir/ptrace_test_exec_child" ]
    outputs = [ "data/tests/ptrace_test_exec_child" ]
    deps = [ ":ptrace_test_exec_child" ]
  }

  executable("syscall_test_exec_child") {
    testonly = true
    emit_tool_path = false
    sources = [ "syscall_test_exec_child.cc" ]

    # TODO(https://fxbug.dev/297293167) enable ASan instrumentation for Linux binaries in Starnix
    exclude_toolchain_tags = [
      "asan",
      "coverage",
    ]
    deps = [ ":test_utils" ]
  }

  resource("syscall_test_exec_child_resource") {
    testonly = true
    sources = [ "$root_out_dir/syscall_test_exec_child" ]
    outputs = [ "data/tests/syscall_test_exec_child" ]
    deps = [ ":syscall_test_exec_child" ]
  }

  executable("suid_test_exec_child") {
    testonly = true
    emit_tool_path = false
    sources = [ "suid_test_exec_child.cc" ]

    # TODO(https://fxbug.dev/297293167) enable ASan instrumentation for Linux binaries in Starnix
    exclude_toolchain_tags = [
      "asan",
      "coverage",
    ]
    deps = [ ":test_utils" ]
  }

  resource("suid_test_exec_child_resource") {
    testonly = true
    sources = [ "$root_out_dir/suid_test_exec_child" ]
    outputs = [ "data/tests/suid_test_exec_child" ]
    deps = [ ":suid_test_exec_child" ]
  }
}

resource("extended_pstate_initial_state_child_resource") {
  testonly = true
  binary_name = "extended_pstate_initial_state_child"
  exe_label = ":${binary_name}($target_linux_toolchain)"
  out_dir = get_label_info(exe_label, "root_out_dir")
  sources = [ "${out_dir}/${binary_name}" ]
  outputs = [ "data/tests/${binary_name}" ]
  deps = [ exe_label ]
}

generated_expectations_file("syscalls_cpp_test_expectations") {
  includes = [
    "expectations/syscalls_cpp_test.json5",
    "expectations/syscalls_cpp_test_${current_cpu}.json5",
  ]
}

starnix_linux_test_component("crash_test") {
  test_label = ":crash"
  test_binary = "crash"
  test_type = "starnix"
}

starnix_linux_test_component("syslog_non_root_test") {
  test_label = ":syslog_non_root"
  test_binary = "syslog_non_root"
  test_type = "starnix"
}

fuchsia_test_package("starnix_syscalls_cpp_tests") {
  test_components = [
    ":syslog_non_root_test",
    ":crash_test",
  ]
  foreach(test_name, syscall_tests + arch64_syscall_tests) {
    test_components += [ ":${test_name}" ]
  }

  subpackages = starnix_test_subpackages
  subpackages += [ "//src/starnix/containers/debian:debian_package" ]

  if (target_cpu == "x64") {
    # TODO(https://fxbug.dev/42059962): arm64 emulator does not have Vulkan support yet.
    # Without Vulkan, test-ui-stack will stuck on Scenic startup.
    subpackages += [ "//src/ui/testing/test_ui_stack:test-ui-stack" ]
  }

  deps = [
    ":extended_pstate_initial_state_child_resource",
    "//src/lib/testing/expectation:expectation_comparer",
  ]

  test_specs = {
    # TODO(https://fxbug.dev/319150842): GCE doesn't support Vulkan, so, for now, just disable all
    # of these tests on GCE.
    _env = basic_envs
    _env += [ gce_env ]
    _env -= [ gce_env ]
    environments = _env

    log_settings = {
      # Tests exercise failure cases, so ERROR logs are expected.
      max_severity = "ERROR"
    }
  }
}

if (starnix_enable_arch32) {
  fuchsia_test_package("starnix_arch32_syscalls_cpp_tests") {
    test_components = []
    foreach(test_name, syscall_tests) {
      test_components += [ ":${test_name}_arch32" ]
    }

    subpackages = starnix_test_subpackages
    subpackages += [ "//src/starnix/containers/debian:debian_package" ]

    if (target_cpu == "x64") {
      # TODO(https://fxbug.dev/42059962): arm64 emulator does not have Vulkan support yet.
      # Without Vulkan, test-ui-stack will stuck on Scenic startup.
      subpackages += [ "//src/ui/testing/test_ui_stack:test-ui-stack" ]
    }

    deps = [
      ":extended_pstate_initial_state_child_resource",
      "//src/lib/testing/expectation:expectation_comparer",
    ]

    test_specs = {
      # TODO(https://fxbug.dev/319150842): GCE doesn't support Vulkan, so, for now, just disable all
      # of these tests on GCE.
      _env = arch32_envs
      _env += [ gce_env ]
      _env -= [ gce_env ]
      environments = _env

      log_settings = {
        # Tests exercise failure cases, so ERROR logs are expected.
        max_severity = "ERROR"
      }
    }
  }
}
