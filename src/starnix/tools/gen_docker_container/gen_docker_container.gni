# Copyright 2025 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")

# Convert a docker archive into a container manifest and a default command manifest.
#
# Parameters
#
#   input_path (required)
#     The path of the docker archive.
#
#   container_name (required)
#     The name of the container.
#
#   container_manifest (required)
#     The path to the container manifest.
#
#   default_command_manifest (required)
#     The path to the default command manifest.
#
#   features (optional)
#     The features to add to the container manifest.
#
#   deps
#   testonly
template("gen_docker_container") {
  assert(defined(invoker.input_path),
         "input_path must be defined for gen_docker_container")
  assert(defined(invoker.container_name),
         "container_name must be defined for gen_docker_container")
  assert(defined(invoker.container_manifest),
         "container_manifest must be defined for gen_docker_container")
  assert(defined(invoker.default_command_manifest),
         "default_command_manifest must be defined for gen_docker_container")

  _features = []
  if (defined(invoker.features)) {
    _features = invoker.features
  }

  compiled_action(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "testonly",
                           ])
    depfile = "$target_gen_dir/$target_name.d"
    tool = "//src/starnix/tools/gen_docker_container"
    sources = [ invoker.input_path ]
    outputs = [
      invoker.container_manifest,
      invoker.default_command_manifest,
    ]
    args = rebase_path(sources, root_build_dir) +
           rebase_path(outputs, root_build_dir) +
           [
             "--container-name",
             invoker.container_name,
           ]
    foreach(feature, _features) {
      args += [
        "--features",
        feature,
      ]
    }
  }
}
