# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/rust/rustc_binary.gni")
import("//build/rust/rustc_macro.gni")
import("//build/rust/rustc_test.gni")
import("//build/toolchain/concurrent_jobs.gni")
import("//src/starnix/build/args.gni")
import("//src/starnix/kernel/starnix.gni")
import("//src/starnix/lib/gzip/gzip.gni")
import("//src/storage/fshost/generated_fshost_config.gni")

group("kernel") {
  deps = [ ":starnix_kernel_package" ]
}

group("tests") {
  testonly = true

  deps = [
    ":starnix-tests",
    ":starnix_kernel_bin-tests",
    ":starnix_kernel_runner-tests",
    ":starnix_logging-tests",
  ]
}

rustc_binary("starnix_kernel_bin") {
  name = "starnix_kernel"
  edition = "2021"
  with_unit_tests = true

  # TODO(https://fxbug.dev/42059075): Re-enable starnix in these environments.
  exclude_toolchain_tags = [
    "asan",
    "hwasan",
  ]

  source_root = "main.rs"
  deps = [
    ":android_5.10_kernel_config",
    ":starnix_core",
    ":starnix_kernel_runner",
    ":starnix_kernel_structured_config",
    ":starnix_logging",
    "//sdk/fidl/fuchsia.component.runner:fuchsia.component.runner_rust",
    "//sdk/fidl/fuchsia.memory.attribution:fuchsia.memory.attribution_rust",
    "//sdk/fidl/fuchsia.process.lifecycle:fuchsia.process.lifecycle_rust",
    "//sdk/fidl/fuchsia.starnix.container:fuchsia.starnix.container_rust",
    "//sdk/rust/zx",
    "//src/lib/diagnostics/inspect/runtime/rust",
    "//src/lib/diagnostics/inspect/rust",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//src/lib/fuchsia-runtime",
    "//src/lib/trace/rust:trace",
    "//src/lib/trace/rust:trace-provider",
    "//src/starnix/lib/extended_pstate:lib",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:async-lock",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:tracing-mutex",
  ]

  sources = [ "main.rs" ]

  configs += [
    "//build/config/rust/lints:clippy_warn_all",
    "//src/starnix/config:starnix_clippy_lints",
  ]

  disable_rustdoc = false

  if (target_cpu == "riscv64" || is_lto_variant) {
    # At least for riscv64 and LTO, remote linking requires machines
    # with more memory, particularly in the linking phase.
    _concurrent_jobs = concurrent_jobs.rust_highmem
    configs += _concurrent_jobs.configs
    forward_variables_from(_concurrent_jobs.vars, "*")
  }
}

rustc_library("starnix_core") {
  name = "starnix_core"
  edition = "2021"
  version = "0.1.0"
  with_unit_tests = true
  source_root = "lib.rs"

  # TODO(https://fxbug.dev/42059075): Re-enable starnix in these environments.
  exclude_toolchain_tags = [
    "asan",
    "hwasan",
  ]

  sources = [
    "arch/${current_cpu}/execution.rs",
    "arch/${current_cpu}/mod.rs",
    "arch/${current_cpu}/registers.rs",
    "arch/${current_cpu}/signal_handling.rs",
    "arch/${current_cpu}/syscalls.rs",
    "arch/${current_cpu}/task.rs",
    "arch/${current_cpu}/vdso.rs",
    "arch/mod.rs",
    "bpf/attachments.rs",
    "bpf/fs.rs",
    "bpf/mod.rs",
    "bpf/program.rs",
    "bpf/syscalls.rs",
    "device/android/bootloader_message_store.rs",
    "device/android/mod.rs",
    "device/kobject.rs",
    "device/kobject_store.rs",
    "device/mem.rs",
    "device/mod.rs",
    "device/registry.rs",
    "device/remote_block_device.rs",
    "device/serial.rs",
    "device/terminal.rs",
    "execution/crash_reporter.rs",
    "execution/executor.rs",
    "execution/mod.rs",
    "execution/table.rs",
    "execution/task_creation.rs",
    "fs/devpts.rs",
    "fs/devtmpfs.rs",
    "fs/fuchsia/mod.rs",
    "fs/fuchsia/nmfs/fs.rs",
    "fs/fuchsia/nmfs/manager.rs",
    "fs/fuchsia/nmfs/mod.rs",
    "fs/fuchsia/remote.rs",
    "fs/fuchsia/remote_bundle.rs",
    "fs/fuchsia/remote_unix_domain_socket.rs",
    "fs/fuchsia/remote_volume.rs",
    "fs/fuchsia/sync_file.rs",
    "fs/fuchsia/syslog.rs",
    "fs/fuchsia/timer.rs",
    "fs/fuchsia/zxio.rs",
    "fs/mod.rs",
    "fs/sysfs/cpu_class_directory.rs",
    "fs/sysfs/device_directory.rs",
    "fs/sysfs/fs.rs",
    "fs/sysfs/kernel_directory.rs",
    "fs/sysfs/mod.rs",
    "fs/sysfs/power_directory.rs",
    "fs/sysfs/vulnerabilities_class_directory.rs",
    "fs/tmpfs.rs",
    "lib.rs",
    "mm/debugger.rs",
    "mm/futex_table.rs",
    "mm/mapping.rs",
    "mm/memory.rs",
    "mm/memory_manager.rs",
    "mm/mlock.rs",
    "mm/mod.rs",
    "mm/syscalls.rs",
    "mm/userfault.rs",
    "mm/vmex_resource.rs",
    "mm/vmsplice.rs",
    "mutable_state.rs",
    "perf/mod.rs",
    "power/manager.rs",
    "power/mod.rs",
    "power/state.rs",
    "power/suspend_stats.rs",
    "power/sync_on_suspend.rs",
    "power/wake_lock.rs",
    "power/wakeup_count.rs",
    "security/hooks.rs",
    "security/mod.rs",
    "security/selinux_hooks/audit.rs",
    "security/selinux_hooks/binder.rs",
    "security/selinux_hooks/bpf.rs",
    "security/selinux_hooks/file.rs",
    "security/selinux_hooks/fs_node.rs",
    "security/selinux_hooks/mod.rs",
    "security/selinux_hooks/selinuxfs.rs",
    "security/selinux_hooks/socket.rs",
    "security/selinux_hooks/superblock.rs",
    "security/selinux_hooks/task.rs",
    "security/selinux_hooks/testing.rs",
    "signals/mod.rs",
    "signals/signal_handling.rs",
    "signals/signalfd.rs",
    "signals/syscalls.rs",
    "signals/types.rs",
    "syscalls/misc.rs",
    "syscalls/mod.rs",
    "syscalls/reboot.rs",
    "syscalls/time.rs",
    "task/abstract_socket_namespace.rs",
    "task/cgroup.rs",
    "task/container_namespace.rs",
    "task/current_task.rs",
    "task/dynamic_thread_spawner.rs",
    "task/hr_timer_manager.rs",
    "task/interval_timer.rs",
    "task/iptables.rs",
    "task/kernel.rs",
    "task/kernel_stats.rs",
    "task/kernel_threads.rs",
    "task/limits.rs",
    "task/loader.rs",
    "task/memory_attribution.rs",
    "task/mod.rs",
    "task/net.rs",
    "task/pid_table.rs",
    "task/process_group.rs",
    "task/ptrace.rs",
    "task/scheduler/manager.rs",
    "task/scheduler/mod.rs",
    "task/scheduler/role_overrides.rs",
    "task/seccomp.rs",
    "task/session.rs",
    "task/syscalls.rs",
    "task/syslog.rs",
    "task/task.rs",
    "task/thread_group.rs",
    "task/timeline.rs",
    "task/timers.rs",
    "task/uts_namespace.rs",
    "task/waiter.rs",
    "testing.rs",
    "time/mod.rs",
    "time/utc.rs",
    "vdso/mod.rs",
    "vdso/vdso_loader.rs",
    "vfs/aio.rs",
    "vfs/anon_node.rs",
    "vfs/buffers/io_buffers.rs",
    "vfs/buffers/message_queue.rs",
    "vfs/buffers/message_types.rs",
    "vfs/buffers/mod.rs",
    "vfs/crypt_service.rs",
    "vfs/dir_entry.rs",
    "vfs/dirent_sink.rs",
    "vfs/epoll.rs",
    "vfs/eventfd.rs",
    "vfs/fd_number.rs",
    "vfs/fd_table.rs",
    "vfs/file_object.rs",
    "vfs/file_server.rs",
    "vfs/file_system.rs",
    "vfs/file_write_guard.rs",
    "vfs/fs_args.rs",
    "vfs/fs_context.rs",
    "vfs/fs_node.rs",
    "vfs/fs_node_cache.rs",
    "vfs/fs_registry.rs",
    "vfs/fsverity.rs",
    "vfs/inotify.rs",
    "vfs/io_uring.rs",
    "vfs/memory_directory.rs",
    "vfs/memory_regular.rs",
    "vfs/mod.rs",
    "vfs/namespace.rs",
    "vfs/path.rs",
    "vfs/pidfd.rs",
    "vfs/pipe.rs",
    "vfs/pseudo/dynamic_file.rs",
    "vfs/pseudo/mod.rs",
    "vfs/pseudo/simple_directory.rs",
    "vfs/pseudo/simple_file.rs",
    "vfs/pseudo/static_directory.rs",
    "vfs/pseudo/stub_bytes_file.rs",
    "vfs/pseudo/stub_empty_file.rs",
    "vfs/pseudo/vec_directory.rs",
    "vfs/record_locks.rs",
    "vfs/rw_queue.rs",
    "vfs/socket/iptables_utils.rs",
    "vfs/socket/mod.rs",
    "vfs/socket/socket.rs",
    "vfs/socket/socket_backed_by_zxio.rs",
    "vfs/socket/socket_file.rs",
    "vfs/socket/socket_fs.rs",
    "vfs/socket/socket_generic_netlink/messages.rs",
    "vfs/socket/socket_generic_netlink/mod.rs",
    "vfs/socket/socket_generic_netlink/nl80211.rs",
    "vfs/socket/socket_generic_netlink/taskstats.rs",
    "vfs/socket/socket_netlink.rs",
    "vfs/socket/socket_types.rs",
    "vfs/socket/socket_unix.rs",
    "vfs/socket/socket_vsock.rs",
    "vfs/socket/syscalls.rs",
    "vfs/splice.rs",
    "vfs/symlink_node.rs",
    "vfs/syscalls.rs",
    "vfs/timer.rs",
    "vfs/userfault_file.rs",
    "vfs/wd_number.rs",
    "vfs/xattr.rs",
  ]

  deps = [
    ":restricted_trampoline",
    ":starnix_logging",
    ":vdso_data($bionic_linux_toolchain)",
    "//sdk/fidl/fuchsia.buildinfo:fuchsia.buildinfo_rust",
    "//sdk/fidl/fuchsia.component.runner:fuchsia.component.runner_rust",
    "//sdk/fidl/fuchsia.diagnostics:fuchsia.diagnostics_rust",
    "//sdk/fidl/fuchsia.ebpf:fuchsia.ebpf_rust",
    "//sdk/fidl/fuchsia.feedback:fuchsia.feedback_rust",
    "//sdk/fidl/fuchsia.fs:fuchsia.fs_rust",
    "//sdk/fidl/fuchsia.fshost:fuchsia.fshost_rust",
    "//sdk/fidl/fuchsia.hardware.power.statecontrol:fuchsia.hardware.power.statecontrol_rust",
    "//sdk/fidl/fuchsia.hardware.serial:fuchsia.hardware.serial_rust",
    "//sdk/fidl/fuchsia.io:fuchsia.io_rust",
    "//sdk/fidl/fuchsia.kernel:fuchsia.kernel_rust",
    "//sdk/fidl/fuchsia.memory.attribution:fuchsia.memory.attribution_rust",
    "//sdk/fidl/fuchsia.net:fuchsia.net_rust",
    "//sdk/fidl/fuchsia.net.filter:fuchsia.net.filter_rust",
    "//sdk/fidl/fuchsia.net.policy.socketproxy:fuchsia.net.policy.socketproxy_rust",
    "//sdk/fidl/fuchsia.posix.socket:fuchsia.posix.socket_rust",
    "//sdk/fidl/fuchsia.posix.socket.packet:fuchsia.posix.socket.packet_rust",
    "//sdk/fidl/fuchsia.posix.socket.raw:fuchsia.posix.socket.raw_rust",
    "//sdk/fidl/fuchsia.power.broker:fuchsia.power.broker_rust",
    "//sdk/fidl/fuchsia.power.observability:fuchsia.power.observability_rust",
    "//sdk/fidl/fuchsia.power.suspend:fuchsia.power.suspend_rust",
    "//sdk/fidl/fuchsia.recovery:fuchsia.recovery_rust",
    "//sdk/fidl/fuchsia.scheduler:fuchsia.scheduler_rust",
    "//sdk/fidl/fuchsia.session.power:fuchsia.session.power_rust",
    "//sdk/fidl/fuchsia.starnix.binder:fuchsia.starnix.binder_rust",
    "//sdk/fidl/fuchsia.starnix.runner:fuchsia.starnix.runner_rust",
    "//sdk/fidl/fuchsia.time.alarms:fuchsia.time.alarms_rust",
    "//sdk/fidl/fuchsia.time.external:fuchsia.time.external_rust",
    "//sdk/fidl/fuchsia.unknown:fuchsia.unknown_rust",
    "//sdk/lib/scheduler/rust",
    "//sdk/rust/zx",
    "//sdk/rust/zx-status",
    "//src/connectivity/lib/net-types",
    "//src/connectivity/network/netlink",
    "//src/connectivity/wlan/wlanix:fuchsia.wlan.wlanix_rust",
    "//src/lib/async-utils",
    "//src/lib/debug/rust",
    "//src/lib/dense-map",
    "//src/lib/diagnostics/data/rust",
    "//src/lib/diagnostics/inspect/contrib/rust",
    "//src/lib/diagnostics/inspect/derive",
    "//src/lib/diagnostics/inspect/rust",
    "//src/lib/diagnostics/log/message/rust",
    "//src/lib/fdio/rust:fdio",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/flyweights",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//src/lib/fuchsia-fs",
    "//src/lib/fuchsia-runtime",
    "//src/lib/fuchsia-sync",
    "//src/lib/mundane",
    "//src/lib/network/fidl_fuchsia_net_filter_ext",
    "//src/lib/process_builder",
    "//src/lib/trace/rust:trace",
    "//src/performance/memory/attribution/server",
    "//src/starnix/lib/ebpf",
    "//src/starnix/lib/ebpf_api",
    "//src/starnix/lib/expando",
    "//src/starnix/lib/extended_pstate:lib",
    "//src/starnix/lib/filter_methods_macro",
    "//src/starnix/lib/linux_uapi",
    "//src/starnix/lib/range_map",
    "//src/starnix/lib/selinux",
    "//src/starnix/lib/split_enum_storage",
    "//src/starnix/lib/starnix_lifecycle",
    "//src/starnix/lib/starnix_sync",
    "//src/starnix/lib/starnix_syscalls",
    "//src/starnix/lib/starnix_types",
    "//src/starnix/lib/starnix_uapi",
    "//src/starnix/lib/syncio",
    "//src/starnix/lib/third_party/rust_netlink/netlink_packet_core",
    "//src/starnix/lib/third_party/rust_netlink/netlink_packet_generic",
    "//src/starnix/lib/third_party/rust_netlink/netlink_packet_route",
    "//src/starnix/lib/third_party/rust_netlink/netlink_packet_utils",
    "//src/starnix/lib/usercopy",
    "//src/storage/ext4/lib/metadata",
    "//src/storage/fxfs/fidl/fuchsia.fxfs:fuchsia.fxfs_rust",
    "//src/storage/lib/vfs/rust:vfs",
    "//third_party/rust_crates:aes-gcm-siv",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:assert_matches",
    "//third_party/rust_crates:async-trait",
    "//third_party/rust_crates:bit-vec",
    "//third_party/rust_crates:bitflags",
    "//third_party/rust_crates:bstr",
    "//third_party/rust_crates:byteorder",
    "//third_party/rust_crates:cfg-if",
    "//third_party/rust_crates:derivative",
    "//third_party/rust_crates:dyn-clone",
    "//third_party/rust_crates:fragile",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:hkdf",
    "//third_party/rust_crates:itertools",
    "//third_party/rust_crates:linked-hash-map",
    "//third_party/rust_crates:lock_api",
    "//third_party/rust_crates:macro_rules_attribute",
    "//third_party/rust_crates:memchr",
    "//third_party/rust_crates:memoffset",
    "//third_party/rust_crates:nom",
    "//third_party/rust_crates:num-derive",
    "//third_party/rust_crates:num-traits",
    "//third_party/rust_crates:once_cell",
    "//third_party/rust_crates:paste",
    "//third_party/rust_crates:pin-project",
    "//third_party/rust_crates:rand",
    "//third_party/rust_crates:ref-cast",
    "//third_party/rust_crates:regex",
    "//third_party/rust_crates:scopeguard",
    "//third_party/rust_crates:serde",
    "//third_party/rust_crates:serde_json",
    "//third_party/rust_crates:sha2",
    "//third_party/rust_crates:smallvec",
    "//third_party/rust_crates:static_assertions",
    "//third_party/rust_crates:thiserror",
    "//third_party/rust_crates:tracing-mutex",
    "//third_party/rust_crates:utf8parse",
    "//third_party/rust_crates:zerocopy",
  ]

  if (starnix_enable_arch32) {
    deps += [ ":vdso_data($bionic_linux_arch32_toolchain)" ]
  }

  test_deps = [
    "//src/connectivity/lib/net-declare",
    "//src/lib/diagnostics/testing/diagnostics-assertions/rust:diagnostics-assertions",
    "//src/lib/fuchsia",
    "//src/lib/fuchsia-fs",
    "//src/lib/test_util",
    "//src/storage/ext4/tests:test_img",
    "//src/storage/fxfs/platform:fxfs-testing",
    "//third_party/rust_crates:assert_matches",
    "//third_party/rust_crates:maplit",
    "//third_party/rust_crates:test-case",
    "//third_party/rust_crates:tracing-mutex",
  ]

  features = []
  if (starnix_enable_arch32) {
    features += [ "arch32" ]
  }
  if (starnix_syscall_stats) {
    features += [ "syscall_stats" ]
  }
  if (starnix_unified_aspace) {
    features += [ "unified_aspace" ]
  }
  if (starnix_enable_alternate_anon_allocs) {
    features += [ "alternate_anon_allocs" ]
  }
  inputs = [
    "//src/starnix/lib/selinux/testdata/micro_policies/hooks_tests_policy.pp",
    "//src/starnix/lib/selinux/testdata/composite_policies/compiled/bounded_transition_policy.pp",
  ]
  configs += [ "//src/starnix/config:starnix_clippy_lints" ]

  # Allows binaries that depend on this library to link.
  public_configs = [ "//build/config/fuchsia:static_cpp_standard_library" ]

  # Linking the lib tests requires a lot of memory.
  # Notes: if (is_asan || target_cpu == "riscv64"), linking is known to
  # OOM on n2-standard-2.
  # For other configurations, building on n2-standard-8 is significantly
  # faster due to the memory usage.
  _concurrent_jobs = concurrent_jobs.rust_highmem
  test_configs = _concurrent_jobs.configs
  test_vars = _concurrent_jobs.vars
}

rustc_library("starnix_kernel_runner") {
  name = "starnix_kernel_runner"
  edition = "2021"
  version = "0.1.0"
  with_unit_tests = true
  source_root = "runner/lib.rs"

  # TODO(https://fxbug.dev/42059075): Re-enable starnix in these environments.
  exclude_toolchain_tags = [
    "asan",
    "hwasan",
  ]

  sources = [
    "runner/component_runner.rs",
    "runner/container.rs",
    "runner/features.rs",
    "runner/lib.rs",
    "runner/mounts.rs",
    "runner/serve_protocols.rs",
  ]

  deps = [
    ":starnix_container_structured_config",
    ":starnix_core",
    ":starnix_logging",
    "//sdk/fidl/fuchsia.component:fuchsia.component_rust",
    "//sdk/fidl/fuchsia.component.runner:fuchsia.component.runner_rust",
    "//sdk/fidl/fuchsia.element:fuchsia.element_rust",
    "//sdk/fidl/fuchsia.feedback:fuchsia.feedback_rust",
    "//sdk/fidl/fuchsia.io:fuchsia.io_rust",
    "//sdk/fidl/fuchsia.mem:fuchsia.mem_rust",
    "//sdk/fidl/fuchsia.memory.attribution:fuchsia.memory.attribution_rust",
    "//sdk/fidl/fuchsia.process:fuchsia.process_rust",
    "//sdk/fidl/fuchsia.starnix.container:fuchsia.starnix.container_rust",
    "//sdk/fidl/fuchsia.sysinfo:fuchsia.sysinfo_rust",
    "//sdk/fidl/fuchsia.time.external:fuchsia.time.external_rust",
    "//sdk/fidl/fuchsia.ui.composition:fuchsia.ui.composition_rust",
    "//sdk/fidl/fuchsia.ui.input3:fuchsia.ui.input3_rust",
    "//sdk/fidl/fuchsia.ui.policy:fuchsia.ui.policy_rust",
    "//sdk/fidl/fuchsia.ui.views:fuchsia.ui.views_rust",
    "//sdk/rust/zx",
    "//src/lib/diagnostics/inspect/contrib/rust",
    "//src/lib/diagnostics/inspect/rust",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//src/lib/fuchsia-runtime",
    "//src/lib/ui/fuchsia-scenic",
    "//src/performance/memory/attribution/server",
    "//src/starnix/lib/bootreason",
    "//src/starnix/lib/features:starnix_features",
    "//src/starnix/lib/starnix_sync",
    "//src/starnix/lib/starnix_types",
    "//src/starnix/lib/starnix_uapi",
    "//src/starnix/modules",
    "//src/starnix/modules/ashmem",
    "//src/starnix/modules/fastrpc",
    "//src/starnix/modules/framebuffer",
    "//src/starnix/modules/gpu",
    "//src/starnix/modules/gralloc",
    "//src/starnix/modules/hvdcp_opti:hvdcp_opti_module",
    "//src/starnix/modules/input",
    "//src/starnix/modules/kgsl",
    "//src/starnix/modules/layeredfs",
    "//src/starnix/modules/magma",
    "//src/starnix/modules/nanohub",
    "//src/starnix/modules/overlayfs",
    "//src/starnix/modules/perfetto-producer",
    "//src/starnix/modules/perfetto_consumer",
    "//src/starnix/modules/thermal",
    "//src/starnix/modules/touch_power_policy",
    "//src/sys/lib/runner",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:bstr",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:rand",
    "//third_party/rust_crates:serde",
  ]

  test_deps = [ "//src/lib/fuchsia" ]

  configs += [ "//src/starnix/config:starnix_clippy_lints" ]
}

rustc_library("starnix_logging") {
  name = "starnix_logging"
  edition = "2021"
  version = "0.1.0"
  with_unit_tests = true
  source_root = "logging/lib.rs"

  sources = [
    "logging/core_dump_list.rs",
    "logging/lib.rs",
    "logging/logging.rs",
    "logging/not_found.rs",
    "logging/stubs.rs",
    "logging/trace.rs",
  ]

  deps = [
    "//sdk/rust/zx",
    "//src/lib/diagnostics/inspect/contrib/rust",
    "//src/lib/diagnostics/inspect/contrib/stubs:inspect_stubs",
    "//src/lib/diagnostics/inspect/rust",
    "//src/lib/fuchsia-runtime",
    "//src/lib/trace/rust:trace",
    "//src/starnix/lib/starnix_sync",
    "//src/starnix/lib/starnix_uapi",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:bstr",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:log",
    "//third_party/rust_crates:regex",
  ]

  test_deps = [ "//third_party/rust_crates:pretty_assertions" ]

  features = []
  if (starnix_disable_logging) {
    features += [ "disable_logging" ]
  }
  if (starnix_enable_tracing) {
    features += [ "tracing" ]
  }
  if (starnix_enable_tracing_firehose) {
    features += [ "tracing_firehose" ]
  }
  if (starnix_enable_trace_and_debug_logs_in_release) {
    features += [ "trace_and_debug_logs_in_release" ]
  }

  configs += [ "//src/starnix/config:starnix_clippy_lints" ]
}

static_library("restricted_trampoline") {
  sources = [ "execution/trampoline_${current_cpu}.S" ]
}

resource("starnix-test-files") {
  sources = [
    "data/testfile.txt",
    "data/testfile2.txt",
  ]
  outputs = [ "data/{{source_file_part}}" ]
}

# vDSO

config("vdso_config") {
  cflags = [ "-fPIC" ]
  ldflags = [
    "-shared",

    # Make sure libc is not linked into the vDSO. Header-only use is OK.
    "-nostdlib",
  ]

  # Force LTO so that functions are inlined when appropriate even across
  # different compilation units.
  # TODO(https://fxbug.dev/378658421): Disable lto on arm32 because it doesn't compile
  if (!is_debug && current_cpu != "arm") {
    # Add thinlto config if lto variants are not used.
    if (!is_lto_variant) {
      configs = [ "//build/config/lto:thinlto" ]
    }
  } else {
    configs = [ "//build/config/lto:no-lto" ]
  }

  # Use a custom linker script to ensure only one PT_LOAD header.
  vdso_linker_script = "vdso/vdso.ld"
  vdso_version_script = "vdso/vdso_${current_cpu}.map"
  ldflags += [
    "-Wl,--hash-style=both",
    "-Wl,-T," + rebase_path(vdso_linker_script, root_build_dir),
    "-Wl,--version-script," + rebase_path(vdso_version_script, root_build_dir),
  ]
}

source_set("vdso_calculate_utc") {
  sources = [ "vdso/vdso_calculate_utc.cc" ]
  deps = [
    "//zircon/kernel/lib/fasttime:headers",
    "//zircon/system/public",
    "//zircon/system/ulib/affine",
  ]
  configs += [ ":vdso_config" ]
}

loadable_module("vdso") {
  sources = [
    "vdso/vdso_${current_cpu}.cc",
    "vdso/vdso_common.cc",
  ]
  if (current_cpu == "arm") {
    sources += [ "vdso/vdso_arm_eabi.cc" ]
  }

  deps = [ "//zircon/system/public" ]

  if (current_cpu != "arm") {
    deps += [
      ":vdso_calculate_utc",
      "//zircon/kernel/lib/fasttime:headers",
      "//zircon/system/ulib/affine",
    ]
  }

  output_name = "libvdso"
  configs += [ ":vdso_config" ]
  if (is_linux) {
    # By default, Linux host libraries statically link libc++. Since this library specifies nostdlib
    # this option is unused and generates a warning.
    configs -= [ "//build/config/linux:implicit-host-libs" ]
  }

  exclude_toolchain_tags = [ "instrumented" ]
}

resource("vdso_data") {
  sources = [ "$root_out_dir/libvdso.so" ]
  if (current_cpu != "arm") {
    outputs = [ "data/libvdso.so" ]
  } else {
    outputs = [ "data/libvdso_arch32.so" ]
  }
  deps = [ ":vdso" ]
}

# Components

# The starnix kernel manifest, used by all containers.
fuchsia_component_manifest("starnix_kernel_manifest") {
  manifest = "meta/starnix_kernel.cml"
  component_name = "starnix_kernel"
}

gzip("gzip_android_5.10_kernel_config") {
  input = "data/config"
  output = "$target_gen_dir/config.gz"
}

resource("android_5.10_kernel_config") {
  sources = [ "$target_gen_dir/config.gz" ]
  outputs = [ "data/config.gz" ]
  deps = [ ":gzip_android_5.10_kernel_config" ]
}

fuchsia_component_manifest("empty_container_manifest") {
  manifest = "//src/starnix/containers/empty_container/meta/empty_container.cml"
}

fuchsia_structured_config_rust_lib("starnix_container_structured_config") {
  cm_label = ":empty_container_manifest"
}

fuchsia_structured_config_rust_lib("starnix_kernel_structured_config") {
  cm_label = ":starnix_kernel_manifest"
}

fuchsia_component("starnix_kernel") {
  cm_label = ":starnix_kernel_manifest"
  deps = [ ":starnix_kernel_bin" ]
}

# Packages

fuchsia_package("starnix_kernel_package") {
  package_name = "starnix_kernel"
  deps = [
    ":starnix_kernel",
    ":starnix_kernel_manifest",
    "//src/starnix/containers:default_init",
  ]
}

fuchsia_unittest_package("starnix-tests") {
  manifest = "meta/starnix_tests.cml"
  deps = [
    ":starnix-test-files",
    ":starnix_core_test",
    "//src/starnix/examples/hello_starnix:hello_starnix_bin",
  ]
  test_specs = {
    log_settings = {
      # Tests exercise failure cases, so ERROR logs are expected.
      max_severity = "ERROR"
    }
  }
  test_type = "starnix"
}

fuchsia_unittest_package("starnix_kernel_bin-tests") {
  deps = [ ":starnix_kernel_bin_test" ]
  manifest = "meta/starnix_kernel_bin_tests.cml"
}

fuchsia_unittest_package("starnix_kernel_runner-tests") {
  deps = [ ":starnix_kernel_runner_test" ]
  manifest = "meta/starnix_kernel_runner_tests.cml"
  test_specs = {
    log_settings = {
      # Tests exercise failure cases, so ERROR logs are expected.
      max_severity = "ERROR"
    }
  }
  test_type = "starnix"
}

fuchsia_unittest_package("starnix_logging-tests") {
  deps = [ ":starnix_logging_test" ]
}
