// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

use zerocopy::{FromBytes, Immutable, IntoBytes, KnownLayout};

/// The stack size in bytes
pub const BPF_STACK_SIZE: usize = 512;

/// The maximum number of instructions in an ebpf program
pub const BPF_MAX_INSTS: usize = 65536;

/// The number of registers
pub const REGISTER_COUNT: u8 = 11;

/// The number of general r/w registers.
pub const GENERAL_REGISTER_COUNT: u8 = 10;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub enum DataWidth {
    U8,
    U16,
    U32,
    U64,
}

/// The different data width used by ebpf
impl DataWidth {
    pub fn bits(&self) -> usize {
        match self {
            Self::U8 => 8,
            Self::U16 => 16,
            Self::U32 => 32,
            Self::U64 => 64,
        }
    }

    pub fn bytes(&self) -> usize {
        match self {
            Self::U8 => 1,
            Self::U16 => 2,
            Self::U32 => 4,
            Self::U64 => 8,
        }
    }

    pub fn str(&self) -> &'static str {
        match self {
            Self::U8 => "b",
            Self::U16 => "h",
            Self::U32 => "w",
            Self::U64 => "dw",
        }
    }

    pub fn instruction_bits(&self) -> u8 {
        match self {
            Self::U8 => BPF_B,
            Self::U16 => BPF_H,
            Self::U32 => BPF_W,
            Self::U64 => BPF_DW,
        }
    }
}

/// Represents a single eBPF instruction. The internal layout matches the
/// layout of the `bpf_insn` struct in `linux_uapi`. It's used instead of
/// `bpf_insn` as it allows more efficient access to `dst_reg` and `src_reg`
/// fields compared to the accessors generated by bindgen.
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Eq, PartialEq, FromBytes, IntoBytes, KnownLayout, Immutable)]
pub struct EbpfInstruction(u64);

impl From<u64> for EbpfInstruction {
    fn from(value: u64) -> Self {
        Self(value)
    }
}

// This implementation is valid only on little-endian architectures.
#[cfg(target_endian = "little")]
impl EbpfInstruction {
    pub fn new(code: u8, dst: u8, src: u8, offset: i16, imm: i32) -> Self {
        assert!(dst < 16);
        assert!(src < 16);

        Self(
            (code as u64)
                | (dst as u64) << 8
                | (src as u64) << 12
                | (offset as u16 as u64) << 16
                | (imm as u32 as u64) << 32,
        )
    }

    #[inline(always)]
    pub fn code(&self) -> u8 {
        self.0 as u8
    }

    pub fn set_code(&mut self, code: u8) {
        *self = EbpfInstruction((self.0 & !0x00ff) | code as u64)
    }

    #[inline(always)]
    pub fn dst_reg(&self) -> u8 {
        ((self.0 & 0x0f00) >> 8) as u8
    }

    pub fn set_dst_reg(&mut self, dst_reg: u8) {
        assert!(dst_reg < 16);
        *self = EbpfInstruction((self.0 & !0x0f00) | ((dst_reg as u64) << 8))
    }

    #[inline(always)]
    pub fn src_reg(&self) -> u8 {
        ((self.0 & 0xf000) >> 12) as u8
    }

    pub fn set_src_reg(&mut self, src_reg: u8) {
        assert!(src_reg < 16);
        *self = EbpfInstruction((self.0 & !0xf000) | ((src_reg as u64) << 12))
    }

    #[inline(always)]
    pub fn offset(&self) -> i16 {
        (self.0 >> 16) as u16 as i16
    }

    pub fn set_offset(&mut self, offset: i16) {
        *self = EbpfInstruction((self.0 & !0xffff_0000) | ((offset as u16 as u64) << 16))
    }

    #[inline(always)]
    pub fn imm(&self) -> i32 {
        (self.0 >> 32 as u32) as i32
    }

    pub fn set_imm(&mut self, imm: i32) {
        *self = EbpfInstruction((self.0 & 0xffff_ffff) | ((imm as u32 as u64) << 32))
    }
}

// The different operation types
pub const BPF_LD: u8 = linux_uapi::BPF_LD as u8;
pub const BPF_LDX: u8 = linux_uapi::BPF_LDX as u8;
pub const BPF_ST: u8 = linux_uapi::BPF_ST as u8;
pub const BPF_STX: u8 = linux_uapi::BPF_STX as u8;
pub const BPF_ALU: u8 = linux_uapi::BPF_ALU as u8;
pub const BPF_JMP: u8 = linux_uapi::BPF_JMP as u8;
pub const BPF_JMP32: u8 = linux_uapi::BPF_JMP32 as u8;
pub const BPF_ALU64: u8 = linux_uapi::BPF_ALU64 as u8;
pub const BPF_CLS_MASK: u8 =
    BPF_LD | BPF_LDX | BPF_ST | BPF_STX | BPF_ALU | BPF_JMP | BPF_JMP | BPF_JMP32 | BPF_ALU64;

// The mask for the sub operation
pub const BPF_SUB_OP_MASK: u8 = 0xf0;

// The mask for the imm vs src register
pub const BPF_SRC_REG: u8 = linux_uapi::BPF_X as u8;
pub const BPF_SRC_IMM: u8 = linux_uapi::BPF_K as u8;
pub const BPF_SRC_MASK: u8 = BPF_SRC_REG | BPF_SRC_IMM;

// The mods for the load/store
// The instruction code for immediate loads
pub const BPF_IMM: u8 = linux_uapi::BPF_IMM as u8;
pub const BPF_MEM: u8 = linux_uapi::BPF_MEM as u8;
pub const BPF_ATOMIC: u8 = linux_uapi::BPF_ATOMIC as u8;
pub const BPF_ABS: u8 = linux_uapi::BPF_ABS as u8;
pub const BPF_IND: u8 = linux_uapi::BPF_IND as u8;
pub const BPF_LOAD_STORE_MASK: u8 = BPF_IMM | BPF_MEM | BPF_ATOMIC | BPF_ABS | BPF_IND;

// The mask for the swap operations
pub const BPF_TO_BE: u8 = linux_uapi::BPF_TO_BE as u8;
pub const BPF_TO_LE: u8 = linux_uapi::BPF_TO_LE as u8;
pub const BPF_END_TYPE_MASK: u8 = BPF_TO_BE | BPF_TO_LE;

// The different size value
pub const BPF_B: u8 = linux_uapi::BPF_B as u8;
pub const BPF_H: u8 = linux_uapi::BPF_H as u8;
pub const BPF_W: u8 = linux_uapi::BPF_W as u8;
pub const BPF_DW: u8 = linux_uapi::BPF_DW as u8;
pub const BPF_SIZE_MASK: u8 = BPF_B | BPF_H | BPF_W | BPF_DW;

// The different alu operations
pub const BPF_ADD: u8 = linux_uapi::BPF_ADD as u8;
pub const BPF_SUB: u8 = linux_uapi::BPF_SUB as u8;
pub const BPF_MUL: u8 = linux_uapi::BPF_MUL as u8;
pub const BPF_DIV: u8 = linux_uapi::BPF_DIV as u8;
pub const BPF_OR: u8 = linux_uapi::BPF_OR as u8;
pub const BPF_AND: u8 = linux_uapi::BPF_AND as u8;
pub const BPF_LSH: u8 = linux_uapi::BPF_LSH as u8;
pub const BPF_RSH: u8 = linux_uapi::BPF_RSH as u8;
pub const BPF_NEG: u8 = linux_uapi::BPF_NEG as u8;
pub const BPF_MOD: u8 = linux_uapi::BPF_MOD as u8;
pub const BPF_XOR: u8 = linux_uapi::BPF_XOR as u8;
pub const BPF_MOV: u8 = linux_uapi::BPF_MOV as u8;
pub const BPF_ARSH: u8 = linux_uapi::BPF_ARSH as u8;
pub const BPF_END: u8 = linux_uapi::BPF_END as u8;

// The different jump operation
pub const BPF_JA: u8 = linux_uapi::BPF_JA as u8;
pub const BPF_JEQ: u8 = linux_uapi::BPF_JEQ as u8;
pub const BPF_JGT: u8 = linux_uapi::BPF_JGT as u8;
pub const BPF_JGE: u8 = linux_uapi::BPF_JGE as u8;
pub const BPF_JSET: u8 = linux_uapi::BPF_JSET as u8;
pub const BPF_JNE: u8 = linux_uapi::BPF_JNE as u8;
pub const BPF_JSGT: u8 = linux_uapi::BPF_JSGT as u8;
pub const BPF_JSGE: u8 = linux_uapi::BPF_JSGE as u8;
pub const BPF_CALL: u8 = linux_uapi::BPF_CALL as u8;
pub const BPF_EXIT: u8 = linux_uapi::BPF_EXIT as u8;
pub const BPF_JLT: u8 = linux_uapi::BPF_JLT as u8;
pub const BPF_JLE: u8 = linux_uapi::BPF_JLE as u8;
pub const BPF_JSLT: u8 = linux_uapi::BPF_JSLT as u8;
pub const BPF_JSLE: u8 = linux_uapi::BPF_JSLE as u8;

// Specific atomic operation
pub const BPF_FETCH: u8 = linux_uapi::BPF_FETCH as u8;
pub const BPF_XCHG: u8 = linux_uapi::BPF_XCHG as u8;
pub const BPF_CMPXCHG: u8 = linux_uapi::BPF_CMPXCHG as u8;

// The load double operation that allows to write 64 bits into a register.
pub const BPF_LDDW: u8 = BPF_LD | BPF_DW;

// cBPF-specific constants.
pub const BPF_LEN: u8 = linux_uapi::BPF_LEN as u8;
pub const BPF_MISC: u8 = linux_uapi::BPF_MISC as u8;
pub const BPF_RET: u8 = linux_uapi::BPF_RET as u8;
pub const BPF_MSH: u8 = linux_uapi::BPF_MSH as u8;
pub const BPF_A: u8 = linux_uapi::BPF_A as u8;
pub const BPF_K: u8 = linux_uapi::BPF_K as u8;
pub const BPF_X: u8 = linux_uapi::BPF_X as u8;
pub const BPF_TXA: u8 = linux_uapi::BPF_TXA as u8;
pub const BPF_TAX: u8 = linux_uapi::BPF_TAX as u8;

// Values that can be used in src reg with the `ldimm64`. These instructions
// should be updated when the program is linked.
pub const BPF_PSEUDO_MAP_FD: u8 = linux_uapi::BPF_PSEUDO_MAP_FD as u8;
pub const BPF_PSEUDO_MAP_IDX: u8 = linux_uapi::BPF_PSEUDO_MAP_IDX as u8;
pub const BPF_PSEUDO_MAP_VALUE: u8 = linux_uapi::BPF_PSEUDO_MAP_VALUE as u8;
pub const BPF_PSEUDO_MAP_IDX_VALUE: u8 = linux_uapi::BPF_PSEUDO_MAP_IDX_VALUE as u8;
pub const BPF_PSEUDO_BTF_ID: u8 = linux_uapi::BPF_PSEUDO_BTF_ID as u8;
pub const BPF_PSEUDO_FUNC: u8 = linux_uapi::BPF_PSEUDO_FUNC as u8;

// Values that can be used in src reg with the `call` instruction. These
// instructions should be updated when the program is linked.
pub const BPF_PSEUDO_CALL: u8 = linux_uapi::BPF_PSEUDO_CALL as u8;
pub const BPF_PSEUDO_KFUNC_CALL: u8 = linux_uapi::BPF_PSEUDO_KFUNC_CALL as u8;

pub type CbpfInstruction = linux_uapi::sock_filter;
pub type EbpfMapType = linux_uapi::bpf_map_type;
