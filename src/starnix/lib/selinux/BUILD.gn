# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/rust/rustc_library.gni")

rustc_library("selinux") {
  with_unit_tests = true
  edition = "2021"
  sources = [
    "src/access_vector_cache.rs",
    "src/exceptions_config.rs",
    "src/fifo_cache.rs",
    "src/lib.rs",
    "src/permission_check.rs",
    "src/policy/arrays.rs",
    "src/policy/constraints.rs",
    "src/policy/error.rs",
    "src/policy/extensible_bitmap.rs",
    "src/policy/index.rs",
    "src/policy/metadata.rs",
    "src/policy/mod.rs",
    "src/policy/parsed_policy.rs",
    "src/policy/parser.rs",
    "src/policy/security_context.rs",
    "src/policy/symbols.rs",
    "src/security_server.rs",
    "src/sid_table.rs",
    "src/sync.rs",
  ]
  inputs = [
    "testdata/composite_policies/compiled/allow_fork.pp",
    "testdata/composite_policies/compiled/class_defaults_policy.pp",
    "testdata/composite_policies/compiled/handle_unknown_policy-allow.pp",
    "testdata/composite_policies/compiled/handle_unknown_policy-deny.pp",
    "testdata/composite_policies/compiled/handle_unknown_policy-reject.pp",
    "testdata/composite_policies/compiled/minimal_policy.pp",
    "testdata/composite_policies/compiled/range_transition_policy.pp",
    "testdata/composite_policies/compiled/role_transition_not_allowed_policy.pp",
    "testdata/composite_policies/compiled/role_transition_policy.pp",
    "testdata/composite_policies/compiled/type_transition_policy.pp",
    "testdata/composite_policies/compiled/exceptions_config_policy.pp",
    "testdata/composite_policies/compiled/with_additional_domain_policy.pp",
    "testdata/composite_policies/compiled/with_unlabeled_access_domain_policy.pp",
    "testdata/expectations/emulator",
    "testdata/expectations/selinux_testsuite",
    "testdata/micro_policies/allow_a_attr_b_attr_class0_perm0_policy.pp",
    "testdata/micro_policies/allow_a_t_a1_attr_class0_perm0_a2_attr_class0_perm1_policy.pp",
    "testdata/micro_policies/allow_a_t_b_attr_class0_perm0_policy.pp",
    "testdata/micro_policies/allow_a_t_b_t_class0_perm0_policy.pp",
    "testdata/micro_policies/allow_with_constraints_policy.pp",
    "testdata/micro_policies/allowxperm_policy.pp",
    "testdata/micro_policies/constraints_policy.pp",
    "testdata/micro_policies/file_no_defaults_policy.pp",
    "testdata/micro_policies/file_range_source_high_policy.pp",
    "testdata/micro_policies/file_range_source_low_high_policy.pp",
    "testdata/micro_policies/file_range_source_low_policy.pp",
    "testdata/micro_policies/file_range_target_high_policy.pp",
    "testdata/micro_policies/file_range_target_low_high_policy.pp",
    "testdata/micro_policies/file_range_target_low_policy.pp",
    "testdata/micro_policies/file_source_defaults_policy.pp",
    "testdata/micro_policies/file_target_defaults_policy.pp",
    "testdata/micro_policies/multiple_levels_and_categories_policy.pp",
    "testdata/micro_policies/no_allow_a_attr_b_attr_class0_perm0_policy.pp",
    "testdata/micro_policies/no_allow_a_t_b_attr_class0_perm0_policy.pp",
    "testdata/micro_policies/no_allow_a_t_b_t_class0_perm0_policy.pp",
    "testdata/micro_policies/security_context_tests_policy.pp",
    "testdata/micro_policies/security_server_tests_policy.pp",
    "testdata/policies/emulator",
    "testdata/policies/selinux_testsuite",
  ]
  deps = [
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:bstr",
    "//third_party/rust_crates:indexmap",
    "//third_party/rust_crates:thiserror",
    "//third_party/rust_crates:zerocopy",
  ]
  test_deps = [
    "//third_party/rust_crates:serde",
    "//third_party/rust_crates:serde_json5",
  ]
  configs += [ "//src/starnix/config:starnix_clippy_lints" ]

  if (is_host) {
    # Host builds use `parking_lot` for lock primitives.
    deps += [ "//third_party/rust_crates:parking_lot" ]
  } else {
    # Fuchsia/starnix builds identified by feature `selinux_starnix`.
    features = [ "selinux_starnix" ]

    # Fuchsia/starnix builds use `fuchsia-inspect-contrib` for self-profiling.
    deps += [ "//src/lib/diagnostics/inspect/contrib/rust" ]

    # Fuchsia/starnix builds use `starnix_sync` for lock primitives.
    deps += [ "//src/starnix/lib/starnix_sync" ]

    # Fuchsia/starnix async tests rely on additional dependencies.
    test_deps += [
      "//src/lib/fuchsia",
      "//third_party/rust_crates:futures",
      "//third_party/rust_crates:rand",
    ]
  }
}

fuchsia_unittest_package("starnix-selinux-unit-tests") {
  deps = [ ":selinux_test" ]
}

group("tests") {
  testonly = true

  deps = [
    ":selinux_test($host_toolchain)",
    ":starnix-selinux-unit-tests",
    "scripts:tests",
  ]
}
