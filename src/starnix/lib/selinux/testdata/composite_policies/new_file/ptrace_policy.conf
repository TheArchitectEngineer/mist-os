# Attribute for parent domains in ptrace tests.
attribute test_ptrace_parent_a;

# Attribute for child domains in ptrace tests.
attribute test_ptrace_child_a;

# Allow parent domains to set the "current" and "exec" contexts.
allow test_ptrace_parent_a self:file { write };
allow test_ptrace_parent_a self:process { setexec };

# Allow parent domains to execute files in data/bin/.
allow test_ptrace_parent_a file_t:file { read execute };

# Allow the parent domains to transition to the child domains.
allow test_ptrace_parent_a test_ptrace_child_a:process { transition };

# Allow the child domains to use files in data/bin/ as entry points.
allow test_ptrace_child_a file_t:file { read entrypoint };

# Allow child domains to use file descriptors labeled with the parent contexts.
allow test_ptrace_child_a test_ptrace_parent_a:fd { use };

# Allow use of included files and shared libraries.
allow test_ptrace_parent_a unlabeled_t:file { read };
allow test_ptrace_parent_a file_t:file { read };
allow test_ptrace_parent_a unlabeled_t:file { read getattr map execute };
allow test_ptrace_child_a file_t:dir { getattr };
allow test_ptrace_child_a file_t:file { read getattr map execute };
allow test_ptrace_child_a self:lnk_file { read };

# Allow child domains to read their own files.
allow test_ptrace_child_a self:file { read };

# A child domain.
type test_ptrace_child_t, test_ptrace_child_a, test_a;

# A parent domain that has the `ptrace` permission for child domains.
type test_ptrace_parent_allow_t, test_ptrace_parent_a, test_a;
allow test_ptrace_parent_allow_t test_ptrace_child_a:process { ptrace };

# A parent domain that does not have the `ptrace` permission for child domains.
type test_ptrace_parent_deny_t, test_ptrace_parent_a, test_a;
neverallow test_ptrace_parent_deny_t test_ptrace_child_a:process { ptrace };

# Allow parents to send signals to children, including SIGKILL if needed to clean up a test.
allow test_ptrace_parent_a test_ptrace_child_a:process { signal sigkill };

# Allow children to send SIGSTOP to themselves.
allow test_ptrace_child_a self:process { sigstop };

# The statements below are only needed on Linux, not on Starnix.

# Allow the child domains to use files in /data/bin as an entry point.
allow test_ptrace_child_a unlabeled_t:file { getattr read map execute entrypoint };

# Allow the parent to read the file containing the child program.
# The difference between Linux and Starnix is due to a labeling difference.
allow test_ptrace_parent_a unlabeled_t:file { read getattr };

# Related to shared object use.
allow test_ptrace_parent_a unlabeled_t:file { execute };

# Related to /dev/console use.
allow test_ptrace_parent_a unlabeled_t:chr_file { getattr };
allow test_ptrace_child_a unlabeled_t:chr_file { read getattr };

# Related to missing directory permission checks in SEStarnix?
allow test_ptrace_parent_a self:dir { search };
allow test_ptrace_child_a self:dir { search };

# Related to some missing file permission checks in SEStarnix?
allow test_ptrace_child_a devnull_t:chr_file { read write };

# Related to misc permissions not yet implemented in SEStarnix.
allow test_ptrace_parent_a self:capability { dac_read_search dac_override };
allow test_ptrace_parent_a test_ptrace_child_a:process { noatsecure };
