class anon_inode
class anon_inode inherits file

type anon_inodefs_t;

# Initial test domain for anon_inode access-check testing, with sufficient access to the test
# file domain.
type anon_inode_test_t;
typeattribute anon_inode_test_t test_a;

# Grant the test domain permission to write to self-labeled files (e.g. "/proc/self/*").
allow anon_inode_test_t self:file { write };

# Test domain with no `fd { use }` permissions to "anon_inode_test_t" resources.
type anon_inode_no_use_fd;
typeattribute anon_inode_no_use_fd test_a;
neverallow anon_inode_no_use_fd anon_inode_test_t:fd { use };
neverallow anon_inode_no_use_fd file_like_a:anon_inode { read write };

# Test domain with `fd { use }` access to all `"anon_inode_test_t" domains, but no other rights.
type anon_inode_use_fd_no_perms;
typeattribute anon_inode_use_fd_no_perms test_a;
allow anon_inode_use_fd_no_perms anon_inode_test_t:fd { use };
neverallow anon_inode_use_fd_no_perms file_like_a:anon_inode { read write };

# Test domain with `fs { use }` to "anon_inode_test_t" and read/write permissions to "file_like_a".
type anon_inode_use_fd_and_perms;
typeattribute anon_inode_use_fd_and_perms test_a;
allow anon_inode_use_fd_and_perms anon_inode_test_t:fd { use };
allow anon_inode_use_fd_and_perms file_like_a:anon_inode { read write };

# Grant the domains with the "unconfined_a" attribute access to all "file_a" anonymous inodes.
allow unconfined_a file_like_a:anon_inode *;

# Label user fault FD nodes created by "unconfined_t" with a unique domain.
type anon_inode_unconfined_userfaultfd_t;
typeattribute anon_inode_unconfined_userfaultfd_t file_like_a;
type_transition unconfined_t unconfined_t:anon_inode anon_inode_unconfined_userfaultfd_t "[userfaultfd]";

# Label event FD nodes created by "anon_inode_test_t" with a unique domain.
type anon_inode_test_eventfd_t;
typeattribute anon_inode_test_eventfd_t file_like_a;
type_transition anon_inode_test_t anon_inode_test_t:anon_inode anon_inode_test_eventfd_t "[eventfd]";