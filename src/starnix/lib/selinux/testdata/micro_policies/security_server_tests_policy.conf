# handle_unknown deny
class process
class file
class blk_file
class chr_file
class lnk_file
class fifo_file
class sock_file
class class0
sid kernel
sid security
sid unlabeled
sid fs
sid file
sid file_labels
sid init
sid any_socket
sid port
sid netif
sid netmsg
sid node
sid igmp_packet
sid icmp_socket
sid tcp_socket
sid sysctl_modprobe
sid sysctl
sid sysctl_fs
sid sysctl_kernel
sid sysctl_net
sid sysctl_net_unix
sid sysctl_vm
sid sysctl_dev
sid kmod
sid policy
sid scmp_packet
sid devnull
common file { create open }
class process { fork transition getsched setsched getpgid setpgid sigchld sigkill sigstop signal ptrace getsession setrlimit getrlimit }
class file inherits file { execute_no_trans entrypoint }
# class blk_file is used by security server tests as a kernel class known not to be defined here.
class class0 { perm0 }
sensitivity s0;
sensitivity s1;
dominance { s0 s1 }
category c0;
category c1;
category c2;
category c3;
category c4;
level s0:c0;
level s1:c0.c4;
mlsconstrain class0 { perm0 } l1 == l2;
type type0;
type security_t;
type unlabeled_t;
type file_fallback_t;
type unconfined_t;
type permissive_t;
permissive permissive_t;
type non_permissive_t;
type test_audit_t;
type dontaudit_t;
allow type0 self:class0 { perm0 };
allow type0 self:process { fork };
allow type0 unlabeled_t:process { getsched };
allow unlabeled_t type0:process { setsched };

# Permissive tests expect the domains to have getsched permissions to self, but not to one another.
allow permissive_t self:process { getsched };
allow non_permissive_t self:process { getsched };
neverallow permissive_t non_permissive_t:process { getsched };
neverallow non_permissive_t permissive_t:process { getsched };

# Auditallow/dontaudit tests expect the domain to have fork & setsched but not getsched nor getpgid.
allow test_audit_t self:process { fork setsched };
neverallow test_audit_t self:process { getsched getpgid };
auditallow test_audit_t self:process { fork getsched };
dontaudit test_audit_t self:process { setsched getsched };

role unconfined_r;
role unconfined_r types { unconfined_t };

user user0 roles object_r level s0 range s0 - s0:c0;
user user1 roles unconfined_r level s0:c0 range s0:c0 - s1:c0.c4;
user unconfined_u roles unconfined_r level s0 range s0;

sid kernel user1:object_r:type0:s0:c0 - s1:c0.c2,c4
sid security user0:object_r:security_t:s0
sid unlabeled user0:object_r:unlabeled_t:s0
sid file user0:object_r:file_fallback_t:s0
sid devnull user0:object_r:unlabeled_t:s0
