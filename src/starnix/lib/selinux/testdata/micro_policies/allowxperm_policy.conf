# handle_unknown deny
class class_one_ioctl
class class_two_ioctls_same_range
class class_two_ioctls_diff_range
class class_one_driver_range
class class_all_ioctls
class class_overlapping_ranges
class class_auditallowxperm
class class_dontauditxperm
class class_unused
sid kernel
sid security
sid unlabeled
sid fs
sid file
class class_one_ioctl { ioctl }
class class_two_ioctls_same_range { ioctl }
class class_two_ioctls_diff_range { ioctl }
class class_one_driver_range { ioctl }
class class_all_ioctls { ioctl }
class class_overlapping_ranges { ioctl }
class class_auditallowxperm { ioctl }
class class_dontauditxperm { ioctl }
class class_unused { some_perm }
sensitivity s0;
dominance { s0 }
category c0;
level s0:c0;
mlsconstrain class_unused { some_perm } l1 == l2;
type type0;
allowxperm type0 self:class_one_ioctl ioctl { 0xabcd };
allowxperm type0 self:class_two_ioctls_same_range ioctl { 0x1234 0x1256 };
allowxperm type0 self:class_two_ioctls_diff_range ioctl { 0x1234 0x5678 };
allowxperm type0 self:class_one_driver_range ioctl { 0x0-0xff };
allowxperm type0 self:class_all_ioctls ioctl { 0x0-0xffff };
allowxperm type0 self:class_overlapping_ranges ioctl { 0x1000-0x1001 };
allowxperm type0 self:class_overlapping_ranges ioctl { 0x1000-0x10ff };
auditallowxperm type0 self:class_auditallowxperm ioctl { 0x1000 };
dontauditxperm type0 self:class_dontauditxperm ioctl { 0x1000 };
user user0 roles object_r level s0 range s0 - s0;
sid kernel user0:object_r:type0:s0 - s0
sid security user0:object_r:type0:s0
sid unlabeled user0:object_r:type0:s0
sid file user0:object_r:type0:s0
