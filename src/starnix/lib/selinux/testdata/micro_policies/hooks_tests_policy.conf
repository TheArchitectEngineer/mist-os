# handle_unknown deny
class process
class file
class dir
class filesystem
class blk_file
class chr_file
class lnk_file
class fifo_file
class sock_file
sid kernel
sid security
sid unlabeled
sid fs
sid file
sid file_labels
sid init
sid any_socket
sid port
sid netif
sid netmsg
sid node
sid igmp_packet
sid icmp_socket
sid tcp_socket
sid sysctl_modprobe
sid sysctl
sid sysctl_fs
sid sysctl_kernel
sid sysctl_net
sid sysctl_net_unix
sid sysctl_vm
sid sysctl_dev
sid kmod
sid policy
sid scmp_packet
sid devnull
common file { create open relabelfrom relabelto }
class dir inherits file { search add_name }
class process { fork transition getsched setsched getpgid setpgid sigchld sigkill sigstop signal ptrace getsession setexec setfscreate setrlimit getrlimit setcurrent dyntransition }
class file inherits file { execute_no_trans entrypoint }
class filesystem { associate }
sensitivity s0;
dominance { s0 }
category c0;
level s0:c0;
mlsconstrain process { fork } l1 == l2;
type exec_no_trans_source_t;
type exec_transition_denied_target_t;
type exec_transition_source_t;
type exec_transition_target_t;
type executable_file_no_trans_t;
type executable_file_trans_no_entrypoint_t;
type executable_file_trans_t;
type fork_no_t;
type fork_yes_t;
type kernel_t;
type security_t;
type unlabeled_t;
type unlabeled_file_t;
type tmpfs_t;
type tmpfs_file_t;
type sockfs_t;
type test_valid_t;
type test_different_valid_t;
type test_getpgid_no_t;
type test_getpgid_target_t;
type test_getpgid_yes_t;
type test_getsched_no_t;
type test_getsched_target_t;
type test_getsched_yes_t;
type test_kill_sigchld_t;
type test_kill_sigkill_t;
type test_kill_signal_t;
type test_kill_sigstop_t;
type test_kill_target_t;
type test_ptrace_traced_t;
type test_ptrace_tracer_no_t;
type test_ptrace_tracer_yes_t;
type test_setpgid_no_t;
type test_setpgid_target_t;
type test_setpgid_yes_t;
type test_setsched_no_t;
type test_setsched_target_t;
type test_setsched_yes_t;
type test_getsid_target_t;
type test_getsid_yes_t;
type test_getsid_no_t;
type test_socket_create_t;

# When the kernel/init process creates a file in "tmpfs", transition to
# a "tmpfs_file_t" domain.
type_transition kernel_t tmpfs_t:file tmpfs_file_t;
type_transition kernel_t tmpfs_t:dir tmpfs_file_t;

allow exec_no_trans_source_t executable_file_no_trans_t:file { execute_no_trans };
allow exec_transition_denied_target_t executable_file_trans_t:file { entrypoint };
allow exec_transition_source_t exec_transition_target_t:process { transition };
allow exec_transition_target_t executable_file_trans_t:file { entrypoint };
allow fork_yes_t self:process { fork };
allow test_getpgid_yes_t test_getpgid_target_t:process { getpgid };
allow test_getsched_yes_t test_getsched_target_t:process { getsched };
allow test_kill_sigchld_t test_kill_target_t:process { sigchld };
allow test_kill_sigkill_t test_kill_target_t:process { sigkill };
allow test_kill_signal_t test_kill_target_t:process { signal };
allow test_kill_sigstop_t test_kill_target_t:process { sigstop };
allow test_ptrace_tracer_yes_t test_ptrace_traced_t:process { ptrace };
allow test_setpgid_yes_t test_setpgid_target_t:process { setpgid };
allow test_setsched_yes_t test_setsched_target_t:process { setsched };
allow test_getsid_yes_t test_getsid_target_t:process { getsession };
allow kernel_t self:process { setexec setfscreate setcurrent };
allow kernel_t test_valid_t:process { dyntransition };

# Allow the kernel/init task to relabel files from the initial "tmpfs_file_t"
# to the valid test types.
allow kernel_t tmpfs_file_t:file { relabelfrom };
allow kernel_t test_valid_t:file { relabelto relabelfrom };
allow kernel_t test_different_valid_t:file { relabelto };

# Allow files in "tmpfs" to be labeled with the various test file types.
allow test_valid_t tmpfs_t:filesystem { associate };
allow test_different_valid_t tmpfs_t:filesystem { associate };
allow executable_file_no_trans_t tmpfs_t:filesystem { associate };
allow executable_file_trans_no_entrypoint_t tmpfs_t:filesystem { associate };
allow executable_file_trans_t tmpfs_t:filesystem { associate };
allow tmpfs_file_t tmpfs_t:filesystem { associate };

# Allow the kernel to create files with various test labels, directly.
allow kernel_t executable_file_no_trans_t:file { create };
allow kernel_t executable_file_trans_no_entrypoint_t:file { create };
allow kernel_t executable_file_trans_t:file { create };
allow kernel_t test_valid_t:file { create };

# Allow the kernel to modify "tmpfs_t" and "tmpfs_file_t" directories, e.g. to create files.
allow kernel_t tmpfs_file_t:file { create };
allow kernel_t tmpfs_file_t:dir { search };
allow kernel_t tmpfs_t:dir { search add_name };

allow test_valid_t self:process { setcurrent };
allow test_valid_t test_different_valid_t:process { dyntransition };

user u roles object_r level s0 range s0 - s0:c0;
sid kernel u:object_r:kernel_t:s0 - s0
sid security u:object_r:security_t:s0
sid unlabeled u:object_r:unlabeled_t:s0
sid file u:object_r:unlabeled_file_t:s0

# Apply fs_use_xattr to the test filesystem, which is "tmpfs".
# This allows some xattr hook tests to clear the label cached in-memory,
# and re-initialize the node to refresh the cached label from the xattr.
# Type transition will cause new files to be labeled as "tmpfs_file_t".
fs_use_xattr tmpfs u:object_r:tmpfs_t:s0 - s0;
fs_use_task sockfs u:object_r:sockfs_t:s0 - s0;
