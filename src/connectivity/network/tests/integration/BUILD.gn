# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import(
    "//src/lib/testing/expectation/fuchsia_test_component_with_expectations.gni")
import(
    "//src/lib/testing/expectation/fuchsia_test_with_expectations_package.gni")

tests = [
  {
    label = "sys"
    package_deps = [ "//src/sys/stash:stash_secure_v2" ]
  },
  {
    label = "device"
  },
  {
    label = "bridge"
    err_logs = true
  },
  {
    label = "dhcp"
    err_logs = true
    package_deps = [
      "//src/connectivity/network/dhcpv4/client/bindings:component",
      "//src/connectivity/network/dhcpv4/server:component",
      "//src/lib/fake-clock/svc",
      "//src/sys/stash:stash_secure_v2",
    ]
  },
  {
    label = "dhcp-client"
    err_logs = true
    package_deps = [
      "//src/connectivity/network/dhcpv4/client/bindings:component",
      "//src/connectivity/network/dhcpv4/server:component",
    ]
  },
  {
    label = "dns"
    err_logs = true
    package_deps = [
      "//src/connectivity/network/dhcpv4/client/bindings:component",
      "//src/connectivity/network/dhcpv4/server:component",
      "//src/connectivity/network/dhcpv6/client:component",
      "//src/connectivity/network/dns:component_with_fake_time",
      "//src/connectivity/policy/netcfg:component-advanced",
      "//src/connectivity/policy/netcfg:component-basic",
      "//src/connectivity/policy/tests/integration:netcfg-netemul-configs",
      "//src/lib/fake-clock/svc",
      "//src/sys/stash:stash_secure_v2",
    ]
  },
  {
    label = "fidl"
    err_logs = true
  },
  {
    label = "forwarding"
    err_logs = true
  },
  {
    label = "ipv4"
  },
  {
    label = "ipv6"
    package_deps = [ "//src/sys/stash:stash_secure_v2" ]
  },
  {
    label = "power"
    package_deps = [
      "//src/power/broker:component",
      "//src/power/system-activity-governor/fake:component",
      "//src/power/testing/fake-suspend",
    ]
    subpackages =
        [ "//src/power/system-activity-governor:config-use-suspender" ]
  },
  {
    label = "product-flow"
    err_logs = true
    package_deps = [
      "//src/connectivity/network/dhcpv4/server:component",
      "//src/connectivity/network/dns:component_with_fake_time",
      "//src/lib/fake-clock/svc",
      "//src/sys/stash:stash_secure_v2",
    ]
  },
  {
    label = "socket"
    err_logs = true
  },
  {
    label = "multicast-forwarding"
    err_logs = true
    long = true
  },
]

common_package_deps = [
  # Expectation comparer used by all tests.
  "//src/lib/testing/expectation:expectation_comparer",

  # netemul-sandbox is used to create hermetic test realms.
  "//src/connectivity/network/testing/netemul/service:netemul-sandbox",

  # netstack3 is commonly under test.
  "//src/connectivity/network/netstack3:component-debug",
  "//src/connectivity/network/netstack3:component-for-tests",
]

# RISC-V on Fuchsia does not support Golang.
if (target_cpu != "riscv64") {
  # netstack2 is commonly under test.
  common_package_deps += [
    "//src/connectivity/network/netstack:component",
    "//src/connectivity/network/netstack:component-debug",
    "//src/connectivity/network/netstack:component-with-fast-udp-debug",
  ]
}

all_test_packages = []

foreach(test, tests) {
  _err_logs = false
  _long = false
  if (defined(test.err_logs)) {
    _err_logs = test.err_logs
  }
  if (defined(test.long)) {
    # NB: Should be easy enough to support, but there was no need when the last
    # refactor happened.
    assert(_err_logs, "long test without error logs not supported")
    _long = test.long
  }
  _label = test.label

  # Required for list reassignment.
  _package_deps = []
  _package_deps += common_package_deps
  if (defined(test.package_deps)) {
    _package_deps += test.package_deps
  }
  _subpackages = []
  if (defined(test.subpackages)) {
    _subpackages += test.subpackages
  }
  _name = "netstack-${_label}-integration-test"

  _component_label = "${_name}"

  if (!_err_logs) {
    _package_label = "${_name}_pkg"

    fuchsia_test_component_with_expectations(_component_label) {
      component_name = _name
      expectations = "expects/${_name}.json5"
      manifest = "meta/${_name}.cml"
      deps = [ test.label ]
    }

    fuchsia_test_package(_package_label) {
      package_name = _name
      test_components = [ ":${_component_label}" ]
      deps = _package_deps
      subpackages = _subpackages
    }

    all_test_packages += [ ":${_package_label}" ]
  } else {
    fuchsia_test_component(_component_label) {
      component_name = _name
      manifest = "meta/${_name}.cml"
      deps = [ test.label ]
    }

    _no_err_logs_package_name = "${_name}-no-err-logs"
    fuchsia_test_with_expectations_package(_no_err_logs_package_name) {
      test_components = [ ":${_component_label}" ]
      expectations = "expects/${_name}.json5"
      treatment_of_cases_with_error_logs = "SKIP_CASES_WITH_ERROR_LOGS"
      deps = _package_deps
      subpackages = _subpackages
      if (_long) {
        test_specs = {
          # Longer timeout to reduce flake (https://fxbug.dev/42055260)
          timeout_secs = 720
        }
      }
    }
    _with_err_logs_package_name = "${_name}-with-err-logs"
    fuchsia_test_with_expectations_package(_with_err_logs_package_name) {
      test_components = [ ":${_component_label}" ]
      expectations = "expects/${_name}.json5"
      treatment_of_cases_with_error_logs = "RUN_ONLY_CASES_WITH_ERROR_LOGS"
      deps = _package_deps
      subpackages = _subpackages
      test_specs = {
        log_settings = {
          max_severity = "ERROR"
        }
        if (_long) {
          # Longer timeout to reduce flake (https://fxbug.dev/42055260)
          timeout_secs = 720
        }
      }
    }

    # TODO(https://fxbug.dev/42055260): Re-enable these tests when they pass
    # in the coverage builders.
    _skip = _long && is_coverage
    if (!_skip) {
      all_test_packages += [
        ":${_no_err_logs_package_name}",
        ":${_with_err_logs_package_name}",
      ]
    }
  }
}

# We keep tests that involve the virtualization stack (and especially guest
# images) restricted to a separate builder.  See https://fxbug.dev/42073933 for
# more details.
group("tests-involving-guests") {
  testonly = true
  deps = [ "guest:netstack-guest-integration-tests" ]
}

group("tests") {
  testonly = true

  # See comment above about tests-involving-guests
  assert_no_deps = [ "guest:netstack-guest-integration-tests" ]
  deps = [
           "guest:build-only",
           "inspect:tests",
           "macros:tests",
         ] + all_test_packages
}
