# Copyright 2025 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/rust/rustc_library.gni")
import("bssl-sys/opensslconf.gni")

boringssl_root = "//third_party/boringssl/src"
bssl_sys_dir = "${boringssl_root}/rust/bssl-sys"
bssl_sys_src = "${bssl_sys_dir}/src"
bssl_crypto_dir = "${boringssl_root}/rust/bssl-crypto"

# Defaults to a shared libboringssl for Fuchsia and a static for host.
group("bssl-sys") {
  if (is_fuchsia) {
    public_deps = [ ":bssl-sys.shared" ]
  } else if (is_host) {
    public_deps = [ ":bssl-sys.static" ]
  }
}

group("bssl-sys.shared") {
  public_deps = [
    ":bssl-sys.lib",
    "//third_party/boringssl:boringssl-shared",
  ]
}

# Avoids a dynamic dependency on libssl, which some clients do not need.
group("bssl-sys.shared-no-ssl") {
  public_deps = [
    ":bssl-sys.lib",
    "//third_party/boringssl:crypto-shared",
  ]
}

group("bssl-sys.static") {
  public_deps = [
    ":bssl-sys.lib",
    "//third_party/boringssl:boringssl-static",
  ]
}

# Defaults to a shared libboringssl for Fuchsia and a static for host.
group("bssl-crypto") {
  if (is_fuchsia) {
    public_deps = [ ":bssl-crypto.shared" ]
  } else if (is_host) {
    public_deps = [ ":bssl-crypto.static" ]
  }
}

group("bssl-crypto.shared") {
  public_deps = [
    ":bssl-crypto.lib",
    "//third_party/boringssl:boringssl-shared",
  ]
}

group("bssl-crypto.static") {
  public_deps = [
    ":bssl-crypto.lib",
    "//third_party/boringssl:boringssl-static",
  ]
}

# These cfg values encode the openssl configuration settings made in boringssl,
# which need to be communicated to any dependent openssl rust bindings.
config("osslconf") {
  rustflags = []
  foreach(define, opensslconf_defines) {
    rustflags += [ "--cfg=osslconf=\"${define}\"" ]
  }
}

group("tests") {
  testonly = true
  public_deps = [ ":bssl-crypto.lib_test($host_toolchain)" ]
}

rustc_library("bssl-sys.lib") {
  # Dependents should use the above targets that also carry the required
  # boringssl and "rust-wrapper" dependencies, along with the choice of
  # boringssl link flavor.
  visibility = [ ":*" ]

  name = "bssl-sys"
  edition = "2021"

  source_root = "${bssl_sys_src}/lib.rs"
  sources = [ source_root ]
  inputs = [ "bssl-sys/bindgen.rs" ]
  rustenv = [ "BINDGEN_RS_FILE=" + rebase_path(inputs[0], bssl_sys_src) ]

  non_rust_deps = [ ":rust-wrapper" ]
  configs += [ ":bssl-sys.config" ]

  # Since bindgen.rs is being include!-ed into the crate root (which we want
  # to remain purely mirrored code), we don't have a chance to annotate
  # `#![allow(clippy::missing_safety_doc)]`, etc. Accordingly we have no choice
  # but to skip the check altogether. There is barely anything in lib.rs apart
  # from the bindgen output anyway.
  disable_clippy = true
}

config("bssl-sys.config") {
  visibility = [ ":*" ]
  rustflags = [
    # This controls whether bindgen.rs is included via the BINDGEN_RS_FILE
    # environment variable.
    "--cfg=bindgen_rs_file",

    # Needed to expose CBS_init() and CBS_len(), which is currently a bit funny
    # due to these being inline definitions included in wrapper.h that bindgen
    # ignores.
    "--cfg=unsupported_inline_wrappers",

    # The boringssl API uses uint128_t's and without this rustc would complain
    # that u128 in the bindings are not "FFI-safe".
    "-Aimproper_ctypes",
  ]
}

# This provides the implementations of some error-handing utilities declared in
# the bindings and used in the crate.
static_library("rust-wrapper") {
  visibility = [ ":*" ]
  include_dirs = [ "${boringssl_root}/include" ]
  sources = [ "${bssl_sys_dir}/rust_wrapper.c" ]
}

rustc_library("bssl-crypto.lib") {
  # As with bssl-sys, dependents should use the above targets that also carry
  # the required boringssl dependency (with desired link flavor).
  visibility = [ ":*" ]

  name = "bssl-crypto"
  edition = "2021"

  source_root = "${bssl_crypto_dir}/src/lib.rs"

  # For the sake of less painful boringssl rolls.
  enforce_source_listing = false

  with_unit_tests = true

  deps = [ ":bssl-sys.lib" ]
  configs += [ ":bssl-crypto.allows" ]

  if (is_host) {
    test_deps = [ "//third_party/boringssl:boringssl-static" ]
  }

  # We don't maintain this code.
  disable_clippy = true
}

config("bssl-crypto.allows") {
  visibility = [ ":*" ]
  rustflags = [
    "-Adead_code",
    "-Aelided_lifetimes_in_paths",
    "-Aunused_extern_crates",
  ]
}
