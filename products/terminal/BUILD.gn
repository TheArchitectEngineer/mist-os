# Copyright 2022 The Fuchsia Authors.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bazel/assembly/bazel_product_bundle.gni")
import("//build/bazel/assembly/bazel_product_configuration.gni")
import("//products/terminal/product_bundles.gni")

assert(
    is_fuchsia,
    "Product definitions and assemblies should only be defined in the fuchsia toolchain")

common_bazel_inputs = [
  "//src/fonts/asset_providers:open-fonts-collection-bazel",
  "//build/images/flash:esp.bazel_input",

  # Cache packages.
  "//src/ui/bin/terminal:terminal.bazel_input",
  "//src/ui/bin/tiles-session:tiles-session.bazel_input",
  "//src/graphics/display/testing/fake-coordinator-connector:fake-coordinator-connector.bazel_input",
  "//src/diagnostics/validator/inspect:validator.bazel_input",
  "//src/tests/fidl/dynsuite/client_suite/harness:harness.bazel_input",
  "//src/tests/fidl/dynsuite/server_suite/harness:harness.bazel_input",
  "//src/developer/build_info/testing:fake-build-info.bazel_input",
  "//src/diagnostics/archivist:archivist-for-embedding.bazel_input",
  "//src/testing/fidl/intl_property_manager:intl_property_manager.bazel_input",
  "//src/fonts:fonts_hermetic_for_test.bazel_input",
  "//src/fonts:fonts_configurable_for_test.bazel_input",
  "//src/ui/testing/test_ui_stack:flatland-scene-manager-test-ui-stack.bazel_input",
  "//src/ui/testing/test_ui_stack:test-ui-stack.bazel_input",
  "//src/tests/fidl/compatibility:fidl-compatibility-array-harness_pkg.bazel_input",
  "//src/tests/fidl/compatibility:fidl-compatibility-minimal-harness_pkg.bazel_input",
  "//src/tests/fidl/compatibility:fidl-compatibility-struct-harness_pkg.bazel_input",
  "//src/tests/fidl/compatibility:fidl-compatibility-table-harness_pkg.bazel_input",
  "//src/tests/fidl/compatibility:fidl-compatibility-union-harness_pkg.bazel_input",
  "//src/tests/fidl/compatibility:fidl-compatibility-vector-harness_pkg.bazel_input",
  "//src/tests/fidl/compatibility/cpp:cpp.bazel_input",
  "//src/tests/fidl/compatibility/hlcpp:hlcpp.bazel_input",
  "//src/tests/fidl/compatibility/llcpp:llcpp.bazel_input",
  "//src/tests/fidl/compatibility/go:go.bazel_input",
  "//src/tests/fidl/compatibility/rust:rust.bazel_input",
]

group("products") {
  testonly = true
  deps = []
  if (current_cpu == "x64") {
    deps += [ ":product_bundle.x64_product_config" ]
  } else if (current_cpu == "arm64") {
    deps += [ ":product_bundle.arm64_product_config" ]
  }
}

bazel_product_configuration("terminal_product") {
  testonly = true
  name = "terminal"
  bazel_product_configuration_target = ":product_config"
  deps = common_bazel_inputs
}

foreach(_pb, TERMINAL_PRODUCT_BUNDLES) {
  bazel_product_bundle(_pb.gn_target_name) {
    forward_variables_from(_pb, "*")
  }
}
