# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

load("@fuchsia_build_info//:args.bzl", "authorized_ssh_keys_label")
load(
    "@rules_fuchsia//fuchsia:assembly.bzl",
    "ARCH",
    "BUILD_TYPES",
    "INPUT_DEVICE_TYPE",
    "fuchsia_elf_sizes",
    "fuchsia_product",
    "fuchsia_product_bundle",
    "fuchsia_product_configuration",
    "fuchsia_virtual_device",
)
load("//build/info:info.bzl", "DEFAULT_PRODUCT_BUILD_INFO")

package(default_visibility = ["//visibility:public"])

_PRODUCT_CONFIG_BASE_JSON = {
    "platform": {
        "build_type": BUILD_TYPES.ENG,
        "bluetooth": {
            "type": "standard",
            "snoop": "lazy",
        },
        "development_support": {
            "include_sl4f": True,
            "authorized_ssh_keys_path": "LABEL(%s)" % authorized_ssh_keys_label if authorized_ssh_keys_label else None,
            "tools": {
                "audio": {
                    "driver_tools": True,
                    "full_stack_tools": True,
                },
                "connectivity": {
                    "enable_networking": True,
                    "enable_wlan": True,
                    "enable_thread": True,
                },
            },
        },
        "driver_framework": {
            "use_rust_driver_host": True,
        },
        "fonts": {
            "font_collection": "open-fonts-collection",
        },
        "media": {
            "audio": {
                "full_stack": {},
            },
            "enable_codecs": True,
            "enable_sessions": True,
        },
        "session": {
            "enabled": True,
            # Avoid impacting existing terminal users like chromium tests.
            "autolaunch": False,
        },
        "storage": {
            "mutable_storage_garbage_collection": True,
        },
        "ui": {
            "enabled": True,
            "supported_input_devices": [
                INPUT_DEVICE_TYPE.BUTTON,
                INPUT_DEVICE_TYPE.TOUCHSCREEN,
            ],
            "with_synthetic_device_support": True,
        },
    },
    "product": {
        "build_info": DEFAULT_PRODUCT_BUILD_INFO,
        "session": {
            "url": "fuchsia-pkg://fuchsia.com/tiles-session#meta/tiles-session.cm",
        },
    },
}

_PRODUCT_BASE_PACKAGES = [
    "//src/fonts/asset_providers:open-fonts-collection",
]

_PRODUCT_CACHE_PACKAGES = [
    "//src/ui/bin/terminal",
    "//src/ui/bin/tiles-session",
    # Used to mock out display hardware in UI integration tests.
    "//src/graphics/display/testing/fake-coordinator-connector",
    # Add validator package for use in tests.
    # TODO(https://fxbug.dev/42077782): Remove once we support packages in the
    # SDK.
    "//src/diagnostics/validator/inspect:validator",
    # Add test validation packages for use in tests.
    # TODO(https://fxbug.dev/42077782): Remove once we support packages in the
    # SDK and we want to put this in the SDK.
    "//src/tests/fidl/dynsuite/client_suite/harness",
    "//src/tests/fidl/dynsuite/server_suite/harness",
    # Fake services needed by Chromium tests until subpackages are supported OOT
    # and fakes are provided with the SDK. See crbug.com/1326674.
    # TODO(crbug.com/1408597): Remove once the Chromium tests package the fakes.
    "//src/developer/build_info/testing:fake-build-info",
    # archivist-for-embedding is needed by
    # WebEngineIntegrationLoggingTest.SetJavaScriptLogLevel_DEBUG.
    # TODO(crbug.com/1451376): Move it to a peer group as appropriate.
    "//src/diagnostics/archivist:archivist-for-embedding",
    "//src/testing/fidl/intl_property_manager",
    # A font provider with built-in font file assets.
    # TODO(crbug.com/1408597): Once OOT fakes are available, this can be
    # turned into a hermetic component, or a subpackage.
    "//src/fonts:fonts_hermetic_for_test",
    # A font provider without built-in font file assets.
    "//src/fonts:fonts_configurable_for_test",
    # Add Test UI Stack for use in tests.
    # TODO(https://fxbug.dev/42056298): Remove once we migrate client usage to
    # subpackages.
    "//src/ui/testing/test_ui_stack:flatland-scene-manager-test-ui-stack",
    "//src/ui/testing/test_ui_stack:test-ui-stack",
    # Add FIDL compatibility test harneses for SDK customers to use until these
    # are in the SDK for subpackaging
    #
    # TODO(https://fxbug.dev/42077782): Remove once we support packages in the
    # SDK and we want to put this in the SDK.
    "//src/tests/fidl/compatibility:fidl-compatibility-array-harness_pkg",
    "//src/tests/fidl/compatibility:fidl-compatibility-minimal-harness_pkg",
    "//src/tests/fidl/compatibility:fidl-compatibility-struct-harness_pkg",
    "//src/tests/fidl/compatibility:fidl-compatibility-table-harness_pkg",
    "//src/tests/fidl/compatibility:fidl-compatibility-union-harness_pkg",
    "//src/tests/fidl/compatibility:fidl-compatibility-vector-harness_pkg",
    "//src/tests/fidl/compatibility/cpp",
    "//src/tests/fidl/compatibility/hlcpp",
    "//src/tests/fidl/compatibility/llcpp",
    "//src/tests/fidl/compatibility/go",
    "//src/tests/fidl/compatibility/rust",
]

fuchsia_product_configuration(
    name = "product_config",
    base_packages = _PRODUCT_BASE_PACKAGES,
    cache_packages = _PRODUCT_CACHE_PACKAGES,
    product_config_json = {
        "platform": _PRODUCT_CONFIG_BASE_JSON["platform"] | {
            "connectivity": {
                "network": {
                    "netstack_version": "netstack2",
                },
            },
        },
        "product": _PRODUCT_CONFIG_BASE_JSON["product"],
    },
)

# TODO(https://fxbug.dev/370543906): Remove this product once it's no longer
# needed.
fuchsia_product_configuration(
    name = "product_config_with_netstack2",
    base_packages = _PRODUCT_BASE_PACKAGES,
    cache_packages = _PRODUCT_CACHE_PACKAGES,
    product_config_json = {
        "platform": _PRODUCT_CONFIG_BASE_JSON["platform"] | {
            "connectivity": {
                "network": {
                    "netstack_version": "netstack2",
                },
            },
        },
        "product": _PRODUCT_CONFIG_BASE_JSON["product"],
    },
)

fuchsia_product(
    name = "image.x64",
    board_config = "//boards:x64",
    platform_artifacts = "//build/bazel/assembly/assembly_input_bundles:platform_eng",
    product_config = ":product_config",
)

fuchsia_elf_sizes(
    name = "elf_sizes.x64",
    product = ":image.x64",
)

fuchsia_product_bundle(
    name = "product_bundle.x64",
    default_virtual_device = "//build/bazel/assembly/virtual_devices:x64-emu-recommended",
    main = ":image.x64",
    partitions_config = "//build/bazel/assembly/partitions_configurations:x64",
    product_bundle_name = "terminal.x64",
    recovery = "//products/zedboot:x64",
    repository_keys = "//src/sys/pkg/repositories/devhost/keys",
    update_epoch = "1",
    update_version_file = "//build/info:version",
    virtual_devices = [
        "//build/bazel/assembly/virtual_devices:x64-emu-recommended",
        "//build/bazel/assembly/virtual_devices:x64-emu-min",
        "//build/bazel/assembly/virtual_devices:x64-emu-extra-large",
    ],
)

fuchsia_product(
    name = "image_with_netstack2.x64",
    board_config = "//boards:x64",
    platform_artifacts = "//build/bazel/assembly/assembly_input_bundles:platform_eng",
    product_config = ":product_config_with_netstack2",
)

fuchsia_elf_sizes(
    name = "elf_sizes_with_netstack2.x64",
    product = ":image_with_netstack2.x64",
)

fuchsia_product_bundle(
    name = "product_bundle_with_netstack2.x64",
    default_virtual_device = "//build/bazel/assembly/virtual_devices:x64-emu-recommended",
    main = ":image_with_netstack2.x64",
    partitions_config = "//build/bazel/assembly/partitions_configurations:x64",
    product_bundle_name = "terminal_with_netstack2.x64",
    recovery = "//products/zedboot:x64",
    repository_keys = "//src/sys/pkg/repositories/devhost/keys",
    update_epoch = "1",
    update_version_file = "//build/info:version",
    virtual_devices = [
        "//build/bazel/assembly/virtual_devices:x64-emu-recommended",
        "//build/bazel/assembly/virtual_devices:x64-emu-min",
        "//build/bazel/assembly/virtual_devices:x64-emu-extra-large",
    ],
)

fuchsia_product(
    name = "image.x64_reduced_perf_variation",
    board_config = "//boards:x64_reduced_perf_variation",
    platform_artifacts = "//build/bazel/assembly/assembly_input_bundles:platform_eng",
    product_config = ":product_config",
)

fuchsia_elf_sizes(
    name = "elf_sizes.x64_reduced_perf_variation",
    product = ":image.x64_reduced_perf_variation",
)

fuchsia_product_bundle(
    name = "product_bundle.x64_reduced_perf_variation",
    default_virtual_device = "//build/bazel/assembly/virtual_devices:x64-emu-recommended",
    main = ":image.x64_reduced_perf_variation",
    partitions_config = "//build/bazel/assembly/partitions_configurations:x64",
    product_bundle_name = "terminal.x64_reduced_perf_variation",
    recovery = "//products/zedboot:x64_reduced_perf_variation",
    repository_keys = "//src/sys/pkg/repositories/devhost/keys",
    update_epoch = "1",
    update_version_file = "//build/info:version",
    virtual_devices = [
        "//build/bazel/assembly/virtual_devices:x64-emu-recommended",
        "//build/bazel/assembly/virtual_devices:x64-emu-min",
        "//build/bazel/assembly/virtual_devices:x64-emu-extra-large",
    ],
)

fuchsia_product(
    name = "image_with_netstack2.x64_reduced_perf_variation",
    board_config = "//boards:x64_reduced_perf_variation",
    platform_artifacts = "//build/bazel/assembly/assembly_input_bundles:platform_eng",
    product_config = ":product_config_with_netstack2",
)

fuchsia_elf_sizes(
    name = "elf_sizes_with_netstack2.x64_reduced_perf_variation",
    product = ":image_with_netstack2.x64_reduced_perf_variation",
)

fuchsia_product_bundle(
    name = "product_bundle_with_netstack2.x64_reduced_perf_variation",
    default_virtual_device = "//build/bazel/assembly/virtual_devices:x64-emu-recommended",
    main = ":image_with_netstack2.x64_reduced_perf_variation",
    partitions_config = "//build/bazel/assembly/partitions_configurations:x64",
    product_bundle_name = "terminal.x64_reduced_perf_variation",
    recovery = "//products/zedboot:x64_reduced_perf_variation",
    repository_keys = "//src/sys/pkg/repositories/devhost/keys",
    update_epoch = "1",
    update_version_file = "//build/info:version",
    virtual_devices = [
        "//build/bazel/assembly/virtual_devices:x64-emu-recommended",
        "//build/bazel/assembly/virtual_devices:x64-emu-min",
        "//build/bazel/assembly/virtual_devices:x64-emu-extra-large",
    ],
)

fuchsia_product(
    name = "image.arm64",
    board_config = "//boards:arm64",
    platform_artifacts = "//build/bazel/assembly/assembly_input_bundles:platform_eng",
    product_config = ":product_config",
)

fuchsia_elf_sizes(
    name = "elf_sizes.arm64",
    product = ":image.arm64",
)

fuchsia_product_bundle(
    name = "product_bundle.arm64",
    default_virtual_device = "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
    main = ":image.arm64",
    partitions_config = "//build/bazel/assembly/partitions_configurations:arm64",
    product_bundle_name = "terminal.arm64",
    recovery = "//products/zedboot:arm64",
    repository_keys = "//src/sys/pkg/repositories/devhost/keys",
    update_epoch = "1",
    update_version_file = "//build/info:version",
    virtual_devices = [
        "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
        "//build/bazel/assembly/virtual_devices:arm64-emu-min",
        "//build/bazel/assembly/virtual_devices:arm64-emu-extra-large",
    ],
)

fuchsia_product(
    name = "image_with_netstack2.arm64",
    board_config = "//boards:arm64",
    platform_artifacts = "//build/bazel/assembly/assembly_input_bundles:platform_eng",
    product_config = ":product_config_with_netstack2",
)

fuchsia_elf_sizes(
    name = "elf_sizes_with_netstack2.arm64",
    product = ":image_with_netstack2.arm64",
)

fuchsia_product_bundle(
    name = "product_bundle_with_netstack2.arm64",
    default_virtual_device = "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
    main = ":image_with_netstack2.arm64",
    partitions_config = "//build/bazel/assembly/partitions_configurations:arm64",
    product_bundle_name = "terminal_with_netstack2.arm64",
    recovery = "//products/zedboot:arm64",
    repository_keys = "//src/sys/pkg/repositories/devhost/keys",
    update_epoch = "1",
    update_version_file = "//build/info:version",
    virtual_devices = [
        "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
        "//build/bazel/assembly/virtual_devices:arm64-emu-min",
        "//build/bazel/assembly/virtual_devices:arm64-emu-extra-large",
    ],
)

fuchsia_product(
    name = "image.qemu-arm64",
    board_config = "//boards:qemu-arm64",
    platform_artifacts = "//build/bazel/assembly/assembly_input_bundles:platform_eng",
    product_config = ":product_config",
)

fuchsia_elf_sizes(
    name = "elf_sizes.qemu-arm64",
    product = ":image.qemu-arm64",
)

fuchsia_product_bundle(
    name = "product_bundle.qemu-arm64",
    default_virtual_device = "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
    main = ":image.qemu-arm64",
    partitions_config = "//build/bazel/assembly/partitions_configurations:qemu-arm64",
    product_bundle_name = "terminal.qemu-arm64",
    recovery = "//products/zedboot:qemu-arm64",
    repository_keys = "//src/sys/pkg/repositories/devhost/keys",
    update_epoch = "1",
    update_version_file = "//build/info:version",
    virtual_devices = [
        "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
        "//build/bazel/assembly/virtual_devices:arm64-emu-min",
        "//build/bazel/assembly/virtual_devices:arm64-emu-extra-large",
    ],
)

fuchsia_product(
    name = "image_with_netstack2.qemu-arm64",
    board_config = "//boards:qemu-arm64",
    platform_artifacts = "//build/bazel/assembly/assembly_input_bundles:platform_eng",
    product_config = ":product_config_with_netstack2",
)

fuchsia_elf_sizes(
    name = "elf_sizes_with_netstack2.qemu-arm64",
    product = ":image_with_netstack2.qemu-arm64",
)

fuchsia_product_bundle(
    name = "product_bundle_with_netstack2.qemu-arm64",
    default_virtual_device = "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
    main = ":image_with_netstack2.qemu-arm64",
    partitions_config = "//build/bazel/assembly/partitions_configurations:qemu-arm64",
    product_bundle_name = "terminal_with_netstack2.qemu-arm64",
    recovery = "//products/zedboot:qemu-arm64",
    repository_keys = "//src/sys/pkg/repositories/devhost/keys",
    update_epoch = "1",
    update_version_file = "//build/info:version",
    virtual_devices = [
        "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
        "//build/bazel/assembly/virtual_devices:arm64-emu-min",
        "//build/bazel/assembly/virtual_devices:arm64-emu-extra-large",
    ],
)

fuchsia_product(
    name = "image.vim3",
    board_config = "//boards:vim3",
    platform_artifacts = "//build/bazel/assembly/assembly_input_bundles:platform_eng",
    product_config = ":product_config",
)

fuchsia_elf_sizes(
    name = "elf_sizes.vim3",
    product = ":image.vim3",
)

fuchsia_product_bundle(
    name = "product_bundle.vim3",
    default_virtual_device = "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
    main = ":image.vim3",
    partitions_config = "//build/bazel/assembly/partitions_configurations:vim3",
    product_bundle_name = "terminal.vim3",
    recovery = "//products/zedboot:vim3",
    repository_keys = "//src/sys/pkg/repositories/devhost/keys",
    update_epoch = "1",
    update_version_file = "//build/info:version",
    virtual_devices = [
        "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
        "//build/bazel/assembly/virtual_devices:arm64-emu-min",
        "//build/bazel/assembly/virtual_devices:arm64-emu-extra-large",
    ],
)

fuchsia_product(
    name = "image_with_netstack2.vim3",
    board_config = "//boards:vim3",
    platform_artifacts = "//build/bazel/assembly/assembly_input_bundles:platform_eng",
    product_config = ":product_config_with_netstack2",
)

fuchsia_elf_sizes(
    name = "elf_sizes_with_netstack2.vim3",
    product = ":image_with_netstack2.vim3",
)

fuchsia_product_bundle(
    name = "product_bundle_with_netstack2.vim3",
    default_virtual_device = "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
    main = ":image_with_netstack2.vim3",
    partitions_config = "//build/bazel/assembly/partitions_configurations:vim3",
    product_bundle_name = "terminal_with_netstack2.vim3",
    recovery = "//products/zedboot:vim3",
    repository_keys = "//src/sys/pkg/repositories/devhost/keys",
    update_epoch = "1",
    update_version_file = "//build/info:version",
    virtual_devices = [
        "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
        "//build/bazel/assembly/virtual_devices:arm64-emu-min",
        "//build/bazel/assembly/virtual_devices:arm64-emu-extra-large",
    ],
)

fuchsia_product_configuration(
    name = "product_config_reduced_perf_variation",
    base_packages = _PRODUCT_BASE_PACKAGES,
    cache_packages = _PRODUCT_CACHE_PACKAGES,
    product_config_json = {
        "platform": _PRODUCT_CONFIG_BASE_JSON["platform"] | {
            "kernel": {
                "page_scanner": {
                    "disable_at_boot": True,
                    "zero_page_scans_per_second": "no_scans",
                    "disable_eviction": True,
                },
            },
        },
        "product": _PRODUCT_CONFIG_BASE_JSON["product"],
    },
)

fuchsia_product(
    name = "image.vim3_reduced_perf_variation",
    board_config = "//boards:vim3_reduced_perf_variation",
    platform_artifacts = "//build/bazel/assembly/assembly_input_bundles:platform_eng",
    product_config = ":product_config_reduced_perf_variation",
)

fuchsia_elf_sizes(
    name = "elf_sizes.vim3_reduced_perf_variation",
    product = ":image.vim3_reduced_perf_variation",
)

fuchsia_product_bundle(
    name = "product_bundle.vim3_reduced_perf_variation",
    default_virtual_device = "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
    main = ":image.vim3_reduced_perf_variation",
    partitions_config = "//build/bazel/assembly/partitions_configurations:vim3",
    product_bundle_name = "terminal.vim3_reduced_perf_variation",
    recovery = "//products/zedboot:vim3_reduced_perf_variation",
    repository_keys = "//src/sys/pkg/repositories/devhost/keys",
    update_epoch = "1",
    update_version_file = "//build/info:version",
    virtual_devices = [
        "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
        "//build/bazel/assembly/virtual_devices:arm64-emu-min",
        "//build/bazel/assembly/virtual_devices:arm64-emu-extra-large",
    ],
)

# TODO(https://fxbug.dev/370543906): Remove this product once it's no longer
# needed.
fuchsia_product_configuration(
    name = "product_config_with_netstack2_reduced_perf_variation",
    base_packages = _PRODUCT_BASE_PACKAGES,
    cache_packages = _PRODUCT_CACHE_PACKAGES,
    product_config_json = {
        "platform": _PRODUCT_CONFIG_BASE_JSON["platform"] | {
            "connectivity": {
                "network": {
                    "netstack_version": "netstack2",
                },
            },
            "kernel": {
                "page_scanner": {
                    "disable_at_boot": True,
                    "zero_page_scans_per_second": "no_scans",
                    "disable_eviction": True,
                },
            },
        },
        "product": _PRODUCT_CONFIG_BASE_JSON["product"],
    },
)

fuchsia_product(
    name = "image_with_netstack2.vim3_reduced_perf_variation",
    board_config = "//boards:vim3_reduced_perf_variation",
    platform_artifacts = "//build/bazel/assembly/assembly_input_bundles:platform_eng",
    product_config = ":product_config_with_netstack2_reduced_perf_variation",
)

fuchsia_elf_sizes(
    name = "elf_sizes_with_netstack2.vim3_reduced_perf_variation",
    product = ":image_with_netstack2.vim3_reduced_perf_variation",
)

fuchsia_product_bundle(
    name = "product_bundle_with_netstack2.vim3_reduced_perf_variation",
    default_virtual_device = "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
    main = ":image_with_netstack2.vim3_reduced_perf_variation",
    partitions_config = "//build/bazel/assembly/partitions_configurations:vim3",
    product_bundle_name = "terminal_with_netstack2.vim3_reduced_perf_variation",
    recovery = "//products/zedboot:vim3_reduced_perf_variation",
    repository_keys = "//src/sys/pkg/repositories/devhost/keys",
    update_epoch = "1",
    update_version_file = "//build/info:version",
    virtual_devices = [
        "//build/bazel/assembly/virtual_devices:arm64-emu-recommended",
        "//build/bazel/assembly/virtual_devices:arm64-emu-min",
        "//build/bazel/assembly/virtual_devices:arm64-emu-extra-large",
    ],
)
