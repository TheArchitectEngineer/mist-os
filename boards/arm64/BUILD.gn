# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/board_configuration.gni")
import("//build/assembly/board_input_bundle.gni")
import("//build/board.gni")
import("//build/info/info.gni")
import("//zircon/tools/zbi/zbi_item.gni")

assert(current_toolchain == default_toolchain,
       "The arm64 board can only be defined in the default toolchain.")
assert(current_cpu == "arm64",
       "The arm64 board can only be defined in an arm64 toolchain.")

board_configuration("arm64") {
  testonly = true
  partitions_config = "//boards/partitions:arm64"
  provided_features = [
    "fuchsia::bus_kpci",
    "fuchsia::driver_framework_v2_support",
    "fuchsia::paravirtualization",
    "fuchsia::real_time_clock",
    "fuchsia::xhci",
  ]

  input_bundles = [
    ":main_bundle",
    "//boards/emulation/virtio",
  ]

  hardware_info = {
    name = "qemu-arm64"
    product_id = 1
    vendor_id = 1
    revision = 1
  }

  filesystems = {
    vbmeta = {
      key = "//third_party/android/platform/external/avb/test/data/testkey_atx_psk.pem"
      key_metadata = "//third_party/android/platform/external/avb/test/data/atx_metadata.bin"
    }
    fvm = {
      blobfs = {
        size_checker_maximum_bytes = 5216665600
      }
      sparse_output = {
      }
    }
    fxfs = {
      size_checker_maximum_bytes = 5216665600
    }
  }
  version = build_info_version

  zbi_extra_items = [ ":qemu_psci_cpu_suspend_states" ]
}

board_input_bundle("main_bundle") {
  configuration = {
    power_manager =
        "//src/power/power-manager/node_config/base_node_config.json5"
  }
  base_packages = [ "//src/graphics/bin/vulkan_loader" ]

  drivers = [
    {
      package_target = "//src/devices/block/drivers/nvme:package"
      package_set = "bootfs"
      driver_components = [ "meta/nvme.cm" ]
    },
  ]

  # Additional drivers to support running as a virtualization guest.
  drivers += [
    {
      package_target = "//src/devices/block/drivers/ahci:package"
      package_set = "bootfs"
      driver_components = [ "meta/ahci.cm" ]
    },
    {
      package_target = "//src/devices/board/drivers/qemu-arm64:package"
      package_set = "bootfs"
      driver_components = [ "meta/qemu-arm64.cm" ]
    },
    {
      package_target = "//src/devices/rtc/drivers/pl031-rtc:package"
      package_set = "bootfs"
      driver_components = [ "meta/pl031-rtc.cm" ]
    },
  ]
  version = build_info_version
}

board_input_bundle("bus_pci") {
  drivers = [
    {
      package_target = "//src/devices/bus/drivers/pci:bus-pci-package"
      package_set = "bootfs"
      driver_components = [ "meta/bus-pci.cm" ]
    },
  ]
  version = build_info_version
}

board_input_bundle("bus_kpci") {
  drivers = [
    {
      package_target = "//src/devices/bus/drivers/pci:bus-kpci-package"
      package_set = "bootfs"
      driver_components = [ "meta/bus-kpci.cm" ]
    },
  ]
  version = build_info_version
}

# Special PSCI_CPU_SUSPEND states for QEMU.
#
# Both in TCG and KVM mode, suspend states are accepted, and treated as a `retention` state, meaning
# core state is not lost, and the core isn't powered down. The core enters WFI internally.
zbi_item("qemu_psci_cpu_suspend_states") {
  type = "ZBI_TYPE_KERNEL_DRIVER"
  extra = "ZBI_KERNEL_DRIVER_ARM_PSCI_CPU_SUSPEND"
  contents = [
    # PSCI CPU_SUSPEND power state with retention.
    {
      id = 0

      # QEMU only supports the "Original format" (section 5.4.2.1 of DEN0022F.b), where bit 16 is
      # the StateType and bits 15:0 are the StateID.
      #
      # Since QEMU does not support powerdown states, we use StateType=0 (meaning
      # standby/retention).  For the StateID field, QEMU doesn't care so we simply use 1, which if
      # QEMU were following the recommended encoding would mean core is last in the core power
      # level, system level is run, cluster level is run, core level is standby.
      power_state = 1

      # Nothing special.
      flags = 0
    },
  ]
}
