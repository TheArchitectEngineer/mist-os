#!/usr/bin/env bash
# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#### CATEGORY=Other
### Flash Fuchsia onto a Kola board that has an unmodified bootloader.

## usage: fx flash-kola

# Bash strict mode.
set -eo pipefail

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"/../lib/vars.sh || exit $?
fx-config-read

# Use the in-tree fastboot.
readonly FASTBOOT="${FUCHSIA_DIR}/prebuilt/third_party/fastboot/fastboot"


# TODO(b/373727276): Change to use `ffx target flash` instead.
FLASH_SOURCE="$(fx-command-run get-flash-source)"
PRODUCT_BUNDLE="$(fx get-build-dir)/${FLASH_SOURCE#product-bundle:}"
ARTIFACTS="${PRODUCT_BUNDLE}/product_bundle.json"
DTBO_PATH="${PRODUCT_BUNDLE}/$(fx-command-run jq --raw-output '.system_a[] | select(.name=="dtbo-a") | .path' "${ARTIFACTS}")"
FVM_PATH="${PRODUCT_BUNDLE}/$(fx-command-run jq --raw-output '.system_a[] | select(.name=="fxfs.fastboot") | .path' "${ARTIFACTS}")"
ZBI_PATH="${PRODUCT_BUNDLE}/$(fx-command-run jq --raw-output '.system_a[] | select(.name=="zircon-a") | .path' "${ARTIFACTS}")"

readonly FVM_PATH ZBI_PATH DTBO_PATH

if [[ -z $ANDROID_SERIAL ]]; then
  readonly DEVICE_COUNT=$(${FASTBOOT} devices | awk NF | wc -l)
  if [[ ${DEVICE_COUNT} -gt 1 ]]; then
    fx-error "Detected ${DEVICE_COUNT} devices in fastboot mode."
    fx-error "Make sure there is only one device or set ANDROID_SERIAL."
    exit 1
  fi
fi

${FASTBOOT} flash boot_a "$ZBI_PATH"
${FASTBOOT} flash boot_b "$ZBI_PATH"
${FASTBOOT} flash dtbo_a "$DTBO_PATH"
${FASTBOOT} flash dtbo_b "$DTBO_PATH"

# Reboot back into the bootloader.
# Some builds put firmware in the boot image, in which case we reboot here to
# pick up the new firmware we just flashed. For builds that don't put firmware
# in boot, this is still fine and just triggers a reboot now rather than at the
# end of flashing.
fx-info "Rebooting to bootloader"
${FASTBOOT} reboot bootloader
# Pause to make sure fastboot actually drops the device; sometimes without this
# the next fastboot command will execute before the host realizes the device is
# gone which causes the command to fail.
sleep 4

# Attempt to flash SSH keys. This is only supported on devices running custom
# Fuchsia firmware, so if it doesn't work just log a warning.
function push_ssh_keys {
  AUTH_KEYS="$(get-ssh-authkeys)" || {
    fx-warn "Failed to locate host SSH keys"
    return 1
  }

  ${FASTBOOT} stage "${AUTH_KEYS}" oem add-staged-bootloader-file ssh.authorized_keys || {
    fx-warn "Failed to push SSH keys to fastboot"
    fx-warn "Device bootloader may not support it"
    return 1
  }
}

if push_ssh_keys; then
  fx-info "Successfully provisioned SSH keys via bootloader"
else
  fx-warn "Skipping bootloader provisioning of SSH keys"
fi

# Flash the super partition last; some Kola devices exhibit USB instability
# after flashing large super partition data so we want to do as much as
# possible before this while the USB is more reliable (b/405436515).
${FASTBOOT} flash super "$FVM_PATH"

# SSH keys require `fastboot continue`, since they are stored in RAM and would
# get lost in a reboot. We rebooted earlier to ensure a complete boot chain
# using the new images.
${FASTBOOT} continue || {
  fx-warn "Fastboot got a communication error, but this may be OK"
  fx-warn "If the device is now booting then flash succeeded (b/405436515)"
}

fx-info "Done flashing Kola device."
