#!/bin/bash
# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#### CATEGORY=Source tree
### Syncs BUILD.gn and BUILD.bazel for targets that are dual-building in both.

## usage: fx bazel2gn [-d|--directory <path/to/dir>]... [-h|--help] [--no-build]
##
##   -h|--help       Print out this message.
##   -d|--directory  Directory to sync, repeatable.
##   --no-build      Skip building required dependencies.
##
## Updates BUILD.gn listed in this script based on the BUILD.bazel files in
## their directories.

set -e

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"/../lib/vars.sh || exit $?
fx-config-read

declare -r BAZEL2GN_TARGET="host-tools/bazel2gn"
declare -r BAZEL2GN_BIN="${FUCHSIA_BUILD_DIR}/host-tools/bazel2gn"
declare -r BAZEL2GN_DIR_LIST="${FUCHSIA_BUILD_DIR}/bazel2gn_dir_list"

function main {
  local build=true
  local directories=()
  while [[ "${#}" -ge 1 ]]; do
    case "${1}" in
      -d|--directory)
        shift
        directories+=("${1}")
        ;;
      -h|--help)
        fx-command-help
        exit 0
        ;;
      --no-build)
        build=false
        ;;
      *)
        fx-error "Unexpected command line arg ${1}"
        fx-command-help
        exit 1
    esac
    shift
  done

  # If no directories are provided by user, sync all known directories.
  # Read known directories to sync from $BAZEL2GN_DIR_LIST.
  if [[ -z "${directories}" ]]; then
    while IFS= read -r dir; do
      directories+=("${dir}")
    done < "${BAZEL2GN_DIR_LIST}"
  fi

  if [[ "${build}" == "true" ]]; then
    fx-run-ninja false "${PREBUILT_NINJA}" -C "${FUCHSIA_BUILD_DIR}" "${BAZEL2GN_TARGET}"
  fi

  for dir in "${directories[@]}"; do
    build_gn="${FUCHSIA_DIR}/${dir}/BUILD.gn"
    "${BAZEL2GN_BIN}" \
      --bazel_input_path "${FUCHSIA_DIR}/${dir}/BUILD.bazel" \
      --gn_output_path "${build_gn}" \
      --gn_bin "${PREBUILT_GN}"
  done
}

main "$@"
