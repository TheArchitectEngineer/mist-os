#!/bin/bash
# Copyright 2025 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

### Test expected behavior of 'fx use'

BT_FILE_DEPS=(
    "scripts/fx"
    "tools/devshell/lib/vars.sh"
    "tools/devshell/use"
    "tools/devshell/lib/fx-cmd-locator.sh"
    "tools/devshell/lib/fx-optional-features.sh"
    "tools/devshell/lib/platform.sh"
    "tools/devshell/lib/generate-ssh-config.sh"
)

declare fx

BT_MKDIR_DEPS=(
    "out/default"
    "out/secondary"
)

BT_SET_UP() {
    source "${BT_TEMP_DIR}/tools/devshell/tests/lib/fuchsia-mock.sh"
    fx="$(btf::setup_fx)"
    btf::make_out_dir "out/secondary"
    ffx="$(REL_BUILD_DIR=out/secondary btf::make_installed_hosttools_mock ffx)"
    FUCHSIA_DIR="${BT_TEMP_DIR}"
    mkdir -p "$FUCHSIA_DIR/build"
    touch "$FUCHSIA_DIR/build/regenerator"
    chmod +x "$FUCHSIA_DIR/build/regenerator"
}

# Check that the current build dir is switched with fx use.
TEST_fx-use-switches-build-dir() {
    local out="${BT_TEMP_DIR}/_fx_use_stdout"
    BT_EXPECT "${fx}" use out/secondary >"$out" 2>&1
    BT_EXPECT_FILE_CONTAINS "$FUCHSIA_DIR/.fx-build-dir" "out/secondary"
    BT_EXPECT_FILE_CONTAINS "${out}" ""
}

# Check that fx use errors if we try to switch to a nonexistent build dir.
TEST_fx-use-nonexistent-build-dir() {
    local out="${BT_TEMP_DIR}/_fx_use_stdout"
    BT_EXPECT_FAIL "${fx}" use out/nonexistent >"$out" 2>&1
    BT_EXPECT_FILE_CONTAINS "$FUCHSIA_DIR/.fx-build-dir" "out/default"
    BT_EXPECT_FILE_CONTAINS_SUBSTRING "$out" '"out/nonexistent" is not a valid build dir'
}

# Check that we log the new default target.
TEST_fx-use-logs-default-target() {
    local device_file="${FUCHSIA_DIR}/out/secondary.device"
    echo "foo" >"${device_file}"
    local out="${BT_TEMP_DIR}/_fx_use_stdout"

    BT_EXPECT "${fx}" use out/secondary >"$out" 2>&1

    # Check that the output has the right message
    BT_EXPECT_FILE_CONTAINS "${out}" "INFO: The default device for out/secondary is \"foo\"."
    BT_EXPECT_FILE_CONTAINS "${device_file}" "foo"
}

# Check that the default target log prints out an out dir short path.
TEST_fx-use-logs-default-target-absolute-path() {
    local device_file="${FUCHSIA_DIR}/out/secondary.device"
    echo "foo" >"${device_file}"
    local out="${BT_TEMP_DIR}/_fx_use_stdout"

    BT_EXPECT "${fx}" use "${FUCHSIA_DIR}/out/secondary/" >"$out" 2>&1

    # Check that the output has the right message
    BT_EXPECT_FILE_CONTAINS "${out}" "INFO: The default device for out/secondary is \"foo\"."
    BT_EXPECT_FILE_CONTAINS "${device_file}" "foo"
}

# Check that we warn the user if $FUCHSIA_NODENAME has been set by the user.
TEST_fx-use-warns-if-nodename-env-var-set() {
    local device_file="${FUCHSIA_DIR}/out/secondary.device"
    echo "foo" >"${device_file}"
    local out="${BT_TEMP_DIR}/_fx_use_stdout"
    export FUCHSIA_NODENAME="bar"

    BT_EXPECT "${fx}" use out/secondary >"$out" 2>&1

    # Check that the output has the right message
    BT_EXPECT_FILE_CONTAINS "${out}" "INFO: The default device for out/secondary is \"foo\".
WARNING: However, you've overridden this by setting \$FUCHSIA_NODENAME=\"bar\".
WARNING: If you want to use \"foo\", please unset the \$FUCHSIA_NODENAME environment variable."
    BT_EXPECT_FILE_CONTAINS "${device_file}" "foo"
}

# Check that we warn the user if $FUCHSIA_DEVICE_ADDR has been set by the user.
TEST_fx-use-warns-if-device_addr-env-var-set() {
    local device_file="${FUCHSIA_DIR}/out/secondary.device"
    echo "foo" >"${device_file}"
    local out="${BT_TEMP_DIR}/_fx_use_stdout"
    export FUCHSIA_DEVICE_ADDR="bar"

    BT_EXPECT "${fx}" use out/secondary >"$out" 2>&1

    # Check that the output has the right message
    BT_EXPECT_FILE_CONTAINS "${out}" "INFO: The default device for out/secondary is \"foo\".
WARNING: However, you've overridden this by setting \$FUCHSIA_DEVICE_ADDR=\"bar\".
WARNING: If you want to use \"foo\", please unset the \$FUCHSIA_DEVICE_ADDR environment variable."
    BT_EXPECT_FILE_CONTAINS "${device_file}" "foo"
}

# Check that we warn the user if both $FUCHSIA_NODENAME and $FUCHSIA_DEVICE_ADDR
# have been set by the user.
TEST_fx-use-warns-if-both-env-vars-set() {
    local device_file="${FUCHSIA_DIR}/out/secondary.device"
    echo "foo" >"${device_file}"
    local out="${BT_TEMP_DIR}/_fx_use_stdout"
    export FUCHSIA_NODENAME="bar"
    export FUCHSIA_DEVICE_ADDR="baz"

    BT_EXPECT "${fx}" use out/secondary >"$out" 2>&1

    # Check that the output has the right message
    BT_EXPECT_FILE_CONTAINS "${out}" "INFO: The default device for out/secondary is \"foo\".
WARNING: However, you've overridden this by setting \$FUCHSIA_NODENAME=\"bar\" and \$FUCHSIA_DEVICE_ADDR=\"baz\".
WARNING: If you want to use \"foo\", please unset the \$FUCHSIA_NODENAME and \$FUCHSIA_DEVICE_ADDR environment variable."
    BT_EXPECT_FILE_CONTAINS "${device_file}" "foo"
}

# Check that we don't do environment variable or ffx checks if a build level
# default device hasn't been set.
TEST_fx-use-if-no-device-set-and-both-env-vars-set-and-ffx-not-built() {
    local out="${BT_TEMP_DIR}/_fx_use_stdout"
    export FUCHSIA_NODENAME="bar"
    export FUCHSIA_DEVICE_ADDR="baz"

    rm -f "${ffx}"
    BT_EXPECT "${fx}" use out/secondary >"$out" 2>&1

    # Check that the output has the right message
    BT_EXPECT_FILE_CONTAINS "${out}" "INFO: The default device for out/secondary is not set.
WARNING: However, you've overridden this by setting \$FUCHSIA_NODENAME=\"bar\" and \$FUCHSIA_DEVICE_ADDR=\"baz\".
WARNING: If you want to use leave it unset, please unset the \$FUCHSIA_NODENAME and \$FUCHSIA_DEVICE_ADDR environment variable.

WARNING: ffx not found in build directory, skipping verification that effective target device is unset.
WARNING: Please run \`ffx target default get\` after the build to confirm."
}

# Check that we don't do environment variable or ffx checks if a build level
# default device hasn't been set.
TEST_fx-use-if-no-device-set-and-both-env-vars-set-and-ffx-default-configured() {
    local out="${BT_TEMP_DIR}/_fx_use_stdout"
    export FUCHSIA_NODENAME="bar"
    export FUCHSIA_DEVICE_ADDR="baz"

    echo "foo" > "${ffx}.mock_stdout"
    BT_EXPECT "${fx}" use out/secondary >"$out" 2>&1

    # Check that the output has the right message
    BT_EXPECT_FILE_CONTAINS "${out}" "INFO: The default device for out/secondary is not set.
WARNING: However, you've overridden this by setting \$FUCHSIA_NODENAME=\"bar\" and \$FUCHSIA_DEVICE_ADDR=\"baz\".
WARNING: If you want to use leave it unset, please unset the \$FUCHSIA_NODENAME and \$FUCHSIA_DEVICE_ADDR environment variable.

WARNING: The build level device is unset, but is overridden by the user level device \"foo\".
WARNING: Please run \`ffx target default unset\` to fix this."
}

# fx use should print an warning if ffx hasn't been built yet.
TEST_fx-use-warns-if-ffx-not-built() {
    local device_file="${FUCHSIA_DIR}/out/secondary.device"
    echo "foo" >"${device_file}"
    local out="${BT_TEMP_DIR}/_fx_use_stdout"

    rm -f "${ffx}"
    BT_EXPECT "${fx}" use out/secondary >"$out" 2>&1

    # Check that the output has the right message
    BT_EXPECT_FILE_CONTAINS "${out}" "INFO: The default device for out/secondary is \"foo\".
WARNING: ffx not found in build directory, skipping verification that effective target device is foo.
WARNING: Please run \`ffx target default get\` after the build to confirm."
    BT_EXPECT_FILE_CONTAINS "${device_file}" "foo"
}

# fx use should print an warning if ffx hasn't been built yet and should still
# check env vars.
TEST_fx-use-warns-if-ffx-not-built-with-env() {
    local device_file="${FUCHSIA_DIR}/out/secondary.device"
    echo "foo" >"${device_file}"
    local out="${BT_TEMP_DIR}/_fx_use_stdout"
    export FUCHSIA_NODENAME="bar"

    rm -f "${ffx}"
    BT_EXPECT "${fx}" use out/secondary >"$out" 2>&1

    # Check that the output has the right message
    BT_EXPECT_FILE_CONTAINS "${out}" "INFO: The default device for out/secondary is \"foo\".
WARNING: However, you've overridden this by setting \$FUCHSIA_NODENAME=\"bar\".
WARNING: If you want to use \"foo\", please unset the \$FUCHSIA_NODENAME environment variable.

WARNING: ffx not found in build directory, skipping verification that effective target device is foo.
WARNING: Please run \`ffx target default get\` after the build to confirm."
    BT_EXPECT_FILE_CONTAINS "${device_file}" "foo"
}

# fx use works with a mocked ffx.
TEST_fx-use-ffx-default-target-unset() {
    local device_file="${FUCHSIA_DIR}/out/secondary.device"
    echo "foo" >"${device_file}"
    local out="${BT_TEMP_DIR}/_fx_use_stdout"

    echo > "${ffx}.mock_errors"
    cat >"${ffx}.mock_side_effects" <<INPUT
if [[ \${@: -1} == "get" ]]; then
  if [[ -n "\$FUCHSIA_DEVICE_ADDR" ]]; then
    echo "\$FUCHSIA_DEVICE_ADDR"
  elif [[ -n "\$FUCHSIA_NODENAME" ]]; then
    echo "\$FUCHSIA_NODENAME"
  else
    echo "No default target." >&2
    echo "If exactly one target is connected, ffx will use that." >&2
  fi
else
  echo "Disallowed command: \$*" >> ${ffx}.mock_errors
fi
INPUT
    BT_EXPECT "${fx}" use out/secondary >"$out" 2>&1

    # Check that the stdout contains the text
    BT_EXPECT_FILE_CONTAINS "${out}" "INFO: The default device for out/secondary is \"foo\"."
    BT_EXPECT_FILE_CONTAINS "${ffx}.mock_errors" ""
    BT_EXPECT_FILE_CONTAINS "${device_file}" "foo"
}

# fx use should warn if any default targets are set on the ffx level.
TEST_fx-use-warns-if-ffx-default-target-set() {
    local device_file="${FUCHSIA_DIR}/out/secondary.device"
    echo "foo" >"${device_file}"
    local out="${BT_TEMP_DIR}/_fx_use_stdout"

    echo > "${ffx}.mock_errors"
    cat >"${ffx}.mock_side_effects" <<INPUT
if [[ \${@: -1} == "get" ]]; then
  echo "ffx-default-target"
else
  echo "Disallowed command: \$*" >> ${ffx}.mock_errors
fi
INPUT
    BT_EXPECT "${fx}" use out/secondary >"$out" 2>&1

    # Check that the output has the right message
    BT_EXPECT_FILE_CONTAINS "${out}" "INFO: The default device for out/secondary is \"foo\".
WARNING: The build level device foo is overridden by the user level device \"ffx-default-target\".
WARNING: Please run \`ffx target default unset\` to fix this."
    BT_EXPECT_FILE_CONTAINS "${ffx}.mock_errors" ""
    BT_EXPECT_FILE_CONTAINS "${device_file}" "foo"
}

# fx use should issue warnings for both env and ffx simultaneously.
TEST_fx-use-errors-if-ffx-default-target-and-env-set() {
    local device_file="${FUCHSIA_DIR}/out/secondary.device"
    echo "foo" >"${device_file}"
    local out="${BT_TEMP_DIR}/_fx_use_stdout"
    export FUCHSIA_NODENAME="bar"
    export FUCHSIA_DEVICE_ADDR="baz"

    echo > "${ffx}.mock_errors"
    cat >"${ffx}.mock_side_effects" <<INPUT
if [[ \${@: -1} == "get" ]]; then
  echo "ffx-default-target"
else
  echo "Disallowed command: \$*" >> ${ffx}.mock_errors
fi
INPUT
    BT_EXPECT "${fx}" use out/secondary >"$out" 2>&1

    # Check that the output has the right message
    BT_EXPECT_FILE_CONTAINS "${out}" "INFO: The default device for out/secondary is \"foo\".
WARNING: However, you've overridden this by setting \$FUCHSIA_NODENAME=\"bar\" and \$FUCHSIA_DEVICE_ADDR=\"baz\".
WARNING: If you want to use \"foo\", please unset the \$FUCHSIA_NODENAME and \$FUCHSIA_DEVICE_ADDR environment variable.

WARNING: The build level device foo is overridden by the user level device \"ffx-default-target\".
WARNING: Please run \`ffx target default unset\` to fix this."
    BT_EXPECT_FILE_CONTAINS "${ffx}.mock_errors" ""
    BT_EXPECT_FILE_CONTAINS "${device_file}" "foo"
}

BT_RUN_TESTS "$@"
