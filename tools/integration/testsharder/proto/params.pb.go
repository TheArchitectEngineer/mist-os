// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.28.0
// source: params.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params contains the parameters necessary for determining how to shard the
// tests, which should be consistent per builder.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Environment tags on which to filter; only the tests that match all tags
	// will be sharded.
	EnvironmentTags []string `protobuf:"bytes,1,rep,name=environment_tags,json=environmentTags,proto3" json:"environment_tags,omitempty"`
	// The approximate duration that each shard should run in.
	TargetDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=target_duration,json=targetDuration,proto3" json:"target_duration,omitempty"`
	// Maximum shards allowed per environment. If 0 (default), testsharder will
	// use a hardcoded default of 8 max shards per environment. If < 0, no max
	// will be set.
	MaxShardsPerEnv int32 `protobuf:"varint,3,opt,name=max_shards_per_env,json=maxShardsPerEnv,proto3" json:"max_shards_per_env,omitempty"`
	// Target max number of tests per shard. It will only have effect if used with
	// target_duration_secs to further limit the number of tests per shard if the
	// calculated average tests per shard would exceed max_shard_size after
	// sharding by duration. This is only a soft maximum and is used to make the
	// average shard size not exceed the max size, but ultimately the shards will
	// be sharded by duration, so some shards may have more than the max number of
	// tests while others will have less. However, if max_shards_per_env is set,
	// that will take precedence over max_shard_size, which may result in all
	// shards exceeding the max size in order to fit within the max number of
	// shards per environment.
	MaxShardSize int32 `protobuf:"varint,4,opt,name=max_shard_size,json=maxShardSize,proto3" json:"max_shard_size,omitempty"`
	// Default per-test timeout, applied to all tests. If <= 0, no timeout will be
	// set.
	PerTestTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=per_test_timeout,json=perTestTimeout,proto3" json:"per_test_timeout,omitempty"`
	// Target number of tests per shard. If <= 0, will be ignored. Otherwise,
	// tests will be split into more, smaller shards. Either this or
	// target_shard_duration_secs should be set, not both.
	TargetTestCount int32 `protobuf:"varint,6,opt,name=target_test_count,json=targetTestCount,proto3" json:"target_test_count,omitempty"`
	// If there are <= this many tests in -affected-tests, they may be multiplied
	// (modified to run many times in a separate shard), but only be multiplied if
	// allowed by certain constraints designed to minimize false rejections and
	// bot demand.
	AffectedTestsMultiplyThreshold int32 `protobuf:"varint,7,opt,name=affected_tests_multiply_threshold,json=affectedTestsMultiplyThreshold,proto3" json:"affected_tests_multiply_threshold,omitempty"`
	// Whether to add all the images and blobs used by the shard as dependencies.
	HermeticDeps bool `protobuf:"varint,8,opt,name=hermetic_deps,json=hermeticDeps,proto3" json:"hermetic_deps,omitempty"`
	// Whether to add all the images used by the shard as dependencies.
	ImageDeps bool `protobuf:"varint,9,opt,name=image_deps,json=imageDeps,proto3" json:"image_deps,omitempty"`
	// Whether the shards generated should pave or netboot fuchsia. (Ignored if
	// device_type == QEMU)
	Pave bool `protobuf:"varint,10,opt,name=pave,proto3" json:"pave,omitempty"`
	// Whether to construct a local package repo for each shard.
	PerShardPackageRepos bool `protobuf:"varint,11,opt,name=per_shard_package_repos,json=perShardPackageRepos,proto3" json:"per_shard_package_repos,omitempty"`
	// Whether the test packages should be cached on disk in the local package
	// repo.
	CacheTestPackages bool `protobuf:"varint,12,opt,name=cache_test_packages,json=cacheTestPackages,proto3" json:"cache_test_packages,omitempty"`
	// The name of the default product bundle to run tests against.
	ProductBundleName string `protobuf:"bytes,13,opt,name=product_bundle_name,json=productBundleName,proto3" json:"product_bundle_name,omitempty"`
	// How long to wait until timing out on tests. If set, testsharder will
	// override its computed shard timeout with this value.
	ShardTimeout *durationpb.Duration `protobuf:"bytes,14,opt,name=shard_timeout,json=shardTimeout,proto3" json:"shard_timeout,omitempty"`
	// A list of device types to NOT run tests on.
	// This should only be used to avoid running on physical devices where
	// there are capacity concerns.
	DisabledDeviceTypes []string `protobuf:"bytes,15,rep,name=disabled_device_types,json=disabledDeviceTypes,proto3" json:"disabled_device_types,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetEnvironmentTags() []string {
	if x != nil {
		return x.EnvironmentTags
	}
	return nil
}

func (x *Params) GetTargetDuration() *durationpb.Duration {
	if x != nil {
		return x.TargetDuration
	}
	return nil
}

func (x *Params) GetMaxShardsPerEnv() int32 {
	if x != nil {
		return x.MaxShardsPerEnv
	}
	return 0
}

func (x *Params) GetMaxShardSize() int32 {
	if x != nil {
		return x.MaxShardSize
	}
	return 0
}

func (x *Params) GetPerTestTimeout() *durationpb.Duration {
	if x != nil {
		return x.PerTestTimeout
	}
	return nil
}

func (x *Params) GetTargetTestCount() int32 {
	if x != nil {
		return x.TargetTestCount
	}
	return 0
}

func (x *Params) GetAffectedTestsMultiplyThreshold() int32 {
	if x != nil {
		return x.AffectedTestsMultiplyThreshold
	}
	return 0
}

func (x *Params) GetHermeticDeps() bool {
	if x != nil {
		return x.HermeticDeps
	}
	return false
}

func (x *Params) GetImageDeps() bool {
	if x != nil {
		return x.ImageDeps
	}
	return false
}

func (x *Params) GetPave() bool {
	if x != nil {
		return x.Pave
	}
	return false
}

func (x *Params) GetPerShardPackageRepos() bool {
	if x != nil {
		return x.PerShardPackageRepos
	}
	return false
}

func (x *Params) GetCacheTestPackages() bool {
	if x != nil {
		return x.CacheTestPackages
	}
	return false
}

func (x *Params) GetProductBundleName() string {
	if x != nil {
		return x.ProductBundleName
	}
	return ""
}

func (x *Params) GetShardTimeout() *durationpb.Duration {
	if x != nil {
		return x.ShardTimeout
	}
	return nil
}

func (x *Params) GetDisabledDeviceTypes() []string {
	if x != nil {
		return x.DisabledDeviceTypes
	}
	return nil
}

var File_params_proto protoreflect.FileDescriptor

var file_params_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x68, 0x61, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x05, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x50, 0x65, 0x72, 0x45,
	0x6e, 0x76, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70,
	0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65, 0x72, 0x6d, 0x65, 0x74, 0x69, 0x63,
	0x5f, 0x64, 0x65, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x65, 0x72,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x44, 0x65, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x76, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x61, 0x63, 0x68, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x6f, 0x2e, 0x66, 0x75,
	0x63, 0x68, 0x73, 0x69, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69,
	0x61, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x68, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_params_proto_rawDescOnce sync.Once
	file_params_proto_rawDescData = file_params_proto_rawDesc
)

func file_params_proto_rawDescGZIP() []byte {
	file_params_proto_rawDescOnce.Do(func() {
		file_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_params_proto_rawDescData)
	})
	return file_params_proto_rawDescData
}

var file_params_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_params_proto_goTypes = []interface{}{
	(*Params)(nil),              // 0: testsharder.Params
	(*durationpb.Duration)(nil), // 1: google.protobuf.Duration
}
var file_params_proto_depIdxs = []int32{
	1, // 0: testsharder.Params.target_duration:type_name -> google.protobuf.Duration
	1, // 1: testsharder.Params.per_test_timeout:type_name -> google.protobuf.Duration
	1, // 2: testsharder.Params.shard_timeout:type_name -> google.protobuf.Duration
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_params_proto_init() }
func file_params_proto_init() {
	if File_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_params_proto_goTypes,
		DependencyIndexes: file_params_proto_depIdxs,
		MessageInfos:      file_params_proto_msgTypes,
	}.Build()
	File_params_proto = out.File
	file_params_proto_rawDesc = nil
	file_params_proto_goTypes = nil
	file_params_proto_depIdxs = nil
}
