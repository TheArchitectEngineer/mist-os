// Copyright 2020 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.28.0
// source: static.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Static_CompilationMode int32

const (
	// Comply with https://protobuf.dev/programming-guides/dos-donts/#unspecified-enum.
	Static_COMPILATION_MODE_UNSPECIFIED Static_CompilationMode = 0
	Static_COMPILATION_MODE_DEBUG       Static_CompilationMode = 1
	Static_COMPILATION_MODE_RELEASE     Static_CompilationMode = 2
	Static_COMPILATION_MODE_BALANCED    Static_CompilationMode = 3
)

// Enum value maps for Static_CompilationMode.
var (
	Static_CompilationMode_name = map[int32]string{
		0: "COMPILATION_MODE_UNSPECIFIED",
		1: "COMPILATION_MODE_DEBUG",
		2: "COMPILATION_MODE_RELEASE",
		3: "COMPILATION_MODE_BALANCED",
	}
	Static_CompilationMode_value = map[string]int32{
		"COMPILATION_MODE_UNSPECIFIED": 0,
		"COMPILATION_MODE_DEBUG":       1,
		"COMPILATION_MODE_RELEASE":     2,
		"COMPILATION_MODE_BALANCED":    3,
	}
)

func (x Static_CompilationMode) Enum() *Static_CompilationMode {
	p := new(Static_CompilationMode)
	*p = x
	return p
}

func (x Static_CompilationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Static_CompilationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_static_proto_enumTypes[0].Descriptor()
}

func (Static_CompilationMode) Type() protoreflect.EnumType {
	return &file_static_proto_enumTypes[0]
}

func (x Static_CompilationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Static_CompilationMode.Descriptor instead.
func (Static_CompilationMode) EnumDescriptor() ([]byte, []int) {
	return file_static_proto_rawDescGZIP(), []int{0, 0}
}

type Static_Arch int32

const (
	Static_ARCH_UNSPECIFIED Static_Arch = 0 // See OPTIMIZE_UNSPECIFIED for rationale.
	Static_ARM64            Static_Arch = 1
	Static_X64              Static_Arch = 2
	Static_RISCV64          Static_Arch = 3
)

// Enum value maps for Static_Arch.
var (
	Static_Arch_name = map[int32]string{
		0: "ARCH_UNSPECIFIED",
		1: "ARM64",
		2: "X64",
		3: "RISCV64",
	}
	Static_Arch_value = map[string]int32{
		"ARCH_UNSPECIFIED": 0,
		"ARM64":            1,
		"X64":              2,
		"RISCV64":          3,
	}
)

func (x Static_Arch) Enum() *Static_Arch {
	p := new(Static_Arch)
	*p = x
	return p
}

func (x Static_Arch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Static_Arch) Descriptor() protoreflect.EnumDescriptor {
	return file_static_proto_enumTypes[1].Descriptor()
}

func (Static_Arch) Type() protoreflect.EnumType {
	return &file_static_proto_enumTypes[1]
}

func (x Static_Arch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Static_Arch.Descriptor instead.
func (Static_Arch) EnumDescriptor() ([]byte, []int) {
	return file_static_proto_rawDescGZIP(), []int{0, 1}
}

type Static_LintTargets int32

const (
	// Don't build any lint targets.
	Static_NO_LINT_TARGETS Static_LintTargets = 0
	// Build all lint targets.
	Static_ALL_LINT_TARGETS Static_LintTargets = 1
	// Only build the lint targets that are affected by the change under test,
	// determined by comparing each target's declared source files to the
	// `changed_files` declared in the context spec.
	Static_AFFECTED_LINT_TARGETS Static_LintTargets = 2
)

// Enum value maps for Static_LintTargets.
var (
	Static_LintTargets_name = map[int32]string{
		0: "NO_LINT_TARGETS",
		1: "ALL_LINT_TARGETS",
		2: "AFFECTED_LINT_TARGETS",
	}
	Static_LintTargets_value = map[string]int32{
		"NO_LINT_TARGETS":       0,
		"ALL_LINT_TARGETS":      1,
		"AFFECTED_LINT_TARGETS": 2,
	}
)

func (x Static_LintTargets) Enum() *Static_LintTargets {
	p := new(Static_LintTargets)
	*p = x
	return p
}

func (x Static_LintTargets) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Static_LintTargets) Descriptor() protoreflect.EnumDescriptor {
	return file_static_proto_enumTypes[2].Descriptor()
}

func (Static_LintTargets) Type() protoreflect.EnumType {
	return &file_static_proto_enumTypes[2]
}

func (x Static_LintTargets) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Static_LintTargets.Descriptor instead.
func (Static_LintTargets) EnumDescriptor() ([]byte, []int) {
	return file_static_proto_rawDescGZIP(), []int{0, 2}
}

// Static contains all of the non-dynamic configuration values for building
// Fuchsia. These values are "static" in the sense that they don't vary
// depending on things like git history or local environment, so they can be
// checked into version control.
type Static struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Compilation mode for the build.
	CompilationMode Static_CompilationMode `protobuf:"varint,1,opt,name=compilation_mode,json=compilationMode,proto3,enum=fint.Static_CompilationMode" json:"compilation_mode,omitempty"`
	// The board to build.
	Board string `protobuf:"bytes,2,opt,name=board,proto3" json:"board,omitempty"`
	// The product file to build.
	Product string `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	// Extra args to pass to gn gen.
	GnArgs []string `protobuf:"bytes,4,rep,name=gn_args,json=gnArgs,proto3" json:"gn_args,omitempty"`
	// Extra targets to pass to Ninja.
	NinjaTargets []string `protobuf:"bytes,5,rep,name=ninja_targets,json=ninjaTargets,proto3" json:"ninja_targets,omitempty"`
	// Fuchsia packages to build and include in the universe set.
	UniversePackages []string `protobuf:"bytes,8,rep,name=universe_packages,json=universePackages,proto3" json:"universe_packages,omitempty"`
	// Host-only targets to build.
	HostLabels []string `protobuf:"bytes,9,rep,name=host_labels,json=hostLabels,proto3" json:"host_labels,omitempty"`
	// The target CPU architecture.
	TargetArch Static_Arch `protobuf:"varint,10,opt,name=target_arch,json=targetArch,proto3,enum=fint.Static_Arch" json:"target_arch,omitempty"`
	// Values of select_variant GN argument.
	Variants []string `protobuf:"bytes,11,rep,name=variants,proto3" json:"variants,omitempty"`
	// Whether to build images for paving (rather than netbooting). Ignored if
	// `exclude_images` is true.
	Pave bool `protobuf:"varint,12,opt,name=pave,proto3" json:"pave,omitempty"`
	// Whether to build the basic images needed to boot and test on Fuchsia.
	IncludeImages bool `protobuf:"varint,13,opt,name=include_images,json=includeImages,proto3" json:"include_images,omitempty"`
	// Whether to build manifests of prebuilt binaries.
	IncludePrebuiltBinaryManifests bool `protobuf:"varint,14,opt,name=include_prebuilt_binary_manifests,json=includePrebuiltBinaryManifests,proto3" json:"include_prebuilt_binary_manifests,omitempty"`
	// Whether to build generated source files specified in the generated sources manifest.
	IncludeGeneratedSources bool `protobuf:"varint,15,opt,name=include_generated_sources,json=includeGeneratedSources,proto3" json:"include_generated_sources,omitempty"`
	// Whether to build host tests.
	IncludeHostTests bool `protobuf:"varint,17,opt,name=include_host_tests,json=includeHostTests,proto3" json:"include_host_tests,omitempty"`
	// Whether to include archives in the build.
	IncludeArchives bool `protobuf:"varint,18,opt,name=include_archives,json=includeArchives,proto3" json:"include_archives,omitempty"`
	// Names of tools referenced in tool_paths.json that we should build with
	// Ninja. We assume that we should build each tool for the current OS and CPU.
	Tools []string `protobuf:"bytes,19,rep,name=tools,proto3" json:"tools,omitempty"`
	// Whether to skip the ninja build if we're running in CQ and none of the
	// changed files affect the build.
	SkipIfUnaffected bool `protobuf:"varint,20,opt,name=skip_if_unaffected,json=skipIfUnaffected,proto3" json:"skip_if_unaffected,omitempty"`
	// The path within the checkout of a file containing historical test duration
	// data specific to the current build config.
	TestDurationsFile string `protobuf:"bytes,21,opt,name=test_durations_file,json=testDurationsFile,proto3" json:"test_durations_file,omitempty"`
	// If `test_durations_file` doesn't exist within the checkout, use this file
	// instead. It's not specific to the current build config, but it can be
	// assumed to always exist.
	DefaultTestDurationsFile string `protobuf:"bytes,22,opt,name=default_test_durations_file,json=defaultTestDurationsFile,proto3" json:"default_test_durations_file,omitempty"`
	// Whether to use a go cache when building.
	EnableGoCache bool `protobuf:"varint,23,opt,name=enable_go_cache,json=enableGoCache,proto3" json:"enable_go_cache,omitempty"`
	// Whether to use a rust cache when building.
	EnableRustCache bool `protobuf:"varint,24,opt,name=enable_rust_cache,json=enableRustCache,proto3" json:"enable_rust_cache,omitempty"`
	// Which IDE files to generate.
	IdeFiles []string `protobuf:"bytes,25,rep,name=ide_files,json=ideFiles,proto3" json:"ide_files,omitempty"`
	// Passed to --json-ide-script GN flag; GN will execute each of these scripts
	// after regenerating the project.json IDE file.
	JsonIdeScripts []string `protobuf:"bytes,26,rep,name=json_ide_scripts,json=jsonIdeScripts,proto3" json:"json_ide_scripts,omitempty"`
	// Whether to set --export-rust-project GN flag.
	ExportRustProject bool `protobuf:"varint,27,opt,name=export_rust_project,json=exportRustProject,proto3" json:"export_rust_project,omitempty"`
	// If true, build Rust targets with RBE/reclient.
	RustRbeEnable bool `protobuf:"varint,28,opt,name=rust_rbe_enable,json=rustRbeEnable,proto3" json:"rust_rbe_enable,omitempty"`
	// If true, build C++ targets with RBE/reclient.
	CxxRbeEnable bool `protobuf:"varint,29,opt,name=cxx_rbe_enable,json=cxxRbeEnable,proto3" json:"cxx_rbe_enable,omitempty"`
	// Whether we're performing an incremental build.
	Incremental bool `protobuf:"varint,30,opt,name=incremental,proto3" json:"incremental,omitempty"`
	// Whether to include the the default ninja target.
	IncludeDefaultNinjaTarget bool `protobuf:"varint,31,opt,name=include_default_ninja_target,json=includeDefaultNinjaTarget,proto3" json:"include_default_ninja_target,omitempty"`
	// If true, use a temporary directory for the Go cache rather than a
	// deterministic directory within the build directory. This is useful for
	// incremental builds because the gocache does not work correctly with cgo
	// dependencies (which our build uses), so we don't want to reuse the gocache
	// between builds.
	//
	// Ignored if `enable_go_cache` is set.
	UseTemporaryGoCache bool `protobuf:"varint,32,opt,name=use_temporary_go_cache,json=useTemporaryGoCache,proto3" json:"use_temporary_go_cache,omitempty"`
	// Which language-specific lint targets to include.
	IncludeLintTargets Static_LintTargets `protobuf:"varint,33,opt,name=include_lint_targets,json=includeLintTargets,proto3,enum=fint.Static_LintTargets" json:"include_lint_targets,omitempty"`
	// Extra args to pass to ninja.
	NinjaArgs []string `protobuf:"bytes,34,rep,name=ninja_args,json=ninjaArgs,proto3" json:"ninja_args,omitempty"`
	// Hermetic tests to add to the build configuration.  Only hermetic tests that
	// run on Fuchsia devices can be added here.  The build will validate that
	// any labels added here only contain hermetic tests.
	HermeticTestPackages []string `protobuf:"bytes,35,rep,name=hermetic_test_packages,json=hermeticTestPackages,proto3" json:"hermetic_test_packages,omitempty"`
	// Non-hermetic tests to add to the build configuration.  Only non-hermetic
	// tests that run on Fuchsia devices can be added here.  The build will
	// validate that any labels added here only contain non-hermetic tests.
	TestPackages []string `protobuf:"bytes,36,rep,name=test_packages,json=testPackages,proto3" json:"test_packages,omitempty"`
	// End-to-end tests to add to the build configuration.  The build will
	// validate that any labels added here only contain e2e tests.
	E2ETestLabels []string `protobuf:"bytes,37,rep,name=e2e_test_labels,json=e2eTestLabels,proto3" json:"e2e_test_labels,omitempty"`
	// Host tests to add to the build configuration.  Host tests should _not_ be
	// added via the 'host_labels' field.
	// TODO(b/297926167): Enforce that no tests are found.
	HostTestLabels []string `protobuf:"bytes,38,rep,name=host_test_labels,json=hostTestLabels,proto3" json:"host_test_labels,omitempty"`
	// Any sort of test that is added by a developer.  These are not to be added
	// by infra, but only by 'fx set'.  If 'Set()' is called with 'skipLocalArgs'
	// true (it should be when called by infra), fint will assert that this is an
	// empty list.
	DeveloperTestLabels []string `protobuf:"bytes,39,rep,name=developer_test_labels,json=developerTestLabels,proto3" json:"developer_test_labels,omitempty"`
	// Additional labels to add to the GN build graph, which are then built by the
	// :default ninja target, but are not added to the product, or any published
	// package sets.
	BuildOnlyLabels []string `protobuf:"bytes,40,rep,name=build_only_labels,json=buildOnlyLabels,proto3" json:"build_only_labels,omitempty"`
	// If true, link C/C++ targets remotely with RBE/reclient.
	LinkRbeEnable bool `protobuf:"varint,41,opt,name=link_rbe_enable,json=linkRbeEnable,proto3" json:"link_rbe_enable,omitempty"`
	// If true, enable remote builds for bazel on RBE.
	BazelRbeEnable bool `protobuf:"varint,42,opt,name=bazel_rbe_enable,json=bazelRbeEnable,proto3" json:"bazel_rbe_enable,omitempty"`
	// If set, bazel builds will stream build events to a service like
	// Sponge or ResultStore.
	// This value sets the GN arg `bazel_upload_build_events`.
	BuildEventService string `protobuf:"bytes,43,opt,name=build_event_service,json=buildEventService,proto3" json:"build_event_service,omitempty"`
	// If set, points to the label to use as the main product bundle in a
	// multi-product build.
	MainPbLabel string `protobuf:"bytes,44,opt,name=main_pb_label,json=mainPbLabel,proto3" json:"main_pb_label,omitempty"`
}

func (x *Static) Reset() {
	*x = Static{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Static) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Static) ProtoMessage() {}

func (x *Static) ProtoReflect() protoreflect.Message {
	mi := &file_static_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Static.ProtoReflect.Descriptor instead.
func (*Static) Descriptor() ([]byte, []int) {
	return file_static_proto_rawDescGZIP(), []int{0}
}

func (x *Static) GetCompilationMode() Static_CompilationMode {
	if x != nil {
		return x.CompilationMode
	}
	return Static_COMPILATION_MODE_UNSPECIFIED
}

func (x *Static) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *Static) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *Static) GetGnArgs() []string {
	if x != nil {
		return x.GnArgs
	}
	return nil
}

func (x *Static) GetNinjaTargets() []string {
	if x != nil {
		return x.NinjaTargets
	}
	return nil
}

func (x *Static) GetUniversePackages() []string {
	if x != nil {
		return x.UniversePackages
	}
	return nil
}

func (x *Static) GetHostLabels() []string {
	if x != nil {
		return x.HostLabels
	}
	return nil
}

func (x *Static) GetTargetArch() Static_Arch {
	if x != nil {
		return x.TargetArch
	}
	return Static_ARCH_UNSPECIFIED
}

func (x *Static) GetVariants() []string {
	if x != nil {
		return x.Variants
	}
	return nil
}

func (x *Static) GetPave() bool {
	if x != nil {
		return x.Pave
	}
	return false
}

func (x *Static) GetIncludeImages() bool {
	if x != nil {
		return x.IncludeImages
	}
	return false
}

func (x *Static) GetIncludePrebuiltBinaryManifests() bool {
	if x != nil {
		return x.IncludePrebuiltBinaryManifests
	}
	return false
}

func (x *Static) GetIncludeGeneratedSources() bool {
	if x != nil {
		return x.IncludeGeneratedSources
	}
	return false
}

func (x *Static) GetIncludeHostTests() bool {
	if x != nil {
		return x.IncludeHostTests
	}
	return false
}

func (x *Static) GetIncludeArchives() bool {
	if x != nil {
		return x.IncludeArchives
	}
	return false
}

func (x *Static) GetTools() []string {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *Static) GetSkipIfUnaffected() bool {
	if x != nil {
		return x.SkipIfUnaffected
	}
	return false
}

func (x *Static) GetTestDurationsFile() string {
	if x != nil {
		return x.TestDurationsFile
	}
	return ""
}

func (x *Static) GetDefaultTestDurationsFile() string {
	if x != nil {
		return x.DefaultTestDurationsFile
	}
	return ""
}

func (x *Static) GetEnableGoCache() bool {
	if x != nil {
		return x.EnableGoCache
	}
	return false
}

func (x *Static) GetEnableRustCache() bool {
	if x != nil {
		return x.EnableRustCache
	}
	return false
}

func (x *Static) GetIdeFiles() []string {
	if x != nil {
		return x.IdeFiles
	}
	return nil
}

func (x *Static) GetJsonIdeScripts() []string {
	if x != nil {
		return x.JsonIdeScripts
	}
	return nil
}

func (x *Static) GetExportRustProject() bool {
	if x != nil {
		return x.ExportRustProject
	}
	return false
}

func (x *Static) GetRustRbeEnable() bool {
	if x != nil {
		return x.RustRbeEnable
	}
	return false
}

func (x *Static) GetCxxRbeEnable() bool {
	if x != nil {
		return x.CxxRbeEnable
	}
	return false
}

func (x *Static) GetIncremental() bool {
	if x != nil {
		return x.Incremental
	}
	return false
}

func (x *Static) GetIncludeDefaultNinjaTarget() bool {
	if x != nil {
		return x.IncludeDefaultNinjaTarget
	}
	return false
}

func (x *Static) GetUseTemporaryGoCache() bool {
	if x != nil {
		return x.UseTemporaryGoCache
	}
	return false
}

func (x *Static) GetIncludeLintTargets() Static_LintTargets {
	if x != nil {
		return x.IncludeLintTargets
	}
	return Static_NO_LINT_TARGETS
}

func (x *Static) GetNinjaArgs() []string {
	if x != nil {
		return x.NinjaArgs
	}
	return nil
}

func (x *Static) GetHermeticTestPackages() []string {
	if x != nil {
		return x.HermeticTestPackages
	}
	return nil
}

func (x *Static) GetTestPackages() []string {
	if x != nil {
		return x.TestPackages
	}
	return nil
}

func (x *Static) GetE2ETestLabels() []string {
	if x != nil {
		return x.E2ETestLabels
	}
	return nil
}

func (x *Static) GetHostTestLabels() []string {
	if x != nil {
		return x.HostTestLabels
	}
	return nil
}

func (x *Static) GetDeveloperTestLabels() []string {
	if x != nil {
		return x.DeveloperTestLabels
	}
	return nil
}

func (x *Static) GetBuildOnlyLabels() []string {
	if x != nil {
		return x.BuildOnlyLabels
	}
	return nil
}

func (x *Static) GetLinkRbeEnable() bool {
	if x != nil {
		return x.LinkRbeEnable
	}
	return false
}

func (x *Static) GetBazelRbeEnable() bool {
	if x != nil {
		return x.BazelRbeEnable
	}
	return false
}

func (x *Static) GetBuildEventService() string {
	if x != nil {
		return x.BuildEventService
	}
	return ""
}

func (x *Static) GetMainPbLabel() string {
	if x != nil {
		return x.MainPbLabel
	}
	return ""
}

var File_static_proto protoreflect.FileDescriptor

var file_static_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x66, 0x69, 0x6e, 0x74, 0x22, 0x9d, 0x10, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12,
	0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x6e, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x6e, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x52, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x49, 0x0a, 0x21, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x50, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x66,
	0x5f, 0x75, 0x6e, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x66, 0x55, 0x6e, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x65, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x6f, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x73,
	0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x5f,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6a,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x75, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x72, 0x62, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x75, 0x73, 0x74, 0x52, 0x62, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x78, 0x78, 0x5f, 0x72, 0x62, 0x65,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63,
	0x78, 0x78, 0x52, 0x62, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x3f, 0x0a,
	0x1c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4e, 0x69, 0x6e, 0x6a, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x33,
	0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f,
	0x67, 0x6f, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x75, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x47, 0x6f, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x4a, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2e,
	0x4c, 0x69, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x12, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x4c, 0x69, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x22, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x41, 0x72, 0x67, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x68, 0x65, 0x72, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14,
	0x68, 0x65, 0x72, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x32, 0x65,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x25, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x32, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f, 0x73,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x62, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x62, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x7a, 0x65, 0x6c, 0x5f, 0x72, 0x62, 0x65,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62,
	0x61, 0x7a, 0x65, 0x6c, 0x52, 0x62, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x62, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x62, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x49,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x55,
	0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x03,
	0x22, 0x3d, 0x0a, 0x04, 0x41, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x52, 0x4d, 0x36, 0x34, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x36, 0x34,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x49, 0x53, 0x43, 0x56, 0x36, 0x34, 0x10, 0x03, 0x22,
	0x53, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x54, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x46, 0x46,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
	0x54, 0x53, 0x10, 0x02, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x6f, 0x2e, 0x66, 0x75, 0x63, 0x68, 0x73,
	0x69, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2f, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x66, 0x69, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_static_proto_rawDescOnce sync.Once
	file_static_proto_rawDescData = file_static_proto_rawDesc
)

func file_static_proto_rawDescGZIP() []byte {
	file_static_proto_rawDescOnce.Do(func() {
		file_static_proto_rawDescData = protoimpl.X.CompressGZIP(file_static_proto_rawDescData)
	})
	return file_static_proto_rawDescData
}

var file_static_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_static_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_static_proto_goTypes = []interface{}{
	(Static_CompilationMode)(0), // 0: fint.Static.CompilationMode
	(Static_Arch)(0),            // 1: fint.Static.Arch
	(Static_LintTargets)(0),     // 2: fint.Static.LintTargets
	(*Static)(nil),              // 3: fint.Static
}
var file_static_proto_depIdxs = []int32{
	0, // 0: fint.Static.compilation_mode:type_name -> fint.Static.CompilationMode
	1, // 1: fint.Static.target_arch:type_name -> fint.Static.Arch
	2, // 2: fint.Static.include_lint_targets:type_name -> fint.Static.LintTargets
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_static_proto_init() }
func file_static_proto_init() {
	if File_static_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_static_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Static); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_static_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_static_proto_goTypes,
		DependencyIndexes: file_static_proto_depIdxs,
		EnumInfos:         file_static_proto_enumTypes,
		MessageInfos:      file_static_proto_msgTypes,
	}.Build()
	File_static_proto = out.File
	file_static_proto_rawDesc = nil
	file_static_proto_goTypes = nil
	file_static_proto_depIdxs = nil
}
