use fidl::unpersist;
use fidl_my_config_lib::Config as FidlConfig;
use fuchsia_inspect::{ArithmeticArrayProperty, ArrayProperty, Node};
use fuchsia_runtime::{take_startup_handle, HandleInfo, HandleType};
use std::convert::TryInto;
const EXPECTED_CHECKSUM: &[u8] = &[
    0xcd, 0x57, 0xb2, 0xa2, 0x89, 0xbb, 0xb6, 0x11, 0xcf, 0x81, 0x50, 0xec, 0x06, 0xc5, 0x06, 0x4c,
    0x7c, 0xae, 0x79, 0x0f, 0xaa, 0x73, 0x0b, 0x6f, 0xa1, 0x02, 0xc3, 0x53, 0x7b, 0x94, 0xee, 0x1a,
];
#[derive(Debug)]
pub struct Config {
    pub my_flag: bool,
    pub my_int16: i16,
    pub my_int32: i32,
    pub my_int64: i64,
    pub my_int8: i8,
    pub my_string: String,
    pub my_uint16: u16,
    pub my_uint32: u32,
    pub my_uint64: u64,
    pub my_uint8: u8,
    pub my_vector_of_flag: Vec<bool>,
    pub my_vector_of_int16: Vec<i16>,
    pub my_vector_of_int32: Vec<i32>,
    pub my_vector_of_int64: Vec<i64>,
    pub my_vector_of_int8: Vec<i8>,
    pub my_vector_of_string: Vec<String>,
    pub my_vector_of_uint16: Vec<u16>,
    pub my_vector_of_uint32: Vec<u32>,
    pub my_vector_of_uint64: Vec<u64>,
    pub my_vector_of_uint8: Vec<u8>,
}
impl Config {
    #[doc = r" Take the config startup handle and parse its contents."]
    #[doc = r""]
    #[doc = r" # Panics"]
    #[doc = r""]
    #[doc = r" If the config startup handle was already taken or if it is not valid."]
    pub fn take_from_startup_handle() -> Self {
        let handle_info = HandleInfo::new(HandleType::ComponentConfigVmo, 0);
        let config_vmo: zx::Vmo =
            take_startup_handle(handle_info).expect("Config VMO handle must be present.").into();
        Self::from_vmo(&config_vmo).expect("Config VMO handle must be valid.")
    }
    #[doc = r" Parse `Self` from `vmo`."]
    pub fn from_vmo(vmo: &zx::Vmo) -> Result<Self, Error> {
        let config_size = vmo.get_content_size().map_err(Error::GettingContentSize)?;
        let config_bytes = vmo.read_to_vec(0, config_size).map_err(Error::ReadingConfigBytes)?;
        Self::from_bytes(&config_bytes)
    }
    #[doc = r" Parse `Self` from `bytes`."]
    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
        let (checksum_len_bytes, bytes) = bytes.split_at_checked(2).ok_or(Error::TooFewBytes)?;
        let checksum_len_bytes: [u8; 2] =
            checksum_len_bytes.try_into().expect("previous call guaranteed 2 element slice");
        let checksum_length = u16::from_le_bytes(checksum_len_bytes) as usize;
        let (observed_checksum, bytes) =
            bytes.split_at_checked(checksum_length).ok_or(Error::TooFewBytes)?;
        if observed_checksum != EXPECTED_CHECKSUM {
            return Err(Error::ChecksumMismatch { observed_checksum: observed_checksum.to_vec() });
        }
        let fidl_config: FidlConfig = unpersist(bytes).map_err(Error::Unpersist)?;
        Ok(Self {
            my_flag: fidl_config.my_flag,
            my_int16: fidl_config.my_int16,
            my_int32: fidl_config.my_int32,
            my_int64: fidl_config.my_int64,
            my_int8: fidl_config.my_int8,
            my_string: fidl_config.my_string,
            my_uint16: fidl_config.my_uint16,
            my_uint32: fidl_config.my_uint32,
            my_uint64: fidl_config.my_uint64,
            my_uint8: fidl_config.my_uint8,
            my_vector_of_flag: fidl_config.my_vector_of_flag,
            my_vector_of_int16: fidl_config.my_vector_of_int16,
            my_vector_of_int32: fidl_config.my_vector_of_int32,
            my_vector_of_int64: fidl_config.my_vector_of_int64,
            my_vector_of_int8: fidl_config.my_vector_of_int8,
            my_vector_of_string: fidl_config.my_vector_of_string,
            my_vector_of_uint16: fidl_config.my_vector_of_uint16,
            my_vector_of_uint32: fidl_config.my_vector_of_uint32,
            my_vector_of_uint64: fidl_config.my_vector_of_uint64,
            my_vector_of_uint8: fidl_config.my_vector_of_uint8,
        })
    }
    pub fn record_inspect(&self, inspector_node: &Node) {
        inspector_node.record_bool("my_flag", self.my_flag);
        inspector_node.record_int("my_int16", self.my_int16 as i64);
        inspector_node.record_int("my_int32", self.my_int32 as i64);
        inspector_node.record_int("my_int64", self.my_int64);
        inspector_node.record_int("my_int8", self.my_int8 as i64);
        inspector_node.record_string("my_string", &self.my_string);
        inspector_node.record_uint("my_uint16", self.my_uint16 as u64);
        inspector_node.record_uint("my_uint32", self.my_uint32 as u64);
        inspector_node.record_uint("my_uint64", self.my_uint64);
        inspector_node.record_uint("my_uint8", self.my_uint8 as u64);
        let arr =
            inspector_node.create_uint_array("my_vector_of_flag", self.my_vector_of_flag.len());
        for i in 0..self.my_vector_of_flag.len() {
            arr.add(i, self.my_vector_of_flag[i] as u64);
        }
        inspector_node.record(arr);
        let arr =
            inspector_node.create_int_array("my_vector_of_int16", self.my_vector_of_int16.len());
        for i in 0..self.my_vector_of_int16.len() {
            arr.add(i, self.my_vector_of_int16[i] as i64);
        }
        inspector_node.record(arr);
        let arr =
            inspector_node.create_int_array("my_vector_of_int32", self.my_vector_of_int32.len());
        for i in 0..self.my_vector_of_int32.len() {
            arr.add(i, self.my_vector_of_int32[i] as i64);
        }
        inspector_node.record(arr);
        let arr =
            inspector_node.create_int_array("my_vector_of_int64", self.my_vector_of_int64.len());
        for i in 0..self.my_vector_of_int64.len() {
            arr.add(i, self.my_vector_of_int64[i]);
        }
        inspector_node.record(arr);
        let arr =
            inspector_node.create_int_array("my_vector_of_int8", self.my_vector_of_int8.len());
        for i in 0..self.my_vector_of_int8.len() {
            arr.add(i, self.my_vector_of_int8[i] as i64);
        }
        inspector_node.record(arr);
        let arr = inspector_node
            .create_string_array("my_vector_of_string", self.my_vector_of_string.len());
        for i in 0..self.my_vector_of_string.len() {
            arr.set(i, &self.my_vector_of_string[i]);
        }
        inspector_node.record(arr);
        let arr =
            inspector_node.create_uint_array("my_vector_of_uint16", self.my_vector_of_uint16.len());
        for i in 0..self.my_vector_of_uint16.len() {
            arr.add(i, self.my_vector_of_uint16[i] as u64);
        }
        inspector_node.record(arr);
        let arr =
            inspector_node.create_uint_array("my_vector_of_uint32", self.my_vector_of_uint32.len());
        for i in 0..self.my_vector_of_uint32.len() {
            arr.add(i, self.my_vector_of_uint32[i] as u64);
        }
        inspector_node.record(arr);
        let arr =
            inspector_node.create_uint_array("my_vector_of_uint64", self.my_vector_of_uint64.len());
        for i in 0..self.my_vector_of_uint64.len() {
            arr.add(i, self.my_vector_of_uint64[i]);
        }
        inspector_node.record(arr);
        let arr =
            inspector_node.create_uint_array("my_vector_of_uint8", self.my_vector_of_uint8.len());
        for i in 0..self.my_vector_of_uint8.len() {
            arr.add(i, self.my_vector_of_uint8[i] as u64);
        }
        inspector_node.record(arr);
    }
}
#[derive(Debug)]
pub enum Error {
    #[doc = r" Failed to read the content size of the VMO."]
    GettingContentSize(zx::Status),
    #[doc = r" Failed to read the content of the VMO."]
    ReadingConfigBytes(zx::Status),
    #[doc = r" The VMO was too small for this config library."]
    TooFewBytes,
    #[doc = r" The VMO's config ABI checksum did not match this library's."]
    ChecksumMismatch { observed_checksum: Vec<u8> },
    #[doc = r" Failed to parse the non-checksum bytes of the VMO as this library's FIDL type."]
    Unpersist(fidl::Error),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::GettingContentSize(status) => {
                write!(f, "Failed to get content size: {status}")
            }
            Self::ReadingConfigBytes(status) => {
                write!(f, "Failed to read VMO content: {status}")
            }
            Self::TooFewBytes => {
                write!(f, "VMO content is not large enough for this config library.")
            }
            Self::ChecksumMismatch { observed_checksum } => {
                write!(
                    f,
                    "ABI checksum mismatch, expected {:?}, got {:?}",
                    EXPECTED_CHECKSUM, observed_checksum,
                )
            }
            Self::Unpersist(fidl_error) => {
                write!(f, "Failed to parse contents of config VMO: {fidl_error}")
            }
        }
    }
}
impl std::error::Error for Error {
    #[allow(unused_parens, reason = "rustfmt errors without parens here")]
    fn source(&self) -> Option<(&'_ (dyn std::error::Error + 'static))> {
        match self {
            Self::GettingContentSize(ref status) | Self::ReadingConfigBytes(ref status) => {
                Some(status)
            }
            Self::TooFewBytes => None,
            Self::ChecksumMismatch { .. } => None,
            Self::Unpersist(ref fidl_error) => Some(fidl_error),
        }
    }
    fn description(&self) -> &str {
        match self {
            Self::GettingContentSize(_) => "getting content size",
            Self::ReadingConfigBytes(_) => "reading VMO contents",
            Self::TooFewBytes => "VMO contents too small",
            Self::ChecksumMismatch { .. } => "ABI checksum mismatch",
            Self::Unpersist(_) => "FIDL parsing error",
        }
    }
}
