# Copyright 2025 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# TODO: You only need one BUILD file. Chose between this one or the gn one and then
# delete the other one. Use bazel for vendor repo drivers. Use gn for in-tree drivers.

load(
    "@rules_fuchsia//fuchsia:defs.bzl",
    "fuchsia_cc_driver",
    "fuchsia_cc_test",
    "fuchsia_component_manifest",
    "fuchsia_driver_bind_bytecode",
    "fuchsia_driver_component",
    "fuchsia_package",
    "fuchsia_unittest_package",
)

fuchsia_driver_bind_bytecode(
    name = "bind_bytecode",
    output = "my_driver_cpp.bindbc",
    rules = "meta/my_driver_cpp.bind",
)

cc_library(
    name = "my_driver_cpp_common",
    srcs = [
        "my_driver_cpp.cc",
    ],
    hdrs = [
        "my_driver_cpp.h",
    ],
    deps = [
        "@fuchsia_sdk//pkg/driver_component_cpp",
        "@fuchsia_sdk//pkg/driver_logging_cpp",
        "@fuchsia_sdk//pkg/zx",
    ],
)

fuchsia_cc_driver(
    name = "driver",
    srcs = ["my_driver_cpp.cc"],
    linkshared = True,
    output_name = "my_driver_cpp",
    deps = [":my_driver_cpp_common"],
)

fuchsia_component_manifest(
    name = "manifest",
    src = "meta/my_driver_cpp.cml",
    component_name = "my_driver_cpp",
)

fuchsia_driver_component(
    name = "component",
    bind_bytecode = ":bind_bytecode",
    driver_lib = ":driver",
    manifest = ":manifest",
)

fuchsia_package(
    name = "pkg",
    package_name = "my_driver_cpp",
    components = [":component"],
    fuchsia_api_level = "HEAD",
    package_repository_name = "fuchsia.com",
    visibility = ["//visibility:public"],
)

fuchsia_cc_test(
    name = "my_driver_cpp_test",
    srcs = ["tests/my_driver_cpp_test.cc"],
    deps = [
        ":my_driver_cpp_common",
        "@com_google_googletest//:gtest_main",
        "@fuchsia_sdk//pkg/driver_runtime_cpp",
        "@fuchsia_sdk//pkg/driver_testing_cpp",
    ],
)

# To use this target make sure to include it in a bazel_test_package_group in the build.
fuchsia_unittest_package(
    name = "test_pkg",
    package_name = "my_driver_cpp_test",
    fuchsia_api_level = "HEAD",
    unit_tests = [":my_driver_cpp_test"],
    visibility = ["//visibility:public"],
)
