{{>copyright comment="//"}}

#include "{{PROJECT_PATH}}/{{snake_case PROJECT_NAME}}.h"

#include <lib/driver/testing/cpp/driver_test.h>

#include <gtest/gtest.h>

namespace {{snake_case PROJECT_NAME}} {

class {{pascal_case PROJECT_NAME}}TestEnvironment : public fdf_testing::Environment {
 public:
  zx::result<> Serve(fdf::OutgoingDirectory& to_driver_vfs) override {
    return zx::ok();
  }
};

class {{pascal_case PROJECT_NAME}}TestConfig final {
 public:
  using DriverType = {{pascal_case PROJECT_NAME}};
  using EnvironmentType = {{pascal_case PROJECT_NAME}}TestEnvironment;
};

class {{pascal_case PROJECT_NAME}}Test : public ::testing::Test {
 public:
  void SetUp() override {
    zx::result<> result = driver_test().StartDriver();
    ASSERT_EQ(ZX_OK, result.status_value());
  }

  void TearDown() override {
    zx::result<> result = driver_test().StopDriver();
    ASSERT_EQ(ZX_OK, result.status_value());
  }

  fdf_testing::ForegroundDriverTest<{{pascal_case PROJECT_NAME}}TestConfig>& driver_test() {
    return driver_test_;
  }

 private:
  fdf_testing::ForegroundDriverTest<{{pascal_case PROJECT_NAME}}TestConfig> driver_test_;
};


TEST_F({{pascal_case PROJECT_NAME}}Test, ExampleTest) {
  EXPECT_TRUE(driver_test().driver() != nullptr);
}

}  // namespace {{snake_case PROJECT_NAME}}
