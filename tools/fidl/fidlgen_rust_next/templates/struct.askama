{% let is_static = strct.shape.max_out_of_line == 0 %}
{% let has_padding = strct.shape.has_padding %}
{% let base_name = strct.name.decl_name().camel() %}
{% let name = filters::ident(base_name)? %}
{% let wire_name = format!("Wire{base_name}") %}

{{ self::doc_string(strct.attributes) -}}
#[derive(
    {% if !strct.is_resource %}
        Clone,
    {% endif %}
    {% if context.config.emit_debug_impls %}
        Debug,
    {% endif %}
)]
{%- if is_static && !has_padding %}
    #[repr(C)]
{% endif -%}
pub struct {{ name }} {
    {% for member in strct.members %}
        pub {{ member.name.snake()|ident }}: {{ context.natural_type(member.ty) }},
    {% endfor %}
}

impl ::fidl_next::Encodable for {{ name }} {
    {% if is_static && !has_padding %}
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true
            {% for member in strct.members %}
                && <
                    {{ context.natural_type(member.ty) }} as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()
            {% endfor %}
        )
    };
    {% endif %}

    type Encoded = {{ wire_name }};
}

impl<___E> ::fidl_next::Encode<___E> for {{ name }}
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
    {% if !is_static %}
        ___E: ::fidl_next::Encoder,
    {% endif %}
    {% if strct.is_resource %}
        ___E: ::fidl_next::fuchsia::HandleEncoder,
    {% endif %}
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                {% for member in strct.members -%}
                    {{ member.name.snake()|ident }},
                {% endfor %}
            } = slot;
        }

        {% for member in strct.members %}
            {% let member_name = filters::ident(member.name.snake())? %}
            ::fidl_next::Encode::encode(&mut self.{{ member_name }}, encoder, {{ member_name }})?;
        {% endfor %}
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<{{ name }}> {
    type EncodedOption = ::fidl_next::WireBox<{{ wire_name }}>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<{{ name }}>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    {{ name }}: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<{{ wire_name }}> for {{ name }} {
    {% if is_static && !has_padding %}
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true
            {% for member in strct.members %}
                && <
                    {{ context.natural_type(member.ty) }} as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()
            {% endfor %}
        )
    };
    {% endif %}

    #[inline]
    fn take_from(from: &{{ wire_name }}) -> Self {
        Self {
            {% for member in strct.members %}
                {% let member_name = filters::ident(member.name.snake())? %}
                {{ member_name }}: ::fidl_next::TakeFrom::take_from(&from.{{ member_name }}),
            {% endfor %}
        }
    }
}

/// The wire type corersponding to [`{{ name }}`].
#[derive(
    {% if is_static && !strct.is_resource %}
        Clone,
    {% endif %}
    {% if context.config.emit_debug_impls %}
        Debug,
    {% endif %}
)]
#[repr(C)]
pub struct {{ wire_name }} {
    {% for member in strct.members %}
        pub {{ member.name.snake()|ident }}: {{ context.wire_type(member.ty) }},
    {% endfor %}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for {{ wire_name }}
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
    {% if !is_static %}
        ___D: ::fidl_next::Decoder,
    {% endif %}
    {% if strct.is_resource %}
        ___D: ::fidl_next::fuchsia::HandleDecoder,
    {% endif %}
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                {% for member in strct.members -%}
                    mut {{ member.name.snake()|ident }},
                {% endfor %}
            } = slot;
        }

        {% for member in strct.members %}
            {% let member_name = filters::ident(member.name.snake())? %}
            ::fidl_next::Decode::decode({{ member_name }}.as_mut(), decoder)?;
            {# type check #}
            {% match member.ty.kind %}
                {% when TypeKind::Array { element_count, element_type } %}
                {% when TypeKind::Vector { element_count, element_type, nullable } %}
                    {% if let Some(limit) = element_count %}
                        let {{ member_name }} = unsafe { {{ member_name }}.deref_unchecked() };
                        {% if nullable %}
                            if let Some({{ member_name }}) = {{ member_name }}.as_ref() {
                        {% endif %}
                                if {{ member_name }}.len() > {{ limit }} {
                                    return Err(::fidl_next::DecodeError::VectorTooLong {
                                        size: {{ member_name }}.len() as u64,
                                        limit: {{ limit }},
                                    });
                                }
                        {% if nullable %}
                            }
                        {% endif %}
                    {% endif %}
                {% when TypeKind::String { element_count, nullable } %}
                    {% if let Some(limit) = element_count %}
                        let {{ member_name }} = unsafe { {{ member_name }}.deref_unchecked() };
                        {% if nullable %}
                            if let Some({{ member_name }}) = {{ member_name }}.as_ref() {
                        {% endif %}
                                if {{ member_name }}.len() > {{ limit }} {
                                    return Err(::fidl_next::DecodeError::VectorTooLong {
                                        size: {{ member_name }}.len() as u64,
                                        limit: {{ limit }},
                                    });
                                }
                        {% if nullable %}
                            }
                        {% endif %}
                    {% endif %}
                {% else %} {# todo #}
            {% endmatch %}
        {% endfor %}
        Ok(())
    }
}