// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
)]

{% for ident in schema.declaration_order %}
    {% match schema.declarations[ident] %}
        {% when DeclType::Alias %}
            {{ self.alias(schema.alias_declarations[ident]) }}
        {% when DeclType::Bits %}
            {{ self.bits(schema.bits_declarations[ident]) }}
        {% when DeclType::Const %}
            {{ self.cnst(schema.const_declarations[ident]) }}
        {% when DeclType::Enum %}
            {{ self.enm(schema.enum_declarations[ident]) }}
        {% when DeclType::Struct %}
            {{ self.strct(schema.struct_declarations[ident]) }}
        {% when DeclType::Table %}
            {{ self.table(schema.table_declarations[ident]) }}
        {% when DeclType::Union %}
            {{ self.union(schema.union_declarations[ident]) }}
        {% when DeclType::NewType %} {{ todo!("newtypes are not supported yet") }}
        {% when DeclType::Overlay %} {{ todo!("overlays are not supported yet") }}
        {% when DeclType::Protocol %}
            {{ self.protocol(schema.protocol_declarations[ident]) }}
        {% when DeclType::Resource %}
        {% when DeclType::Service %}
            {{ self.service(schema.service_declarations[ident]) }}
    {% endmatch %}
{% endfor %}

/// Commonly-used items that should usually be in scope, such as extension traits.
pub mod prelude {
    {%- for ident in schema.declaration_order -%}
        {%- match schema.declarations[ident] -%}
            {%- when DeclType::Protocol -%}
                {%- let protocol = schema.protocol_declarations[ident] -%}
                {%- let protocol_base_name = protocol.name.decl_name().camel() -%}
                pub use super::{
                    {{ format!("{protocol_base_name}ClientSender") }},
                    {{ format!("{protocol_base_name}ServerSender") }},
                };
            {%- when DeclType::Service -%}
                {%- let service = schema.service_declarations[ident] -%}
                {%- let service_base_name = service.name.decl_name().camel() -%}
                pub use super::{{ format!("{service_base_name}Instance") }};
            {%- else -%}
        {%- endmatch -%}
    {%- endfor -%}
}

{% if config.emit_compat %}
    {{ self.compat() }}
{% endif %}
