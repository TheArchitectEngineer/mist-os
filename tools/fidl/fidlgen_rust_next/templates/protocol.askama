{% let non_canonical_name = protocol.name.decl_name().non_canonical() %}
{% let protocol_base_name = protocol.name.decl_name().camel() %}
{% let protocol_name = filters::ident(protocol_base_name)? %}
{% let module_name = filters::ident(protocol.name.decl_name().snake())? %}

{% let client_sender_name = format!("{protocol_base_name}ClientSender") %}
{% let client_handler_name = format!("{protocol_base_name}ClientHandler") %}

{% let server_sender_name = format!("{protocol_base_name}ServerSender") %}
{% let server_handler_name = format!("{protocol_base_name}ServerHandler") %}

/// The type corresponding to the {{ non_canonical_name }} protocol.
{{ self::doc_string(protocol.attributes) -}}
{% if context.config.emit_debug_impls -%}
    #[derive(Debug)]
{%- endif %}
pub struct {{ protocol_name }};

{% if protocol.attributes.attributes.contains_key("discoverable") %}
    impl ::fidl_next::Discoverable for {{ protocol_name }} {
        const PROTOCOL_NAME: &'static str = "{{ protocol.name.decl_name().snake() }}";
    }
{% endif %}

pub mod {{ module_name }} {
    pub mod prelude {
        pub use crate::{
            {{ protocol_name }},
            {{ client_sender_name }},
            {{ client_handler_name }},
            {{ server_sender_name }},
            {{ server_handler_name }},
            {{ module_name }},
        };
        {% for ident in self.prelude_method_type_idents() %}
            pub use {{ context.natural_id(ident) }};
        {% endfor %}
    }

    {% for method in protocol.methods %}
        {% let method_name = filters::ident(method.name.camel())? %}
        pub struct {{ method_name }};

        impl ::fidl_next::Method for {{ method_name }} {
            const ORDINAL: u64 = {{ method.ordinal }};

            type Protocol = crate::{{ protocol_name }};

            {% if method.kind == ProtocolMethodKind::OneWay || method.kind == ProtocolMethodKind::TwoWay %}
                {% if let Some(request) = method.maybe_request_payload %}
                    type Request = {{ context.wire_type(request) }};
                {% else %}
                    type Request = ();
                {% endif %}
            {% else %}
                type Request = ::fidl_next::Never;
            {% endif %}

            type Response =
                {% match method.kind %}
                    {% when ProtocolMethodKind::OneWay %}
                        ::fidl_next::Never
                    {% when ProtocolMethodKind::TwoWay %}
                        {% if method.has_error %}
                            {% if !method.is_strict %}
                                ::fidl_next::WireFlexibleResult
                            {% else %}
                                ::fidl_next::WireResult
                            {% endif %}
                            <
                            {% if let Some(success) = method.maybe_response_success_type.as_ref() %}
                                {{ context.wire_type(success) }},
                            {% else %}
                                (),
                            {% endif %}
                            {% if let Some(error) = method.maybe_response_err_type.as_ref() %}
                                {{ context.wire_type(error) }},
                            {% else %}
                                (),
                            {% endif %}
                            >
                        {% else if !method.is_strict %}
                            ::fidl_next::WireFlexible<
                            {% if let Some(success) = method.maybe_response_success_type.as_ref() %}
                                {{ context.wire_type(success) }}
                            {% else %}
                                ()
                            {% endif %}
                            >
                        {% else %}
                            {% if let Some(response) = method.maybe_response_payload.as_ref() %}
                                {{ context.wire_type(response) }}
                            {% else %}
                                ()
                            {% endif %}
                        {% endif %}
                    {% when ProtocolMethodKind::Event %}
                        {% if let Some(response) = method.maybe_response_payload.as_ref() %}
                            {{ context.wire_type(response) }}
                        {% else %}
                            ()
                        {% endif %}
                {% endmatch %}
                ;
        }
    {% endfor %}
}

/// A helper trait for the `{{ non_canonical_name }}` client sender.
pub trait {{ client_sender_name }} {
    type Transport: ::fidl_next::Transport;

    {% for method in protocol.methods %}
        {% let method_name = filters::ident(method.name.snake())? %}
        {% let method_type_name = filters::ident(method.name.camel())? %}

        {% match method.kind %}
            {% when ProtocolMethodKind::OneWay %}
                {{ self::doc_string(method.attributes) -}}
                {% if let Some(request) = method.maybe_request_payload %}
                    fn {{ method_name }}<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = {{ context.wire_type(request) }},
                        >;
                {% else %}
                    fn {{ method_name }}(
                        &self,
                    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>;
                {% endif %}
            {% when ProtocolMethodKind::TwoWay %}
                {{ self::doc_string(method.attributes) -}}
                {% if let Some(request) = method.maybe_request_payload %}
                    fn {{ method_name }}<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<
                            '_,
                            Self::Transport,
                            {{ module_name }}::{{ method_type_name }},
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = {{ context.wire_type(request) }},
                        >;
                {% else %}
                    fn {{ method_name }}(
                        &self,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<
                            '_,
                            Self::Transport,
                            {{ module_name }}::{{ method_type_name }},
                        >,
                        ::fidl_next::EncodeError,
                    >;
                {% endif %}
            {% when ProtocolMethodKind::Event %}
        {% endmatch %}
    {% endfor %}
}

impl<___T> {{ client_sender_name }} for ::fidl_next::ClientSender<___T, {{ protocol_name }}>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    {% for method in protocol.methods %}
        {% let method_name = filters::ident(method.name.snake())? %}
        {% let method_type_name = filters::ident(method.name.camel())? %}

        {% match method.kind %}
            {% when ProtocolMethodKind::OneWay %}
                {{ self::doc_string(method.attributes) -}}
                {% if let Some(request) = method.maybe_request_payload %}
                    fn {{ method_name }}<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = {{ context.wire_type(request) }},
                        >,
                    {
                        self.as_untyped().send_one_way({{ method.ordinal }}, request)
                    }
                {% else %}
                    fn {{ method_name }}(
                        &self,
                    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError> {
                        self.as_untyped().send_one_way({{ method.ordinal }}, &mut ())
                    }
                {% endif %}
            {% when ProtocolMethodKind::TwoWay %}
                {{ self::doc_string(method.attributes) -}}
                {% if let Some(request) = method.maybe_request_payload %}
                    fn {{ method_name }}<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<'_, Self::Transport, {{ module_name }}::{{ method_type_name }}>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = {{ context.wire_type(request) }},
                        >,
                    {
                        self.as_untyped().send_two_way({{ method.ordinal }}, request)
                            .map(::fidl_next::ResponseFuture::from_untyped)
                    }
                {% else %}
                    fn {{ method_name }}(
                        &self,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<'_, Self::Transport, {{ module_name }}::{{ method_type_name }}>,
                        ::fidl_next::EncodeError,
                    > {
                        self.as_untyped().send_two_way({{ method.ordinal }}, &mut ())
                            .map(::fidl_next::ResponseFuture::from_untyped)
                    }
                {% endif %}
            {% when ProtocolMethodKind::Event %}
        {% endmatch %}
    {% endfor %}
}

/// A client handler for the {{ non_canonical_name }} protocol.
///
/// See [`{{ protocol_name }}`] for more details.
pub trait {{ client_handler_name }}<___T: ::fidl_next::Transport> {
    {% for method in protocol.methods %}
        {% if method.kind == ProtocolMethodKind::Event %}
            {% let method_name = filters::ident(method.name.snake())? %}
            {% let method_type_name = filters::ident(method.name.camel())? %}

            {{ self::doc_string(method.attributes) -}}
            fn {{ method_name }}(
                &mut self,
                sender: &::fidl_next::ClientSender<___T, {{ protocol_name }}>,
                {% if method.maybe_response_payload.is_some() %}
                    message: ::fidl_next::ResponseBuffer<___T, {{ module_name }}::{{ method_type_name }}>,
                {% endif %}
            );
        {% endif %}
    {% endfor %}

    {% if protocol.openness != ProtocolOpenness::Closed %}
        fn on_unknown_interaction(
            &mut self,
            sender: &::fidl_next::ClientSender<___T, {{ protocol_name }}>,
            ordinal: u64,
        ) {
            {# TODO: send epitaph before closing #}
            sender.close();
        }
    {% endif %}
}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for {{ protocol_name }}
where
    ___T: ::fidl_next::Transport,
    ___H: {{ client_handler_name }}<___T>,
    {% for method in protocol.methods %}
        {% if method.maybe_response_payload.is_some() %}
            {% let method_type_name = filters::ident(method.name.camel())? %}
            <{{ module_name }}::{{ method_type_name }} as ::fidl_next::Method>::Response:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
        {% endif %}
    {% endfor %}
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            {% for method in protocol.methods %}
                {% let method_name = filters::ident(method.name.snake())? %}
                {% if method.kind == ProtocolMethodKind::Event %}
                    {{ method.ordinal }} => {
                        {% if method.maybe_response_payload.is_some() %}
                            let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                            handler.{{ method_name }}(sender, buffer);
                        {% else %}
                            handler.{{ method_name}}(sender);
                        {% endif %}
                    }
                {% endif %}
            {% endfor %}
            {% if protocol.openness != ProtocolOpenness::Closed %}
                ordinal => handler.on_unknown_interaction(sender, ordinal),
            {% else %}
                ordinal => {
                    {# TODO: send epitaph #}
                    sender.close();
                }
            {% endif %}
        }
    }
}

/// A helper trait for the `{{ non_canonical_name }}` server sender.
pub trait {{ server_sender_name }} {
    type Transport: ::fidl_next::Transport;

    {% for method in protocol.methods %}
        {% let method_name = filters::ident(method.name.snake())? %}

        {% if method.kind == ProtocolMethodKind::Event %}
            {{ self::doc_string(method.attributes) -}}
            {% if method.maybe_response_payload.is_some() %}
                {% let method_type_name = filters::ident(method.name.camel())? %}
                fn {{ method_name }}<___R>(
                    &self,
                    request: &mut ___R,
                ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                where
                    ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                        Encoded = <{{ module_name }}::{{ method_type_name }} as ::fidl_next::Method>::Response,
                    >;
            {% else %}
                fn {{ method_name }}(
                    &self,
                ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>;
            {% endif %}
        {% endif %}
    {% endfor %}
}

impl<___T> {{ server_sender_name }} for ::fidl_next::ServerSender<___T, {{ protocol_name }}>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    {% for method in protocol.methods %}
        {% let method_name = filters::ident(method.name.snake())? %}

        {% if method.kind == ProtocolMethodKind::Event %}
            {{ self::doc_string(method.attributes) -}}
            {% if method.maybe_response_payload.is_some() %}
                {% let method_type_name = filters::ident(method.name.camel())? %}
                fn {{ method_name }}<___R>(
                    &self,
                    request: &mut ___R,
                ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                where
                    ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                        Encoded = <{{ module_name }}::{{ method_type_name }} as ::fidl_next::Method>::Response,
                    >,
                {
                    self.as_untyped().send_event({{ method.ordinal }}, request)
                }
            {% else %}
                fn {{ method_name }}(
                    &self,
                ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError> {
                    self.as_untyped().send_event({{ method.ordinal }}, &mut ())
                }
            {% endif %}
        {% endif %}
    {% endfor %}
}

/// A server handler for the {{ non_canonical_name }} protocol.
///
/// See [`{{ protocol_name }}`] for more details.
pub trait {{ server_handler_name }}<___T: ::fidl_next::Transport> {
    {% for method in protocol.methods %}
        {% let method_name = filters::ident(method.name.snake())? %}
        {% let method_type_name = filters::ident(method.name.camel())? %}

        {% match method.kind %}
            {% when ProtocolMethodKind::OneWay %}
                {{ self::doc_string(method.attributes) -}}
                fn {{ method_name }}(
                    &mut self,
                    sender: &::fidl_next::ServerSender<___T, {{ protocol_name }}>,
                    {% if let Some(request) = method.maybe_request_payload %}
                        request: ::fidl_next::RequestBuffer<___T, {{ module_name }}::{{ method_type_name }}>,
                    {% endif %}
                );
            {% when ProtocolMethodKind::TwoWay %}
                {{ self::doc_string(method.attributes) -}}
                fn {{ method_name }}(
                    &mut self,
                    sender: &::fidl_next::ServerSender<___T, {{ protocol_name }}>,
                    {% if let Some(request) = method.maybe_request_payload %}
                        request: ::fidl_next::RequestBuffer<___T, {{ module_name }}::{{ method_type_name }}>,
                    {% endif %}
                    responder: ::fidl_next::Responder<{{ module_name }}::{{ method_type_name }}>,
                );
            {% when ProtocolMethodKind::Event %}
        {% endmatch %}
    {% endfor %}

    {% if protocol.openness != ProtocolOpenness::Closed %}
        fn on_unknown_interaction(
            &mut self,
            sender: &::fidl_next::ServerSender<___T, {{ protocol_name }}>,
            ordinal: u64,
        ) {
            {# TODO: send epitaph before closing #}
            sender.close();
        }
    {% endif %}
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for {{ protocol_name }}
where
    ___T: ::fidl_next::Transport,
    ___H: {{ server_handler_name }}<___T>,
    {% for method in protocol.methods %}
        {% if let Some(request) = method.maybe_request_payload %}
            {{ context.wire_type(request) }}:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
        {% endif %}
    {% endfor %}
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            {% for method in protocol.methods %}
                {% let method_name = filters::ident(method.name.snake())? %}
                {% if method.kind == ProtocolMethodKind::OneWay %}
                    {{ method.ordinal }} => {
                        {% if let Some(request) = method.maybe_request_payload %}
                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.{{ method_name }}(sender, buffer);
                        {% else %}
                            handler.{{ method_name}}(sender);
                        {% endif %}
                    }
                {% endif %}
            {% endfor %}
            {% if protocol.openness != ProtocolOpenness::Closed %}
                ordinal => handler.on_unknown_interaction(sender, ordinal),
            {% else %}
                ordinal => {
                    {# TODO: send epitaph #}
                    sender.close();
                }
            {% endif %}
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            {% for method in protocol.methods %}
                {% let method_name = filters::ident(method.name.snake())? %}
                {% if method.kind == ProtocolMethodKind::TwoWay %}
                    {{ method.ordinal }} => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);

                        {% if let Some(request) = method.maybe_request_payload %}
                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.{{ method_name }}(sender, buffer, responder);
                        {% else %}
                            handler.{{ method_name}}(sender, responder);
                        {% endif %}
                    }
                {% endif %}
            {% endfor %}
            {% if protocol.openness != ProtocolOpenness::Closed %}
                ordinal => handler.on_unknown_interaction(sender, ordinal),
            {% else %}
                ordinal => {
                    {# TODO: send epitaph #}
                    sender.close();
                }
            {% endif %}
        }
    }
}
