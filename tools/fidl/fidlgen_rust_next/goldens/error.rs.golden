// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct ExampleFooRequest {
    pub s: String,
}

impl ::fidl_next::Encodable for ExampleFooRequest {
    type Encoded = WireExampleFooRequest;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleFooRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.s, encoder, s)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleFooRequest> {
    type EncodedOption = ::fidl_next::WireBox<WireExampleFooRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ExampleFooRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleFooRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireExampleFooRequest> for ExampleFooRequest {
    #[inline]
    fn take_from(from: &WireExampleFooRequest) -> Self {
        Self { s: ::fidl_next::TakeFrom::take_from(&from.s) }
    }
}

/// The wire type corersponding to [`ExampleFooRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireExampleFooRequest {
    pub s: ::fidl_next::WireString,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleFooRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,

            } = slot;
        }

        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct ExampleFooResponse {
    pub y: i64,
}

impl ::fidl_next::Encodable for ExampleFooResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireExampleFooResponse;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleFooResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                y,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.y, encoder, y)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleFooResponse> {
    type EncodedOption = ::fidl_next::WireBox<WireExampleFooResponse>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ExampleFooResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleFooResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireExampleFooResponse> for ExampleFooResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WireExampleFooResponse) -> Self {
        Self { y: ::fidl_next::TakeFrom::take_from(&from.y) }
    }
}

/// The wire type corersponding to [`ExampleFooResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireExampleFooResponse {
    pub y: ::fidl_next::WireI64,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleFooResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut y,

            } = slot;
        }

        ::fidl_next::Decode::decode(y.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum ExampleFooResult {
    Response(crate::ExampleFooResponse),

    Err(u32),
}

impl ::fidl_next::Encodable for ExampleFooResult {
    type Encoded = WireExampleFooResult;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleFooResult
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireExampleFooResult { raw } = slot);

        match self {
            Self::Response(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::ExampleFooResponse,
            >(value, 1, encoder, raw)?,

            Self::Err(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleFooResult> {
    type EncodedOption = WireOptionalExampleFooResult;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ExampleFooResult>
where
    ___E: ?Sized,
    ExampleFooResult: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalExampleFooResult { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireExampleFooResult> for ExampleFooResult {
    #[inline]
    fn take_from(from: &WireExampleFooResult) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            2 => Self::Err(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalExampleFooResult> for Option<Box<ExampleFooResult>> {
    #[inline]
    fn take_from(from: &WireOptionalExampleFooResult) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`ExampleFooResult`].
#[repr(transparent)]
pub struct WireExampleFooResult {
    raw: ::fidl_next::RawWireUnion,
}

pub mod example_foo_result {
    pub enum Ref<'union> {
        Response(&'union crate::WireExampleFooResponse),

        Err(&'union ::fidl_next::WireU32),
    }
}

impl WireExampleFooResult {
    pub fn as_ref(&self) -> crate::example_foo_result::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::example_foo_result::Ref::Response(unsafe {
                self.raw.get().deref_unchecked()
            }),

            2 => crate::example_foo_result::Ref::Err(unsafe { self.raw.get().deref_unchecked() }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleFooResult
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireExampleFooResponse>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireU32>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireExampleFooResult {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<crate::WireExampleFooResponse>().fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireU32>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalExampleFooResult {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalExampleFooResult {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireExampleFooResult> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalExampleFooResult
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireExampleFooResponse>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireU32>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalExampleFooResult {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

/// The type corresponding to the Example protocol.
#[derive(Debug)]
pub struct Example;

pub mod example {

    pub struct Foo;

    impl ::fidl_next::Method for Foo {
        const ORDINAL: u64 = 1107623248440401476;

        type Protocol = crate::Example;

        type Request = crate::WireExampleFooRequest;

        type Response = crate::WireExampleFooResult;
    }
}

/// A helper trait for the `Example` client sender.
pub trait ExampleClientSender {
    type Transport: ::fidl_next::Transport;

    fn foo<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, example::Foo>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireExampleFooRequest,
        >;
}

impl<___T> ExampleClientSender for ::fidl_next::ClientSender<___T, Example>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn foo<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, example::Foo>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireExampleFooRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(1107623248440401476, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the Example protocol.
///
/// See [`Example`] for more details.
pub trait ExampleClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for Example
where
    ___T: ::fidl_next::Transport,
    ___H: ExampleClientHandler<___T>,

    crate::WireExampleFooResult: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `Example` server sender.
pub trait ExampleServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> ExampleServerSender for ::fidl_next::ServerSender<___T, Example>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the Example protocol.
///
/// See [`Example`] for more details.
pub trait ExampleServerHandler<___T: ::fidl_next::Transport> {
    fn foo(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Example>,

        request: ::fidl_next::RequestBuffer<___T, example::Foo>,

        responder: ::fidl_next::Responder<example::Foo>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for Example
where
    ___T: ::fidl_next::Transport,
    ___H: ExampleServerHandler<___T>,

    crate::WireExampleFooRequest: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            1107623248440401476 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.foo(sender, buffer, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Commonly-used items that should usually be in scope, such as extension traits.
pub mod prelude {
    pub use super::{ExampleClientSender, ExampleServerSender};
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Example`
    /// protocol.
    pub type ExampleProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Example>;
}
