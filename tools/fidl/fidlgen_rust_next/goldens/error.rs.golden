// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct ExampleFooRequest {
    pub s: String,
}

impl ::fidl_next::Encodable for ExampleFooRequest {
    type Encoded = WireExampleFooRequest<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ExampleFooRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = out;
        }

        ::fidl_next::Encode::encode(self.s, encoder, s)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for ExampleFooRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.s, encoder, s)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ExampleFooRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireExampleFooRequest<'static>>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ExampleFooRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleFooRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for ExampleFooRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleFooRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireExampleFooRequest<'de>> for ExampleFooRequest {
    #[inline]
    fn from_wire(wire: WireExampleFooRequest<'de>) -> Self {
        Self { s: ::fidl_next::FromWire::from_wire(wire.s) }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireExampleFooRequest<'de>> for ExampleFooRequest {
    #[inline]
    fn from_wire_ref(wire: &WireExampleFooRequest<'de>) -> Self {
        Self { s: ::fidl_next::FromWireRef::from_wire_ref(&wire.s) }
    }
}

/// The wire type corresponding to [`ExampleFooRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireExampleFooRequest<'de> {
    pub s: ::fidl_next::WireString<'de>,
}

unsafe impl ::fidl_next::Wire for WireExampleFooRequest<'static> {
    type Decoded<'de> = WireExampleFooRequest<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleFooRequest<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,

            } = slot;
        }

        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct ExampleFooResponse {
    pub y: i64,
}

impl ::fidl_next::Encodable for ExampleFooResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireExampleFooResponse> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireExampleFooResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ExampleFooResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                y,

            } = out;
        }

        ::fidl_next::Encode::encode(self.y, encoder, y)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for ExampleFooResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                y,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.y, encoder, y)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ExampleFooResponse {
    type EncodedOption = ::fidl_next::WireBox<'static, WireExampleFooResponse>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ExampleFooResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleFooResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for ExampleFooResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleFooResponse: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireExampleFooResponse> for ExampleFooResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireExampleFooResponse, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i64 as ::fidl_next::FromWire<::fidl_next::WireI64>>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireExampleFooResponse) -> Self {
        Self { y: ::fidl_next::FromWire::from_wire(wire.y) }
    }
}

impl ::fidl_next::FromWireRef<WireExampleFooResponse> for ExampleFooResponse {
    #[inline]
    fn from_wire_ref(wire: &WireExampleFooResponse) -> Self {
        Self { y: ::fidl_next::FromWireRef::from_wire_ref(&wire.y) }
    }
}

/// The wire type corresponding to [`ExampleFooResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireExampleFooResponse {
    pub y: ::fidl_next::WireI64,
}

unsafe impl ::fidl_next::Wire for WireExampleFooResponse {
    type Decoded<'de> = WireExampleFooResponse;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleFooResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut y,

            } = slot;
        }

        ::fidl_next::Decode::decode(y.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the Example protocol.
#[derive(Debug)]
pub struct Example;

pub mod example {
    pub mod prelude {
        pub use crate::{
            example, Example, ExampleClientHandler, ExampleClientSender, ExampleServerHandler,
            ExampleServerSender,
        };

        pub use crate::ExampleFooRequest;

        pub use crate::ExampleFooResponse;
    }

    pub struct Foo;

    impl ::fidl_next::Method for Foo {
        const ORDINAL: u64 = 1107623248440401476;

        type Protocol = crate::Example;

        type Request = crate::WireExampleFooRequest<'static>;

        type Response =
            ::fidl_next::WireResult<'static, crate::WireExampleFooResponse, ::fidl_next::WireU32>;
    }
}

/// A helper trait for the `Example` client sender.
pub trait ExampleClientSender {
    type Transport: ::fidl_next::Transport;

    fn foo<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, example::Foo>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireExampleFooRequest<'static>,
        >;
}

impl<___T> ExampleClientSender for ::fidl_next::ClientSender<___T, Example>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn foo<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, example::Foo>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireExampleFooRequest<'static>,
        >,
    {
        self.as_untyped()
            .send_two_way(1107623248440401476, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the Example protocol.
///
/// See [`Example`] for more details.
pub trait ExampleClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for Example
where
    ___T: ::fidl_next::Transport,
    ___H: ExampleClientHandler<___T>,

    <example::Foo as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `Example` server sender.
pub trait ExampleServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> ExampleServerSender for ::fidl_next::ServerSender<___T, Example>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the Example protocol.
///
/// See [`Example`] for more details.
pub trait ExampleServerHandler<___T: ::fidl_next::Transport> {
    fn foo(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Example>,

        request: ::fidl_next::Request<___T, example::Foo>,

        responder: ::fidl_next::Responder<example::Foo>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for Example
where
    ___T: ::fidl_next::Transport,
    ___H: ExampleServerHandler<___T>,

    <example::Foo as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            1107623248440401476 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.foo(sender, decoded, responder),
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Example`
    /// protocol.
    pub type ExampleProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Example>;

    impl ::core::convert::From<crate::Example> for ::fidl_test_error::ExampleMarker {
        #[inline]
        fn from(_: crate::Example) -> Self {
            Self
        }
    }
}
