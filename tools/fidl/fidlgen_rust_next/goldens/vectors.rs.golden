// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct ExampleUseOfVectors {
    pub vector_of_uint8: Vec<u8>,

    pub vector_of_vector_of_bool: Vec<Vec<bool>>,
}

impl ::fidl_next::Encodable for ExampleUseOfVectors {
    type Encoded = WireExampleUseOfVectors;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleUseOfVectors
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                vector_of_uint8,
                vector_of_vector_of_bool,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.vector_of_uint8, encoder, vector_of_uint8)?;

        ::fidl_next::Encode::encode(
            &mut self.vector_of_vector_of_bool,
            encoder,
            vector_of_vector_of_bool,
        )?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleUseOfVectors> {
    type EncodedOption = ::fidl_next::WireBox<WireExampleUseOfVectors>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ExampleUseOfVectors>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleUseOfVectors: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireExampleUseOfVectors> for ExampleUseOfVectors {
    #[inline]
    fn take_from(from: &WireExampleUseOfVectors) -> Self {
        Self {
            vector_of_uint8: ::fidl_next::TakeFrom::take_from(&from.vector_of_uint8),

            vector_of_vector_of_bool: ::fidl_next::TakeFrom::take_from(
                &from.vector_of_vector_of_bool,
            ),
        }
    }
}

/// The wire type corersponding to [`ExampleUseOfVectors`].
#[derive(Debug)]
#[repr(C)]
pub struct WireExampleUseOfVectors {
    pub vector_of_uint8: ::fidl_next::WireVector<u8>,

    pub vector_of_vector_of_bool: ::fidl_next::WireVector<::fidl_next::WireVector<bool>>,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleUseOfVectors
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut vector_of_uint8,
                mut vector_of_vector_of_bool,

            } = slot;
        }

        ::fidl_next::Decode::decode(vector_of_uint8.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(vector_of_vector_of_bool.as_mut(), decoder)?;

        Ok(())
    }
}

/// Commonly-used items that should usually be in scope, such as extension traits.
pub mod prelude {}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {}
