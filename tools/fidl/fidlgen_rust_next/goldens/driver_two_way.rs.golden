// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
#[repr(C)]
pub struct TwoWayAddRequest {
    pub addend1: u16,

    pub addend2: u16,
}

impl ::fidl_next::Encodable for TwoWayAddRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireTwoWayAddRequest> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u16 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <u16 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireTwoWayAddRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for TwoWayAddRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                addend1,
                addend2,

            } = out;
        }

        ::fidl_next::Encode::encode(self.addend1, encoder, addend1)?;

        ::fidl_next::Encode::encode(self.addend2, encoder, addend2)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for TwoWayAddRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                addend1,
                addend2,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.addend1, encoder, addend1)?;

        ::fidl_next::EncodeRef::encode_ref(&self.addend2, encoder, addend2)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for TwoWayAddRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireTwoWayAddRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for TwoWayAddRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    TwoWayAddRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for TwoWayAddRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    TwoWayAddRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireTwoWayAddRequest> for TwoWayAddRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireTwoWayAddRequest, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u16 as ::fidl_next::FromWire<::fidl_next::WireU16>>::COPY_OPTIMIZATION
                .is_enabled()
                && <u16 as ::fidl_next::FromWire<::fidl_next::WireU16>>::COPY_OPTIMIZATION
                    .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireTwoWayAddRequest) -> Self {
        Self {
            addend1: ::fidl_next::FromWire::from_wire(wire.addend1),

            addend2: ::fidl_next::FromWire::from_wire(wire.addend2),
        }
    }
}

impl ::fidl_next::FromWireRef<WireTwoWayAddRequest> for TwoWayAddRequest {
    #[inline]
    fn from_wire_ref(wire: &WireTwoWayAddRequest) -> Self {
        Self {
            addend1: ::fidl_next::FromWireRef::from_wire_ref(&wire.addend1),

            addend2: ::fidl_next::FromWireRef::from_wire_ref(&wire.addend2),
        }
    }
}

/// The wire type corresponding to [`TwoWayAddRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireTwoWayAddRequest {
    pub addend1: ::fidl_next::WireU16,

    pub addend2: ::fidl_next::WireU16,
}

unsafe impl ::fidl_next::Wire for WireTwoWayAddRequest {
    type Decoded<'de> = WireTwoWayAddRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireTwoWayAddRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut addend1,
                mut addend2,

            } = slot;
        }

        ::fidl_next::Decode::decode(addend1.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(addend2.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct TwoWayAddResponse {
    pub sum: u16,
}

impl ::fidl_next::Encodable for TwoWayAddResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireTwoWayAddResponse> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u16 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireTwoWayAddResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for TwoWayAddResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                sum,

            } = out;
        }

        ::fidl_next::Encode::encode(self.sum, encoder, sum)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for TwoWayAddResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                sum,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.sum, encoder, sum)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for TwoWayAddResponse {
    type EncodedOption = ::fidl_next::WireBox<'static, WireTwoWayAddResponse>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for TwoWayAddResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    TwoWayAddResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for TwoWayAddResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    TwoWayAddResponse: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireTwoWayAddResponse> for TwoWayAddResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireTwoWayAddResponse, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u16 as ::fidl_next::FromWire<::fidl_next::WireU16>>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireTwoWayAddResponse) -> Self {
        Self { sum: ::fidl_next::FromWire::from_wire(wire.sum) }
    }
}

impl ::fidl_next::FromWireRef<WireTwoWayAddResponse> for TwoWayAddResponse {
    #[inline]
    fn from_wire_ref(wire: &WireTwoWayAddResponse) -> Self {
        Self { sum: ::fidl_next::FromWireRef::from_wire_ref(&wire.sum) }
    }
}

/// The wire type corresponding to [`TwoWayAddResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireTwoWayAddResponse {
    pub sum: ::fidl_next::WireU16,
}

unsafe impl ::fidl_next::Wire for WireTwoWayAddResponse {
    type Decoded<'de> = WireTwoWayAddResponse;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireTwoWayAddResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut sum,

            } = slot;
        }

        ::fidl_next::Decode::decode(sum.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the TwoWay protocol.
#[derive(Debug)]
pub struct TwoWay;

pub mod two_way {
    pub mod prelude {
        pub use crate::{
            two_way, TwoWay, TwoWayClientHandler, TwoWayClientSender, TwoWayServerHandler,
            TwoWayServerSender,
        };

        pub use crate::TwoWayAddRequest;

        pub use crate::TwoWayAddResponse;
    }

    pub struct Add;

    impl ::fidl_next::Method for Add {
        const ORDINAL: u64 = 989730524426044687;

        type Protocol = crate::TwoWay;

        type Request = crate::WireTwoWayAddRequest;

        type Response = crate::WireTwoWayAddResponse;
    }
}

/// A helper trait for the `TwoWay` client sender.
pub trait TwoWayClientSender {
    type Transport: ::fidl_next::Transport;

    fn add<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, two_way::Add>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTwoWayAddRequest,
        >;
}

impl<___T> TwoWayClientSender for ::fidl_next::ClientSender<___T, TwoWay>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn add<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, two_way::Add>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTwoWayAddRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(989730524426044687, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the TwoWay protocol.
///
/// See [`TwoWay`] for more details.
pub trait TwoWayClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for TwoWay
where
    ___T: ::fidl_next::Transport,
    ___H: TwoWayClientHandler<___T>,

    <two_way::Add as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `TwoWay` server sender.
pub trait TwoWayServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> TwoWayServerSender for ::fidl_next::ServerSender<___T, TwoWay>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the TwoWay protocol.
///
/// See [`TwoWay`] for more details.
pub trait TwoWayServerHandler<___T: ::fidl_next::Transport> {
    fn add(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, TwoWay>,

        request: ::fidl_next::Request<___T, two_way::Add>,

        responder: ::fidl_next::Responder<two_way::Add>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for TwoWay
where
    ___T: ::fidl_next::Transport,
    ___H: TwoWayServerHandler<___T>,

    <two_way::Add as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            989730524426044687 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.add(sender, decoded, responder),
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `TwoWay`
    /// protocol.
    pub type TwoWayProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::TwoWay>;

    #[cfg(feature = "driver")]
    impl ::core::convert::From<crate::TwoWay> for ::fidl_test_drivertwoway::TwoWayMarker {
        #[inline]
        fn from(_: crate::TwoWay) -> Self {
            Self
        }
    }
}
