// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct BasicStruct {
    pub x: u32,

    pub y: String,
}

impl ::fidl_next::Encodable for BasicStruct {
    type Encoded = WireBasicStruct;
}

impl<___E> ::fidl_next::Encode<___E> for BasicStruct
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                x,
                y,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.x, encoder, x)?;

        ::fidl_next::Encode::encode(&mut self.y, encoder, y)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<BasicStruct> {
    type EncodedOption = ::fidl_next::WireBox<WireBasicStruct>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<BasicStruct>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    BasicStruct: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireBasicStruct> for BasicStruct {
    #[inline]
    fn take_from(from: &WireBasicStruct) -> Self {
        Self {
            x: ::fidl_next::TakeFrom::take_from(&from.x),

            y: ::fidl_next::TakeFrom::take_from(&from.y),
        }
    }
}

/// The wire type corersponding to [`BasicStruct`].
#[derive(Debug)]
#[repr(C)]
pub struct WireBasicStruct {
    pub x: ::fidl_next::WireU32,

    pub y: ::fidl_next::WireString,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireBasicStruct
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut x,
                mut y,

            } = slot;
        }

        ::fidl_next::Decode::decode(x.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(y.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct Simple {
    pub f1: u8,

    pub f2: bool,
}

impl ::fidl_next::Encodable for Simple {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u8 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <bool as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireSimple;
}

impl<___E> ::fidl_next::Encode<___E> for Simple
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f1,
                f2,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.f1, encoder, f1)?;

        ::fidl_next::Encode::encode(&mut self.f2, encoder, f2)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<Simple> {
    type EncodedOption = ::fidl_next::WireBox<WireSimple>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<Simple>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Simple: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSimple> for Simple {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u8 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <bool as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WireSimple) -> Self {
        Self {
            f1: ::fidl_next::TakeFrom::take_from(&from.f1),

            f2: ::fidl_next::TakeFrom::take_from(&from.f2),
        }
    }
}

/// The wire type corersponding to [`Simple`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireSimple {
    pub f1: u8,

    pub f2: bool,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSimple
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut f1,
                mut f2,

            } = slot;
        }

        ::fidl_next::Decode::decode(f1.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(f2.as_mut(), decoder)?;

        Ok(())
    }
}

/// Commonly-used items that should usually be in scope, such as extension traits.
pub mod prelude {}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {}
