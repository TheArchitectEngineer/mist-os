// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub enum UnionSize12Alignment4 {
    Variant([u8; 6]),
}

impl ::fidl_next::Encodable for UnionSize12Alignment4 {
    type Encoded = WireUnionSize12Alignment4<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for UnionSize12Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize12Alignment4 { raw, _phantom: _ } = out);

        match self {
            Self::Variant(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, [u8; 6]>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for UnionSize12Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize12Alignment4 { raw, _phantom: _ } = out);

        match self {
            Self::Variant(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, &[u8; 6]>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for UnionSize12Alignment4 {
    type EncodedOption = WireOptionalUnionSize12Alignment4<'static>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for UnionSize12Alignment4
where
    ___E: ?Sized,
    UnionSize12Alignment4: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize12Alignment4 { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for UnionSize12Alignment4
where
    ___E: ?Sized,
    UnionSize12Alignment4: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize12Alignment4 { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::EncodeRef::encode_ref(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireUnionSize12Alignment4<'de>> for UnionSize12Alignment4 {
    #[inline]
    fn from_wire(wire: WireUnionSize12Alignment4<'de>) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);
        match wire.raw.ordinal() {
            1 => Self::Variant(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<[u8; 6]>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireUnionSize12Alignment4<'de>> for UnionSize12Alignment4 {
    #[inline]
    fn from_wire_ref(wire: &WireUnionSize12Alignment4<'de>) -> Self {
        match wire.raw.ordinal() {
            1 => Self::Variant(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<[u8; 6]>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'de> ::fidl_next::FromWireOption<WireOptionalUnionSize12Alignment4<'de>>
    for Box<UnionSize12Alignment4>
{
    #[inline]
    fn from_wire_option(wire: WireOptionalUnionSize12Alignment4<'de>) -> Option<Self> {
        if let Some(inner) = wire.into_option() {
            Some(Box::new(::fidl_next::FromWire::from_wire(inner)))
        } else {
            None
        }
    }
}

impl<'de> ::fidl_next::FromWireOptionRef<WireOptionalUnionSize12Alignment4<'de>>
    for Box<UnionSize12Alignment4>
{
    #[inline]
    fn from_wire_option_ref(wire: &WireOptionalUnionSize12Alignment4<'de>) -> Option<Self> {
        if let Some(inner) = wire.as_ref() {
            Some(Box::new(::fidl_next::FromWireRef::from_wire_ref(inner)))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionSize12Alignment4`].
#[repr(transparent)]
pub struct WireUnionSize12Alignment4<'de> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'de mut [::fidl_next::Chunk]>,
}

impl<'de> Drop for WireUnionSize12Alignment4<'de> {
    fn drop(&mut self) {
        match self.raw.ordinal() {
            1 => {
                let _ = unsafe { self.raw.get().read_unchecked::<[u8; 6]>() };
            }

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl ::fidl_next::Wire for WireUnionSize12Alignment4<'static> {
    type Decoded<'de> = WireUnionSize12Alignment4<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod union_size12_alignment4 {
    pub enum Ref<'de> {
        Variant(&'de [u8; 6]),
    }
}

impl<'de> WireUnionSize12Alignment4<'de> {
    pub fn as_ref(&self) -> crate::union_size12_alignment4::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size12_alignment4::Ref::Variant(unsafe {
                self.raw.get().deref_unchecked::<[u8; 6]>()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireUnionSize12Alignment4<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [u8; 6]>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'de> ::core::fmt::Debug for WireUnionSize12Alignment4<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<[u8; 6]>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize12Alignment4<'de> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'de mut [::fidl_next::Chunk]>,
}

unsafe impl ::fidl_next::Wire for WireOptionalUnionSize12Alignment4<'static> {
    type Decoded<'de> = WireOptionalUnionSize12Alignment4<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl<'de> WireOptionalUnionSize12Alignment4<'de> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize12Alignment4<'de>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn into_option(self) -> Option<WireUnionSize12Alignment4<'de>> {
        if self.is_some() {
            Some(WireUnionSize12Alignment4 { raw: self.raw, _phantom: ::core::marker::PhantomData })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalUnionSize12Alignment4<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [u8; 6]>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'de> ::core::fmt::Debug for WireOptionalUnionSize12Alignment4<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize12Alignment4 {
    pub before: u32,

    pub union: crate::UnionSize12Alignment4,

    pub after: i32,
}

impl ::fidl_next::Encodable for SandwichUnionSize12Alignment4 {
    type Encoded = WireSandwichUnionSize12Alignment4<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for SandwichUnionSize12Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                union,
                after,

            } = out;
        }

        ::fidl_next::Encode::encode(self.before, encoder, before)?;

        ::fidl_next::Encode::encode(self.union, encoder, union)?;

        ::fidl_next::Encode::encode(self.after, encoder, after)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for SandwichUnionSize12Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                union,
                after,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.before, encoder, before)?;

        ::fidl_next::EncodeRef::encode_ref(&self.union, encoder, union)?;

        ::fidl_next::EncodeRef::encode_ref(&self.after, encoder, after)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for SandwichUnionSize12Alignment4 {
    type EncodedOption = ::fidl_next::WireBox<'static, WireSandwichUnionSize12Alignment4<'static>>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for SandwichUnionSize12Alignment4
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize12Alignment4: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for SandwichUnionSize12Alignment4
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize12Alignment4: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireSandwichUnionSize12Alignment4<'de>>
    for SandwichUnionSize12Alignment4
{
    #[inline]
    fn from_wire(wire: WireSandwichUnionSize12Alignment4<'de>) -> Self {
        Self {
            before: ::fidl_next::FromWire::from_wire(wire.before),

            union: ::fidl_next::FromWire::from_wire(wire.union),

            after: ::fidl_next::FromWire::from_wire(wire.after),
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireSandwichUnionSize12Alignment4<'de>>
    for SandwichUnionSize12Alignment4
{
    #[inline]
    fn from_wire_ref(wire: &WireSandwichUnionSize12Alignment4<'de>) -> Self {
        Self {
            before: ::fidl_next::FromWireRef::from_wire_ref(&wire.before),

            union: ::fidl_next::FromWireRef::from_wire_ref(&wire.union),

            after: ::fidl_next::FromWireRef::from_wire_ref(&wire.after),
        }
    }
}

/// The wire type corresponding to [`SandwichUnionSize12Alignment4`].
#[derive(Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize12Alignment4<'de> {
    pub before: ::fidl_next::WireU32,

    pub union: crate::WireUnionSize12Alignment4<'de>,

    pub after: ::fidl_next::WireI32,
}

unsafe impl ::fidl_next::Wire for WireSandwichUnionSize12Alignment4<'static> {
    type Decoded<'de> = WireSandwichUnionSize12Alignment4<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        unsafe {
            out.as_mut_ptr().cast::<u8>().add(28).write_bytes(0, 4);
        }

        unsafe {
            out.as_mut_ptr().cast::<u8>().add(4).write_bytes(0, 4);
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSandwichUnionSize12Alignment4<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut before,
                mut union,
                mut after,

            } = slot;
        }

        ::fidl_next::Decode::decode(before.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(union.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(after.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct StructSize16Alignment8 {
    pub f1: u64,

    pub f2: u64,
}

impl ::fidl_next::Encodable for StructSize16Alignment8 {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireStructSize16Alignment8> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <u64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireStructSize16Alignment8;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for StructSize16Alignment8
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f1,
                f2,

            } = out;
        }

        ::fidl_next::Encode::encode(self.f1, encoder, f1)?;

        ::fidl_next::Encode::encode(self.f2, encoder, f2)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for StructSize16Alignment8
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f1,
                f2,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.f1, encoder, f1)?;

        ::fidl_next::EncodeRef::encode_ref(&self.f2, encoder, f2)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for StructSize16Alignment8 {
    type EncodedOption = ::fidl_next::WireBox<'static, WireStructSize16Alignment8>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for StructSize16Alignment8
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructSize16Alignment8: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for StructSize16Alignment8
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructSize16Alignment8: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireStructSize16Alignment8> for StructSize16Alignment8 {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireStructSize16Alignment8, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u64 as ::fidl_next::FromWire<::fidl_next::WireU64>>::COPY_OPTIMIZATION
                .is_enabled()
                && <u64 as ::fidl_next::FromWire<::fidl_next::WireU64>>::COPY_OPTIMIZATION
                    .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireStructSize16Alignment8) -> Self {
        Self {
            f1: ::fidl_next::FromWire::from_wire(wire.f1),

            f2: ::fidl_next::FromWire::from_wire(wire.f2),
        }
    }
}

impl ::fidl_next::FromWireRef<WireStructSize16Alignment8> for StructSize16Alignment8 {
    #[inline]
    fn from_wire_ref(wire: &WireStructSize16Alignment8) -> Self {
        Self {
            f1: ::fidl_next::FromWireRef::from_wire_ref(&wire.f1),

            f2: ::fidl_next::FromWireRef::from_wire_ref(&wire.f2),
        }
    }
}

/// The wire type corresponding to [`StructSize16Alignment8`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireStructSize16Alignment8 {
    pub f1: ::fidl_next::WireU64,

    pub f2: ::fidl_next::WireU64,
}

unsafe impl ::fidl_next::Wire for WireStructSize16Alignment8 {
    type Decoded<'de> = WireStructSize16Alignment8;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructSize16Alignment8
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut f1,
                mut f2,

            } = slot;
        }

        ::fidl_next::Decode::decode(f1.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(f2.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum UnionSize24Alignment8 {
    Variant(crate::StructSize16Alignment8),
}

impl ::fidl_next::Encodable for UnionSize24Alignment8 {
    type Encoded = WireUnionSize24Alignment8<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for UnionSize24Alignment8
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize24Alignment8 { raw, _phantom: _ } = out);

        match self {
            Self::Variant(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::StructSize16Alignment8,
            >(value, 1, encoder, raw)?,
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for UnionSize24Alignment8
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize24Alignment8 { raw, _phantom: _ } = out);

        match self {
            Self::Variant(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                &crate::StructSize16Alignment8,
            >(value, 1, encoder, raw)?,
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for UnionSize24Alignment8 {
    type EncodedOption = WireOptionalUnionSize24Alignment8<'static>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for UnionSize24Alignment8
where
    ___E: ?Sized,
    UnionSize24Alignment8: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize24Alignment8 { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for UnionSize24Alignment8
where
    ___E: ?Sized,
    UnionSize24Alignment8: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize24Alignment8 { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::EncodeRef::encode_ref(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireUnionSize24Alignment8<'de>> for UnionSize24Alignment8 {
    #[inline]
    fn from_wire(wire: WireUnionSize24Alignment8<'de>) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);
        match wire.raw.ordinal() {
            1 => Self::Variant(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<crate::WireStructSize16Alignment8>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireUnionSize24Alignment8<'de>> for UnionSize24Alignment8 {
    #[inline]
    fn from_wire_ref(wire: &WireUnionSize24Alignment8<'de>) -> Self {
        match wire.raw.ordinal() {
            1 => Self::Variant(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<crate::WireStructSize16Alignment8>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'de> ::fidl_next::FromWireOption<WireOptionalUnionSize24Alignment8<'de>>
    for Box<UnionSize24Alignment8>
{
    #[inline]
    fn from_wire_option(wire: WireOptionalUnionSize24Alignment8<'de>) -> Option<Self> {
        if let Some(inner) = wire.into_option() {
            Some(Box::new(::fidl_next::FromWire::from_wire(inner)))
        } else {
            None
        }
    }
}

impl<'de> ::fidl_next::FromWireOptionRef<WireOptionalUnionSize24Alignment8<'de>>
    for Box<UnionSize24Alignment8>
{
    #[inline]
    fn from_wire_option_ref(wire: &WireOptionalUnionSize24Alignment8<'de>) -> Option<Self> {
        if let Some(inner) = wire.as_ref() {
            Some(Box::new(::fidl_next::FromWireRef::from_wire_ref(inner)))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionSize24Alignment8`].
#[repr(transparent)]
pub struct WireUnionSize24Alignment8<'de> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'de mut [::fidl_next::Chunk]>,
}

impl<'de> Drop for WireUnionSize24Alignment8<'de> {
    fn drop(&mut self) {
        match self.raw.ordinal() {
            1 => {
                let _ =
                    unsafe { self.raw.get().read_unchecked::<crate::WireStructSize16Alignment8>() };
            }

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl ::fidl_next::Wire for WireUnionSize24Alignment8<'static> {
    type Decoded<'de> = WireUnionSize24Alignment8<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod union_size24_alignment8 {
    pub enum Ref<'de> {
        Variant(&'de crate::WireStructSize16Alignment8),
    }
}

impl<'de> WireUnionSize24Alignment8<'de> {
    pub fn as_ref(&self) -> crate::union_size24_alignment8::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size24_alignment8::Ref::Variant(unsafe {
                self.raw.get().deref_unchecked::<crate::WireStructSize16Alignment8>()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireUnionSize24Alignment8<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireStructSize16Alignment8>(
                raw, decoder,
            )?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'de> ::core::fmt::Debug for WireUnionSize24Alignment8<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<crate::WireStructSize16Alignment8>().fmt(f)
            },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize24Alignment8<'de> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'de mut [::fidl_next::Chunk]>,
}

unsafe impl ::fidl_next::Wire for WireOptionalUnionSize24Alignment8<'static> {
    type Decoded<'de> = WireOptionalUnionSize24Alignment8<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl<'de> WireOptionalUnionSize24Alignment8<'de> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize24Alignment8<'de>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn into_option(self) -> Option<WireUnionSize24Alignment8<'de>> {
        if self.is_some() {
            Some(WireUnionSize24Alignment8 { raw: self.raw, _phantom: ::core::marker::PhantomData })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalUnionSize24Alignment8<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireStructSize16Alignment8>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'de> ::core::fmt::Debug for WireOptionalUnionSize24Alignment8<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize24Alignment8 {
    pub before: u32,

    pub union: crate::UnionSize24Alignment8,

    pub after: u32,
}

impl ::fidl_next::Encodable for SandwichUnionSize24Alignment8 {
    type Encoded = WireSandwichUnionSize24Alignment8<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for SandwichUnionSize24Alignment8
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                union,
                after,

            } = out;
        }

        ::fidl_next::Encode::encode(self.before, encoder, before)?;

        ::fidl_next::Encode::encode(self.union, encoder, union)?;

        ::fidl_next::Encode::encode(self.after, encoder, after)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for SandwichUnionSize24Alignment8
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                union,
                after,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.before, encoder, before)?;

        ::fidl_next::EncodeRef::encode_ref(&self.union, encoder, union)?;

        ::fidl_next::EncodeRef::encode_ref(&self.after, encoder, after)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for SandwichUnionSize24Alignment8 {
    type EncodedOption = ::fidl_next::WireBox<'static, WireSandwichUnionSize24Alignment8<'static>>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for SandwichUnionSize24Alignment8
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize24Alignment8: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for SandwichUnionSize24Alignment8
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize24Alignment8: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireSandwichUnionSize24Alignment8<'de>>
    for SandwichUnionSize24Alignment8
{
    #[inline]
    fn from_wire(wire: WireSandwichUnionSize24Alignment8<'de>) -> Self {
        Self {
            before: ::fidl_next::FromWire::from_wire(wire.before),

            union: ::fidl_next::FromWire::from_wire(wire.union),

            after: ::fidl_next::FromWire::from_wire(wire.after),
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireSandwichUnionSize24Alignment8<'de>>
    for SandwichUnionSize24Alignment8
{
    #[inline]
    fn from_wire_ref(wire: &WireSandwichUnionSize24Alignment8<'de>) -> Self {
        Self {
            before: ::fidl_next::FromWireRef::from_wire_ref(&wire.before),

            union: ::fidl_next::FromWireRef::from_wire_ref(&wire.union),

            after: ::fidl_next::FromWireRef::from_wire_ref(&wire.after),
        }
    }
}

/// The wire type corresponding to [`SandwichUnionSize24Alignment8`].
#[derive(Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize24Alignment8<'de> {
    pub before: ::fidl_next::WireU32,

    pub union: crate::WireUnionSize24Alignment8<'de>,

    pub after: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::Wire for WireSandwichUnionSize24Alignment8<'static> {
    type Decoded<'de> = WireSandwichUnionSize24Alignment8<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        unsafe {
            out.as_mut_ptr().cast::<u8>().add(28).write_bytes(0, 4);
        }

        unsafe {
            out.as_mut_ptr().cast::<u8>().add(4).write_bytes(0, 4);
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSandwichUnionSize24Alignment8<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut before,
                mut union,
                mut after,

            } = slot;
        }

        ::fidl_next::Decode::decode(before.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(union.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(after.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum UnionSize36Alignment4 {
    Variant([u8; 32]),
}

impl ::fidl_next::Encodable for UnionSize36Alignment4 {
    type Encoded = WireUnionSize36Alignment4<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for UnionSize36Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize36Alignment4 { raw, _phantom: _ } = out);

        match self {
            Self::Variant(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, [u8; 32]>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for UnionSize36Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize36Alignment4 { raw, _phantom: _ } = out);

        match self {
            Self::Variant(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, &[u8; 32]>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for UnionSize36Alignment4 {
    type EncodedOption = WireOptionalUnionSize36Alignment4<'static>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for UnionSize36Alignment4
where
    ___E: ?Sized,
    UnionSize36Alignment4: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize36Alignment4 { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for UnionSize36Alignment4
where
    ___E: ?Sized,
    UnionSize36Alignment4: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize36Alignment4 { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::EncodeRef::encode_ref(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireUnionSize36Alignment4<'de>> for UnionSize36Alignment4 {
    #[inline]
    fn from_wire(wire: WireUnionSize36Alignment4<'de>) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);
        match wire.raw.ordinal() {
            1 => Self::Variant(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<[u8; 32]>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireUnionSize36Alignment4<'de>> for UnionSize36Alignment4 {
    #[inline]
    fn from_wire_ref(wire: &WireUnionSize36Alignment4<'de>) -> Self {
        match wire.raw.ordinal() {
            1 => Self::Variant(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<[u8; 32]>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'de> ::fidl_next::FromWireOption<WireOptionalUnionSize36Alignment4<'de>>
    for Box<UnionSize36Alignment4>
{
    #[inline]
    fn from_wire_option(wire: WireOptionalUnionSize36Alignment4<'de>) -> Option<Self> {
        if let Some(inner) = wire.into_option() {
            Some(Box::new(::fidl_next::FromWire::from_wire(inner)))
        } else {
            None
        }
    }
}

impl<'de> ::fidl_next::FromWireOptionRef<WireOptionalUnionSize36Alignment4<'de>>
    for Box<UnionSize36Alignment4>
{
    #[inline]
    fn from_wire_option_ref(wire: &WireOptionalUnionSize36Alignment4<'de>) -> Option<Self> {
        if let Some(inner) = wire.as_ref() {
            Some(Box::new(::fidl_next::FromWireRef::from_wire_ref(inner)))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionSize36Alignment4`].
#[repr(transparent)]
pub struct WireUnionSize36Alignment4<'de> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'de mut [::fidl_next::Chunk]>,
}

impl<'de> Drop for WireUnionSize36Alignment4<'de> {
    fn drop(&mut self) {
        match self.raw.ordinal() {
            1 => {
                let _ = unsafe { self.raw.get().read_unchecked::<[u8; 32]>() };
            }

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl ::fidl_next::Wire for WireUnionSize36Alignment4<'static> {
    type Decoded<'de> = WireUnionSize36Alignment4<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod union_size36_alignment4 {
    pub enum Ref<'de> {
        Variant(&'de [u8; 32]),
    }
}

impl<'de> WireUnionSize36Alignment4<'de> {
    pub fn as_ref(&self) -> crate::union_size36_alignment4::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size36_alignment4::Ref::Variant(unsafe {
                self.raw.get().deref_unchecked::<[u8; 32]>()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireUnionSize36Alignment4<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [u8; 32]>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'de> ::core::fmt::Debug for WireUnionSize36Alignment4<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<[u8; 32]>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize36Alignment4<'de> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'de mut [::fidl_next::Chunk]>,
}

unsafe impl ::fidl_next::Wire for WireOptionalUnionSize36Alignment4<'static> {
    type Decoded<'de> = WireOptionalUnionSize36Alignment4<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl<'de> WireOptionalUnionSize36Alignment4<'de> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize36Alignment4<'de>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn into_option(self) -> Option<WireUnionSize36Alignment4<'de>> {
        if self.is_some() {
            Some(WireUnionSize36Alignment4 { raw: self.raw, _phantom: ::core::marker::PhantomData })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalUnionSize36Alignment4<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [u8; 32]>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'de> ::core::fmt::Debug for WireOptionalUnionSize36Alignment4<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize36Alignment4 {
    pub before: u32,

    pub union: crate::UnionSize36Alignment4,

    pub after: u32,
}

impl ::fidl_next::Encodable for SandwichUnionSize36Alignment4 {
    type Encoded = WireSandwichUnionSize36Alignment4<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for SandwichUnionSize36Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                union,
                after,

            } = out;
        }

        ::fidl_next::Encode::encode(self.before, encoder, before)?;

        ::fidl_next::Encode::encode(self.union, encoder, union)?;

        ::fidl_next::Encode::encode(self.after, encoder, after)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for SandwichUnionSize36Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                union,
                after,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.before, encoder, before)?;

        ::fidl_next::EncodeRef::encode_ref(&self.union, encoder, union)?;

        ::fidl_next::EncodeRef::encode_ref(&self.after, encoder, after)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for SandwichUnionSize36Alignment4 {
    type EncodedOption = ::fidl_next::WireBox<'static, WireSandwichUnionSize36Alignment4<'static>>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for SandwichUnionSize36Alignment4
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize36Alignment4: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for SandwichUnionSize36Alignment4
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize36Alignment4: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireSandwichUnionSize36Alignment4<'de>>
    for SandwichUnionSize36Alignment4
{
    #[inline]
    fn from_wire(wire: WireSandwichUnionSize36Alignment4<'de>) -> Self {
        Self {
            before: ::fidl_next::FromWire::from_wire(wire.before),

            union: ::fidl_next::FromWire::from_wire(wire.union),

            after: ::fidl_next::FromWire::from_wire(wire.after),
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireSandwichUnionSize36Alignment4<'de>>
    for SandwichUnionSize36Alignment4
{
    #[inline]
    fn from_wire_ref(wire: &WireSandwichUnionSize36Alignment4<'de>) -> Self {
        Self {
            before: ::fidl_next::FromWireRef::from_wire_ref(&wire.before),

            union: ::fidl_next::FromWireRef::from_wire_ref(&wire.union),

            after: ::fidl_next::FromWireRef::from_wire_ref(&wire.after),
        }
    }
}

/// The wire type corresponding to [`SandwichUnionSize36Alignment4`].
#[derive(Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize36Alignment4<'de> {
    pub before: ::fidl_next::WireU32,

    pub union: crate::WireUnionSize36Alignment4<'de>,

    pub after: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::Wire for WireSandwichUnionSize36Alignment4<'static> {
    type Decoded<'de> = WireSandwichUnionSize36Alignment4<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        unsafe {
            out.as_mut_ptr().cast::<u8>().add(28).write_bytes(0, 4);
        }

        unsafe {
            out.as_mut_ptr().cast::<u8>().add(4).write_bytes(0, 4);
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSandwichUnionSize36Alignment4<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut before,
                mut union,
                mut after,

            } = slot;
        }

        ::fidl_next::Decode::decode(before.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(union.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(after.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum UnionSize8Alignment4 {
    Variant(u32),
}

impl ::fidl_next::Encodable for UnionSize8Alignment4 {
    type Encoded = WireUnionSize8Alignment4;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for UnionSize8Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize8Alignment4 { raw, _phantom: _ } = out);

        match self {
            Self::Variant(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, u32>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for UnionSize8Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize8Alignment4 { raw, _phantom: _ } = out);

        match self {
            Self::Variant(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, &u32>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for UnionSize8Alignment4 {
    type EncodedOption = WireOptionalUnionSize8Alignment4;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for UnionSize8Alignment4
where
    ___E: ?Sized,
    UnionSize8Alignment4: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize8Alignment4 { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for UnionSize8Alignment4
where
    ___E: ?Sized,
    UnionSize8Alignment4: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize8Alignment4 { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::EncodeRef::encode_ref(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireUnionSize8Alignment4> for UnionSize8Alignment4 {
    #[inline]
    fn from_wire(wire: WireUnionSize8Alignment4) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);
        match wire.raw.ordinal() {
            1 => Self::Variant(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<::fidl_next::WireU32>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireRef<WireUnionSize8Alignment4> for UnionSize8Alignment4 {
    #[inline]
    fn from_wire_ref(wire: &WireUnionSize8Alignment4) -> Self {
        match wire.raw.ordinal() {
            1 => Self::Variant(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<::fidl_next::WireU32>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireOption<WireOptionalUnionSize8Alignment4> for Box<UnionSize8Alignment4> {
    #[inline]
    fn from_wire_option(wire: WireOptionalUnionSize8Alignment4) -> Option<Self> {
        if let Some(inner) = wire.into_option() {
            Some(Box::new(::fidl_next::FromWire::from_wire(inner)))
        } else {
            None
        }
    }
}

impl ::fidl_next::FromWireOptionRef<WireOptionalUnionSize8Alignment4>
    for Box<UnionSize8Alignment4>
{
    #[inline]
    fn from_wire_option_ref(wire: &WireOptionalUnionSize8Alignment4) -> Option<Self> {
        if let Some(inner) = wire.as_ref() {
            Some(Box::new(::fidl_next::FromWireRef::from_wire_ref(inner)))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionSize8Alignment4`].
#[repr(transparent)]
pub struct WireUnionSize8Alignment4 {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl Drop for WireUnionSize8Alignment4 {
    fn drop(&mut self) {
        match self.raw.ordinal() {
            1 => {
                let _ = unsafe { self.raw.get().read_unchecked::<::fidl_next::WireU32>() };
            }

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl ::fidl_next::Wire for WireUnionSize8Alignment4 {
    type Decoded<'de> = WireUnionSize8Alignment4;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod union_size8_alignment4 {
    pub enum Ref<'de> {
        Variant(&'de ::fidl_next::WireU32),
    }
}

impl WireUnionSize8Alignment4 {
    pub fn as_ref(&self) -> crate::union_size8_alignment4::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size8_alignment4::Ref::Variant(unsafe {
                self.raw.get().deref_unchecked::<::fidl_next::WireU32>()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireUnionSize8Alignment4 {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<::fidl_next::WireU32>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireUnionSize8Alignment4
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireU32>(
                raw, decoder,
            )?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireUnionSize8Alignment4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireU32>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize8Alignment4 {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

unsafe impl ::fidl_next::Wire for WireOptionalUnionSize8Alignment4 {
    type Decoded<'de> = WireOptionalUnionSize8Alignment4;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalUnionSize8Alignment4 {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize8Alignment4> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn into_option(self) -> Option<WireUnionSize8Alignment4> {
        if self.is_some() {
            Some(WireUnionSize8Alignment4 { raw: self.raw, _phantom: ::core::marker::PhantomData })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalUnionSize8Alignment4 {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalUnionSize8Alignment4 {
                raw: ::fidl_next::RawWireUnion::absent(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<::fidl_next::WireU32>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalUnionSize8Alignment4
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireU32>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalUnionSize8Alignment4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize8Alignment4 {
    pub before: u32,

    pub union: crate::UnionSize8Alignment4,

    pub after: u32,
}

impl ::fidl_next::Encodable for SandwichUnionSize8Alignment4 {
    type Encoded = WireSandwichUnionSize8Alignment4;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for SandwichUnionSize8Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                union,
                after,

            } = out;
        }

        ::fidl_next::Encode::encode(self.before, encoder, before)?;

        ::fidl_next::Encode::encode(self.union, encoder, union)?;

        ::fidl_next::Encode::encode(self.after, encoder, after)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for SandwichUnionSize8Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                union,
                after,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.before, encoder, before)?;

        ::fidl_next::EncodeRef::encode_ref(&self.union, encoder, union)?;

        ::fidl_next::EncodeRef::encode_ref(&self.after, encoder, after)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for SandwichUnionSize8Alignment4 {
    type EncodedOption = ::fidl_next::WireBox<'static, WireSandwichUnionSize8Alignment4>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for SandwichUnionSize8Alignment4
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize8Alignment4: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for SandwichUnionSize8Alignment4
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize8Alignment4: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireSandwichUnionSize8Alignment4> for SandwichUnionSize8Alignment4 {
    #[inline]
    fn from_wire(wire: WireSandwichUnionSize8Alignment4) -> Self {
        Self {
            before: ::fidl_next::FromWire::from_wire(wire.before),

            union: ::fidl_next::FromWire::from_wire(wire.union),

            after: ::fidl_next::FromWire::from_wire(wire.after),
        }
    }
}

impl ::fidl_next::FromWireRef<WireSandwichUnionSize8Alignment4> for SandwichUnionSize8Alignment4 {
    #[inline]
    fn from_wire_ref(wire: &WireSandwichUnionSize8Alignment4) -> Self {
        Self {
            before: ::fidl_next::FromWireRef::from_wire_ref(&wire.before),

            union: ::fidl_next::FromWireRef::from_wire_ref(&wire.union),

            after: ::fidl_next::FromWireRef::from_wire_ref(&wire.after),
        }
    }
}

/// The wire type corresponding to [`SandwichUnionSize8Alignment4`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize8Alignment4 {
    pub before: ::fidl_next::WireU32,

    pub union: crate::WireUnionSize8Alignment4,

    pub after: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::Wire for WireSandwichUnionSize8Alignment4 {
    type Decoded<'de> = WireSandwichUnionSize8Alignment4;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        unsafe {
            out.as_mut_ptr().cast::<u8>().add(28).write_bytes(0, 4);
        }

        unsafe {
            out.as_mut_ptr().cast::<u8>().add(4).write_bytes(0, 4);
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSandwichUnionSize8Alignment4
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut before,
                mut union,
                mut after,

            } = slot;
        }

        ::fidl_next::Decode::decode(before.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(union.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(after.as_mut(), decoder)?;

        Ok(())
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {}
