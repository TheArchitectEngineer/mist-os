// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub enum UnionSize12Alignment4 {
    Variant([u8; 6]),
}

impl ::fidl_next::Encodable for UnionSize12Alignment4 {
    type Encoded = WireUnionSize12Alignment4;
}

impl<___E> ::fidl_next::Encode<___E> for UnionSize12Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize12Alignment4 { raw } = slot);

        match self {
            Self::Variant(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, [u8; 6]>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<UnionSize12Alignment4> {
    type EncodedOption = WireOptionalUnionSize12Alignment4;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<UnionSize12Alignment4>
where
    ___E: ?Sized,
    UnionSize12Alignment4: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize12Alignment4 { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireUnionSize12Alignment4> for UnionSize12Alignment4 {
    #[inline]
    fn take_from(from: &WireUnionSize12Alignment4) -> Self {
        match from.raw.ordinal() {
            1 => Self::Variant(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalUnionSize12Alignment4>
    for Option<Box<UnionSize12Alignment4>>
{
    #[inline]
    fn take_from(from: &WireOptionalUnionSize12Alignment4) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionSize12Alignment4`].
#[repr(transparent)]
pub struct WireUnionSize12Alignment4 {
    raw: ::fidl_next::RawWireUnion,
}

pub mod union_size12_alignment4 {
    pub enum Ref<'union> {
        Variant(&'union [u8; 6]),
    }
}

impl WireUnionSize12Alignment4 {
    pub fn as_ref(&self) -> crate::union_size12_alignment4::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size12_alignment4::Ref::Variant(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireUnionSize12Alignment4
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [u8; 6]>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireUnionSize12Alignment4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<[u8; 6]>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize12Alignment4 {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalUnionSize12Alignment4 {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize12Alignment4> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalUnionSize12Alignment4
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [u8; 6]>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalUnionSize12Alignment4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize12Alignment4 {
    pub before: u32,

    pub union_: crate::UnionSize12Alignment4,

    pub after: i32,
}

impl ::fidl_next::Encodable for SandwichUnionSize12Alignment4 {
    type Encoded = WireSandwichUnionSize12Alignment4;
}

impl<___E> ::fidl_next::Encode<___E> for SandwichUnionSize12Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                union_,
                after,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.before, encoder, before)?;

        ::fidl_next::Encode::encode(&mut self.union_, encoder, union_)?;

        ::fidl_next::Encode::encode(&mut self.after, encoder, after)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SandwichUnionSize12Alignment4> {
    type EncodedOption = ::fidl_next::WireBox<WireSandwichUnionSize12Alignment4>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<SandwichUnionSize12Alignment4>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize12Alignment4: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSandwichUnionSize12Alignment4> for SandwichUnionSize12Alignment4 {
    #[inline]
    fn take_from(from: &WireSandwichUnionSize12Alignment4) -> Self {
        Self {
            before: ::fidl_next::TakeFrom::take_from(&from.before),

            union_: ::fidl_next::TakeFrom::take_from(&from.union_),

            after: ::fidl_next::TakeFrom::take_from(&from.after),
        }
    }
}

/// The wire type corersponding to [`SandwichUnionSize12Alignment4`].
#[derive(Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize12Alignment4 {
    pub before: ::fidl_next::WireU32,

    pub union_: crate::WireUnionSize12Alignment4,

    pub after: ::fidl_next::WireI32,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSandwichUnionSize12Alignment4
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut before,
                mut union_,
                mut after,

            } = slot;
        }

        ::fidl_next::Decode::decode(before.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(union_.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(after.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct StructSize16Alignment8 {
    pub f1: u64,

    pub f2: u64,
}

impl ::fidl_next::Encodable for StructSize16Alignment8 {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <u64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireStructSize16Alignment8;
}

impl<___E> ::fidl_next::Encode<___E> for StructSize16Alignment8
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f1,
                f2,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.f1, encoder, f1)?;

        ::fidl_next::Encode::encode(&mut self.f2, encoder, f2)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructSize16Alignment8> {
    type EncodedOption = ::fidl_next::WireBox<WireStructSize16Alignment8>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructSize16Alignment8>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructSize16Alignment8: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructSize16Alignment8> for StructSize16Alignment8 {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <u64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WireStructSize16Alignment8) -> Self {
        Self {
            f1: ::fidl_next::TakeFrom::take_from(&from.f1),

            f2: ::fidl_next::TakeFrom::take_from(&from.f2),
        }
    }
}

/// The wire type corersponding to [`StructSize16Alignment8`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireStructSize16Alignment8 {
    pub f1: ::fidl_next::WireU64,

    pub f2: ::fidl_next::WireU64,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructSize16Alignment8
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut f1,
                mut f2,

            } = slot;
        }

        ::fidl_next::Decode::decode(f1.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(f2.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum UnionSize24Alignment8 {
    Variant(crate::StructSize16Alignment8),
}

impl ::fidl_next::Encodable for UnionSize24Alignment8 {
    type Encoded = WireUnionSize24Alignment8;
}

impl<___E> ::fidl_next::Encode<___E> for UnionSize24Alignment8
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize24Alignment8 { raw } = slot);

        match self {
            Self::Variant(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::StructSize16Alignment8,
            >(value, 1, encoder, raw)?,
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<UnionSize24Alignment8> {
    type EncodedOption = WireOptionalUnionSize24Alignment8;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<UnionSize24Alignment8>
where
    ___E: ?Sized,
    UnionSize24Alignment8: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize24Alignment8 { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireUnionSize24Alignment8> for UnionSize24Alignment8 {
    #[inline]
    fn take_from(from: &WireUnionSize24Alignment8) -> Self {
        match from.raw.ordinal() {
            1 => Self::Variant(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalUnionSize24Alignment8>
    for Option<Box<UnionSize24Alignment8>>
{
    #[inline]
    fn take_from(from: &WireOptionalUnionSize24Alignment8) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionSize24Alignment8`].
#[repr(transparent)]
pub struct WireUnionSize24Alignment8 {
    raw: ::fidl_next::RawWireUnion,
}

pub mod union_size24_alignment8 {
    pub enum Ref<'union> {
        Variant(&'union crate::WireStructSize16Alignment8),
    }
}

impl WireUnionSize24Alignment8 {
    pub fn as_ref(&self) -> crate::union_size24_alignment8::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size24_alignment8::Ref::Variant(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireUnionSize24Alignment8
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireStructSize16Alignment8>(
                raw, decoder,
            )?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireUnionSize24Alignment8 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<crate::WireStructSize16Alignment8>().fmt(f)
            },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize24Alignment8 {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalUnionSize24Alignment8 {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize24Alignment8> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalUnionSize24Alignment8
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireStructSize16Alignment8>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalUnionSize24Alignment8 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize24Alignment8 {
    pub before: u32,

    pub union_: crate::UnionSize24Alignment8,

    pub after: u32,
}

impl ::fidl_next::Encodable for SandwichUnionSize24Alignment8 {
    type Encoded = WireSandwichUnionSize24Alignment8;
}

impl<___E> ::fidl_next::Encode<___E> for SandwichUnionSize24Alignment8
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                union_,
                after,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.before, encoder, before)?;

        ::fidl_next::Encode::encode(&mut self.union_, encoder, union_)?;

        ::fidl_next::Encode::encode(&mut self.after, encoder, after)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SandwichUnionSize24Alignment8> {
    type EncodedOption = ::fidl_next::WireBox<WireSandwichUnionSize24Alignment8>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<SandwichUnionSize24Alignment8>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize24Alignment8: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSandwichUnionSize24Alignment8> for SandwichUnionSize24Alignment8 {
    #[inline]
    fn take_from(from: &WireSandwichUnionSize24Alignment8) -> Self {
        Self {
            before: ::fidl_next::TakeFrom::take_from(&from.before),

            union_: ::fidl_next::TakeFrom::take_from(&from.union_),

            after: ::fidl_next::TakeFrom::take_from(&from.after),
        }
    }
}

/// The wire type corersponding to [`SandwichUnionSize24Alignment8`].
#[derive(Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize24Alignment8 {
    pub before: ::fidl_next::WireU32,

    pub union_: crate::WireUnionSize24Alignment8,

    pub after: ::fidl_next::WireU32,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSandwichUnionSize24Alignment8
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut before,
                mut union_,
                mut after,

            } = slot;
        }

        ::fidl_next::Decode::decode(before.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(union_.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(after.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum UnionSize36Alignment4 {
    Variant([u8; 32]),
}

impl ::fidl_next::Encodable for UnionSize36Alignment4 {
    type Encoded = WireUnionSize36Alignment4;
}

impl<___E> ::fidl_next::Encode<___E> for UnionSize36Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize36Alignment4 { raw } = slot);

        match self {
            Self::Variant(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, [u8; 32]>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<UnionSize36Alignment4> {
    type EncodedOption = WireOptionalUnionSize36Alignment4;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<UnionSize36Alignment4>
where
    ___E: ?Sized,
    UnionSize36Alignment4: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize36Alignment4 { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireUnionSize36Alignment4> for UnionSize36Alignment4 {
    #[inline]
    fn take_from(from: &WireUnionSize36Alignment4) -> Self {
        match from.raw.ordinal() {
            1 => Self::Variant(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalUnionSize36Alignment4>
    for Option<Box<UnionSize36Alignment4>>
{
    #[inline]
    fn take_from(from: &WireOptionalUnionSize36Alignment4) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionSize36Alignment4`].
#[repr(transparent)]
pub struct WireUnionSize36Alignment4 {
    raw: ::fidl_next::RawWireUnion,
}

pub mod union_size36_alignment4 {
    pub enum Ref<'union> {
        Variant(&'union [u8; 32]),
    }
}

impl WireUnionSize36Alignment4 {
    pub fn as_ref(&self) -> crate::union_size36_alignment4::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size36_alignment4::Ref::Variant(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireUnionSize36Alignment4
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [u8; 32]>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireUnionSize36Alignment4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<[u8; 32]>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize36Alignment4 {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalUnionSize36Alignment4 {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize36Alignment4> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalUnionSize36Alignment4
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [u8; 32]>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalUnionSize36Alignment4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize36Alignment4 {
    pub before: u32,

    pub union_: crate::UnionSize36Alignment4,

    pub after: u32,
}

impl ::fidl_next::Encodable for SandwichUnionSize36Alignment4 {
    type Encoded = WireSandwichUnionSize36Alignment4;
}

impl<___E> ::fidl_next::Encode<___E> for SandwichUnionSize36Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                union_,
                after,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.before, encoder, before)?;

        ::fidl_next::Encode::encode(&mut self.union_, encoder, union_)?;

        ::fidl_next::Encode::encode(&mut self.after, encoder, after)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SandwichUnionSize36Alignment4> {
    type EncodedOption = ::fidl_next::WireBox<WireSandwichUnionSize36Alignment4>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<SandwichUnionSize36Alignment4>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize36Alignment4: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSandwichUnionSize36Alignment4> for SandwichUnionSize36Alignment4 {
    #[inline]
    fn take_from(from: &WireSandwichUnionSize36Alignment4) -> Self {
        Self {
            before: ::fidl_next::TakeFrom::take_from(&from.before),

            union_: ::fidl_next::TakeFrom::take_from(&from.union_),

            after: ::fidl_next::TakeFrom::take_from(&from.after),
        }
    }
}

/// The wire type corersponding to [`SandwichUnionSize36Alignment4`].
#[derive(Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize36Alignment4 {
    pub before: ::fidl_next::WireU32,

    pub union_: crate::WireUnionSize36Alignment4,

    pub after: ::fidl_next::WireU32,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSandwichUnionSize36Alignment4
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut before,
                mut union_,
                mut after,

            } = slot;
        }

        ::fidl_next::Decode::decode(before.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(union_.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(after.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum UnionSize8Alignment4 {
    Variant(u32),
}

impl ::fidl_next::Encodable for UnionSize8Alignment4 {
    type Encoded = WireUnionSize8Alignment4;
}

impl<___E> ::fidl_next::Encode<___E> for UnionSize8Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize8Alignment4 { raw } = slot);

        match self {
            Self::Variant(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, u32>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<UnionSize8Alignment4> {
    type EncodedOption = WireOptionalUnionSize8Alignment4;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<UnionSize8Alignment4>
where
    ___E: ?Sized,
    UnionSize8Alignment4: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize8Alignment4 { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireUnionSize8Alignment4> for UnionSize8Alignment4 {
    #[inline]
    fn take_from(from: &WireUnionSize8Alignment4) -> Self {
        match from.raw.ordinal() {
            1 => Self::Variant(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalUnionSize8Alignment4> for Option<Box<UnionSize8Alignment4>> {
    #[inline]
    fn take_from(from: &WireOptionalUnionSize8Alignment4) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionSize8Alignment4`].
#[repr(transparent)]
pub struct WireUnionSize8Alignment4 {
    raw: ::fidl_next::RawWireUnion,
}

pub mod union_size8_alignment4 {
    pub enum Ref<'union> {
        Variant(&'union ::fidl_next::WireU32),
    }
}

impl WireUnionSize8Alignment4 {
    pub fn as_ref(&self) -> crate::union_size8_alignment4::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size8_alignment4::Ref::Variant(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireUnionSize8Alignment4 {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<::fidl_next::WireU32>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireUnionSize8Alignment4
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireU32>(
                raw, decoder,
            )?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireUnionSize8Alignment4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireU32>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize8Alignment4 {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalUnionSize8Alignment4 {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize8Alignment4> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalUnionSize8Alignment4 {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalUnionSize8Alignment4 { raw: ::fidl_next::RawWireUnion::absent() };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<::fidl_next::WireU32>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalUnionSize8Alignment4
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireU32>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalUnionSize8Alignment4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize8Alignment4 {
    pub before: u32,

    pub union_: crate::UnionSize8Alignment4,

    pub after: u32,
}

impl ::fidl_next::Encodable for SandwichUnionSize8Alignment4 {
    type Encoded = WireSandwichUnionSize8Alignment4;
}

impl<___E> ::fidl_next::Encode<___E> for SandwichUnionSize8Alignment4
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                union_,
                after,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.before, encoder, before)?;

        ::fidl_next::Encode::encode(&mut self.union_, encoder, union_)?;

        ::fidl_next::Encode::encode(&mut self.after, encoder, after)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SandwichUnionSize8Alignment4> {
    type EncodedOption = ::fidl_next::WireBox<WireSandwichUnionSize8Alignment4>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<SandwichUnionSize8Alignment4>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize8Alignment4: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSandwichUnionSize8Alignment4> for SandwichUnionSize8Alignment4 {
    #[inline]
    fn take_from(from: &WireSandwichUnionSize8Alignment4) -> Self {
        Self {
            before: ::fidl_next::TakeFrom::take_from(&from.before),

            union_: ::fidl_next::TakeFrom::take_from(&from.union_),

            after: ::fidl_next::TakeFrom::take_from(&from.after),
        }
    }
}

/// The wire type corersponding to [`SandwichUnionSize8Alignment4`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize8Alignment4 {
    pub before: ::fidl_next::WireU32,

    pub union_: crate::WireUnionSize8Alignment4,

    pub after: ::fidl_next::WireU32,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSandwichUnionSize8Alignment4
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut before,
                mut union_,
                mut after,

            } = slot;
        }

        ::fidl_next::Decode::decode(before.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(union_.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(after.as_mut(), decoder)?;

        Ok(())
    }
}

/// Commonly-used items that should usually be in scope, such as extension traits.
pub mod prelude {}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {}
