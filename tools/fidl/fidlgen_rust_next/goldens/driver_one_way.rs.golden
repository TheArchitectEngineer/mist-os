// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
#[repr(C)]
pub struct Payload {
    pub value: u32,
}

impl ::fidl_next::Encodable for Payload {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WirePayload> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WirePayload;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for Payload
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                value,

            } = out;
        }

        ::fidl_next::Encode::encode(self.value, encoder, value)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for Payload
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                value,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.value, encoder, value)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Payload {
    type EncodedOption = ::fidl_next::WireBox<'static, WirePayload>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Payload
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Payload: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for Payload
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Payload: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WirePayload> for Payload {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WirePayload, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WirePayload) -> Self {
        Self { value: ::fidl_next::FromWire::from_wire(wire.value) }
    }
}

impl ::fidl_next::FromWireRef<WirePayload> for Payload {
    #[inline]
    fn from_wire_ref(wire: &WirePayload) -> Self {
        Self { value: ::fidl_next::FromWireRef::from_wire_ref(&wire.value) }
    }
}

/// The wire type corresponding to [`Payload`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePayload {
    pub value: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::Wire for WirePayload {
    type Decoded<'de> = WirePayload;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WirePayload
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut value,

            } = slot;
        }

        ::fidl_next::Decode::decode(value.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct OneWaySendRequest {
    pub payload: crate::Payload,
}

impl ::fidl_next::Encodable for OneWaySendRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireOneWaySendRequest> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <crate::Payload as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireOneWaySendRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for OneWaySendRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                payload,

            } = out;
        }

        ::fidl_next::Encode::encode(self.payload, encoder, payload)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for OneWaySendRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                payload,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.payload, encoder, payload)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for OneWaySendRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireOneWaySendRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for OneWaySendRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    OneWaySendRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for OneWaySendRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    OneWaySendRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireOneWaySendRequest> for OneWaySendRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireOneWaySendRequest, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true
                && <crate::Payload as ::fidl_next::FromWire<crate::WirePayload>>::COPY_OPTIMIZATION
                    .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireOneWaySendRequest) -> Self {
        Self { payload: ::fidl_next::FromWire::from_wire(wire.payload) }
    }
}

impl ::fidl_next::FromWireRef<WireOneWaySendRequest> for OneWaySendRequest {
    #[inline]
    fn from_wire_ref(wire: &WireOneWaySendRequest) -> Self {
        Self { payload: ::fidl_next::FromWireRef::from_wire_ref(&wire.payload) }
    }
}

/// The wire type corresponding to [`OneWaySendRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireOneWaySendRequest {
    pub payload: crate::WirePayload,
}

unsafe impl ::fidl_next::Wire for WireOneWaySendRequest {
    type Decoded<'de> = WireOneWaySendRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOneWaySendRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut payload,

            } = slot;
        }

        ::fidl_next::Decode::decode(payload.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the OneWay protocol.
#[derive(Debug)]
pub struct OneWay;

pub mod one_way {
    pub mod prelude {
        pub use crate::{one_way, OneWay, OneWayClientHandler, OneWayServerHandler};

        pub use crate::OneWaySendRequest;
    }

    pub struct Send;

    impl ::fidl_next::Method for Send {
        const ORDINAL: u64 = 7942965975761529343;

        type Protocol = crate::OneWay;

        type Request = crate::WireOneWaySendRequest;

        type Response = ::fidl_next::Never;
    }

    mod ___detail {

        pub struct Send<T0> {
            payload: T0,
        }

        impl<T0> ::fidl_next::Encodable for Send<T0>
        where
            T0: ::fidl_next::Encodable<Encoded = crate::WirePayload>,
        {
            type Encoded = crate::WireOneWaySendRequest;
        }

        unsafe impl<___E, T0> ::fidl_next::Encode<___E> for Send<T0>
        where
            ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

            T0: ::fidl_next::Encode<___E, Encoded = crate::WirePayload>,
        {
            #[inline]
            fn encode(
                self,
                encoder: &mut ___E,
                out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
            ) -> Result<(), ::fidl_next::EncodeError> {
                ::fidl_next::munge! {
                    let Self::Encoded {
                        payload,

                    } = out;
                }

                ::fidl_next::Encode::encode(self.payload, encoder, payload)?;

                Ok(())
            }
        }

        unsafe impl<___T> ::fidl_next::Protocol<___T> for crate::OneWay
        where
            ___T: ::fidl_next::Transport,
        {
            type ClientSender = OneWayClientSender<___T>;
            type ServerSender = OneWayServerSender<___T>;
        }

        /// The client sender for the `OneWay` protocol.
        pub struct OneWayClientSender<___T: ::fidl_next::Transport> {
            #[allow(dead_code)]
            sender: ::fidl_next::protocol::ClientSender<___T>,
        }

        impl<___T> OneWayClientSender<___T>
        where
            ___T: ::fidl_next::Transport,
        {
            pub fn send(
                &self,

                payload: impl ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WirePayload,
                >,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                <___T as ::fidl_next::Transport>::SendBuffer:
                    ::fidl_next::encoder::InternalHandleEncoder,
            {
                self.send_with(Send { payload })
            }

            pub fn send_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireOneWaySendRequest,
                >,
            {
                self.sender.send_one_way(7942965975761529343, request)
            }
        }

        /// The server sender for the `OneWay` protocol.
        #[repr(transparent)]
        pub struct OneWayServerSender<___T: ::fidl_next::Transport> {
            sender: ::fidl_next::protocol::ServerSender<___T>,
        }

        impl<___T> OneWayServerSender<___T> where ___T: ::fidl_next::Transport {}
    }
}

/// A client handler for the OneWay protocol.
///
/// See [`OneWay`] for more details.
pub trait OneWayClientHandler<___T: ::fidl_next::Transport> {}

impl<___H, ___T> ::fidl_next::ClientProtocol<___H, ___T> for OneWay
where
    ___H: OneWayClientHandler<___T> + Send,
    ___T: ::fidl_next::Transport,
{
    async fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A server handler for the OneWay protocol.
///
/// See [`OneWay`] for more details.
pub trait OneWayServerHandler<___T: ::fidl_next::Transport> {
    fn send(
        &mut self,
        sender: &::fidl_next::ServerSender<OneWay, ___T>,

        request: ::fidl_next::Request<one_way::Send, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;
}

impl<___H, ___T> ::fidl_next::ServerProtocol<___H, ___T> for OneWay
where
    ___H: OneWayServerHandler<___T> + Send,
    ___T: ::fidl_next::Transport,

    <one_way::Send as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    async fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            7942965975761529343 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.send(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }

    async fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    impl ::fidl_next::CompatFrom<crate::Payload> for ::fidl_test_driveroneway::Payload {
        #[inline]
        fn compat_from(value: crate::Payload) -> Self {
            Self { value: ::fidl_next::CompatFrom::compat_from(value.value) }
        }
    }

    impl ::fidl_next::CompatFrom<::fidl_test_driveroneway::Payload> for crate::Payload {
        #[inline]
        fn compat_from(value: ::fidl_test_driveroneway::Payload) -> Self {
            Self { value: ::fidl_next::CompatFrom::compat_from(value.value) }
        }
    }

    #[cfg(feature = "driver")]
    impl ::fidl_next::CompatFrom<crate::OneWaySendRequest>
        for ::fidl_test_driveroneway::OneWaySendRequest
    {
        #[inline]
        fn compat_from(value: crate::OneWaySendRequest) -> Self {
            Self { payload: ::fidl_next::CompatFrom::compat_from(value.payload) }
        }
    }

    #[cfg(feature = "driver")]
    impl ::fidl_next::CompatFrom<::fidl_test_driveroneway::OneWaySendRequest>
        for crate::OneWaySendRequest
    {
        #[inline]
        fn compat_from(value: ::fidl_test_driveroneway::OneWaySendRequest) -> Self {
            Self { payload: ::fidl_next::CompatFrom::compat_from(value.payload) }
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `OneWay`
    /// protocol.
    pub type OneWayProxy = ::fidl_next::ClientSender<crate::OneWay>;

    #[cfg(feature = "driver")]
    impl ::fidl_next::CompatFrom<crate::OneWay> for ::fidl_test_driveroneway::OneWayMarker {
        fn compat_from(_: crate::OneWay) -> Self {
            Self
        }
    }

    #[cfg(feature = "driver")]
    impl ::fidl_next::CompatFrom<::fidl_test_driveroneway::OneWayMarker> for crate::OneWay {
        fn compat_from(_: ::fidl_test_driveroneway::OneWayMarker) -> Self {
            Self
        }
    }
}
