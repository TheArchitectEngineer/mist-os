// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
#[repr(C)]
pub struct Payload {
    pub value: u32,
}

impl ::fidl_next::Encodable for Payload {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WirePayload;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for Payload
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                value,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.value, encoder, value)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<Payload> {
    type EncodedOption = ::fidl_next::WireBox<WirePayload>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<Payload>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Payload: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WirePayload> for Payload {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WirePayload) -> Self {
        Self { value: ::fidl_next::TakeFrom::take_from(&from.value) }
    }
}

/// The wire type corresponding to [`Payload`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePayload {
    pub value: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::ZeroPadding for WirePayload {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WirePayload
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut value,

            } = slot;
        }

        ::fidl_next::Decode::decode(value.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct OneWaySendRequest {
    pub payload: crate::Payload,
}

impl ::fidl_next::Encodable for OneWaySendRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <crate::Payload as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireOneWaySendRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for OneWaySendRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                payload,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.payload, encoder, payload)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<OneWaySendRequest> {
    type EncodedOption = ::fidl_next::WireBox<WireOneWaySendRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<OneWaySendRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    OneWaySendRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireOneWaySendRequest> for OneWaySendRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <crate::Payload as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WireOneWaySendRequest) -> Self {
        Self { payload: ::fidl_next::TakeFrom::take_from(&from.payload) }
    }
}

/// The wire type corresponding to [`OneWaySendRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireOneWaySendRequest {
    pub payload: crate::WirePayload,
}

unsafe impl ::fidl_next::ZeroPadding for WireOneWaySendRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOneWaySendRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut payload,

            } = slot;
        }

        ::fidl_next::Decode::decode(payload.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the OneWay protocol.
#[derive(Debug)]
pub struct OneWay;

pub mod one_way {
    pub mod prelude {
        pub use crate::{
            one_way, OneWay, OneWayClientHandler, OneWayClientSender, OneWayServerHandler,
            OneWayServerSender,
        };

        pub use crate::OneWaySendRequest;
    }

    pub struct Send;

    impl ::fidl_next::Method for Send {
        const ORDINAL: u64 = 7942965975761529343;

        type Protocol = crate::OneWay;

        type Request = crate::WireOneWaySendRequest;

        type Response = ::fidl_next::Never;
    }
}

/// A helper trait for the `OneWay` client sender.
pub trait OneWayClientSender {
    type Transport: ::fidl_next::Transport;

    fn send<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireOneWaySendRequest,
        >;
}

impl<___T> OneWayClientSender for ::fidl_next::ClientSender<___T, OneWay>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn send<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireOneWaySendRequest,
        >,
    {
        self.as_untyped().send_one_way(7942965975761529343, request)
    }
}

/// A client handler for the OneWay protocol.
///
/// See [`OneWay`] for more details.
pub trait OneWayClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for OneWay
where
    ___T: ::fidl_next::Transport,
    ___H: OneWayClientHandler<___T>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `OneWay` server sender.
pub trait OneWayServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> OneWayServerSender for ::fidl_next::ServerSender<___T, OneWay>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the OneWay protocol.
///
/// See [`OneWay`] for more details.
pub trait OneWayServerHandler<___T: ::fidl_next::Transport> {
    fn send(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, OneWay>,

        request: ::fidl_next::RequestBuffer<___T, one_way::Send>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for OneWay
where
    ___T: ::fidl_next::Transport,
    ___H: OneWayServerHandler<___T>,

    crate::WireOneWaySendRequest: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            7942965975761529343 => {
                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.send(sender, buffer);
            }

            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    impl ::fidl_next::TakeFrom<crate::WirePayload> for ::fidl_test_driveroneway::Payload {
        #[inline]
        fn take_from(from: &crate::WirePayload) -> Self {
            Self { value: ::fidl_next::TakeFrom::take_from(&from.value) }
        }
    }

    #[cfg(feature = "driver")]
    impl ::fidl_next::TakeFrom<crate::WireOneWaySendRequest>
        for ::fidl_test_driveroneway::OneWaySendRequest
    {
        #[inline]
        fn take_from(from: &crate::WireOneWaySendRequest) -> Self {
            Self { payload: ::fidl_next::TakeFrom::take_from(&from.payload) }
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `OneWay`
    /// protocol.
    pub type OneWayProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::OneWay>;

    #[cfg(feature = "driver")]
    impl ::fidl_next::TakeFrom<crate::OneWay> for ::fidl_test_driveroneway::OneWayMarker {
        #[inline]
        fn take_from(from: &crate::OneWay) -> Self {
            Self
        }
    }
}
