// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

pub const BASIC: &str = "\'\"\\\n\r\t";

pub const DOLLAR: &str = "$";

pub const DOLLAR_BRACE: &str = "${";

#[doc = " \"pleaseescapethisdocommentproperly\"\n"]
#[derive(Clone, Debug)]
#[repr(C)]
pub struct DocCommentWithQuotes {}

impl ::fidl_next::Encodable for DocCommentWithQuotes {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> =
        unsafe { ::fidl_next::CopyOptimization::enable_if(true) };

    type Encoded = WireDocCommentWithQuotes;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for DocCommentWithQuotes
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {

            } = out;
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<DocCommentWithQuotes> {
    type EncodedOption = ::fidl_next::WireBox<WireDocCommentWithQuotes>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<DocCommentWithQuotes>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    DocCommentWithQuotes: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireDocCommentWithQuotes> for DocCommentWithQuotes {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> =
        unsafe { ::fidl_next::CopyOptimization::enable_if(true) };

    #[inline]
    fn take_from(from: &WireDocCommentWithQuotes) -> Self {
        Self {}
    }
}

/// The wire type corresponding to [`DocCommentWithQuotes`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireDocCommentWithQuotes {}

unsafe impl ::fidl_next::ZeroPadding for WireDocCommentWithQuotes {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireDocCommentWithQuotes
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {

            } = slot;
        }

        Ok(())
    }
}

pub const MAX: &str = "\u{10ffff}";

pub const NULL: &str = "\u{0}";

pub const SMILE_LEADING_ZERO: &str = "\u{1f600}";

pub const SMILE_LITERAL: &str = "\u{1f600}";

pub const SMILE_LOWER: &str = "\u{1f600}";

pub const SMILE_UPPER: &str = "\u{1f600}";

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    impl ::fidl_next::TakeFrom<crate::WireDocCommentWithQuotes>
        for ::fidl_test_escaping::DocCommentWithQuotes
    {
        #[inline]
        fn take_from(from: &crate::WireDocCommentWithQuotes) -> Self {
            Self {}
        }
    }
}
