// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct ExampleUseOfErrorSyntaxCallWhichMayFailRequest {
    pub s: String,
}

impl ::fidl_next::Encodable for ExampleUseOfErrorSyntaxCallWhichMayFailRequest {
    type Encoded = WireExampleUseOfErrorSyntaxCallWhichMayFailRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ExampleUseOfErrorSyntaxCallWhichMayFailRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.s, encoder, s)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleUseOfErrorSyntaxCallWhichMayFailRequest> {
    type EncodedOption = ::fidl_next::WireBox<WireExampleUseOfErrorSyntaxCallWhichMayFailRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E>
    for Box<ExampleUseOfErrorSyntaxCallWhichMayFailRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleUseOfErrorSyntaxCallWhichMayFailRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireExampleUseOfErrorSyntaxCallWhichMayFailRequest>
    for ExampleUseOfErrorSyntaxCallWhichMayFailRequest
{
    #[inline]
    fn take_from(from: &WireExampleUseOfErrorSyntaxCallWhichMayFailRequest) -> Self {
        Self { s: ::fidl_next::TakeFrom::take_from(&from.s) }
    }
}

/// The wire type corresponding to [`ExampleUseOfErrorSyntaxCallWhichMayFailRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireExampleUseOfErrorSyntaxCallWhichMayFailRequest {
    pub s: ::fidl_next::WireString,
}

unsafe impl ::fidl_next::ZeroPadding for WireExampleUseOfErrorSyntaxCallWhichMayFailRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleUseOfErrorSyntaxCallWhichMayFailRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,

            } = slot;
        }

        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct ExampleUseOfErrorSyntaxCallWhichMayFailResponse {
    pub value: i64,
}

impl ::fidl_next::Encodable for ExampleUseOfErrorSyntaxCallWhichMayFailResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireExampleUseOfErrorSyntaxCallWhichMayFailResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ExampleUseOfErrorSyntaxCallWhichMayFailResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                value,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.value, encoder, value)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleUseOfErrorSyntaxCallWhichMayFailResponse> {
    type EncodedOption = ::fidl_next::WireBox<WireExampleUseOfErrorSyntaxCallWhichMayFailResponse>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E>
    for Box<ExampleUseOfErrorSyntaxCallWhichMayFailResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleUseOfErrorSyntaxCallWhichMayFailResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireExampleUseOfErrorSyntaxCallWhichMayFailResponse>
    for ExampleUseOfErrorSyntaxCallWhichMayFailResponse
{
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WireExampleUseOfErrorSyntaxCallWhichMayFailResponse) -> Self {
        Self { value: ::fidl_next::TakeFrom::take_from(&from.value) }
    }
}

/// The wire type corresponding to [`ExampleUseOfErrorSyntaxCallWhichMayFailResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireExampleUseOfErrorSyntaxCallWhichMayFailResponse {
    pub value: ::fidl_next::WireI64,
}

unsafe impl ::fidl_next::ZeroPadding for WireExampleUseOfErrorSyntaxCallWhichMayFailResponse {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleUseOfErrorSyntaxCallWhichMayFailResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut value,

            } = slot;
        }

        ::fidl_next::Decode::decode(value.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the ExampleUseOfErrorSyntax protocol.
#[derive(Debug)]
pub struct ExampleUseOfErrorSyntax;

pub mod example_use_of_error_syntax {
    pub mod prelude {
        pub use crate::{
            example_use_of_error_syntax, ExampleUseOfErrorSyntax,
            ExampleUseOfErrorSyntaxClientHandler, ExampleUseOfErrorSyntaxClientSender,
            ExampleUseOfErrorSyntaxServerHandler, ExampleUseOfErrorSyntaxServerSender,
        };

        pub use ::fidl_next_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailRequest;

        pub use ::fidl_next_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailResponse;

        pub use crate::ExampleUseOfErrorSyntaxCallWhichMayFailRequest;

        pub use crate::ExampleUseOfErrorSyntaxCallWhichMayFailResponse;
    }

    pub struct ComposedCallWhichMayFail;

    impl ::fidl_next::Method for ComposedCallWhichMayFail {
        const ORDINAL: u64 = 3565108794310607393;

        type Protocol = crate::ExampleUseOfErrorSyntax;

        type Request = ::fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailRequest;

        type Response =



                                ::fidl_next::WireResult

                            <

                                ::fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailResponse,


                                ::fidl_next::WireU32,

                            >


                ;
    }

    pub struct CallWhichMayFail;

    impl ::fidl_next::Method for CallWhichMayFail {
        const ORDINAL: u64 = 3757408930698888354;

        type Protocol = crate::ExampleUseOfErrorSyntax;

        type Request = crate::WireExampleUseOfErrorSyntaxCallWhichMayFailRequest;

        type Response = ::fidl_next::WireResult<
            crate::WireExampleUseOfErrorSyntaxCallWhichMayFailResponse,
            ::fidl_next::WireU32,
        >;
    }
}

/// A helper trait for the `ExampleUseOfErrorSyntax` client sender.
pub trait ExampleUseOfErrorSyntaxClientSender {
    type Transport: ::fidl_next::Transport;

    fn composed_call_which_may_fail<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<
                            '_,
                            Self::Transport,
                            example_use_of_error_syntax::ComposedCallWhichMayFail,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailRequest,
                        >;

    fn call_which_may_fail<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<
            '_,
            Self::Transport,
            example_use_of_error_syntax::CallWhichMayFail,
        >,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireExampleUseOfErrorSyntaxCallWhichMayFailRequest,
        >;
}

impl<___T> ExampleUseOfErrorSyntaxClientSender
    for ::fidl_next::ClientSender<___T, ExampleUseOfErrorSyntax>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;







                    fn composed_call_which_may_fail<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<'_, Self::Transport, example_use_of_error_syntax::ComposedCallWhichMayFail>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailRequest,
                        >,
                    {
        self.as_untyped()
            .send_two_way(3565108794310607393, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn call_which_may_fail<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<
            '_,
            Self::Transport,
            example_use_of_error_syntax::CallWhichMayFail,
        >,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireExampleUseOfErrorSyntaxCallWhichMayFailRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(3757408930698888354, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the ExampleUseOfErrorSyntax protocol.
///
/// See [`ExampleUseOfErrorSyntax`] for more details.
pub trait ExampleUseOfErrorSyntaxClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for ExampleUseOfErrorSyntax
where
    ___T: ::fidl_next::Transport,
    ___H: ExampleUseOfErrorSyntaxClientHandler<___T>,

    <example_use_of_error_syntax::ComposedCallWhichMayFail as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <example_use_of_error_syntax::CallWhichMayFail as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `ExampleUseOfErrorSyntax` server sender.
pub trait ExampleUseOfErrorSyntaxServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> ExampleUseOfErrorSyntaxServerSender
    for ::fidl_next::ServerSender<___T, ExampleUseOfErrorSyntax>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the ExampleUseOfErrorSyntax protocol.
///
/// See [`ExampleUseOfErrorSyntax`] for more details.
pub trait ExampleUseOfErrorSyntaxServerHandler<___T: ::fidl_next::Transport> {
    fn composed_call_which_may_fail(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, ExampleUseOfErrorSyntax>,

        request: ::fidl_next::RequestBuffer<
            ___T,
            example_use_of_error_syntax::ComposedCallWhichMayFail,
        >,

        responder: ::fidl_next::Responder<example_use_of_error_syntax::ComposedCallWhichMayFail>,
    );

    fn call_which_may_fail(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, ExampleUseOfErrorSyntax>,

        request: ::fidl_next::RequestBuffer<___T, example_use_of_error_syntax::CallWhichMayFail>,

        responder: ::fidl_next::Responder<example_use_of_error_syntax::CallWhichMayFail>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for ExampleUseOfErrorSyntax
where
    ___T: ::fidl_next::Transport,
    ___H: ExampleUseOfErrorSyntaxServerHandler<___T>,

    ::fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireExampleUseOfErrorSyntaxCallWhichMayFailRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            3565108794310607393 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.composed_call_which_may_fail(sender, buffer, responder);
            }

            3757408930698888354 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.call_which_may_fail(sender, buffer, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    impl ::fidl_next::TakeFrom<crate::WireExampleUseOfErrorSyntaxCallWhichMayFailRequest>
        for ::fidl_test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest
    {
        #[inline]
        fn take_from(from: &crate::WireExampleUseOfErrorSyntaxCallWhichMayFailRequest) -> Self {
            Self { s: ::fidl_next::TakeFrom::take_from(&from.s) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireExampleUseOfErrorSyntaxCallWhichMayFailResponse>
        for ::fidl_test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse
    {
        #[inline]
        fn take_from(from: &crate::WireExampleUseOfErrorSyntaxCallWhichMayFailResponse) -> Self {
            Self { value: ::fidl_next::TakeFrom::take_from(&from.value) }
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `ExampleUseOfErrorSyntax`
    /// protocol.
    pub type ExampleUseOfErrorSyntaxProxy = ::fidl_next::ClientSender<
        ::fidl_next::fuchsia::zx::Channel,
        crate::ExampleUseOfErrorSyntax,
    >;

    impl ::fidl_next::TakeFrom<crate::ExampleUseOfErrorSyntax>
        for ::fidl_test_errorsyntax::ExampleUseOfErrorSyntaxMarker
    {
        #[inline]
        fn take_from(from: &crate::ExampleUseOfErrorSyntax) -> Self {
            Self
        }
    }
}
