// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct ExampleUseOfErrorSyntaxCallWhichMayFailRequest {
    pub s: String,
}

impl ::fidl_next::Encodable for ExampleUseOfErrorSyntaxCallWhichMayFailRequest {
    type Encoded = WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ExampleUseOfErrorSyntaxCallWhichMayFailRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = out;
        }

        ::fidl_next::Encode::encode(self.s, encoder, s)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for ExampleUseOfErrorSyntaxCallWhichMayFailRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.s, encoder, s)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ExampleUseOfErrorSyntaxCallWhichMayFailRequest {
    type EncodedOption =
        ::fidl_next::WireBox<'static, WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'static>>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ExampleUseOfErrorSyntaxCallWhichMayFailRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleUseOfErrorSyntaxCallWhichMayFailRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E>
    for ExampleUseOfErrorSyntaxCallWhichMayFailRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleUseOfErrorSyntaxCallWhichMayFailRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'de>>
    for ExampleUseOfErrorSyntaxCallWhichMayFailRequest
{
    #[inline]
    fn from_wire(wire: WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'de>) -> Self {
        Self { s: ::fidl_next::FromWire::from_wire(wire.s) }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'de>>
    for ExampleUseOfErrorSyntaxCallWhichMayFailRequest
{
    #[inline]
    fn from_wire_ref(wire: &WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'de>) -> Self {
        Self { s: ::fidl_next::FromWireRef::from_wire_ref(&wire.s) }
    }
}

/// The wire type corresponding to [`ExampleUseOfErrorSyntaxCallWhichMayFailRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'de> {
    pub s: ::fidl_next::WireString<'de>,
}

unsafe impl ::fidl_next::Wire for WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'static> {
    type Decoded<'de> = WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,

            } = slot;
        }

        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct ExampleUseOfErrorSyntaxCallWhichMayFailResponse {
    pub value: i64,
}

impl ::fidl_next::Encodable for ExampleUseOfErrorSyntaxCallWhichMayFailResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        Self,
        WireExampleUseOfErrorSyntaxCallWhichMayFailResponse,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireExampleUseOfErrorSyntaxCallWhichMayFailResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ExampleUseOfErrorSyntaxCallWhichMayFailResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                value,

            } = out;
        }

        ::fidl_next::Encode::encode(self.value, encoder, value)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for ExampleUseOfErrorSyntaxCallWhichMayFailResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                value,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.value, encoder, value)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ExampleUseOfErrorSyntaxCallWhichMayFailResponse {
    type EncodedOption =
        ::fidl_next::WireBox<'static, WireExampleUseOfErrorSyntaxCallWhichMayFailResponse>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E>
    for ExampleUseOfErrorSyntaxCallWhichMayFailResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleUseOfErrorSyntaxCallWhichMayFailResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E>
    for ExampleUseOfErrorSyntaxCallWhichMayFailResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleUseOfErrorSyntaxCallWhichMayFailResponse: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireExampleUseOfErrorSyntaxCallWhichMayFailResponse>
    for ExampleUseOfErrorSyntaxCallWhichMayFailResponse
{
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        WireExampleUseOfErrorSyntaxCallWhichMayFailResponse,
        Self,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i64 as ::fidl_next::FromWire<::fidl_next::WireI64>>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireExampleUseOfErrorSyntaxCallWhichMayFailResponse) -> Self {
        Self { value: ::fidl_next::FromWire::from_wire(wire.value) }
    }
}

impl ::fidl_next::FromWireRef<WireExampleUseOfErrorSyntaxCallWhichMayFailResponse>
    for ExampleUseOfErrorSyntaxCallWhichMayFailResponse
{
    #[inline]
    fn from_wire_ref(wire: &WireExampleUseOfErrorSyntaxCallWhichMayFailResponse) -> Self {
        Self { value: ::fidl_next::FromWireRef::from_wire_ref(&wire.value) }
    }
}

/// The wire type corresponding to [`ExampleUseOfErrorSyntaxCallWhichMayFailResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireExampleUseOfErrorSyntaxCallWhichMayFailResponse {
    pub value: ::fidl_next::WireI64,
}

unsafe impl ::fidl_next::Wire for WireExampleUseOfErrorSyntaxCallWhichMayFailResponse {
    type Decoded<'de> = WireExampleUseOfErrorSyntaxCallWhichMayFailResponse;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleUseOfErrorSyntaxCallWhichMayFailResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut value,

            } = slot;
        }

        ::fidl_next::Decode::decode(value.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the ExampleUseOfErrorSyntax protocol.
#[derive(Debug)]
pub struct ExampleUseOfErrorSyntax;

pub mod example_use_of_error_syntax {
    pub mod prelude {
        pub use crate::{
            example_use_of_error_syntax, ExampleUseOfErrorSyntax,
            ExampleUseOfErrorSyntaxClientHandler, ExampleUseOfErrorSyntaxServerHandler,
        };

        pub use ::fidl_next_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailRequest;

        pub use ::fidl_next_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailResponse;

        pub use crate::ExampleUseOfErrorSyntaxCallWhichMayFailRequest;

        pub use crate::ExampleUseOfErrorSyntaxCallWhichMayFailResponse;
    }

    pub struct ComposedCallWhichMayFail;

    impl ::fidl_next::Method for ComposedCallWhichMayFail {
        const ORDINAL: u64 = 3565108794310607393;

        type Protocol = crate::ExampleUseOfErrorSyntax;

        type Request = ::fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailRequest<'static>;

        type Response =



                                ::fidl_next::WireResult

                            <
                                'static,

                                ::fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailResponse,


                                ::fidl_next::WireU32,

                            >


                ;
    }

    pub struct CallWhichMayFail;

    impl ::fidl_next::Method for CallWhichMayFail {
        const ORDINAL: u64 = 3757408930698888354;

        type Protocol = crate::ExampleUseOfErrorSyntax;

        type Request = crate::WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'static>;

        type Response = ::fidl_next::WireResult<
            'static,
            crate::WireExampleUseOfErrorSyntaxCallWhichMayFailResponse,
            ::fidl_next::WireU32,
        >;
    }

    mod ___detail {

        pub struct ComposedCallWhichMayFail<T0> {
            s: T0,
        }

        impl<T0> ::fidl_next::Encodable for ComposedCallWhichMayFail<T0>
        where
            T0: ::fidl_next::Encodable<Encoded = ::fidl_next::WireString<'static>>,
        {
            type Encoded = ::fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailRequest<'static>;
        }

        unsafe impl<___E, T0> ::fidl_next::Encode<___E> for ComposedCallWhichMayFail<T0>
        where
            ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

            ___E: ::fidl_next::Encoder,

            T0: ::fidl_next::Encode<___E, Encoded = ::fidl_next::WireString<'static>>,
        {
            #[inline]
            fn encode(
                self,
                encoder: &mut ___E,
                out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
            ) -> Result<(), ::fidl_next::EncodeError> {
                ::fidl_next::munge! {
                    let Self::Encoded {
                        s,

                    } = out;
                }

                ::fidl_next::Encode::encode(self.s, encoder, s)?;

                Ok(())
            }
        }

        pub struct CallWhichMayFail<T0> {
            s: T0,
        }

        impl<T0> ::fidl_next::Encodable for CallWhichMayFail<T0>
        where
            T0: ::fidl_next::Encodable<Encoded = ::fidl_next::WireString<'static>>,
        {
            type Encoded = crate::WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'static>;
        }

        unsafe impl<___E, T0> ::fidl_next::Encode<___E> for CallWhichMayFail<T0>
        where
            ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

            ___E: ::fidl_next::Encoder,

            T0: ::fidl_next::Encode<___E, Encoded = ::fidl_next::WireString<'static>>,
        {
            #[inline]
            fn encode(
                self,
                encoder: &mut ___E,
                out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
            ) -> Result<(), ::fidl_next::EncodeError> {
                ::fidl_next::munge! {
                    let Self::Encoded {
                        s,

                    } = out;
                }

                ::fidl_next::Encode::encode(self.s, encoder, s)?;

                Ok(())
            }
        }

        unsafe impl<___T> ::fidl_next::Protocol<___T> for crate::ExampleUseOfErrorSyntax
        where
            ___T: ::fidl_next::Transport,
        {
            type ClientSender = ExampleUseOfErrorSyntaxClientSender<___T>;
            type ServerSender = ExampleUseOfErrorSyntaxServerSender<___T>;
        }

        /// The client sender for the `ExampleUseOfErrorSyntax` protocol.
        pub struct ExampleUseOfErrorSyntaxClientSender<___T: ::fidl_next::Transport> {
            #[allow(dead_code)]
            sender: ::fidl_next::protocol::ClientSender<___T>,
        }

        impl<___T> ExampleUseOfErrorSyntaxClientSender<___T>
        where
            ___T: ::fidl_next::Transport,
        {
            pub fn composed_call_which_may_fail(
                &self,

                s: impl ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = ::fidl_next::WireString<'static>,
                >,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::ComposedCallWhichMayFail, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                <___T as ::fidl_next::Transport>::SendBuffer:
                    ::fidl_next::encoder::InternalHandleEncoder,

                <___T as ::fidl_next::Transport>::SendBuffer: ::fidl_next::Encoder,
            {
                self.composed_call_which_may_fail_with(ComposedCallWhichMayFail { s })
            }



                            pub fn composed_call_which_may_fail_with<___R>(
                                &self,
                                request: ___R,
                            ) -> Result<
                                ::fidl_next::ResponseFuture<'_, super::ComposedCallWhichMayFail, ___T>,
                                ::fidl_next::EncodeError,
                            >
                            where
                                ___R: ::fidl_next::Encode<
                                    <___T as ::fidl_next::Transport>::SendBuffer,
                                    Encoded = ::fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailRequest<'static>,
                                >,
                            {
                self.sender
                    .send_two_way(3565108794310607393, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }

            pub fn call_which_may_fail(
                &self,

                s: impl ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = ::fidl_next::WireString<'static>,
                >,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::CallWhichMayFail, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                <___T as ::fidl_next::Transport>::SendBuffer:
                    ::fidl_next::encoder::InternalHandleEncoder,

                <___T as ::fidl_next::Transport>::SendBuffer: ::fidl_next::Encoder,
            {
                self.call_which_may_fail_with(CallWhichMayFail { s })
            }

            pub fn call_which_may_fail_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::CallWhichMayFail, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'static>,
                >,
            {
                self.sender
                    .send_two_way(3757408930698888354, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }
        }

        /// The server sender for the `ExampleUseOfErrorSyntax` protocol.
        #[repr(transparent)]
        pub struct ExampleUseOfErrorSyntaxServerSender<___T: ::fidl_next::Transport> {
            sender: ::fidl_next::protocol::ServerSender<___T>,
        }

        impl<___T> ExampleUseOfErrorSyntaxServerSender<___T> where ___T: ::fidl_next::Transport {}
    }
}

/// A client handler for the ExampleUseOfErrorSyntax protocol.
///
/// See [`ExampleUseOfErrorSyntax`] for more details.
pub trait ExampleUseOfErrorSyntaxClientHandler<___T: ::fidl_next::Transport> {}

impl<___H, ___T> ::fidl_next::ClientProtocol<___H, ___T> for ExampleUseOfErrorSyntax
where
    ___H: ExampleUseOfErrorSyntaxClientHandler<___T> + Send,
    ___T: ::fidl_next::Transport,

    <example_use_of_error_syntax::ComposedCallWhichMayFail as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <example_use_of_error_syntax::CallWhichMayFail as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    async fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A server handler for the ExampleUseOfErrorSyntax protocol.
///
/// See [`ExampleUseOfErrorSyntax`] for more details.
pub trait ExampleUseOfErrorSyntaxServerHandler<___T: ::fidl_next::Transport> {
    fn composed_call_which_may_fail(
        &mut self,
        sender: &::fidl_next::ServerSender<ExampleUseOfErrorSyntax, ___T>,

        request: ::fidl_next::Request<example_use_of_error_syntax::ComposedCallWhichMayFail, ___T>,

        responder: ::fidl_next::Responder<example_use_of_error_syntax::ComposedCallWhichMayFail>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn call_which_may_fail(
        &mut self,
        sender: &::fidl_next::ServerSender<ExampleUseOfErrorSyntax, ___T>,

        request: ::fidl_next::Request<example_use_of_error_syntax::CallWhichMayFail, ___T>,

        responder: ::fidl_next::Responder<example_use_of_error_syntax::CallWhichMayFail>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;
}

impl<___H, ___T> ::fidl_next::ServerProtocol<___H, ___T> for ExampleUseOfErrorSyntax
where
    ___H: ExampleUseOfErrorSyntaxServerHandler<___T> + Send,
    ___T: ::fidl_next::Transport,

    <example_use_of_error_syntax::ComposedCallWhichMayFail as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <example_use_of_error_syntax::CallWhichMayFail as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    async fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    async fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            3565108794310607393 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => {
                        handler.composed_call_which_may_fail(sender, decoded, responder).await
                    }
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            3757408930698888354 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.call_which_may_fail(sender, decoded, responder).await,
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `ExampleUseOfErrorSyntax`
    /// protocol.
    pub type ExampleUseOfErrorSyntaxProxy = ::fidl_next::ClientSender<
        ::fidl_next::fuchsia::zx::Channel,
        crate::ExampleUseOfErrorSyntax,
    >;

    impl ::core::convert::From<crate::ExampleUseOfErrorSyntax>
        for ::fidl_test_errorsyntax::ExampleUseOfErrorSyntaxMarker
    {
        #[inline]
        fn from(_: crate::ExampleUseOfErrorSyntax) -> Self {
            Self
        }
    }
}
