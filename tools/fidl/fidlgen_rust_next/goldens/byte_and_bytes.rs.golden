// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
#[repr(C)]
pub struct ByteAndBytes {
    pub single_byte: u8,
}

impl ::fidl_next::Encodable for ByteAndBytes {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireByteAndBytes> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u8 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireByteAndBytes;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ByteAndBytes
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                single_byte,

            } = out;
        }

        ::fidl_next::Encode::encode(self.single_byte, encoder, single_byte)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for ByteAndBytes
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                single_byte,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.single_byte, encoder, single_byte)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ByteAndBytes {
    type EncodedOption = ::fidl_next::WireBox<'static, WireByteAndBytes>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ByteAndBytes
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ByteAndBytes: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for ByteAndBytes
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ByteAndBytes: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireByteAndBytes> for ByteAndBytes {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireByteAndBytes, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u8 as ::fidl_next::FromWire<u8>>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireByteAndBytes) -> Self {
        Self { single_byte: ::fidl_next::FromWire::from_wire(wire.single_byte) }
    }
}

impl ::fidl_next::FromWireRef<WireByteAndBytes> for ByteAndBytes {
    #[inline]
    fn from_wire_ref(wire: &WireByteAndBytes) -> Self {
        Self { single_byte: ::fidl_next::FromWireRef::from_wire_ref(&wire.single_byte) }
    }
}

/// The wire type corresponding to [`ByteAndBytes`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireByteAndBytes {
    pub single_byte: u8,
}

unsafe impl ::fidl_next::Wire for WireByteAndBytes {
    type Decoded<'de> = WireByteAndBytes;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireByteAndBytes
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut single_byte,

            } = slot;
        }

        ::fidl_next::Decode::decode(single_byte.as_mut(), decoder)?;

        Ok(())
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {}
