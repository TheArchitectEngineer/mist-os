// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct SuperFooRequest {
    pub s: String,
}

impl ::fidl_next::Encodable for SuperFooRequest {
    type Encoded = WireSuperFooRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for SuperFooRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.s, encoder, s)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SuperFooRequest> {
    type EncodedOption = ::fidl_next::WireBox<WireSuperFooRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<SuperFooRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SuperFooRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSuperFooRequest> for SuperFooRequest {
    #[inline]
    fn take_from(from: &WireSuperFooRequest) -> Self {
        Self { s: ::fidl_next::TakeFrom::take_from(&from.s) }
    }
}

/// The wire type corresponding to [`SuperFooRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireSuperFooRequest {
    pub s: ::fidl_next::WireString,
}

unsafe impl ::fidl_next::ZeroPadding for WireSuperFooRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSuperFooRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,

            } = slot;
        }

        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct SuperFooResponse {
    pub y: i64,
}

impl ::fidl_next::Encodable for SuperFooResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireSuperFooResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for SuperFooResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                y,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.y, encoder, y)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SuperFooResponse> {
    type EncodedOption = ::fidl_next::WireBox<WireSuperFooResponse>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<SuperFooResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SuperFooResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSuperFooResponse> for SuperFooResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i64 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WireSuperFooResponse) -> Self {
        Self { y: ::fidl_next::TakeFrom::take_from(&from.y) }
    }
}

/// The wire type corresponding to [`SuperFooResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireSuperFooResponse {
    pub y: ::fidl_next::WireI64,
}

unsafe impl ::fidl_next::ZeroPadding for WireSuperFooResponse {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSuperFooResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut y,

            } = slot;
        }

        ::fidl_next::Decode::decode(y.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the super protocol.
#[derive(Debug)]
pub struct Super;

pub mod super_ {
    pub mod prelude {
        pub use crate::{
            super_, Super, SuperClientHandler, SuperClientSender, SuperServerHandler,
            SuperServerSender,
        };

        pub use crate::SuperFooRequest;

        pub use crate::SuperFooResponse;
    }

    pub struct Foo;

    impl ::fidl_next::Method for Foo {
        const ORDINAL: u64 = 7540745593380780216;

        type Protocol = crate::Super;

        type Request = crate::WireSuperFooRequest;

        type Response = crate::WireSuperFooResponse;
    }
}

/// A helper trait for the `super` client sender.
pub trait SuperClientSender {
    type Transport: ::fidl_next::Transport;

    fn foo<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, super_::Foo>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireSuperFooRequest,
        >;
}

impl<___T> SuperClientSender for ::fidl_next::ClientSender<___T, Super>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn foo<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, super_::Foo>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireSuperFooRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(7540745593380780216, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the super protocol.
///
/// See [`Super`] for more details.
pub trait SuperClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for Super
where
    ___T: ::fidl_next::Transport,
    ___H: SuperClientHandler<___T>,

    <super_::Foo as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `super` server sender.
pub trait SuperServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> SuperServerSender for ::fidl_next::ServerSender<___T, Super>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the super protocol.
///
/// See [`Super`] for more details.
pub trait SuperServerHandler<___T: ::fidl_next::Transport> {
    fn foo(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Super>,

        request: ::fidl_next::RequestBuffer<___T, super_::Foo>,

        responder: ::fidl_next::Responder<super_::Foo>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for Super
where
    ___T: ::fidl_next::Transport,
    ___H: SuperServerHandler<___T>,

    crate::WireSuperFooRequest: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            7540745593380780216 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.foo(sender, buffer, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// The type corresponding to the sub protocol.
#[derive(Debug)]
pub struct Sub;

pub mod sub {
    pub mod prelude {
        pub use crate::{
            sub, Sub, SubClientHandler, SubClientSender, SubServerHandler, SubServerSender,
        };

        pub use crate::SuperFooRequest;

        pub use crate::SuperFooResponse;
    }

    pub struct Foo;

    impl ::fidl_next::Method for Foo {
        const ORDINAL: u64 = 7540745593380780216;

        type Protocol = crate::Sub;

        type Request = crate::WireSuperFooRequest;

        type Response = crate::WireSuperFooResponse;
    }
}

/// A helper trait for the `sub` client sender.
pub trait SubClientSender {
    type Transport: ::fidl_next::Transport;

    fn foo<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::ResponseFuture<'_, Self::Transport, sub::Foo>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireSuperFooRequest,
        >;
}

impl<___T> SubClientSender for ::fidl_next::ClientSender<___T, Sub>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn foo<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::ResponseFuture<'_, Self::Transport, sub::Foo>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireSuperFooRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(7540745593380780216, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the sub protocol.
///
/// See [`Sub`] for more details.
pub trait SubClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for Sub
where
    ___T: ::fidl_next::Transport,
    ___H: SubClientHandler<___T>,

    <sub::Foo as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `sub` server sender.
pub trait SubServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> SubServerSender for ::fidl_next::ServerSender<___T, Sub>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the sub protocol.
///
/// See [`Sub`] for more details.
pub trait SubServerHandler<___T: ::fidl_next::Transport> {
    fn foo(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Sub>,

        request: ::fidl_next::RequestBuffer<___T, sub::Foo>,

        responder: ::fidl_next::Responder<sub::Foo>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for Sub
where
    ___T: ::fidl_next::Transport,
    ___H: SubServerHandler<___T>,

    crate::WireSuperFooRequest: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            7540745593380780216 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.foo(sender, buffer, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    impl ::fidl_next::TakeFrom<crate::WireSuperFooRequest>
        for ::fidl_test_inheritance::SuperFooRequest
    {
        #[inline]
        fn take_from(from: &crate::WireSuperFooRequest) -> Self {
            Self { s: ::fidl_next::TakeFrom::take_from(&from.s) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireSuperFooResponse>
        for ::fidl_test_inheritance::SuperFooResponse
    {
        #[inline]
        fn take_from(from: &crate::WireSuperFooResponse) -> Self {
            Self { y: ::fidl_next::TakeFrom::take_from(&from.y) }
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Super`
    /// protocol.
    pub type SuperProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Super>;

    impl ::fidl_next::TakeFrom<crate::Super> for ::fidl_test_inheritance::Super_Marker {
        #[inline]
        fn take_from(from: &crate::Super) -> Self {
            Self
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Sub`
    /// protocol.
    pub type SubProxy = ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Sub>;

    impl ::fidl_next::TakeFrom<crate::Sub> for ::fidl_test_inheritance::SubMarker {
        #[inline]
        fn take_from(from: &crate::Sub) -> Self {
            Self
        }
    }
}
