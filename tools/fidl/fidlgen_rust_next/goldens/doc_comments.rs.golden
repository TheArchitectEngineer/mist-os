// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[doc = " const comment #1\n\n const comment #3\n"]
pub const C: i32 = 4;

#[doc = " flexible union comment #1\n\n flexible union comment #3\n"]
#[derive(Clone, Debug)]
pub enum FlexibleUnion {
    Field(i32),

    UnknownOrdinal_(u64),
}

impl ::fidl_next::Encodable for FlexibleUnion {
    type Encoded = WireFlexibleUnion;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for FlexibleUnion
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireFlexibleUnion { raw } = out);

        match self {
            Self::Field(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, i32>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<FlexibleUnion> {
    type EncodedOption = WireOptionalFlexibleUnion;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<FlexibleUnion>
where
    ___E: ?Sized,
    FlexibleUnion: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalFlexibleUnion { raw } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(&mut **inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireFlexibleUnion> for FlexibleUnion {
    #[inline]
    fn take_from(from: &WireFlexibleUnion) -> Self {
        match from.raw.ordinal() {
            1 => Self::Field(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked::<::fidl_next::WireI32>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalFlexibleUnion> for Option<Box<FlexibleUnion>> {
    #[inline]
    fn take_from(from: &WireOptionalFlexibleUnion) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`FlexibleUnion`].
#[repr(transparent)]
pub struct WireFlexibleUnion {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireFlexibleUnion {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod flexible_union {
    pub enum Ref<'union> {
        Field(&'union ::fidl_next::WireI32),

        UnknownOrdinal_(u64),
    }
}

impl WireFlexibleUnion {
    pub fn as_ref(&self) -> crate::flexible_union::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::flexible_union::Ref::Field(unsafe {
                self.raw.get().deref_unchecked::<::fidl_next::WireI32>()
            }),

            unknown => crate::flexible_union::Ref::UnknownOrdinal_(unknown),
        }
    }
}

impl Clone for WireFlexibleUnion {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<::fidl_next::WireI32>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireFlexibleUnion
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireI32>(
                raw, decoder,
            )?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireFlexibleUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireI32>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalFlexibleUnion {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireOptionalFlexibleUnion {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalFlexibleUnion {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireFlexibleUnion> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalFlexibleUnion {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalFlexibleUnion { raw: ::fidl_next::RawWireUnion::absent() };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<::fidl_next::WireI32>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalFlexibleUnion
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireI32>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalFlexibleUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

/// The type corresponding to the Interface protocol.
#[doc = " interface comment #1\n\n interface comment #3\n"]
#[derive(Debug)]
pub struct Interface;

pub mod interface {
    pub mod prelude {
        pub use crate::{
            interface, Interface, InterfaceClientHandler, InterfaceClientSender,
            InterfaceServerHandler, InterfaceServerSender,
        };
    }

    pub struct Method;

    impl ::fidl_next::Method for Method {
        const ORDINAL: u64 = 5017051197196532121;

        type Protocol = crate::Interface;

        type Request = ();

        type Response = ::fidl_next::Never;
    }

    pub struct OnEvent;

    impl ::fidl_next::Method for OnEvent {
        const ORDINAL: u64 = 28780186509098736;

        type Protocol = crate::Interface;

        type Request = ::fidl_next::Never;

        type Response = ();
    }
}

/// A helper trait for the `Interface` client sender.
pub trait InterfaceClientSender {
    type Transport: ::fidl_next::Transport;

    #[doc = " method comment #1\n\n method comment #3\n"]
    fn method(
        &self,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>;
}

impl<___T> InterfaceClientSender for ::fidl_next::ClientSender<___T, Interface>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    #[doc = " method comment #1\n\n method comment #3\n"]
    fn method(
        &self,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError> {
        self.as_untyped().send_one_way(5017051197196532121, &mut ())
    }
}

/// A client handler for the Interface protocol.
///
/// See [`Interface`] for more details.
pub trait InterfaceClientHandler<___T: ::fidl_next::Transport> {
    #[doc = " event comment #1\n\n event comment #3\n"]
    fn on_event(&mut self, sender: &::fidl_next::ClientSender<___T, Interface>);
}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for Interface
where
    ___T: ::fidl_next::Transport,
    ___H: InterfaceClientHandler<___T>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            28780186509098736 => {
                handler.on_event(sender);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `Interface` server sender.
pub trait InterfaceServerSender {
    type Transport: ::fidl_next::Transport;

    #[doc = " event comment #1\n\n event comment #3\n"]
    fn on_event(
        &self,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>;
}

impl<___T> InterfaceServerSender for ::fidl_next::ServerSender<___T, Interface>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    #[doc = " event comment #1\n\n event comment #3\n"]
    fn on_event(
        &self,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError> {
        self.as_untyped().send_event(28780186509098736, &mut ())
    }
}

/// A server handler for the Interface protocol.
///
/// See [`Interface`] for more details.
pub trait InterfaceServerHandler<___T: ::fidl_next::Transport> {
    #[doc = " method comment #1\n\n method comment #3\n"]
    fn method(&mut self, sender: &::fidl_next::ServerSender<___T, Interface>);
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for Interface
where
    ___T: ::fidl_next::Transport,
    ___H: InterfaceServerHandler<___T>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            5017051197196532121 => {
                handler.method(sender);
            }

            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

::fidl_next::bitflags! {
    #[doc = " flexible bits comment #1\n\n flexible bits comment #2\n"]#[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct MyFlexibleBits: u32 {
        #[doc = " MY_FIRST_BIT member comment #1\n\n MY_FIRST_BIT member comment #3\n"]const MY_FIRST_BIT = 1;
        #[doc = " MY_OTHER_BIT member comment #1\n\n MY_OTHER_BIT member comment #3\n"]const MY_OTHER_BIT = 2;
        const _ = !0;
    }
}

impl ::fidl_next::Encodable for MyFlexibleBits {
    type Encoded = WireMyFlexibleBits;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MyFlexibleBits
where
    ___E: ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        _: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyFlexibleBits { value } = out);
        let _ = value.write(::fidl_next::WireU32::from(self.bits()));
        Ok(())
    }
}

impl ::core::convert::From<WireMyFlexibleBits> for MyFlexibleBits {
    fn from(wire: WireMyFlexibleBits) -> Self {
        Self::from_bits_retain(u32::from(wire.value))
    }
}

impl ::fidl_next::TakeFrom<WireMyFlexibleBits> for MyFlexibleBits {
    #[inline]
    fn take_from(from: &WireMyFlexibleBits) -> Self {
        Self::from(*from)
    }
}

/// The wire type corresponding to [`MyFlexibleBits`].
#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireMyFlexibleBits {
    value: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::ZeroPadding for WireMyFlexibleBits {
    #[inline]
    fn zero_padding(_: &mut ::core::mem::MaybeUninit<Self>) {
        // Wire bits have no padding
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyFlexibleBits
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        Ok(())
    }
}

impl ::core::convert::From<MyFlexibleBits> for WireMyFlexibleBits {
    fn from(natural: MyFlexibleBits) -> Self {
        Self { value: ::fidl_next::WireU32::from(natural.bits()) }
    }
}

#[doc = " flexible enum comment #1.\n\n flexible enum comment #2.\n"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(u32)]
pub enum MyFlexibleEnum {
    Foo = 1,
    Bar = 2,
    UnknownOrdinal_(u32),
}

impl ::fidl_next::Encodable for MyFlexibleEnum {
    type Encoded = WireMyFlexibleEnum;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MyFlexibleEnum
where
    ___E: ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        _: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyFlexibleEnum { value } = out);
        let _ = value.write(::fidl_next::WireU32::from(match *self {
            Self::Foo => 1,

            Self::Bar => 2,

            Self::UnknownOrdinal_(value) => value,
        }));

        Ok(())
    }
}

impl ::core::convert::From<WireMyFlexibleEnum> for MyFlexibleEnum {
    fn from(wire: WireMyFlexibleEnum) -> Self {
        match u32::from(wire.value) {
            1 => Self::Foo,

            2 => Self::Bar,

            value => Self::UnknownOrdinal_(value),
        }
    }
}

impl ::fidl_next::TakeFrom<WireMyFlexibleEnum> for MyFlexibleEnum {
    #[inline]
    fn take_from(from: &WireMyFlexibleEnum) -> Self {
        Self::from(*from)
    }
}

/// The wire type corresponding to [`MyFlexibleEnum`].
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(transparent)]
pub struct WireMyFlexibleEnum {
    value: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::ZeroPadding for WireMyFlexibleEnum {
    #[inline]
    fn zero_padding(_: &mut ::core::mem::MaybeUninit<Self>) {
        // Wire enums have no padding
    }
}

impl WireMyFlexibleEnum {
    pub const FOO: WireMyFlexibleEnum = WireMyFlexibleEnum { value: ::fidl_next::WireU32(1) };

    pub const BAR: WireMyFlexibleEnum = WireMyFlexibleEnum { value: ::fidl_next::WireU32(2) };
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyFlexibleEnum
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        Ok(())
    }
}

impl ::core::convert::From<MyFlexibleEnum> for WireMyFlexibleEnum {
    fn from(natural: MyFlexibleEnum) -> Self {
        match natural {
            MyFlexibleEnum::Foo => WireMyFlexibleEnum::FOO,

            MyFlexibleEnum::Bar => WireMyFlexibleEnum::BAR,

            MyFlexibleEnum::UnknownOrdinal_(value) => {
                WireMyFlexibleEnum { value: ::fidl_next::WireU32::from(value) }
            }
        }
    }
}

::fidl_next::bitflags! {
    #[doc = " strict bits comment #1\n\n strict bits comment #2\n"]#[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct MyStrictBits: u32 {
        #[doc = " MY_FIRST_BIT member comment #1\n\n MY_FIRST_BIT member comment #3\n"]const MY_FIRST_BIT = 1;
        #[doc = " MY_OTHER_BIT member comment #1\n\n MY_OTHER_BIT member comment #3\n"]const MY_OTHER_BIT = 2;

    }
}

impl ::fidl_next::Encodable for MyStrictBits {
    type Encoded = WireMyStrictBits;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MyStrictBits
where
    ___E: ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        _: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyStrictBits { value } = out);
        let _ = value.write(::fidl_next::WireU32::from(self.bits()));
        Ok(())
    }
}

impl ::core::convert::From<WireMyStrictBits> for MyStrictBits {
    fn from(wire: WireMyStrictBits) -> Self {
        Self::from_bits_retain(u32::from(wire.value))
    }
}

impl ::fidl_next::TakeFrom<WireMyStrictBits> for MyStrictBits {
    #[inline]
    fn take_from(from: &WireMyStrictBits) -> Self {
        Self::from(*from)
    }
}

/// The wire type corresponding to [`MyStrictBits`].
#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireMyStrictBits {
    value: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::ZeroPadding for WireMyStrictBits {
    #[inline]
    fn zero_padding(_: &mut ::core::mem::MaybeUninit<Self>) {
        // Wire bits have no padding
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyStrictBits
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { value } = slot);
        let set = u32::from(*value);
        if set & !MyStrictBits::all().bits() != 0 {
            return Err(::fidl_next::DecodeError::InvalidBits {
                expected: MyStrictBits::all().bits() as usize,
                actual: set as usize,
            });
        }

        Ok(())
    }
}

impl ::core::convert::From<MyStrictBits> for WireMyStrictBits {
    fn from(natural: MyStrictBits) -> Self {
        Self { value: ::fidl_next::WireU32::from(natural.bits()) }
    }
}

#[doc = " strict enum comment #1.\n\n strict enum comment #2.\n"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(u32)]
pub enum MyStrictEnum {
    Foo = 1,
    Bar = 2,
}

impl ::fidl_next::Encodable for MyStrictEnum {
    type Encoded = WireMyStrictEnum;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MyStrictEnum
where
    ___E: ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        _: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyStrictEnum { value } = out);
        let _ = value.write(::fidl_next::WireU32::from(match *self {
            Self::Foo => 1,

            Self::Bar => 2,
        }));

        Ok(())
    }
}

impl ::core::convert::From<WireMyStrictEnum> for MyStrictEnum {
    fn from(wire: WireMyStrictEnum) -> Self {
        match u32::from(wire.value) {
            1 => Self::Foo,

            2 => Self::Bar,

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireMyStrictEnum> for MyStrictEnum {
    #[inline]
    fn take_from(from: &WireMyStrictEnum) -> Self {
        Self::from(*from)
    }
}

/// The wire type corresponding to [`MyStrictEnum`].
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(transparent)]
pub struct WireMyStrictEnum {
    value: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::ZeroPadding for WireMyStrictEnum {
    #[inline]
    fn zero_padding(_: &mut ::core::mem::MaybeUninit<Self>) {
        // Wire enums have no padding
    }
}

impl WireMyStrictEnum {
    pub const FOO: WireMyStrictEnum = WireMyStrictEnum { value: ::fidl_next::WireU32(1) };

    pub const BAR: WireMyStrictEnum = WireMyStrictEnum { value: ::fidl_next::WireU32(2) };
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyStrictEnum
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { value } = slot);

        match u32::from(*value) {
            1 | 2 => (),
            unknown => return Err(::fidl_next::DecodeError::InvalidEnumOrdinal(unknown as i128)),
        }

        Ok(())
    }
}

impl ::core::convert::From<MyStrictEnum> for WireMyStrictEnum {
    fn from(natural: MyStrictEnum) -> Self {
        match natural {
            MyStrictEnum::Foo => WireMyStrictEnum::FOO,

            MyStrictEnum::Bar => WireMyStrictEnum::BAR,
        }
    }
}

/// The type corresponding to the Service service.
#[doc = " service comment #1\n\n service comment #3\n"]
#[derive(Debug)]
pub struct Service;

/// A helper trait for instances of the `Service` service.
pub trait ServiceInstance {
    /// The error type for the instance.
    type Error: ::core::error::Error + Send + Sync + 'static;

    /// The transport type created by connecting to a member.
    type Transport: ::fidl_next::Transport;

    /// Attempts to connect to the `interface` member.
    fn interface(
        &mut self,
    ) -> Result<
        ::fidl_next::ClientEnd<
            Self::Transport,
            ::fidl_next::ClientEnd<::fidl_next::fuchsia::zx::Channel, crate::Interface>,
        >,
        Self::Error,
    >;
}

impl<___I> ServiceInstance for ::fidl_next::ServiceInstance<___I, Service>
where
    ___I: ::fidl_next::protocol::ServiceInstance,
{
    type Error = ___I::Error;
    type Transport = ___I::Transport;

    fn interface(
        &mut self,
    ) -> Result<
        ::fidl_next::ClientEnd<
            Self::Transport,
            ::fidl_next::ClientEnd<::fidl_next::fuchsia::zx::Channel, crate::Interface>,
        >,
        Self::Error,
    > {
        self.as_untyped_mut().connect("interface").map(::fidl_next::ClientEnd::from_untyped)
    }
}

#[doc = " strict union comment #1\n\n strict union comment #3\n"]
#[derive(Clone, Debug)]
pub enum StrictUnion {
    Field(i32),
}

impl ::fidl_next::Encodable for StrictUnion {
    type Encoded = WireStrictUnion;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for StrictUnion
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireStrictUnion { raw } = out);

        match self {
            Self::Field(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, i32>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StrictUnion> {
    type EncodedOption = WireOptionalStrictUnion;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<StrictUnion>
where
    ___E: ?Sized,
    StrictUnion: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalStrictUnion { raw } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(&mut **inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStrictUnion> for StrictUnion {
    #[inline]
    fn take_from(from: &WireStrictUnion) -> Self {
        match from.raw.ordinal() {
            1 => Self::Field(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked::<::fidl_next::WireI32>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalStrictUnion> for Option<Box<StrictUnion>> {
    #[inline]
    fn take_from(from: &WireOptionalStrictUnion) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`StrictUnion`].
#[repr(transparent)]
pub struct WireStrictUnion {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireStrictUnion {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod strict_union {
    pub enum Ref<'union> {
        Field(&'union ::fidl_next::WireI32),
    }
}

impl WireStrictUnion {
    pub fn as_ref(&self) -> crate::strict_union::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::strict_union::Ref::Field(unsafe {
                self.raw.get().deref_unchecked::<::fidl_next::WireI32>()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireStrictUnion {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<::fidl_next::WireI32>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStrictUnion
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireI32>(
                raw, decoder,
            )?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireStrictUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireI32>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalStrictUnion {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireOptionalStrictUnion {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalStrictUnion {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireStrictUnion> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalStrictUnion {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalStrictUnion { raw: ::fidl_next::RawWireUnion::absent() };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<::fidl_next::WireI32>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalStrictUnion
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireI32>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalStrictUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[doc = " struct comment #1\n\n struct comment #3\n"]
#[derive(Clone, Debug)]
#[repr(C)]
pub struct Struct {
    pub field: i32,
}

impl ::fidl_next::Encodable for Struct {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireStruct;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for Struct
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                field,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.field, encoder, field)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<Struct> {
    type EncodedOption = ::fidl_next::WireBox<WireStruct>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<Struct>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Struct: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStruct> for Struct {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WireStruct) -> Self {
        Self { field: ::fidl_next::TakeFrom::take_from(&from.field) }
    }
}

/// The wire type corresponding to [`Struct`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireStruct {
    pub field: ::fidl_next::WireI32,
}

unsafe impl ::fidl_next::ZeroPadding for WireStruct {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStruct
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut field,

            } = slot;
        }

        ::fidl_next::Decode::decode(field.as_mut(), decoder)?;

        Ok(())
    }
}

#[doc = " table comment #1\n\n table comment #3\n"]
#[derive(Clone, Debug, Default)]
pub struct Table {
    pub field: Option<i32>,
}

impl Table {
    fn __max_ordinal(&self) -> usize {
        if self.field.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for Table {
    type Encoded = WireTable;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for Table
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireTable { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::ZeroPadding::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(field) = &mut self.field {
                        ::fidl_next::WireEnvelope::encode_value(
                            field,
                            preallocated.encoder,
                            &mut out,
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireTable> for Table {
    #[inline]
    fn take_from(from: &WireTable) -> Self {
        Self { field: from.field().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`Table`].
#[repr(C)]
pub struct WireTable {
    table: ::fidl_next::WireTable,
}

unsafe impl ::fidl_next::ZeroPadding for WireTable {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireTable
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireI32>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl WireTable {
    pub fn field(&self) -> Option<&::fidl_next::WireI32> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireTable {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("Table").field("field", &self.field()).finish()
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    impl ::fidl_next::TakeFrom<crate::WireFlexibleUnion> for ::fidl_test_doccomments::FlexibleUnion {
        #[inline]
        fn take_from(from: &crate::WireFlexibleUnion) -> Self {
            match from.as_ref() {
                crate::flexible_union::Ref::Field(value) => {
                    Self::Field(::fidl_next::TakeFrom::take_from(value))
                }

                crate::flexible_union::Ref::UnknownOrdinal_(unknown_ordinal) => {
                    Self::__SourceBreaking { unknown_ordinal }
                }
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireOptionalFlexibleUnion>
        for Option<Box<::fidl_test_doccomments::FlexibleUnion>>
    {
        #[inline]
        fn take_from(from: &crate::WireOptionalFlexibleUnion) -> Self {
            if let Some(inner) = from.as_ref() {
                Some(::fidl_next::TakeFrom::take_from(inner))
            } else {
                None
            }
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Interface`
    /// protocol.
    pub type InterfaceProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Interface>;

    impl ::fidl_next::TakeFrom<crate::Interface> for ::fidl_test_doccomments::InterfaceMarker {
        #[inline]
        fn take_from(from: &crate::Interface) -> Self {
            Self
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireMyFlexibleBits> for ::fidl_test_doccomments::MyFlexibleBits {
        #[inline]
        fn take_from(from: &crate::WireMyFlexibleBits) -> Self {
            Self::from_bits_retain(from.value.into())
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireMyFlexibleEnum> for ::fidl_test_doccomments::MyFlexibleEnum {
        #[inline]
        fn take_from(from: &crate::WireMyFlexibleEnum) -> Self {
            match crate::MyFlexibleEnum::from(*from) {
                crate::MyFlexibleEnum::Foo => Self::Foo,

                crate::MyFlexibleEnum::Bar => Self::Bar,

                crate::MyFlexibleEnum::UnknownOrdinal_(value) => {
                    Self::__SourceBreaking { unknown_ordinal: value }
                }
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireMyStrictBits> for ::fidl_test_doccomments::MyStrictBits {
        #[inline]
        fn take_from(from: &crate::WireMyStrictBits) -> Self {
            Self::from_bits_retain(from.value.into())
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireMyStrictEnum> for ::fidl_test_doccomments::MyStrictEnum {
        #[inline]
        fn take_from(from: &crate::WireMyStrictEnum) -> Self {
            match crate::MyStrictEnum::from(*from) {
                crate::MyStrictEnum::Foo => Self::Foo,

                crate::MyStrictEnum::Bar => Self::Bar,
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireStrictUnion> for ::fidl_test_doccomments::StrictUnion {
        #[inline]
        fn take_from(from: &crate::WireStrictUnion) -> Self {
            match from.as_ref() {
                crate::strict_union::Ref::Field(value) => {
                    Self::Field(::fidl_next::TakeFrom::take_from(value))
                }
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireOptionalStrictUnion>
        for Option<Box<::fidl_test_doccomments::StrictUnion>>
    {
        #[inline]
        fn take_from(from: &crate::WireOptionalStrictUnion) -> Self {
            if let Some(inner) = from.as_ref() {
                Some(::fidl_next::TakeFrom::take_from(inner))
            } else {
                None
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireStruct> for ::fidl_test_doccomments::Struct {
        #[inline]
        fn take_from(from: &crate::WireStruct) -> Self {
            Self { field: ::fidl_next::TakeFrom::take_from(&from.field) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireTable> for ::fidl_test_doccomments::Table {
        #[inline]
        fn take_from(from: &crate::WireTable) -> Self {
            Self {
                field: from.field().map(::fidl_next::TakeFrom::take_from),

                __source_breaking: ::fidl::marker::SourceBreaking,
            }
        }
    }
}
