// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(u32)]
pub enum MyEmptyFlexibleEnum {
    UnknownOrdinal_(u32),
}

impl ::fidl_next::Encodable for MyEmptyFlexibleEnum {
    type Encoded = WireMyEmptyFlexibleEnum;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MyEmptyFlexibleEnum
where
    ___E: ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        _: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyEmptyFlexibleEnum { value } = out);
        let _ = value.write(::fidl_next::WireU32::from(match *self {
            Self::UnknownOrdinal_(value) => value,
        }));

        Ok(())
    }
}

impl ::core::convert::From<WireMyEmptyFlexibleEnum> for MyEmptyFlexibleEnum {
    fn from(wire: WireMyEmptyFlexibleEnum) -> Self {
        match u32::from(wire.value) {
            value => Self::UnknownOrdinal_(value),
        }
    }
}

impl ::fidl_next::TakeFrom<WireMyEmptyFlexibleEnum> for MyEmptyFlexibleEnum {
    #[inline]
    fn take_from(from: &WireMyEmptyFlexibleEnum) -> Self {
        Self::from(*from)
    }
}

/// The wire type corresponding to [`MyEmptyFlexibleEnum`].
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(transparent)]
pub struct WireMyEmptyFlexibleEnum {
    value: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::ZeroPadding for WireMyEmptyFlexibleEnum {
    #[inline]
    fn zero_padding(_: &mut ::core::mem::MaybeUninit<Self>) {
        // Wire enums have no padding
    }
}

impl WireMyEmptyFlexibleEnum {}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyEmptyFlexibleEnum
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        Ok(())
    }
}

impl ::core::convert::From<MyEmptyFlexibleEnum> for WireMyEmptyFlexibleEnum {
    fn from(natural: MyEmptyFlexibleEnum) -> Self {
        match natural {
            MyEmptyFlexibleEnum::UnknownOrdinal_(value) => {
                WireMyEmptyFlexibleEnum { value: ::fidl_next::WireU32::from(value) }
            }
        }
    }
}

#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(u32)]
pub enum MyFlexibleEnum {
    Foo = 1,
    Bar = 2,
    UnknownOrdinal_(u32),
}

impl ::fidl_next::Encodable for MyFlexibleEnum {
    type Encoded = WireMyFlexibleEnum;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MyFlexibleEnum
where
    ___E: ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        _: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyFlexibleEnum { value } = out);
        let _ = value.write(::fidl_next::WireU32::from(match *self {
            Self::Foo => 1,

            Self::Bar => 2,

            Self::UnknownOrdinal_(value) => value,
        }));

        Ok(())
    }
}

impl ::core::convert::From<WireMyFlexibleEnum> for MyFlexibleEnum {
    fn from(wire: WireMyFlexibleEnum) -> Self {
        match u32::from(wire.value) {
            1 => Self::Foo,

            2 => Self::Bar,

            value => Self::UnknownOrdinal_(value),
        }
    }
}

impl ::fidl_next::TakeFrom<WireMyFlexibleEnum> for MyFlexibleEnum {
    #[inline]
    fn take_from(from: &WireMyFlexibleEnum) -> Self {
        Self::from(*from)
    }
}

/// The wire type corresponding to [`MyFlexibleEnum`].
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(transparent)]
pub struct WireMyFlexibleEnum {
    value: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::ZeroPadding for WireMyFlexibleEnum {
    #[inline]
    fn zero_padding(_: &mut ::core::mem::MaybeUninit<Self>) {
        // Wire enums have no padding
    }
}

impl WireMyFlexibleEnum {
    pub const FOO: WireMyFlexibleEnum = WireMyFlexibleEnum { value: ::fidl_next::WireU32(1) };

    pub const BAR: WireMyFlexibleEnum = WireMyFlexibleEnum { value: ::fidl_next::WireU32(2) };
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyFlexibleEnum
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        Ok(())
    }
}

impl ::core::convert::From<MyFlexibleEnum> for WireMyFlexibleEnum {
    fn from(natural: MyFlexibleEnum) -> Self {
        match natural {
            MyFlexibleEnum::Foo => WireMyFlexibleEnum::FOO,

            MyFlexibleEnum::Bar => WireMyFlexibleEnum::BAR,

            MyFlexibleEnum::UnknownOrdinal_(value) => {
                WireMyFlexibleEnum { value: ::fidl_next::WireU32::from(value) }
            }
        }
    }
}

#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(u32)]
pub enum MyFlexibleEnumWithCustomUnknown {
    Foo = 1,
    Bar = 2,
    CustomUnknown = 3,
    UnknownOrdinal_(u32),
}

impl ::fidl_next::Encodable for MyFlexibleEnumWithCustomUnknown {
    type Encoded = WireMyFlexibleEnumWithCustomUnknown;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MyFlexibleEnumWithCustomUnknown
where
    ___E: ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        _: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyFlexibleEnumWithCustomUnknown { value } = out);
        let _ = value.write(::fidl_next::WireU32::from(match *self {
            Self::Foo => 1,

            Self::Bar => 2,

            Self::CustomUnknown => 3,

            Self::UnknownOrdinal_(value) => value,
        }));

        Ok(())
    }
}

impl ::core::convert::From<WireMyFlexibleEnumWithCustomUnknown>
    for MyFlexibleEnumWithCustomUnknown
{
    fn from(wire: WireMyFlexibleEnumWithCustomUnknown) -> Self {
        match u32::from(wire.value) {
            1 => Self::Foo,

            2 => Self::Bar,

            3 => Self::CustomUnknown,

            value => Self::UnknownOrdinal_(value),
        }
    }
}

impl ::fidl_next::TakeFrom<WireMyFlexibleEnumWithCustomUnknown>
    for MyFlexibleEnumWithCustomUnknown
{
    #[inline]
    fn take_from(from: &WireMyFlexibleEnumWithCustomUnknown) -> Self {
        Self::from(*from)
    }
}

/// The wire type corresponding to [`MyFlexibleEnumWithCustomUnknown`].
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(transparent)]
pub struct WireMyFlexibleEnumWithCustomUnknown {
    value: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::ZeroPadding for WireMyFlexibleEnumWithCustomUnknown {
    #[inline]
    fn zero_padding(_: &mut ::core::mem::MaybeUninit<Self>) {
        // Wire enums have no padding
    }
}

impl WireMyFlexibleEnumWithCustomUnknown {
    pub const FOO: WireMyFlexibleEnumWithCustomUnknown =
        WireMyFlexibleEnumWithCustomUnknown { value: ::fidl_next::WireU32(1) };

    pub const BAR: WireMyFlexibleEnumWithCustomUnknown =
        WireMyFlexibleEnumWithCustomUnknown { value: ::fidl_next::WireU32(2) };

    pub const CUSTOM_UNKNOWN: WireMyFlexibleEnumWithCustomUnknown =
        WireMyFlexibleEnumWithCustomUnknown { value: ::fidl_next::WireU32(3) };
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyFlexibleEnumWithCustomUnknown
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        Ok(())
    }
}

impl ::core::convert::From<MyFlexibleEnumWithCustomUnknown>
    for WireMyFlexibleEnumWithCustomUnknown
{
    fn from(natural: MyFlexibleEnumWithCustomUnknown) -> Self {
        match natural {
            MyFlexibleEnumWithCustomUnknown::Foo => WireMyFlexibleEnumWithCustomUnknown::FOO,

            MyFlexibleEnumWithCustomUnknown::Bar => WireMyFlexibleEnumWithCustomUnknown::BAR,

            MyFlexibleEnumWithCustomUnknown::CustomUnknown => {
                WireMyFlexibleEnumWithCustomUnknown::CUSTOM_UNKNOWN
            }

            MyFlexibleEnumWithCustomUnknown::UnknownOrdinal_(value) => {
                WireMyFlexibleEnumWithCustomUnknown { value: ::fidl_next::WireU32::from(value) }
            }
        }
    }
}

#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(u32)]
pub enum MyStrictEnum {
    Foo = 1,
    Bar = 2,
}

impl ::fidl_next::Encodable for MyStrictEnum {
    type Encoded = WireMyStrictEnum;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MyStrictEnum
where
    ___E: ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        _: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyStrictEnum { value } = out);
        let _ = value.write(::fidl_next::WireU32::from(match *self {
            Self::Foo => 1,

            Self::Bar => 2,
        }));

        Ok(())
    }
}

impl ::core::convert::From<WireMyStrictEnum> for MyStrictEnum {
    fn from(wire: WireMyStrictEnum) -> Self {
        match u32::from(wire.value) {
            1 => Self::Foo,

            2 => Self::Bar,

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireMyStrictEnum> for MyStrictEnum {
    #[inline]
    fn take_from(from: &WireMyStrictEnum) -> Self {
        Self::from(*from)
    }
}

/// The wire type corresponding to [`MyStrictEnum`].
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(transparent)]
pub struct WireMyStrictEnum {
    value: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::ZeroPadding for WireMyStrictEnum {
    #[inline]
    fn zero_padding(_: &mut ::core::mem::MaybeUninit<Self>) {
        // Wire enums have no padding
    }
}

impl WireMyStrictEnum {
    pub const FOO: WireMyStrictEnum = WireMyStrictEnum { value: ::fidl_next::WireU32(1) };

    pub const BAR: WireMyStrictEnum = WireMyStrictEnum { value: ::fidl_next::WireU32(2) };
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyStrictEnum
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { value } = slot);

        match u32::from(*value) {
            1 | 2 => (),
            unknown => return Err(::fidl_next::DecodeError::InvalidEnumOrdinal(unknown as i128)),
        }

        Ok(())
    }
}

impl ::core::convert::From<MyStrictEnum> for WireMyStrictEnum {
    fn from(natural: MyStrictEnum) -> Self {
        match natural {
            MyStrictEnum::Foo => WireMyStrictEnum::FOO,

            MyStrictEnum::Bar => WireMyStrictEnum::BAR,
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    impl ::fidl_next::TakeFrom<crate::WireMyEmptyFlexibleEnum>
        for ::fidl_test_enum::MyEmptyFlexibleEnum
    {
        #[inline]
        fn take_from(from: &crate::WireMyEmptyFlexibleEnum) -> Self {
            match crate::MyEmptyFlexibleEnum::from(*from) {
                crate::MyEmptyFlexibleEnum::UnknownOrdinal_(value) => {
                    Self::__SourceBreaking { unknown_ordinal: value }
                }
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireMyFlexibleEnum> for ::fidl_test_enum::MyFlexibleEnum {
        #[inline]
        fn take_from(from: &crate::WireMyFlexibleEnum) -> Self {
            match crate::MyFlexibleEnum::from(*from) {
                crate::MyFlexibleEnum::Foo => Self::Foo,

                crate::MyFlexibleEnum::Bar => Self::Bar,

                crate::MyFlexibleEnum::UnknownOrdinal_(value) => {
                    Self::__SourceBreaking { unknown_ordinal: value }
                }
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireMyFlexibleEnumWithCustomUnknown>
        for ::fidl_test_enum::MyFlexibleEnumWithCustomUnknown
    {
        #[inline]
        fn take_from(from: &crate::WireMyFlexibleEnumWithCustomUnknown) -> Self {
            match crate::MyFlexibleEnumWithCustomUnknown::from(*from) {
                crate::MyFlexibleEnumWithCustomUnknown::Foo => Self::Foo,

                crate::MyFlexibleEnumWithCustomUnknown::Bar => Self::Bar,

                crate::MyFlexibleEnumWithCustomUnknown::CustomUnknown => Self::CustomUnknown,

                crate::MyFlexibleEnumWithCustomUnknown::UnknownOrdinal_(value) => {
                    Self::__SourceBreaking { unknown_ordinal: value }
                }
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireMyStrictEnum> for ::fidl_test_enum::MyStrictEnum {
        #[inline]
        fn take_from(from: &crate::WireMyStrictEnum) -> Self {
            match crate::MyStrictEnum::from(*from) {
                crate::MyStrictEnum::Foo => Self::Foo,

                crate::MyStrictEnum::Bar => Self::Bar,
            }
        }
    }
}
