// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug, Default)]
pub struct ComposedProtocolOneWayAnonComposedRequest {
    pub a: Option<u16>,
}

impl ComposedProtocolOneWayAnonComposedRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for ComposedProtocolOneWayAnonComposedRequest {
    type Encoded = WireComposedProtocolOneWayAnonComposedRequest<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolOneWayAnonComposedRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolOneWayAnonComposedRequest { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = self.a.take() {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for ComposedProtocolOneWayAnonComposedRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolOneWayAnonComposedRequest { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireComposedProtocolOneWayAnonComposedRequest<'de>>
    for ComposedProtocolOneWayAnonComposedRequest
{
    #[inline]
    fn from_wire(wire: WireComposedProtocolOneWayAnonComposedRequest<'de>) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);

        let a = wire.table.get(1);

        Self {
            a: a.map(|envelope| {
                ::fidl_next::FromWire::from_wire(unsafe {
                    envelope.read_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireComposedProtocolOneWayAnonComposedRequest<'de>>
    for ComposedProtocolOneWayAnonComposedRequest
{
    #[inline]
    fn from_wire_ref(wire: &WireComposedProtocolOneWayAnonComposedRequest<'de>) -> Self {
        Self {
            a: wire.table.get(1).map(|envelope| {
                ::fidl_next::FromWireRef::from_wire_ref(unsafe {
                    envelope.deref_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

/// The wire type corresponding to [`ComposedProtocolOneWayAnonComposedRequest`].
#[repr(C)]
pub struct WireComposedProtocolOneWayAnonComposedRequest<'de> {
    table: ::fidl_next::WireTable<'de>,
}

impl<'de> Drop for WireComposedProtocolOneWayAnonComposedRequest<'de> {
    fn drop(&mut self) {
        let _ = self
            .table
            .get(1)
            .map(|envelope| unsafe { envelope.read_unchecked::<::fidl_next::WireU16>() });
    }
}

unsafe impl ::fidl_next::Wire for WireComposedProtocolOneWayAnonComposedRequest<'static> {
    type Decoded<'de> = WireComposedProtocolOneWayAnonComposedRequest<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireComposedProtocolOneWayAnonComposedRequest<'static>
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'de> WireComposedProtocolOneWayAnonComposedRequest<'de> {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl<'de> ::core::fmt::Debug for WireComposedProtocolOneWayAnonComposedRequest<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("ComposedProtocolOneWayAnonComposedRequest").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum ComposedProtocolTwoWayAnonComposedRequest {
    B(bool),
}

impl ::fidl_next::Encodable for ComposedProtocolTwoWayAnonComposedRequest {
    type Encoded = WireComposedProtocolTwoWayAnonComposedRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolTwoWayAnonComposedRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedRequest { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for ComposedProtocolTwoWayAnonComposedRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedRequest { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, &bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ComposedProtocolTwoWayAnonComposedRequest {
    type EncodedOption = WireOptionalComposedProtocolTwoWayAnonComposedRequest;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ComposedProtocolTwoWayAnonComposedRequest
where
    ___E: ?Sized,
    ComposedProtocolTwoWayAnonComposedRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocolTwoWayAnonComposedRequest { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for ComposedProtocolTwoWayAnonComposedRequest
where
    ___E: ?Sized,
    ComposedProtocolTwoWayAnonComposedRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocolTwoWayAnonComposedRequest { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::EncodeRef::encode_ref(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireComposedProtocolTwoWayAnonComposedRequest>
    for ComposedProtocolTwoWayAnonComposedRequest
{
    #[inline]
    fn from_wire(wire: WireComposedProtocolTwoWayAnonComposedRequest) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireRef<WireComposedProtocolTwoWayAnonComposedRequest>
    for ComposedProtocolTwoWayAnonComposedRequest
{
    #[inline]
    fn from_wire_ref(wire: &WireComposedProtocolTwoWayAnonComposedRequest) -> Self {
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireOption<WireOptionalComposedProtocolTwoWayAnonComposedRequest>
    for Box<ComposedProtocolTwoWayAnonComposedRequest>
{
    #[inline]
    fn from_wire_option(
        wire: WireOptionalComposedProtocolTwoWayAnonComposedRequest,
    ) -> Option<Self> {
        if let Some(inner) = wire.into_option() {
            Some(Box::new(::fidl_next::FromWire::from_wire(inner)))
        } else {
            None
        }
    }
}

impl ::fidl_next::FromWireOptionRef<WireOptionalComposedProtocolTwoWayAnonComposedRequest>
    for Box<ComposedProtocolTwoWayAnonComposedRequest>
{
    #[inline]
    fn from_wire_option_ref(
        wire: &WireOptionalComposedProtocolTwoWayAnonComposedRequest,
    ) -> Option<Self> {
        if let Some(inner) = wire.as_ref() {
            Some(Box::new(::fidl_next::FromWireRef::from_wire_ref(inner)))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`ComposedProtocolTwoWayAnonComposedRequest`].
#[repr(transparent)]
pub struct WireComposedProtocolTwoWayAnonComposedRequest {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl Drop for WireComposedProtocolTwoWayAnonComposedRequest {
    fn drop(&mut self) {
        match self.raw.ordinal() {
            1 => {
                let _ = unsafe { self.raw.get().read_unchecked::<bool>() };
            }

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl ::fidl_next::Wire for WireComposedProtocolTwoWayAnonComposedRequest {
    type Decoded<'de> = WireComposedProtocolTwoWayAnonComposedRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod composed_protocol_two_way_anon_composed_request {
    pub enum Ref<'de> {
        B(&'de bool),
    }
}

impl WireComposedProtocolTwoWayAnonComposedRequest {
    pub fn as_ref(&self) -> crate::composed_protocol_two_way_anon_composed_request::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::composed_protocol_two_way_anon_composed_request::Ref::B(unsafe {
                self.raw.get().deref_unchecked::<bool>()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireComposedProtocolTwoWayAnonComposedRequest {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireComposedProtocolTwoWayAnonComposedRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireComposedProtocolTwoWayAnonComposedRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalComposedProtocolTwoWayAnonComposedRequest {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

unsafe impl ::fidl_next::Wire for WireOptionalComposedProtocolTwoWayAnonComposedRequest {
    type Decoded<'de> = WireOptionalComposedProtocolTwoWayAnonComposedRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalComposedProtocolTwoWayAnonComposedRequest {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireComposedProtocolTwoWayAnonComposedRequest> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn into_option(self) -> Option<WireComposedProtocolTwoWayAnonComposedRequest> {
        if self.is_some() {
            Some(WireComposedProtocolTwoWayAnonComposedRequest {
                raw: self.raw,
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalComposedProtocolTwoWayAnonComposedRequest {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalComposedProtocolTwoWayAnonComposedRequest {
                raw: ::fidl_next::RawWireUnion::absent(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireOptionalComposedProtocolTwoWayAnonComposedRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalComposedProtocolTwoWayAnonComposedRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug, Default)]
pub struct ComposedProtocolTwoWayAnonComposedResponse {
    pub a: Option<u16>,
}

impl ComposedProtocolTwoWayAnonComposedResponse {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for ComposedProtocolTwoWayAnonComposedResponse {
    type Encoded = WireComposedProtocolTwoWayAnonComposedResponse<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolTwoWayAnonComposedResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedResponse { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = self.a.take() {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for ComposedProtocolTwoWayAnonComposedResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedResponse { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireComposedProtocolTwoWayAnonComposedResponse<'de>>
    for ComposedProtocolTwoWayAnonComposedResponse
{
    #[inline]
    fn from_wire(wire: WireComposedProtocolTwoWayAnonComposedResponse<'de>) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);

        let a = wire.table.get(1);

        Self {
            a: a.map(|envelope| {
                ::fidl_next::FromWire::from_wire(unsafe {
                    envelope.read_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireComposedProtocolTwoWayAnonComposedResponse<'de>>
    for ComposedProtocolTwoWayAnonComposedResponse
{
    #[inline]
    fn from_wire_ref(wire: &WireComposedProtocolTwoWayAnonComposedResponse<'de>) -> Self {
        Self {
            a: wire.table.get(1).map(|envelope| {
                ::fidl_next::FromWireRef::from_wire_ref(unsafe {
                    envelope.deref_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

/// The wire type corresponding to [`ComposedProtocolTwoWayAnonComposedResponse`].
#[repr(C)]
pub struct WireComposedProtocolTwoWayAnonComposedResponse<'de> {
    table: ::fidl_next::WireTable<'de>,
}

impl<'de> Drop for WireComposedProtocolTwoWayAnonComposedResponse<'de> {
    fn drop(&mut self) {
        let _ = self
            .table
            .get(1)
            .map(|envelope| unsafe { envelope.read_unchecked::<::fidl_next::WireU16>() });
    }
}

unsafe impl ::fidl_next::Wire for WireComposedProtocolTwoWayAnonComposedResponse<'static> {
    type Decoded<'de> = WireComposedProtocolTwoWayAnonComposedResponse<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireComposedProtocolTwoWayAnonComposedResponse<'static>
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'de> WireComposedProtocolTwoWayAnonComposedResponse<'de> {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl<'de> ::core::fmt::Debug for WireComposedProtocolTwoWayAnonComposedResponse<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("ComposedProtocolTwoWayAnonComposedResponse").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug, Default)]
pub struct ComposedProtocolTwoWayAnonComposedWithErrorRequest {
    pub a: Option<u16>,
}

impl ComposedProtocolTwoWayAnonComposedWithErrorRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for ComposedProtocolTwoWayAnonComposedWithErrorRequest {
    type Encoded = WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolTwoWayAnonComposedWithErrorRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedWithErrorRequest { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = self.a.take() {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E>
    for ComposedProtocolTwoWayAnonComposedWithErrorRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedWithErrorRequest { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'de>>
    for ComposedProtocolTwoWayAnonComposedWithErrorRequest
{
    #[inline]
    fn from_wire(wire: WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'de>) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);

        let a = wire.table.get(1);

        Self {
            a: a.map(|envelope| {
                ::fidl_next::FromWire::from_wire(unsafe {
                    envelope.read_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'de>>
    for ComposedProtocolTwoWayAnonComposedWithErrorRequest
{
    #[inline]
    fn from_wire_ref(wire: &WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'de>) -> Self {
        Self {
            a: wire.table.get(1).map(|envelope| {
                ::fidl_next::FromWireRef::from_wire_ref(unsafe {
                    envelope.deref_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

/// The wire type corresponding to [`ComposedProtocolTwoWayAnonComposedWithErrorRequest`].
#[repr(C)]
pub struct WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'de> {
    table: ::fidl_next::WireTable<'de>,
}

impl<'de> Drop for WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'de> {
    fn drop(&mut self) {
        let _ = self
            .table
            .get(1)
            .map(|envelope| unsafe { envelope.read_unchecked::<::fidl_next::WireU16>() });
    }
}

unsafe impl ::fidl_next::Wire for WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'static> {
    type Decoded<'de> = WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'static>
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'de> WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'de> {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl<'de> ::core::fmt::Debug for WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("ComposedProtocolTwoWayAnonComposedWithErrorRequest")
            .field("a", &self.a())
            .finish()
    }
}

#[derive(Clone, Debug)]
pub enum ComposedProtocolTwoWayAnonComposedWithErrorResponse {
    B(bool),
}

impl ::fidl_next::Encodable for ComposedProtocolTwoWayAnonComposedWithErrorResponse {
    type Encoded = WireComposedProtocolTwoWayAnonComposedWithErrorResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolTwoWayAnonComposedWithErrorResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedWithErrorResponse { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E>
    for ComposedProtocolTwoWayAnonComposedWithErrorResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedWithErrorResponse { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, &bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ComposedProtocolTwoWayAnonComposedWithErrorResponse {
    type EncodedOption = WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E>
    for ComposedProtocolTwoWayAnonComposedWithErrorResponse
where
    ___E: ?Sized,
    ComposedProtocolTwoWayAnonComposedWithErrorResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E>
    for ComposedProtocolTwoWayAnonComposedWithErrorResponse
where
    ___E: ?Sized,
    ComposedProtocolTwoWayAnonComposedWithErrorResponse: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::EncodeRef::encode_ref(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireComposedProtocolTwoWayAnonComposedWithErrorResponse>
    for ComposedProtocolTwoWayAnonComposedWithErrorResponse
{
    #[inline]
    fn from_wire(wire: WireComposedProtocolTwoWayAnonComposedWithErrorResponse) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireRef<WireComposedProtocolTwoWayAnonComposedWithErrorResponse>
    for ComposedProtocolTwoWayAnonComposedWithErrorResponse
{
    #[inline]
    fn from_wire_ref(wire: &WireComposedProtocolTwoWayAnonComposedWithErrorResponse) -> Self {
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireOption<WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse>
    for Box<ComposedProtocolTwoWayAnonComposedWithErrorResponse>
{
    #[inline]
    fn from_wire_option(
        wire: WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse,
    ) -> Option<Self> {
        if let Some(inner) = wire.into_option() {
            Some(Box::new(::fidl_next::FromWire::from_wire(inner)))
        } else {
            None
        }
    }
}

impl ::fidl_next::FromWireOptionRef<WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse>
    for Box<ComposedProtocolTwoWayAnonComposedWithErrorResponse>
{
    #[inline]
    fn from_wire_option_ref(
        wire: &WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse,
    ) -> Option<Self> {
        if let Some(inner) = wire.as_ref() {
            Some(Box::new(::fidl_next::FromWireRef::from_wire_ref(inner)))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`ComposedProtocolTwoWayAnonComposedWithErrorResponse`].
#[repr(transparent)]
pub struct WireComposedProtocolTwoWayAnonComposedWithErrorResponse {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl Drop for WireComposedProtocolTwoWayAnonComposedWithErrorResponse {
    fn drop(&mut self) {
        match self.raw.ordinal() {
            1 => {
                let _ = unsafe { self.raw.get().read_unchecked::<bool>() };
            }

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl ::fidl_next::Wire for WireComposedProtocolTwoWayAnonComposedWithErrorResponse {
    type Decoded<'de> = WireComposedProtocolTwoWayAnonComposedWithErrorResponse;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod composed_protocol_two_way_anon_composed_with_error_response {
    pub enum Ref<'de> {
        B(&'de bool),
    }
}

impl WireComposedProtocolTwoWayAnonComposedWithErrorResponse {
    pub fn as_ref(
        &self,
    ) -> crate::composed_protocol_two_way_anon_composed_with_error_response::Ref<'_> {
        match self.raw.ordinal() {
            1 => {
                crate::composed_protocol_two_way_anon_composed_with_error_response::Ref::B(unsafe {
                    self.raw.get().deref_unchecked::<bool>()
                })
            }

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireComposedProtocolTwoWayAnonComposedWithErrorResponse {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireComposedProtocolTwoWayAnonComposedWithErrorResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireComposedProtocolTwoWayAnonComposedWithErrorResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

unsafe impl ::fidl_next::Wire for WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse {
    type Decoded<'de> = WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireComposedProtocolTwoWayAnonComposedWithErrorResponse> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn into_option(self) -> Option<WireComposedProtocolTwoWayAnonComposedWithErrorResponse> {
        if self.is_some() {
            Some(WireComposedProtocolTwoWayAnonComposedWithErrorResponse {
                raw: self.raw,
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse {
                raw: ::fidl_next::RawWireUnion::absent(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum ComposedProtocolOnAnonComposedRequest {
    B(bool),
}

impl ::fidl_next::Encodable for ComposedProtocolOnAnonComposedRequest {
    type Encoded = WireComposedProtocolOnAnonComposedRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolOnAnonComposedRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolOnAnonComposedRequest { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for ComposedProtocolOnAnonComposedRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolOnAnonComposedRequest { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, &bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ComposedProtocolOnAnonComposedRequest {
    type EncodedOption = WireOptionalComposedProtocolOnAnonComposedRequest;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ComposedProtocolOnAnonComposedRequest
where
    ___E: ?Sized,
    ComposedProtocolOnAnonComposedRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocolOnAnonComposedRequest { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for ComposedProtocolOnAnonComposedRequest
where
    ___E: ?Sized,
    ComposedProtocolOnAnonComposedRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocolOnAnonComposedRequest { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::EncodeRef::encode_ref(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireComposedProtocolOnAnonComposedRequest>
    for ComposedProtocolOnAnonComposedRequest
{
    #[inline]
    fn from_wire(wire: WireComposedProtocolOnAnonComposedRequest) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireRef<WireComposedProtocolOnAnonComposedRequest>
    for ComposedProtocolOnAnonComposedRequest
{
    #[inline]
    fn from_wire_ref(wire: &WireComposedProtocolOnAnonComposedRequest) -> Self {
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireOption<WireOptionalComposedProtocolOnAnonComposedRequest>
    for Box<ComposedProtocolOnAnonComposedRequest>
{
    #[inline]
    fn from_wire_option(wire: WireOptionalComposedProtocolOnAnonComposedRequest) -> Option<Self> {
        if let Some(inner) = wire.into_option() {
            Some(Box::new(::fidl_next::FromWire::from_wire(inner)))
        } else {
            None
        }
    }
}

impl ::fidl_next::FromWireOptionRef<WireOptionalComposedProtocolOnAnonComposedRequest>
    for Box<ComposedProtocolOnAnonComposedRequest>
{
    #[inline]
    fn from_wire_option_ref(
        wire: &WireOptionalComposedProtocolOnAnonComposedRequest,
    ) -> Option<Self> {
        if let Some(inner) = wire.as_ref() {
            Some(Box::new(::fidl_next::FromWireRef::from_wire_ref(inner)))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`ComposedProtocolOnAnonComposedRequest`].
#[repr(transparent)]
pub struct WireComposedProtocolOnAnonComposedRequest {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl Drop for WireComposedProtocolOnAnonComposedRequest {
    fn drop(&mut self) {
        match self.raw.ordinal() {
            1 => {
                let _ = unsafe { self.raw.get().read_unchecked::<bool>() };
            }

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl ::fidl_next::Wire for WireComposedProtocolOnAnonComposedRequest {
    type Decoded<'de> = WireComposedProtocolOnAnonComposedRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod composed_protocol_on_anon_composed_request {
    pub enum Ref<'de> {
        B(&'de bool),
    }
}

impl WireComposedProtocolOnAnonComposedRequest {
    pub fn as_ref(&self) -> crate::composed_protocol_on_anon_composed_request::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::composed_protocol_on_anon_composed_request::Ref::B(unsafe {
                self.raw.get().deref_unchecked::<bool>()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireComposedProtocolOnAnonComposedRequest {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireComposedProtocolOnAnonComposedRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireComposedProtocolOnAnonComposedRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalComposedProtocolOnAnonComposedRequest {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

unsafe impl ::fidl_next::Wire for WireOptionalComposedProtocolOnAnonComposedRequest {
    type Decoded<'de> = WireOptionalComposedProtocolOnAnonComposedRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalComposedProtocolOnAnonComposedRequest {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireComposedProtocolOnAnonComposedRequest> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn into_option(self) -> Option<WireComposedProtocolOnAnonComposedRequest> {
        if self.is_some() {
            Some(WireComposedProtocolOnAnonComposedRequest {
                raw: self.raw,
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalComposedProtocolOnAnonComposedRequest {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalComposedProtocolOnAnonComposedRequest {
                raw: ::fidl_next::RawWireUnion::absent(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalComposedProtocolOnAnonComposedRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalComposedProtocolOnAnonComposedRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug, Default)]
pub struct TablePayload {
    pub a: Option<u16>,
}

impl TablePayload {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for TablePayload {
    type Encoded = WireTablePayload<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for TablePayload
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireTablePayload { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = self.a.take() {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for TablePayload
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireTablePayload { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireTablePayload<'de>> for TablePayload {
    #[inline]
    fn from_wire(wire: WireTablePayload<'de>) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);

        let a = wire.table.get(1);

        Self {
            a: a.map(|envelope| {
                ::fidl_next::FromWire::from_wire(unsafe {
                    envelope.read_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireTablePayload<'de>> for TablePayload {
    #[inline]
    fn from_wire_ref(wire: &WireTablePayload<'de>) -> Self {
        Self {
            a: wire.table.get(1).map(|envelope| {
                ::fidl_next::FromWireRef::from_wire_ref(unsafe {
                    envelope.deref_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

/// The wire type corresponding to [`TablePayload`].
#[repr(C)]
pub struct WireTablePayload<'de> {
    table: ::fidl_next::WireTable<'de>,
}

impl<'de> Drop for WireTablePayload<'de> {
    fn drop(&mut self) {
        let _ = self
            .table
            .get(1)
            .map(|envelope| unsafe { envelope.read_unchecked::<::fidl_next::WireU16>() });
    }
}

unsafe impl ::fidl_next::Wire for WireTablePayload<'static> {
    type Decoded<'de> = WireTablePayload<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireTablePayload<'static>
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'de> WireTablePayload<'de> {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl<'de> ::core::fmt::Debug for WireTablePayload<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("TablePayload").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum UnionPayload {
    B(bool),
}

impl ::fidl_next::Encodable for UnionPayload {
    type Encoded = WireUnionPayload;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for UnionPayload
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionPayload { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for UnionPayload
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionPayload { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, &bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for UnionPayload {
    type EncodedOption = WireOptionalUnionPayload;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for UnionPayload
where
    ___E: ?Sized,
    UnionPayload: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionPayload { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for UnionPayload
where
    ___E: ?Sized,
    UnionPayload: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionPayload { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::EncodeRef::encode_ref(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireUnionPayload> for UnionPayload {
    #[inline]
    fn from_wire(wire: WireUnionPayload) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireRef<WireUnionPayload> for UnionPayload {
    #[inline]
    fn from_wire_ref(wire: &WireUnionPayload) -> Self {
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireOption<WireOptionalUnionPayload> for Box<UnionPayload> {
    #[inline]
    fn from_wire_option(wire: WireOptionalUnionPayload) -> Option<Self> {
        if let Some(inner) = wire.into_option() {
            Some(Box::new(::fidl_next::FromWire::from_wire(inner)))
        } else {
            None
        }
    }
}

impl ::fidl_next::FromWireOptionRef<WireOptionalUnionPayload> for Box<UnionPayload> {
    #[inline]
    fn from_wire_option_ref(wire: &WireOptionalUnionPayload) -> Option<Self> {
        if let Some(inner) = wire.as_ref() {
            Some(Box::new(::fidl_next::FromWireRef::from_wire_ref(inner)))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionPayload`].
#[repr(transparent)]
pub struct WireUnionPayload {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl Drop for WireUnionPayload {
    fn drop(&mut self) {
        match self.raw.ordinal() {
            1 => {
                let _ = unsafe { self.raw.get().read_unchecked::<bool>() };
            }

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl ::fidl_next::Wire for WireUnionPayload {
    type Decoded<'de> = WireUnionPayload;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod union_payload {
    pub enum Ref<'de> {
        B(&'de bool),
    }
}

impl WireUnionPayload {
    pub fn as_ref(&self) -> crate::union_payload::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_payload::Ref::B(unsafe { self.raw.get().deref_unchecked::<bool>() }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireUnionPayload {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireUnionPayload
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireUnionPayload {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionPayload {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

unsafe impl ::fidl_next::Wire for WireOptionalUnionPayload {
    type Decoded<'de> = WireOptionalUnionPayload;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalUnionPayload {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionPayload> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn into_option(self) -> Option<WireUnionPayload> {
        if self.is_some() {
            Some(WireUnionPayload { raw: self.raw, _phantom: ::core::marker::PhantomData })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalUnionPayload {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalUnionPayload {
                raw: ::fidl_next::RawWireUnion::absent(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalUnionPayload
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalUnionPayload {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

/// The type corresponding to the ComposedProtocol protocol.
#[derive(Debug)]
pub struct ComposedProtocol;

pub mod composed_protocol {
    pub mod prelude {
        pub use crate::{
            composed_protocol, ComposedProtocol, ComposedProtocolClientHandler,
            ComposedProtocolServerHandler,
        };

        pub use crate::ComposedProtocolOnAnonComposedRequest;

        pub use crate::ComposedProtocolOneWayAnonComposedRequest;

        pub use crate::ComposedProtocolTwoWayAnonComposedRequest;

        pub use crate::ComposedProtocolTwoWayAnonComposedResponse;

        pub use crate::ComposedProtocolTwoWayAnonComposedWithErrorRequest;

        pub use crate::ComposedProtocolTwoWayAnonComposedWithErrorResponse;

        pub use crate::TablePayload;

        pub use crate::UnionPayload;
    }

    pub struct OneWayAnonComposed;

    impl ::fidl_next::Method for OneWayAnonComposed {
        const ORDINAL: u64 = 7960710870216447007;

        type Protocol = crate::ComposedProtocol;

        type Request = crate::WireComposedProtocolOneWayAnonComposedRequest<'static>;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayAnonComposed;

    impl ::fidl_next::Method for TwoWayAnonComposed {
        const ORDINAL: u64 = 8107448265006659060;

        type Protocol = crate::ComposedProtocol;

        type Request = crate::WireComposedProtocolTwoWayAnonComposedRequest;

        type Response = crate::WireComposedProtocolTwoWayAnonComposedResponse<'static>;
    }

    pub struct TwoWayAnonComposedWithError;

    impl ::fidl_next::Method for TwoWayAnonComposedWithError {
        const ORDINAL: u64 = 5751989932125743144;

        type Protocol = crate::ComposedProtocol;

        type Request = crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'static>;

        type Response = ::fidl_next::WireResult<
            'static,
            crate::WireComposedProtocolTwoWayAnonComposedWithErrorResponse,
            ::fidl_next::WireU32,
        >;
    }

    pub struct OnAnonComposed;

    impl ::fidl_next::Method for OnAnonComposed {
        const ORDINAL: u64 = 5307191872315199016;

        type Protocol = crate::ComposedProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireComposedProtocolOnAnonComposedRequest;
    }

    pub struct OneWayNamedComposed;

    impl ::fidl_next::Method for OneWayNamedComposed {
        const ORDINAL: u64 = 1159174053475281336;

        type Protocol = crate::ComposedProtocol;

        type Request = crate::WireTablePayload<'static>;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayNamedComposed;

    impl ::fidl_next::Method for TwoWayNamedComposed {
        const ORDINAL: u64 = 5022872388073111636;

        type Protocol = crate::ComposedProtocol;

        type Request = crate::WireUnionPayload;

        type Response = crate::WireTablePayload<'static>;
    }

    pub struct TwoWayNamedComposedWithError;

    impl ::fidl_next::Method for TwoWayNamedComposedWithError {
        const ORDINAL: u64 = 4973436213756973807;

        type Protocol = crate::ComposedProtocol;

        type Request = crate::WireTablePayload<'static>;

        type Response =
            ::fidl_next::WireResult<'static, crate::WireUnionPayload, ::fidl_next::WireU32>;
    }

    pub struct OnNamedComposed;

    impl ::fidl_next::Method for OnNamedComposed {
        const ORDINAL: u64 = 1712755118419701115;

        type Protocol = crate::ComposedProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireUnionPayload;
    }

    mod ___detail {

        unsafe impl<___T> ::fidl_next::Protocol<___T> for crate::ComposedProtocol
        where
            ___T: ::fidl_next::Transport,
        {
            type ClientSender = ComposedProtocolClientSender<___T>;
            type ServerSender = ComposedProtocolServerSender<___T>;
        }

        /// The client sender for the `ComposedProtocol` protocol.
        pub struct ComposedProtocolClientSender<___T: ::fidl_next::Transport> {
            #[allow(dead_code)]
            sender: ::fidl_next::protocol::ClientSender<___T>,
        }

        impl<___T> ComposedProtocolClientSender<___T>
        where
            ___T: ::fidl_next::Transport,
        {
            pub fn one_way_anon_composed_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireComposedProtocolOneWayAnonComposedRequest<'static>,
                >,
            {
                self.sender.send_one_way(7960710870216447007, request)
            }

            pub fn two_way_anon_composed_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::TwoWayAnonComposed, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireComposedProtocolTwoWayAnonComposedRequest,
                >,
            {
                self.sender
                    .send_two_way(8107448265006659060, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }

            pub fn two_way_anon_composed_with_error_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::TwoWayAnonComposedWithError, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest<
                        'static,
                    >,
                >,
            {
                self.sender
                    .send_two_way(5751989932125743144, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }

            pub fn one_way_named_composed_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireTablePayload<'static>,
                >,
            {
                self.sender.send_one_way(1159174053475281336, request)
            }

            pub fn two_way_named_composed_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::TwoWayNamedComposed, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireUnionPayload,
                >,
            {
                self.sender
                    .send_two_way(5022872388073111636, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }

            pub fn two_way_named_composed_with_error_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::TwoWayNamedComposedWithError, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireTablePayload<'static>,
                >,
            {
                self.sender
                    .send_two_way(4973436213756973807, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }
        }

        /// The server sender for the `ComposedProtocol` protocol.
        #[repr(transparent)]
        pub struct ComposedProtocolServerSender<___T: ::fidl_next::Transport> {
            sender: ::fidl_next::protocol::ServerSender<___T>,
        }

        impl<___T> ComposedProtocolServerSender<___T>
        where
            ___T: ::fidl_next::Transport,
        {
            pub fn on_anon_composed_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = <super::OnAnonComposed as ::fidl_next::Method>::Response,
                >,
            {
                self.sender.send_event(5307191872315199016, request)
            }

            pub fn on_named_composed_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = <super::OnNamedComposed as ::fidl_next::Method>::Response,
                >,
            {
                self.sender.send_event(1712755118419701115, request)
            }
        }
    }
}

/// A client handler for the ComposedProtocol protocol.
///
/// See [`ComposedProtocol`] for more details.
pub trait ComposedProtocolClientHandler<___T: ::fidl_next::Transport> {
    fn on_anon_composed(
        &mut self,
        sender: &::fidl_next::ClientSender<ComposedProtocol, ___T>,

        event: ::fidl_next::Response<composed_protocol::OnAnonComposed, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn on_named_composed(
        &mut self,
        sender: &::fidl_next::ClientSender<ComposedProtocol, ___T>,

        event: ::fidl_next::Response<composed_protocol::OnNamedComposed, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;
}

impl<___H, ___T> ::fidl_next::ClientProtocol<___H, ___T> for ComposedProtocol
where
    ___H: ComposedProtocolClientHandler<___T> + Send,
    ___T: ::fidl_next::Transport,

    <composed_protocol::TwoWayAnonComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::TwoWayAnonComposedWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::OnAnonComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::TwoWayNamedComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::TwoWayNamedComposedWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::OnNamedComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    async fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            5307191872315199016 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.on_anon_composed(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            1712755118419701115 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.on_named_composed(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }
}

/// A server handler for the ComposedProtocol protocol.
///
/// See [`ComposedProtocol`] for more details.
pub trait ComposedProtocolServerHandler<___T: ::fidl_next::Transport> {
    fn one_way_anon_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<ComposedProtocol, ___T>,

        request: ::fidl_next::Request<composed_protocol::OneWayAnonComposed, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn two_way_anon_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<ComposedProtocol, ___T>,

        request: ::fidl_next::Request<composed_protocol::TwoWayAnonComposed, ___T>,

        responder: ::fidl_next::Responder<composed_protocol::TwoWayAnonComposed>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn two_way_anon_composed_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<ComposedProtocol, ___T>,

        request: ::fidl_next::Request<composed_protocol::TwoWayAnonComposedWithError, ___T>,

        responder: ::fidl_next::Responder<composed_protocol::TwoWayAnonComposedWithError>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn one_way_named_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<ComposedProtocol, ___T>,

        request: ::fidl_next::Request<composed_protocol::OneWayNamedComposed, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn two_way_named_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<ComposedProtocol, ___T>,

        request: ::fidl_next::Request<composed_protocol::TwoWayNamedComposed, ___T>,

        responder: ::fidl_next::Responder<composed_protocol::TwoWayNamedComposed>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn two_way_named_composed_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<ComposedProtocol, ___T>,

        request: ::fidl_next::Request<composed_protocol::TwoWayNamedComposedWithError, ___T>,

        responder: ::fidl_next::Responder<composed_protocol::TwoWayNamedComposedWithError>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;
}

impl<___H, ___T> ::fidl_next::ServerProtocol<___H, ___T> for ComposedProtocol
where
    ___H: ComposedProtocolServerHandler<___T> + Send,
    ___T: ::fidl_next::Transport,

    <composed_protocol::OneWayAnonComposed as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::TwoWayAnonComposed as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::TwoWayAnonComposedWithError as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::OneWayNamedComposed as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::TwoWayNamedComposed as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::TwoWayNamedComposedWithError as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    async fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            7960710870216447007 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.one_way_anon_composed(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            1159174053475281336 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.one_way_named_composed(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }

    async fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            8107448265006659060 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_anon_composed(sender, decoded, responder).await,
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            5751989932125743144 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => {
                        handler.two_way_anon_composed_with_error(sender, decoded, responder).await
                    }
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            5022872388073111636 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_named_composed(sender, decoded, responder).await,
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            4973436213756973807 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => {
                        handler.two_way_named_composed_with_error(sender, decoded, responder).await
                    }
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Clone, Debug, Default)]
pub struct MainProtocolOneWayAnonRequest {
    pub a: Option<u16>,
}

impl MainProtocolOneWayAnonRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolOneWayAnonRequest {
    type Encoded = WireMainProtocolOneWayAnonRequest<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolOneWayAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolOneWayAnonRequest { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = self.a.take() {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for MainProtocolOneWayAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolOneWayAnonRequest { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireMainProtocolOneWayAnonRequest<'de>>
    for MainProtocolOneWayAnonRequest
{
    #[inline]
    fn from_wire(wire: WireMainProtocolOneWayAnonRequest<'de>) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);

        let a = wire.table.get(1);

        Self {
            a: a.map(|envelope| {
                ::fidl_next::FromWire::from_wire(unsafe {
                    envelope.read_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireMainProtocolOneWayAnonRequest<'de>>
    for MainProtocolOneWayAnonRequest
{
    #[inline]
    fn from_wire_ref(wire: &WireMainProtocolOneWayAnonRequest<'de>) -> Self {
        Self {
            a: wire.table.get(1).map(|envelope| {
                ::fidl_next::FromWireRef::from_wire_ref(unsafe {
                    envelope.deref_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

/// The wire type corresponding to [`MainProtocolOneWayAnonRequest`].
#[repr(C)]
pub struct WireMainProtocolOneWayAnonRequest<'de> {
    table: ::fidl_next::WireTable<'de>,
}

impl<'de> Drop for WireMainProtocolOneWayAnonRequest<'de> {
    fn drop(&mut self) {
        let _ = self
            .table
            .get(1)
            .map(|envelope| unsafe { envelope.read_unchecked::<::fidl_next::WireU16>() });
    }
}

unsafe impl ::fidl_next::Wire for WireMainProtocolOneWayAnonRequest<'static> {
    type Decoded<'de> = WireMainProtocolOneWayAnonRequest<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolOneWayAnonRequest<'static>
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'de> WireMainProtocolOneWayAnonRequest<'de> {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl<'de> ::core::fmt::Debug for WireMainProtocolOneWayAnonRequest<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolOneWayAnonRequest").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayAnonRequest {
    B(bool),

    UnknownOrdinal_(u64),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonRequest {
    type Encoded = WireMainProtocolTwoWayAnonRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonRequest { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(ordinal as usize))
            }
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for MainProtocolTwoWayAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonRequest { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, &bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for MainProtocolTwoWayAnonRequest {
    type EncodedOption = WireOptionalMainProtocolTwoWayAnonRequest;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for MainProtocolTwoWayAnonRequest
where
    ___E: ?Sized,
    MainProtocolTwoWayAnonRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayAnonRequest { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for MainProtocolTwoWayAnonRequest
where
    ___E: ?Sized,
    MainProtocolTwoWayAnonRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayAnonRequest { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::EncodeRef::encode_ref(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireMainProtocolTwoWayAnonRequest> for MainProtocolTwoWayAnonRequest {
    #[inline]
    fn from_wire(wire: WireMainProtocolTwoWayAnonRequest) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireRef<WireMainProtocolTwoWayAnonRequest> for MainProtocolTwoWayAnonRequest {
    #[inline]
    fn from_wire_ref(wire: &WireMainProtocolTwoWayAnonRequest) -> Self {
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireOption<WireOptionalMainProtocolTwoWayAnonRequest>
    for Box<MainProtocolTwoWayAnonRequest>
{
    #[inline]
    fn from_wire_option(wire: WireOptionalMainProtocolTwoWayAnonRequest) -> Option<Self> {
        if let Some(inner) = wire.into_option() {
            Some(Box::new(::fidl_next::FromWire::from_wire(inner)))
        } else {
            None
        }
    }
}

impl ::fidl_next::FromWireOptionRef<WireOptionalMainProtocolTwoWayAnonRequest>
    for Box<MainProtocolTwoWayAnonRequest>
{
    #[inline]
    fn from_wire_option_ref(wire: &WireOptionalMainProtocolTwoWayAnonRequest) -> Option<Self> {
        if let Some(inner) = wire.as_ref() {
            Some(Box::new(::fidl_next::FromWireRef::from_wire_ref(inner)))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonRequest`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayAnonRequest {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl Drop for WireMainProtocolTwoWayAnonRequest {
    fn drop(&mut self) {
        match self.raw.ordinal() {
            1 => {
                let _ = unsafe { self.raw.get().read_unchecked::<bool>() };
            }

            _ => (),
        }
    }
}

unsafe impl ::fidl_next::Wire for WireMainProtocolTwoWayAnonRequest {
    type Decoded<'de> = WireMainProtocolTwoWayAnonRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod main_protocol_two_way_anon_request {
    pub enum Ref<'de> {
        B(&'de bool),

        UnknownOrdinal_(u64),
    }
}

impl WireMainProtocolTwoWayAnonRequest {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_anon_request::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_anon_request::Ref::B(unsafe {
                self.raw.get().deref_unchecked::<bool>()
            }),

            unknown => crate::main_protocol_two_way_anon_request::Ref::UnknownOrdinal_(unknown),
        }
    }
}

impl Clone for WireMainProtocolTwoWayAnonRequest {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayAnonRequest {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

unsafe impl ::fidl_next::Wire for WireOptionalMainProtocolTwoWayAnonRequest {
    type Decoded<'de> = WireOptionalMainProtocolTwoWayAnonRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalMainProtocolTwoWayAnonRequest {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayAnonRequest> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn into_option(self) -> Option<WireMainProtocolTwoWayAnonRequest> {
        if self.is_some() {
            Some(WireMainProtocolTwoWayAnonRequest {
                raw: self.raw,
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalMainProtocolTwoWayAnonRequest {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalMainProtocolTwoWayAnonRequest {
                raw: ::fidl_next::RawWireUnion::absent(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalMainProtocolTwoWayAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolTwoWayAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug, Default)]
pub struct MainProtocolTwoWayAnonResponse {
    pub a: Option<u16>,
}

impl MainProtocolTwoWayAnonResponse {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonResponse {
    type Encoded = WireMainProtocolTwoWayAnonResponse<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonResponse { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = self.a.take() {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for MainProtocolTwoWayAnonResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonResponse { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireMainProtocolTwoWayAnonResponse<'de>>
    for MainProtocolTwoWayAnonResponse
{
    #[inline]
    fn from_wire(wire: WireMainProtocolTwoWayAnonResponse<'de>) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);

        let a = wire.table.get(1);

        Self {
            a: a.map(|envelope| {
                ::fidl_next::FromWire::from_wire(unsafe {
                    envelope.read_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireMainProtocolTwoWayAnonResponse<'de>>
    for MainProtocolTwoWayAnonResponse
{
    #[inline]
    fn from_wire_ref(wire: &WireMainProtocolTwoWayAnonResponse<'de>) -> Self {
        Self {
            a: wire.table.get(1).map(|envelope| {
                ::fidl_next::FromWireRef::from_wire_ref(unsafe {
                    envelope.deref_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonResponse`].
#[repr(C)]
pub struct WireMainProtocolTwoWayAnonResponse<'de> {
    table: ::fidl_next::WireTable<'de>,
}

impl<'de> Drop for WireMainProtocolTwoWayAnonResponse<'de> {
    fn drop(&mut self) {
        let _ = self
            .table
            .get(1)
            .map(|envelope| unsafe { envelope.read_unchecked::<::fidl_next::WireU16>() });
    }
}

unsafe impl ::fidl_next::Wire for WireMainProtocolTwoWayAnonResponse<'static> {
    type Decoded<'de> = WireMainProtocolTwoWayAnonResponse<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonResponse<'static>
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'de> WireMainProtocolTwoWayAnonResponse<'de> {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl<'de> ::core::fmt::Debug for WireMainProtocolTwoWayAnonResponse<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolTwoWayAnonResponse").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug, Default)]
pub struct MainProtocolTwoWayAnonWithErrorRequest {
    pub a: Option<u16>,
}

impl MainProtocolTwoWayAnonWithErrorRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonWithErrorRequest {
    type Encoded = WireMainProtocolTwoWayAnonWithErrorRequest<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonWithErrorRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonWithErrorRequest { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = self.a.take() {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for MainProtocolTwoWayAnonWithErrorRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonWithErrorRequest { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireMainProtocolTwoWayAnonWithErrorRequest<'de>>
    for MainProtocolTwoWayAnonWithErrorRequest
{
    #[inline]
    fn from_wire(wire: WireMainProtocolTwoWayAnonWithErrorRequest<'de>) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);

        let a = wire.table.get(1);

        Self {
            a: a.map(|envelope| {
                ::fidl_next::FromWire::from_wire(unsafe {
                    envelope.read_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireMainProtocolTwoWayAnonWithErrorRequest<'de>>
    for MainProtocolTwoWayAnonWithErrorRequest
{
    #[inline]
    fn from_wire_ref(wire: &WireMainProtocolTwoWayAnonWithErrorRequest<'de>) -> Self {
        Self {
            a: wire.table.get(1).map(|envelope| {
                ::fidl_next::FromWireRef::from_wire_ref(unsafe {
                    envelope.deref_unchecked::<::fidl_next::WireU16>()
                })
            }),
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonWithErrorRequest`].
#[repr(C)]
pub struct WireMainProtocolTwoWayAnonWithErrorRequest<'de> {
    table: ::fidl_next::WireTable<'de>,
}

impl<'de> Drop for WireMainProtocolTwoWayAnonWithErrorRequest<'de> {
    fn drop(&mut self) {
        let _ = self
            .table
            .get(1)
            .map(|envelope| unsafe { envelope.read_unchecked::<::fidl_next::WireU16>() });
    }
}

unsafe impl ::fidl_next::Wire for WireMainProtocolTwoWayAnonWithErrorRequest<'static> {
    type Decoded<'de> = WireMainProtocolTwoWayAnonWithErrorRequest<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonWithErrorRequest<'static>
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'de> WireMainProtocolTwoWayAnonWithErrorRequest<'de> {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl<'de> ::core::fmt::Debug for WireMainProtocolTwoWayAnonWithErrorRequest<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolTwoWayAnonWithErrorRequest").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayAnonWithErrorResponse {
    B(bool),

    UnknownOrdinal_(u64),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonWithErrorResponse {
    type Encoded = WireMainProtocolTwoWayAnonWithErrorResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonWithErrorResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonWithErrorResponse { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(ordinal as usize))
            }
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for MainProtocolTwoWayAnonWithErrorResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonWithErrorResponse { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, &bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for MainProtocolTwoWayAnonWithErrorResponse {
    type EncodedOption = WireOptionalMainProtocolTwoWayAnonWithErrorResponse;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for MainProtocolTwoWayAnonWithErrorResponse
where
    ___E: ?Sized,
    MainProtocolTwoWayAnonWithErrorResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayAnonWithErrorResponse { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for MainProtocolTwoWayAnonWithErrorResponse
where
    ___E: ?Sized,
    MainProtocolTwoWayAnonWithErrorResponse: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayAnonWithErrorResponse { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::EncodeRef::encode_ref(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireMainProtocolTwoWayAnonWithErrorResponse>
    for MainProtocolTwoWayAnonWithErrorResponse
{
    #[inline]
    fn from_wire(wire: WireMainProtocolTwoWayAnonWithErrorResponse) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireRef<WireMainProtocolTwoWayAnonWithErrorResponse>
    for MainProtocolTwoWayAnonWithErrorResponse
{
    #[inline]
    fn from_wire_ref(wire: &WireMainProtocolTwoWayAnonWithErrorResponse) -> Self {
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireOption<WireOptionalMainProtocolTwoWayAnonWithErrorResponse>
    for Box<MainProtocolTwoWayAnonWithErrorResponse>
{
    #[inline]
    fn from_wire_option(wire: WireOptionalMainProtocolTwoWayAnonWithErrorResponse) -> Option<Self> {
        if let Some(inner) = wire.into_option() {
            Some(Box::new(::fidl_next::FromWire::from_wire(inner)))
        } else {
            None
        }
    }
}

impl ::fidl_next::FromWireOptionRef<WireOptionalMainProtocolTwoWayAnonWithErrorResponse>
    for Box<MainProtocolTwoWayAnonWithErrorResponse>
{
    #[inline]
    fn from_wire_option_ref(
        wire: &WireOptionalMainProtocolTwoWayAnonWithErrorResponse,
    ) -> Option<Self> {
        if let Some(inner) = wire.as_ref() {
            Some(Box::new(::fidl_next::FromWireRef::from_wire_ref(inner)))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonWithErrorResponse`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayAnonWithErrorResponse {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl Drop for WireMainProtocolTwoWayAnonWithErrorResponse {
    fn drop(&mut self) {
        match self.raw.ordinal() {
            1 => {
                let _ = unsafe { self.raw.get().read_unchecked::<bool>() };
            }

            _ => (),
        }
    }
}

unsafe impl ::fidl_next::Wire for WireMainProtocolTwoWayAnonWithErrorResponse {
    type Decoded<'de> = WireMainProtocolTwoWayAnonWithErrorResponse;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod main_protocol_two_way_anon_with_error_response {
    pub enum Ref<'de> {
        B(&'de bool),

        UnknownOrdinal_(u64),
    }
}

impl WireMainProtocolTwoWayAnonWithErrorResponse {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_anon_with_error_response::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_anon_with_error_response::Ref::B(unsafe {
                self.raw.get().deref_unchecked::<bool>()
            }),

            unknown => {
                crate::main_protocol_two_way_anon_with_error_response::Ref::UnknownOrdinal_(unknown)
            }
        }
    }
}

impl Clone for WireMainProtocolTwoWayAnonWithErrorResponse {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonWithErrorResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonWithErrorResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

unsafe impl ::fidl_next::Wire for WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    type Decoded<'de> = WireOptionalMainProtocolTwoWayAnonWithErrorResponse;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayAnonWithErrorResponse> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn into_option(self) -> Option<WireMainProtocolTwoWayAnonWithErrorResponse> {
        if self.is_some() {
            Some(WireMainProtocolTwoWayAnonWithErrorResponse {
                raw: self.raw,
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
                raw: ::fidl_next::RawWireUnion::absent(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalMainProtocolTwoWayAnonWithErrorResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolOnAnonRequest {
    B(bool),

    UnknownOrdinal_(u64),
}

impl ::fidl_next::Encodable for MainProtocolOnAnonRequest {
    type Encoded = WireMainProtocolOnAnonRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolOnAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolOnAnonRequest { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(ordinal as usize))
            }
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for MainProtocolOnAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolOnAnonRequest { raw, _phantom: _ } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, &bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for MainProtocolOnAnonRequest {
    type EncodedOption = WireOptionalMainProtocolOnAnonRequest;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for MainProtocolOnAnonRequest
where
    ___E: ?Sized,
    MainProtocolOnAnonRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolOnAnonRequest { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for MainProtocolOnAnonRequest
where
    ___E: ?Sized,
    MainProtocolOnAnonRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolOnAnonRequest { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::EncodeRef::encode_ref(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireMainProtocolOnAnonRequest> for MainProtocolOnAnonRequest {
    #[inline]
    fn from_wire(wire: WireMainProtocolOnAnonRequest) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireRef<WireMainProtocolOnAnonRequest> for MainProtocolOnAnonRequest {
    #[inline]
    fn from_wire_ref(wire: &WireMainProtocolOnAnonRequest) -> Self {
        match wire.raw.ordinal() {
            1 => Self::B(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::FromWireOption<WireOptionalMainProtocolOnAnonRequest>
    for Box<MainProtocolOnAnonRequest>
{
    #[inline]
    fn from_wire_option(wire: WireOptionalMainProtocolOnAnonRequest) -> Option<Self> {
        if let Some(inner) = wire.into_option() {
            Some(Box::new(::fidl_next::FromWire::from_wire(inner)))
        } else {
            None
        }
    }
}

impl ::fidl_next::FromWireOptionRef<WireOptionalMainProtocolOnAnonRequest>
    for Box<MainProtocolOnAnonRequest>
{
    #[inline]
    fn from_wire_option_ref(wire: &WireOptionalMainProtocolOnAnonRequest) -> Option<Self> {
        if let Some(inner) = wire.as_ref() {
            Some(Box::new(::fidl_next::FromWireRef::from_wire_ref(inner)))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolOnAnonRequest`].
#[repr(transparent)]
pub struct WireMainProtocolOnAnonRequest {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl Drop for WireMainProtocolOnAnonRequest {
    fn drop(&mut self) {
        match self.raw.ordinal() {
            1 => {
                let _ = unsafe { self.raw.get().read_unchecked::<bool>() };
            }

            _ => (),
        }
    }
}

unsafe impl ::fidl_next::Wire for WireMainProtocolOnAnonRequest {
    type Decoded<'de> = WireMainProtocolOnAnonRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod main_protocol_on_anon_request {
    pub enum Ref<'de> {
        B(&'de bool),

        UnknownOrdinal_(u64),
    }
}

impl WireMainProtocolOnAnonRequest {
    pub fn as_ref(&self) -> crate::main_protocol_on_anon_request::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_on_anon_request::Ref::B(unsafe {
                self.raw.get().deref_unchecked::<bool>()
            }),

            unknown => crate::main_protocol_on_anon_request::Ref::UnknownOrdinal_(unknown),
        }
    }
}

impl Clone for WireMainProtocolOnAnonRequest {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolOnAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolOnAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolOnAnonRequest {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

unsafe impl ::fidl_next::Wire for WireOptionalMainProtocolOnAnonRequest {
    type Decoded<'de> = WireOptionalMainProtocolOnAnonRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalMainProtocolOnAnonRequest {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolOnAnonRequest> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn into_option(self) -> Option<WireMainProtocolOnAnonRequest> {
        if self.is_some() {
            Some(WireMainProtocolOnAnonRequest {
                raw: self.raw,
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalMainProtocolOnAnonRequest {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalMainProtocolOnAnonRequest {
                raw: ::fidl_next::RawWireUnion::absent(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_inline_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalMainProtocolOnAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolOnAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

/// The type corresponding to the MainProtocol protocol.
#[derive(Debug)]
pub struct MainProtocol;

pub mod main_protocol {
    pub mod prelude {
        pub use crate::{
            main_protocol, MainProtocol, MainProtocolClientHandler, MainProtocolServerHandler,
        };

        pub use crate::ComposedProtocolOnAnonComposedRequest;

        pub use crate::ComposedProtocolOneWayAnonComposedRequest;

        pub use crate::ComposedProtocolTwoWayAnonComposedRequest;

        pub use crate::ComposedProtocolTwoWayAnonComposedResponse;

        pub use crate::ComposedProtocolTwoWayAnonComposedWithErrorRequest;

        pub use crate::ComposedProtocolTwoWayAnonComposedWithErrorResponse;

        pub use crate::MainProtocolOnAnonRequest;

        pub use crate::MainProtocolOneWayAnonRequest;

        pub use crate::MainProtocolTwoWayAnonRequest;

        pub use crate::MainProtocolTwoWayAnonResponse;

        pub use crate::MainProtocolTwoWayAnonWithErrorRequest;

        pub use crate::MainProtocolTwoWayAnonWithErrorResponse;

        pub use crate::TablePayload;

        pub use crate::UnionPayload;
    }

    pub struct OneWayAnonComposed;

    impl ::fidl_next::Method for OneWayAnonComposed {
        const ORDINAL: u64 = 7960710870216447007;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireComposedProtocolOneWayAnonComposedRequest<'static>;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayAnonComposed;

    impl ::fidl_next::Method for TwoWayAnonComposed {
        const ORDINAL: u64 = 8107448265006659060;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireComposedProtocolTwoWayAnonComposedRequest;

        type Response = crate::WireComposedProtocolTwoWayAnonComposedResponse<'static>;
    }

    pub struct TwoWayAnonComposedWithError;

    impl ::fidl_next::Method for TwoWayAnonComposedWithError {
        const ORDINAL: u64 = 5751989932125743144;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'static>;

        type Response = ::fidl_next::WireResult<
            'static,
            crate::WireComposedProtocolTwoWayAnonComposedWithErrorResponse,
            ::fidl_next::WireU32,
        >;
    }

    pub struct OnAnonComposed;

    impl ::fidl_next::Method for OnAnonComposed {
        const ORDINAL: u64 = 5307191872315199016;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireComposedProtocolOnAnonComposedRequest;
    }

    pub struct OneWayNamedComposed;

    impl ::fidl_next::Method for OneWayNamedComposed {
        const ORDINAL: u64 = 1159174053475281336;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireTablePayload<'static>;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayNamedComposed;

    impl ::fidl_next::Method for TwoWayNamedComposed {
        const ORDINAL: u64 = 5022872388073111636;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireUnionPayload;

        type Response = crate::WireTablePayload<'static>;
    }

    pub struct TwoWayNamedComposedWithError;

    impl ::fidl_next::Method for TwoWayNamedComposedWithError {
        const ORDINAL: u64 = 4973436213756973807;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireTablePayload<'static>;

        type Response =
            ::fidl_next::WireResult<'static, crate::WireUnionPayload, ::fidl_next::WireU32>;
    }

    pub struct OnNamedComposed;

    impl ::fidl_next::Method for OnNamedComposed {
        const ORDINAL: u64 = 1712755118419701115;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireUnionPayload;
    }

    pub struct OneWayLocal;

    impl ::fidl_next::Method for OneWayLocal {
        const ORDINAL: u64 = 4131125523789731521;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireTablePayload<'static>;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayLocal;

    impl ::fidl_next::Method for TwoWayLocal {
        const ORDINAL: u64 = 2781407403924167255;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireUnionPayload;

        type Response = crate::WireTablePayload<'static>;
    }

    pub struct TwoWayLocalWithError;

    impl ::fidl_next::Method for TwoWayLocalWithError {
        const ORDINAL: u64 = 5367158046384127463;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireTablePayload<'static>;

        type Response =
            ::fidl_next::WireResult<'static, crate::WireUnionPayload, ::fidl_next::WireU32>;
    }

    pub struct OnLocal;

    impl ::fidl_next::Method for OnLocal {
        const ORDINAL: u64 = 8208103053879750285;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireUnionPayload;
    }

    pub struct OneWayAnon;

    impl ::fidl_next::Method for OneWayAnon {
        const ORDINAL: u64 = 8596232895075765804;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireMainProtocolOneWayAnonRequest<'static>;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayAnon;

    impl ::fidl_next::Method for TwoWayAnon {
        const ORDINAL: u64 = 4600336371166510638;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireMainProtocolTwoWayAnonRequest;

        type Response = crate::WireMainProtocolTwoWayAnonResponse<'static>;
    }

    pub struct TwoWayAnonWithError;

    impl ::fidl_next::Method for TwoWayAnonWithError {
        const ORDINAL: u64 = 2104032160763523653;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireMainProtocolTwoWayAnonWithErrorRequest<'static>;

        type Response = ::fidl_next::WireResult<
            'static,
            crate::WireMainProtocolTwoWayAnonWithErrorResponse,
            ::fidl_next::WireU32,
        >;
    }

    pub struct OnAnon;

    impl ::fidl_next::Method for OnAnon {
        const ORDINAL: u64 = 977183060572945300;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireMainProtocolOnAnonRequest;
    }

    mod ___detail {

        unsafe impl<___T> ::fidl_next::Protocol<___T> for crate::MainProtocol
        where
            ___T: ::fidl_next::Transport,
        {
            type ClientSender = MainProtocolClientSender<___T>;
            type ServerSender = MainProtocolServerSender<___T>;
        }

        /// The client sender for the `MainProtocol` protocol.
        pub struct MainProtocolClientSender<___T: ::fidl_next::Transport> {
            #[allow(dead_code)]
            sender: ::fidl_next::protocol::ClientSender<___T>,
        }

        impl<___T> MainProtocolClientSender<___T>
        where
            ___T: ::fidl_next::Transport,
        {
            pub fn one_way_anon_composed_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireComposedProtocolOneWayAnonComposedRequest<'static>,
                >,
            {
                self.sender.send_one_way(7960710870216447007, request)
            }

            pub fn two_way_anon_composed_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::TwoWayAnonComposed, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireComposedProtocolTwoWayAnonComposedRequest,
                >,
            {
                self.sender
                    .send_two_way(8107448265006659060, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }

            pub fn two_way_anon_composed_with_error_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::TwoWayAnonComposedWithError, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest<
                        'static,
                    >,
                >,
            {
                self.sender
                    .send_two_way(5751989932125743144, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }

            pub fn one_way_named_composed_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireTablePayload<'static>,
                >,
            {
                self.sender.send_one_way(1159174053475281336, request)
            }

            pub fn two_way_named_composed_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::TwoWayNamedComposed, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireUnionPayload,
                >,
            {
                self.sender
                    .send_two_way(5022872388073111636, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }

            pub fn two_way_named_composed_with_error_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::TwoWayNamedComposedWithError, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireTablePayload<'static>,
                >,
            {
                self.sender
                    .send_two_way(4973436213756973807, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }

            pub fn one_way_local_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireTablePayload<'static>,
                >,
            {
                self.sender.send_one_way(4131125523789731521, request)
            }

            pub fn two_way_local_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::TwoWayLocal, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireUnionPayload,
                >,
            {
                self.sender
                    .send_two_way(2781407403924167255, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }

            pub fn two_way_local_with_error_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::TwoWayLocalWithError, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireTablePayload<'static>,
                >,
            {
                self.sender
                    .send_two_way(5367158046384127463, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }

            pub fn one_way_anon_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireMainProtocolOneWayAnonRequest<'static>,
                >,
            {
                self.sender.send_one_way(8596232895075765804, request)
            }

            pub fn two_way_anon_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::TwoWayAnon, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireMainProtocolTwoWayAnonRequest,
                >,
            {
                self.sender
                    .send_two_way(4600336371166510638, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }

            pub fn two_way_anon_with_error_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::TwoWayAnonWithError, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireMainProtocolTwoWayAnonWithErrorRequest<'static>,
                >,
            {
                self.sender
                    .send_two_way(2104032160763523653, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }
        }

        /// The server sender for the `MainProtocol` protocol.
        #[repr(transparent)]
        pub struct MainProtocolServerSender<___T: ::fidl_next::Transport> {
            sender: ::fidl_next::protocol::ServerSender<___T>,
        }

        impl<___T> MainProtocolServerSender<___T>
        where
            ___T: ::fidl_next::Transport,
        {
            pub fn on_anon_composed_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = <super::OnAnonComposed as ::fidl_next::Method>::Response,
                >,
            {
                self.sender.send_event(5307191872315199016, request)
            }

            pub fn on_named_composed_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = <super::OnNamedComposed as ::fidl_next::Method>::Response,
                >,
            {
                self.sender.send_event(1712755118419701115, request)
            }

            pub fn on_local_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = <super::OnLocal as ::fidl_next::Method>::Response,
                >,
            {
                self.sender.send_event(8208103053879750285, request)
            }

            pub fn on_anon_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = <super::OnAnon as ::fidl_next::Method>::Response,
                >,
            {
                self.sender.send_event(977183060572945300, request)
            }
        }
    }
}

/// A client handler for the MainProtocol protocol.
///
/// See [`MainProtocol`] for more details.
pub trait MainProtocolClientHandler<___T: ::fidl_next::Transport> {
    fn on_anon_composed(
        &mut self,
        sender: &::fidl_next::ClientSender<MainProtocol, ___T>,

        event: ::fidl_next::Response<main_protocol::OnAnonComposed, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn on_named_composed(
        &mut self,
        sender: &::fidl_next::ClientSender<MainProtocol, ___T>,

        event: ::fidl_next::Response<main_protocol::OnNamedComposed, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn on_local(
        &mut self,
        sender: &::fidl_next::ClientSender<MainProtocol, ___T>,

        event: ::fidl_next::Response<main_protocol::OnLocal, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn on_anon(
        &mut self,
        sender: &::fidl_next::ClientSender<MainProtocol, ___T>,

        event: ::fidl_next::Response<main_protocol::OnAnon, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;
}

impl<___H, ___T> ::fidl_next::ClientProtocol<___H, ___T> for MainProtocol
where
    ___H: MainProtocolClientHandler<___T> + Send,
    ___T: ::fidl_next::Transport,

    <main_protocol::TwoWayAnonComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnonComposedWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OnAnonComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayNamedComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayNamedComposedWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OnNamedComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayLocal as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayLocalWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OnLocal as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnon as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnonWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OnAnon as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    async fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            5307191872315199016 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.on_anon_composed(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            1712755118419701115 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.on_named_composed(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            8208103053879750285 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.on_local(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            977183060572945300 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.on_anon(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }
}

/// A server handler for the MainProtocol protocol.
///
/// See [`MainProtocol`] for more details.
pub trait MainProtocolServerHandler<___T: ::fidl_next::Transport> {
    fn one_way_anon_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<MainProtocol, ___T>,

        request: ::fidl_next::Request<main_protocol::OneWayAnonComposed, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn two_way_anon_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<MainProtocol, ___T>,

        request: ::fidl_next::Request<main_protocol::TwoWayAnonComposed, ___T>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnonComposed>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn two_way_anon_composed_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<MainProtocol, ___T>,

        request: ::fidl_next::Request<main_protocol::TwoWayAnonComposedWithError, ___T>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnonComposedWithError>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn one_way_named_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<MainProtocol, ___T>,

        request: ::fidl_next::Request<main_protocol::OneWayNamedComposed, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn two_way_named_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<MainProtocol, ___T>,

        request: ::fidl_next::Request<main_protocol::TwoWayNamedComposed, ___T>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayNamedComposed>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn two_way_named_composed_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<MainProtocol, ___T>,

        request: ::fidl_next::Request<main_protocol::TwoWayNamedComposedWithError, ___T>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayNamedComposedWithError>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn one_way_local(
        &mut self,
        sender: &::fidl_next::ServerSender<MainProtocol, ___T>,

        request: ::fidl_next::Request<main_protocol::OneWayLocal, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn two_way_local(
        &mut self,
        sender: &::fidl_next::ServerSender<MainProtocol, ___T>,

        request: ::fidl_next::Request<main_protocol::TwoWayLocal, ___T>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayLocal>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn two_way_local_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<MainProtocol, ___T>,

        request: ::fidl_next::Request<main_protocol::TwoWayLocalWithError, ___T>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayLocalWithError>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn one_way_anon(
        &mut self,
        sender: &::fidl_next::ServerSender<MainProtocol, ___T>,

        request: ::fidl_next::Request<main_protocol::OneWayAnon, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn two_way_anon(
        &mut self,
        sender: &::fidl_next::ServerSender<MainProtocol, ___T>,

        request: ::fidl_next::Request<main_protocol::TwoWayAnon, ___T>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnon>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn two_way_anon_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<MainProtocol, ___T>,

        request: ::fidl_next::Request<main_protocol::TwoWayAnonWithError, ___T>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnonWithError>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;
}

impl<___H, ___T> ::fidl_next::ServerProtocol<___H, ___T> for MainProtocol
where
    ___H: MainProtocolServerHandler<___T> + Send,
    ___T: ::fidl_next::Transport,

    <main_protocol::OneWayAnonComposed as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnonComposed as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnonComposedWithError as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OneWayNamedComposed as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayNamedComposed as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayNamedComposedWithError as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OneWayLocal as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayLocal as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayLocalWithError as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OneWayAnon as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnon as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnonWithError as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    async fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            7960710870216447007 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.one_way_anon_composed(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            1159174053475281336 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.one_way_named_composed(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            4131125523789731521 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.one_way_local(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            8596232895075765804 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.one_way_anon(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }

    async fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            8107448265006659060 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_anon_composed(sender, decoded, responder).await,
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            5751989932125743144 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => {
                        handler.two_way_anon_composed_with_error(sender, decoded, responder).await
                    }
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            5022872388073111636 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_named_composed(sender, decoded, responder).await,
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            4973436213756973807 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => {
                        handler.two_way_named_composed_with_error(sender, decoded, responder).await
                    }
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            2781407403924167255 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_local(sender, decoded, responder).await,
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            5367158046384127463 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => {
                        handler.two_way_local_with_error(sender, decoded, responder).await
                    }
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            4600336371166510638 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_anon(sender, decoded, responder).await,
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            2104032160763523653 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => {
                        handler.two_way_anon_with_error(sender, decoded, responder).await
                    }
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    impl ::fidl_next::CompatFrom<crate::ComposedProtocolOneWayAnonComposedRequest>
        for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolOneWayAnonComposedRequest
    {
        fn compat_from(value: crate::ComposedProtocolOneWayAnonComposedRequest) -> Self {
            Self {
                a: ::fidl_next::CompatFrom::compat_from(value.a),

                __source_breaking: ::fidl::marker::SourceBreaking,
            }
        }
    }

    impl
        ::fidl_next::CompatFrom<
            ::fidl_test_protocollayoutssamelibrary::ComposedProtocolOneWayAnonComposedRequest,
        > for crate::ComposedProtocolOneWayAnonComposedRequest
    {
        fn compat_from(
            value: ::fidl_test_protocollayoutssamelibrary::ComposedProtocolOneWayAnonComposedRequest,
        ) -> Self {
            Self { a: ::fidl_next::CompatFrom::compat_from(value.a) }
        }
    }

    impl ::fidl_next::CompatFrom<crate::ComposedProtocolTwoWayAnonComposedRequest>
        for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedRequest
    {
        fn compat_from(value: crate::ComposedProtocolTwoWayAnonComposedRequest) -> Self {
            match value {
                crate::ComposedProtocolTwoWayAnonComposedRequest::B(value) => {
                    Self::B(::fidl_next::CompatFrom::compat_from(value))
                }
            }
        }
    }

    impl
        ::fidl_next::CompatFrom<
            ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedRequest,
        > for crate::ComposedProtocolTwoWayAnonComposedRequest
    {
        fn compat_from(
            value: ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedRequest,
        ) -> Self {
            match value {

                ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedRequest::B(value) =>
                    Self::B(::fidl_next::CompatFrom::compat_from(value)),


        }
        }
    }

    impl ::fidl_next::CompatFrom<crate::ComposedProtocolTwoWayAnonComposedResponse>
        for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedResponse
    {
        fn compat_from(value: crate::ComposedProtocolTwoWayAnonComposedResponse) -> Self {
            Self {
                a: ::fidl_next::CompatFrom::compat_from(value.a),

                __source_breaking: ::fidl::marker::SourceBreaking,
            }
        }
    }

    impl
        ::fidl_next::CompatFrom<
            ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedResponse,
        > for crate::ComposedProtocolTwoWayAnonComposedResponse
    {
        fn compat_from(
            value: ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedResponse,
        ) -> Self {
            Self { a: ::fidl_next::CompatFrom::compat_from(value.a) }
        }
    }

    impl ::fidl_next::CompatFrom<crate::ComposedProtocolTwoWayAnonComposedWithErrorRequest> for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorRequest {
    fn compat_from(value: crate::ComposedProtocolTwoWayAnonComposedWithErrorRequest) -> Self {
        Self {

                a: ::fidl_next::CompatFrom::compat_from(value.a),

            __source_breaking: ::fidl::marker::SourceBreaking,
        }
    }
}

    impl ::fidl_next::CompatFrom<::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorRequest> for crate::ComposedProtocolTwoWayAnonComposedWithErrorRequest {
    fn compat_from(value: ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorRequest) -> Self {
        Self {

                a: ::fidl_next::CompatFrom::compat_from(value.a),

        }
    }
}

    impl ::fidl_next::CompatFrom<crate::ComposedProtocolTwoWayAnonComposedWithErrorResponse> for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorResponse {
    fn compat_from(value: crate::ComposedProtocolTwoWayAnonComposedWithErrorResponse) -> Self {
        match value {

                crate::ComposedProtocolTwoWayAnonComposedWithErrorResponse::B(value) =>
                    Self::B(::fidl_next::CompatFrom::compat_from(value)),


        }
    }
}

    impl ::fidl_next::CompatFrom<::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorResponse> for crate::ComposedProtocolTwoWayAnonComposedWithErrorResponse {
    fn compat_from(value: ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorResponse) -> Self {
        match value {

                ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorResponse::B(value) =>
                    Self::B(::fidl_next::CompatFrom::compat_from(value)),


        }
    }
}

    impl ::fidl_next::CompatFrom<crate::ComposedProtocolOnAnonComposedRequest>
        for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest
    {
        fn compat_from(value: crate::ComposedProtocolOnAnonComposedRequest) -> Self {
            match value {
                crate::ComposedProtocolOnAnonComposedRequest::B(value) => {
                    Self::B(::fidl_next::CompatFrom::compat_from(value))
                }
            }
        }
    }

    impl
        ::fidl_next::CompatFrom<
            ::fidl_test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest,
        > for crate::ComposedProtocolOnAnonComposedRequest
    {
        fn compat_from(
            value: ::fidl_test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest,
        ) -> Self {
            match value {

                ::fidl_test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest::B(value) =>
                    Self::B(::fidl_next::CompatFrom::compat_from(value)),


        }
        }
    }

    impl ::fidl_next::CompatFrom<crate::TablePayload>
        for ::fidl_test_protocollayoutssamelibrary::TablePayload
    {
        fn compat_from(value: crate::TablePayload) -> Self {
            Self {
                a: ::fidl_next::CompatFrom::compat_from(value.a),

                __source_breaking: ::fidl::marker::SourceBreaking,
            }
        }
    }

    impl ::fidl_next::CompatFrom<::fidl_test_protocollayoutssamelibrary::TablePayload>
        for crate::TablePayload
    {
        fn compat_from(value: ::fidl_test_protocollayoutssamelibrary::TablePayload) -> Self {
            Self { a: ::fidl_next::CompatFrom::compat_from(value.a) }
        }
    }

    impl ::fidl_next::CompatFrom<crate::UnionPayload>
        for ::fidl_test_protocollayoutssamelibrary::UnionPayload
    {
        fn compat_from(value: crate::UnionPayload) -> Self {
            match value {
                crate::UnionPayload::B(value) => {
                    Self::B(::fidl_next::CompatFrom::compat_from(value))
                }
            }
        }
    }

    impl ::fidl_next::CompatFrom<::fidl_test_protocollayoutssamelibrary::UnionPayload>
        for crate::UnionPayload
    {
        fn compat_from(value: ::fidl_test_protocollayoutssamelibrary::UnionPayload) -> Self {
            match value {
                ::fidl_test_protocollayoutssamelibrary::UnionPayload::B(value) => {
                    Self::B(::fidl_next::CompatFrom::compat_from(value))
                }
            }
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `ComposedProtocol`
    /// protocol.
    pub type ComposedProtocolProxy = ::fidl_next::ClientSender<crate::ComposedProtocol>;

    impl ::fidl_next::CompatFrom<crate::ComposedProtocol>
        for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolMarker
    {
        fn compat_from(_: crate::ComposedProtocol) -> Self {
            Self
        }
    }

    impl ::fidl_next::CompatFrom<::fidl_test_protocollayoutssamelibrary::ComposedProtocolMarker>
        for crate::ComposedProtocol
    {
        fn compat_from(_: ::fidl_test_protocollayoutssamelibrary::ComposedProtocolMarker) -> Self {
            Self
        }
    }

    #[cfg(target_os = "fuchsia")]

    impl
        ::fidl_next::ClientCompatFrom<::fidl_test_protocollayoutssamelibrary::ComposedProtocolProxy>
        for crate::ComposedProtocol
    {
        fn client_compat_from(
            proxy: ::fidl_test_protocollayoutssamelibrary::ComposedProtocolProxy,
        ) -> ::fidl_next::Client<Self, ::fidl_next::fuchsia::zx::Channel> {
            let channel = ::fidl::endpoints::Proxy::into_channel(proxy).unwrap().into_zx_channel();
            let client_end = ::fidl_next::ClientEnd::from_untyped(channel);
            ::fidl_next::Client::new(client_end)
        }
    }

    impl ::fidl_next::CompatFrom<crate::MainProtocolOneWayAnonRequest>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolOneWayAnonRequest
    {
        fn compat_from(value: crate::MainProtocolOneWayAnonRequest) -> Self {
            Self {
                a: ::fidl_next::CompatFrom::compat_from(value.a),

                __source_breaking: ::fidl::marker::SourceBreaking,
            }
        }
    }

    impl
        ::fidl_next::CompatFrom<
            ::fidl_test_protocollayoutssamelibrary::MainProtocolOneWayAnonRequest,
        > for crate::MainProtocolOneWayAnonRequest
    {
        fn compat_from(
            value: ::fidl_test_protocollayoutssamelibrary::MainProtocolOneWayAnonRequest,
        ) -> Self {
            Self { a: ::fidl_next::CompatFrom::compat_from(value.a) }
        }
    }

    impl ::fidl_next::CompatFrom<crate::MainProtocolTwoWayAnonRequest>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonRequest
    {
        fn compat_from(value: crate::MainProtocolTwoWayAnonRequest) -> Self {
            match value {
                crate::MainProtocolTwoWayAnonRequest::B(value) => {
                    Self::B(::fidl_next::CompatFrom::compat_from(value))
                }

                crate::MainProtocolTwoWayAnonRequest::UnknownOrdinal_(unknown_ordinal) => {
                    Self::__SourceBreaking { unknown_ordinal }
                }
            }
        }
    }

    impl
        ::fidl_next::CompatFrom<
            ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonRequest,
        > for crate::MainProtocolTwoWayAnonRequest
    {
        fn compat_from(
            value: ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonRequest,
        ) -> Self {
            match value {

                ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonRequest::B(value) =>
                    Self::B(::fidl_next::CompatFrom::compat_from(value)),


                ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonRequest::__SourceBreaking { unknown_ordinal } =>
                    Self::UnknownOrdinal_(unknown_ordinal),

        }
        }
    }

    impl ::fidl_next::CompatFrom<crate::MainProtocolTwoWayAnonResponse>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonResponse
    {
        fn compat_from(value: crate::MainProtocolTwoWayAnonResponse) -> Self {
            Self {
                a: ::fidl_next::CompatFrom::compat_from(value.a),

                __source_breaking: ::fidl::marker::SourceBreaking,
            }
        }
    }

    impl
        ::fidl_next::CompatFrom<
            ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonResponse,
        > for crate::MainProtocolTwoWayAnonResponse
    {
        fn compat_from(
            value: ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonResponse,
        ) -> Self {
            Self { a: ::fidl_next::CompatFrom::compat_from(value.a) }
        }
    }

    impl ::fidl_next::CompatFrom<crate::MainProtocolTwoWayAnonWithErrorRequest>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorRequest
    {
        fn compat_from(value: crate::MainProtocolTwoWayAnonWithErrorRequest) -> Self {
            Self {
                a: ::fidl_next::CompatFrom::compat_from(value.a),

                __source_breaking: ::fidl::marker::SourceBreaking,
            }
        }
    }

    impl
        ::fidl_next::CompatFrom<
            ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorRequest,
        > for crate::MainProtocolTwoWayAnonWithErrorRequest
    {
        fn compat_from(
            value: ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorRequest,
        ) -> Self {
            Self { a: ::fidl_next::CompatFrom::compat_from(value.a) }
        }
    }

    impl ::fidl_next::CompatFrom<crate::MainProtocolTwoWayAnonWithErrorResponse>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorResponse
    {
        fn compat_from(value: crate::MainProtocolTwoWayAnonWithErrorResponse) -> Self {
            match value {
                crate::MainProtocolTwoWayAnonWithErrorResponse::B(value) => {
                    Self::B(::fidl_next::CompatFrom::compat_from(value))
                }

                crate::MainProtocolTwoWayAnonWithErrorResponse::UnknownOrdinal_(
                    unknown_ordinal,
                ) => Self::__SourceBreaking { unknown_ordinal },
            }
        }
    }

    impl
        ::fidl_next::CompatFrom<
            ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorResponse,
        > for crate::MainProtocolTwoWayAnonWithErrorResponse
    {
        fn compat_from(
            value: ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorResponse,
        ) -> Self {
            match value {

                ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorResponse::B(value) =>
                    Self::B(::fidl_next::CompatFrom::compat_from(value)),


                ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorResponse::__SourceBreaking { unknown_ordinal } =>
                    Self::UnknownOrdinal_(unknown_ordinal),

        }
        }
    }

    impl ::fidl_next::CompatFrom<crate::MainProtocolOnAnonRequest>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolOnAnonRequest
    {
        fn compat_from(value: crate::MainProtocolOnAnonRequest) -> Self {
            match value {
                crate::MainProtocolOnAnonRequest::B(value) => {
                    Self::B(::fidl_next::CompatFrom::compat_from(value))
                }

                crate::MainProtocolOnAnonRequest::UnknownOrdinal_(unknown_ordinal) => {
                    Self::__SourceBreaking { unknown_ordinal }
                }
            }
        }
    }

    impl ::fidl_next::CompatFrom<::fidl_test_protocollayoutssamelibrary::MainProtocolOnAnonRequest>
        for crate::MainProtocolOnAnonRequest
    {
        fn compat_from(
            value: ::fidl_test_protocollayoutssamelibrary::MainProtocolOnAnonRequest,
        ) -> Self {
            match value {

                ::fidl_test_protocollayoutssamelibrary::MainProtocolOnAnonRequest::B(value) =>
                    Self::B(::fidl_next::CompatFrom::compat_from(value)),


                ::fidl_test_protocollayoutssamelibrary::MainProtocolOnAnonRequest::__SourceBreaking { unknown_ordinal } =>
                    Self::UnknownOrdinal_(unknown_ordinal),

        }
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `MainProtocol`
    /// protocol.
    pub type MainProtocolProxy = ::fidl_next::ClientSender<crate::MainProtocol>;

    impl ::fidl_next::CompatFrom<crate::MainProtocol>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolMarker
    {
        fn compat_from(_: crate::MainProtocol) -> Self {
            Self
        }
    }

    impl ::fidl_next::CompatFrom<::fidl_test_protocollayoutssamelibrary::MainProtocolMarker>
        for crate::MainProtocol
    {
        fn compat_from(_: ::fidl_test_protocollayoutssamelibrary::MainProtocolMarker) -> Self {
            Self
        }
    }

    #[cfg(target_os = "fuchsia")]

    impl ::fidl_next::ClientCompatFrom<::fidl_test_protocollayoutssamelibrary::MainProtocolProxy>
        for crate::MainProtocol
    {
        fn client_compat_from(
            proxy: ::fidl_test_protocollayoutssamelibrary::MainProtocolProxy,
        ) -> ::fidl_next::Client<Self, ::fidl_next::fuchsia::zx::Channel> {
            let channel = ::fidl::endpoints::Proxy::into_channel(proxy).unwrap().into_zx_channel();
            let client_end = ::fidl_next::ClientEnd::from_untyped(channel);
            ::fidl_next::Client::new(client_end)
        }
    }
}
