// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct ComposedProtocolOneWayAnonComposedRequest {
    pub a: Option<u16>,
}

impl ComposedProtocolOneWayAnonComposedRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for ComposedProtocolOneWayAnonComposedRequest {
    type Encoded = WireComposedProtocolOneWayAnonComposedRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolOneWayAnonComposedRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolOneWayAnonComposedRequest { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::ZeroPadding::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireComposedProtocolOneWayAnonComposedRequest>
    for ComposedProtocolOneWayAnonComposedRequest
{
    #[inline]
    fn take_from(from: &WireComposedProtocolOneWayAnonComposedRequest) -> Self {
        Self { a: from.a().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`ComposedProtocolOneWayAnonComposedRequest`].
#[repr(C)]
pub struct WireComposedProtocolOneWayAnonComposedRequest {
    table: ::fidl_next::WireTable,
}

unsafe impl ::fidl_next::ZeroPadding for WireComposedProtocolOneWayAnonComposedRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireComposedProtocolOneWayAnonComposedRequest
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl WireComposedProtocolOneWayAnonComposedRequest {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireComposedProtocolOneWayAnonComposedRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("ComposedProtocolOneWayAnonComposedRequest").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum ComposedProtocolTwoWayAnonComposedRequest {
    B(bool),
}

impl ::fidl_next::Encodable for ComposedProtocolTwoWayAnonComposedRequest {
    type Encoded = WireComposedProtocolTwoWayAnonComposedRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolTwoWayAnonComposedRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedRequest { raw } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ComposedProtocolTwoWayAnonComposedRequest> {
    type EncodedOption = WireOptionalComposedProtocolTwoWayAnonComposedRequest;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<ComposedProtocolTwoWayAnonComposedRequest>
where
    ___E: ?Sized,
    ComposedProtocolTwoWayAnonComposedRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocolTwoWayAnonComposedRequest { raw } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(&mut **inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireComposedProtocolTwoWayAnonComposedRequest>
    for ComposedProtocolTwoWayAnonComposedRequest
{
    #[inline]
    fn take_from(from: &WireComposedProtocolTwoWayAnonComposedRequest) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalComposedProtocolTwoWayAnonComposedRequest>
    for Option<Box<ComposedProtocolTwoWayAnonComposedRequest>>
{
    #[inline]
    fn take_from(from: &WireOptionalComposedProtocolTwoWayAnonComposedRequest) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`ComposedProtocolTwoWayAnonComposedRequest`].
#[repr(transparent)]
pub struct WireComposedProtocolTwoWayAnonComposedRequest {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireComposedProtocolTwoWayAnonComposedRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod composed_protocol_two_way_anon_composed_request {
    pub enum Ref<'union> {
        B(&'union bool),
    }
}

impl WireComposedProtocolTwoWayAnonComposedRequest {
    pub fn as_ref(&self) -> crate::composed_protocol_two_way_anon_composed_request::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::composed_protocol_two_way_anon_composed_request::Ref::B(unsafe {
                self.raw.get().deref_unchecked::<bool>()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireComposedProtocolTwoWayAnonComposedRequest {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireComposedProtocolTwoWayAnonComposedRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireComposedProtocolTwoWayAnonComposedRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalComposedProtocolTwoWayAnonComposedRequest {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireOptionalComposedProtocolTwoWayAnonComposedRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalComposedProtocolTwoWayAnonComposedRequest {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireComposedProtocolTwoWayAnonComposedRequest> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalComposedProtocolTwoWayAnonComposedRequest {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalComposedProtocolTwoWayAnonComposedRequest {
                raw: ::fidl_next::RawWireUnion::absent(),
            };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireOptionalComposedProtocolTwoWayAnonComposedRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalComposedProtocolTwoWayAnonComposedRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct ComposedProtocolTwoWayAnonComposedResponse {
    pub a: Option<u16>,
}

impl ComposedProtocolTwoWayAnonComposedResponse {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for ComposedProtocolTwoWayAnonComposedResponse {
    type Encoded = WireComposedProtocolTwoWayAnonComposedResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolTwoWayAnonComposedResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedResponse { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::ZeroPadding::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireComposedProtocolTwoWayAnonComposedResponse>
    for ComposedProtocolTwoWayAnonComposedResponse
{
    #[inline]
    fn take_from(from: &WireComposedProtocolTwoWayAnonComposedResponse) -> Self {
        Self { a: from.a().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`ComposedProtocolTwoWayAnonComposedResponse`].
#[repr(C)]
pub struct WireComposedProtocolTwoWayAnonComposedResponse {
    table: ::fidl_next::WireTable,
}

unsafe impl ::fidl_next::ZeroPadding for WireComposedProtocolTwoWayAnonComposedResponse {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireComposedProtocolTwoWayAnonComposedResponse
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl WireComposedProtocolTwoWayAnonComposedResponse {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireComposedProtocolTwoWayAnonComposedResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("ComposedProtocolTwoWayAnonComposedResponse").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub struct ComposedProtocolTwoWayAnonComposedWithErrorRequest {
    pub a: Option<u16>,
}

impl ComposedProtocolTwoWayAnonComposedWithErrorRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for ComposedProtocolTwoWayAnonComposedWithErrorRequest {
    type Encoded = WireComposedProtocolTwoWayAnonComposedWithErrorRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolTwoWayAnonComposedWithErrorRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedWithErrorRequest { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::ZeroPadding::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireComposedProtocolTwoWayAnonComposedWithErrorRequest>
    for ComposedProtocolTwoWayAnonComposedWithErrorRequest
{
    #[inline]
    fn take_from(from: &WireComposedProtocolTwoWayAnonComposedWithErrorRequest) -> Self {
        Self { a: from.a().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`ComposedProtocolTwoWayAnonComposedWithErrorRequest`].
#[repr(C)]
pub struct WireComposedProtocolTwoWayAnonComposedWithErrorRequest {
    table: ::fidl_next::WireTable,
}

unsafe impl ::fidl_next::ZeroPadding for WireComposedProtocolTwoWayAnonComposedWithErrorRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireComposedProtocolTwoWayAnonComposedWithErrorRequest
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl WireComposedProtocolTwoWayAnonComposedWithErrorRequest {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireComposedProtocolTwoWayAnonComposedWithErrorRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("ComposedProtocolTwoWayAnonComposedWithErrorRequest")
            .field("a", &self.a())
            .finish()
    }
}

#[derive(Clone, Debug)]
pub enum ComposedProtocolTwoWayAnonComposedWithErrorResponse {
    B(bool),
}

impl ::fidl_next::Encodable for ComposedProtocolTwoWayAnonComposedWithErrorResponse {
    type Encoded = WireComposedProtocolTwoWayAnonComposedWithErrorResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolTwoWayAnonComposedWithErrorResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedWithErrorResponse { raw } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ComposedProtocolTwoWayAnonComposedWithErrorResponse> {
    type EncodedOption = WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E>
    for Box<ComposedProtocolTwoWayAnonComposedWithErrorResponse>
where
    ___E: ?Sized,
    ComposedProtocolTwoWayAnonComposedWithErrorResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse { raw } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(&mut **inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireComposedProtocolTwoWayAnonComposedWithErrorResponse>
    for ComposedProtocolTwoWayAnonComposedWithErrorResponse
{
    #[inline]
    fn take_from(from: &WireComposedProtocolTwoWayAnonComposedWithErrorResponse) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse>
    for Option<Box<ComposedProtocolTwoWayAnonComposedWithErrorResponse>>
{
    #[inline]
    fn take_from(from: &WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`ComposedProtocolTwoWayAnonComposedWithErrorResponse`].
#[repr(transparent)]
pub struct WireComposedProtocolTwoWayAnonComposedWithErrorResponse {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireComposedProtocolTwoWayAnonComposedWithErrorResponse {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod composed_protocol_two_way_anon_composed_with_error_response {
    pub enum Ref<'union> {
        B(&'union bool),
    }
}

impl WireComposedProtocolTwoWayAnonComposedWithErrorResponse {
    pub fn as_ref(
        &self,
    ) -> crate::composed_protocol_two_way_anon_composed_with_error_response::Ref<'_> {
        match self.raw.ordinal() {
            1 => {
                crate::composed_protocol_two_way_anon_composed_with_error_response::Ref::B(unsafe {
                    self.raw.get().deref_unchecked::<bool>()
                })
            }

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireComposedProtocolTwoWayAnonComposedWithErrorResponse {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireComposedProtocolTwoWayAnonComposedWithErrorResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireComposedProtocolTwoWayAnonComposedWithErrorResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding
    for WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse
{
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireComposedProtocolTwoWayAnonComposedWithErrorResponse> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse {
                raw: ::fidl_next::RawWireUnion::absent(),
            };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum ComposedProtocolOnAnonComposedRequest {
    B(bool),
}

impl ::fidl_next::Encodable for ComposedProtocolOnAnonComposedRequest {
    type Encoded = WireComposedProtocolOnAnonComposedRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolOnAnonComposedRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolOnAnonComposedRequest { raw } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ComposedProtocolOnAnonComposedRequest> {
    type EncodedOption = WireOptionalComposedProtocolOnAnonComposedRequest;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<ComposedProtocolOnAnonComposedRequest>
where
    ___E: ?Sized,
    ComposedProtocolOnAnonComposedRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocolOnAnonComposedRequest { raw } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(&mut **inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireComposedProtocolOnAnonComposedRequest>
    for ComposedProtocolOnAnonComposedRequest
{
    #[inline]
    fn take_from(from: &WireComposedProtocolOnAnonComposedRequest) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalComposedProtocolOnAnonComposedRequest>
    for Option<Box<ComposedProtocolOnAnonComposedRequest>>
{
    #[inline]
    fn take_from(from: &WireOptionalComposedProtocolOnAnonComposedRequest) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`ComposedProtocolOnAnonComposedRequest`].
#[repr(transparent)]
pub struct WireComposedProtocolOnAnonComposedRequest {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireComposedProtocolOnAnonComposedRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod composed_protocol_on_anon_composed_request {
    pub enum Ref<'union> {
        B(&'union bool),
    }
}

impl WireComposedProtocolOnAnonComposedRequest {
    pub fn as_ref(&self) -> crate::composed_protocol_on_anon_composed_request::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::composed_protocol_on_anon_composed_request::Ref::B(unsafe {
                self.raw.get().deref_unchecked::<bool>()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireComposedProtocolOnAnonComposedRequest {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireComposedProtocolOnAnonComposedRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireComposedProtocolOnAnonComposedRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalComposedProtocolOnAnonComposedRequest {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireOptionalComposedProtocolOnAnonComposedRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalComposedProtocolOnAnonComposedRequest {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireComposedProtocolOnAnonComposedRequest> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalComposedProtocolOnAnonComposedRequest {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalComposedProtocolOnAnonComposedRequest {
                raw: ::fidl_next::RawWireUnion::absent(),
            };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalComposedProtocolOnAnonComposedRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalComposedProtocolOnAnonComposedRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct TablePayload {
    pub a: Option<u16>,
}

impl TablePayload {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for TablePayload {
    type Encoded = WireTablePayload;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for TablePayload
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireTablePayload { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::ZeroPadding::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireTablePayload> for TablePayload {
    #[inline]
    fn take_from(from: &WireTablePayload) -> Self {
        Self { a: from.a().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`TablePayload`].
#[repr(C)]
pub struct WireTablePayload {
    table: ::fidl_next::WireTable,
}

unsafe impl ::fidl_next::ZeroPadding for WireTablePayload {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireTablePayload
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl WireTablePayload {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireTablePayload {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("TablePayload").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum UnionPayload {
    B(bool),
}

impl ::fidl_next::Encodable for UnionPayload {
    type Encoded = WireUnionPayload;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for UnionPayload
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionPayload { raw } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<UnionPayload> {
    type EncodedOption = WireOptionalUnionPayload;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<UnionPayload>
where
    ___E: ?Sized,
    UnionPayload: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionPayload { raw } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(&mut **inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireUnionPayload> for UnionPayload {
    #[inline]
    fn take_from(from: &WireUnionPayload) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalUnionPayload> for Option<Box<UnionPayload>> {
    #[inline]
    fn take_from(from: &WireOptionalUnionPayload) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionPayload`].
#[repr(transparent)]
pub struct WireUnionPayload {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireUnionPayload {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod union_payload {
    pub enum Ref<'union> {
        B(&'union bool),
    }
}

impl WireUnionPayload {
    pub fn as_ref(&self) -> crate::union_payload::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_payload::Ref::B(unsafe { self.raw.get().deref_unchecked::<bool>() }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireUnionPayload {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireUnionPayload
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireUnionPayload {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionPayload {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireOptionalUnionPayload {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalUnionPayload {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionPayload> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalUnionPayload {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalUnionPayload { raw: ::fidl_next::RawWireUnion::absent() };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalUnionPayload
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalUnionPayload {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

/// The type corresponding to the ComposedProtocol protocol.
#[derive(Debug)]
pub struct ComposedProtocol;

pub mod composed_protocol {
    pub mod prelude {
        pub use crate::{
            composed_protocol, ComposedProtocol, ComposedProtocolClientHandler,
            ComposedProtocolClientSender, ComposedProtocolServerHandler,
            ComposedProtocolServerSender,
        };

        pub use crate::ComposedProtocolOnAnonComposedRequest;

        pub use crate::ComposedProtocolOneWayAnonComposedRequest;

        pub use crate::ComposedProtocolTwoWayAnonComposedRequest;

        pub use crate::ComposedProtocolTwoWayAnonComposedResponse;

        pub use crate::ComposedProtocolTwoWayAnonComposedWithErrorRequest;

        pub use crate::ComposedProtocolTwoWayAnonComposedWithErrorResponse;

        pub use crate::TablePayload;

        pub use crate::UnionPayload;
    }

    pub struct OneWayAnonComposed;

    impl ::fidl_next::Method for OneWayAnonComposed {
        const ORDINAL: u64 = 7960710870216447007;

        type Protocol = crate::ComposedProtocol;

        type Request = crate::WireComposedProtocolOneWayAnonComposedRequest;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayAnonComposed;

    impl ::fidl_next::Method for TwoWayAnonComposed {
        const ORDINAL: u64 = 8107448265006659060;

        type Protocol = crate::ComposedProtocol;

        type Request = crate::WireComposedProtocolTwoWayAnonComposedRequest;

        type Response = crate::WireComposedProtocolTwoWayAnonComposedResponse;
    }

    pub struct TwoWayAnonComposedWithError;

    impl ::fidl_next::Method for TwoWayAnonComposedWithError {
        const ORDINAL: u64 = 5751989932125743144;

        type Protocol = crate::ComposedProtocol;

        type Request = crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest;

        type Response = ::fidl_next::WireResult<
            crate::WireComposedProtocolTwoWayAnonComposedWithErrorResponse,
            ::fidl_next::WireU32,
        >;
    }

    pub struct OnAnonComposed;

    impl ::fidl_next::Method for OnAnonComposed {
        const ORDINAL: u64 = 5307191872315199016;

        type Protocol = crate::ComposedProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireComposedProtocolOnAnonComposedRequest;
    }

    pub struct OneWayNamedComposed;

    impl ::fidl_next::Method for OneWayNamedComposed {
        const ORDINAL: u64 = 1159174053475281336;

        type Protocol = crate::ComposedProtocol;

        type Request = crate::WireTablePayload;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayNamedComposed;

    impl ::fidl_next::Method for TwoWayNamedComposed {
        const ORDINAL: u64 = 5022872388073111636;

        type Protocol = crate::ComposedProtocol;

        type Request = crate::WireUnionPayload;

        type Response = crate::WireTablePayload;
    }

    pub struct TwoWayNamedComposedWithError;

    impl ::fidl_next::Method for TwoWayNamedComposedWithError {
        const ORDINAL: u64 = 4973436213756973807;

        type Protocol = crate::ComposedProtocol;

        type Request = crate::WireTablePayload;

        type Response = ::fidl_next::WireResult<crate::WireUnionPayload, ::fidl_next::WireU32>;
    }

    pub struct OnNamedComposed;

    impl ::fidl_next::Method for OnNamedComposed {
        const ORDINAL: u64 = 1712755118419701115;

        type Protocol = crate::ComposedProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireUnionPayload;
    }
}

/// A helper trait for the `ComposedProtocol` client sender.
pub trait ComposedProtocolClientSender {
    type Transport: ::fidl_next::Transport;

    fn one_way_anon_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireComposedProtocolOneWayAnonComposedRequest,
        >;

    fn two_way_anon_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, composed_protocol::TwoWayAnonComposed>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireComposedProtocolTwoWayAnonComposedRequest,
        >;

    fn two_way_anon_composed_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<
            '_,
            Self::Transport,
            composed_protocol::TwoWayAnonComposedWithError,
        >,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest,
        >;

    fn one_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTablePayload,
        >;

    fn two_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, composed_protocol::TwoWayNamedComposed>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireUnionPayload,
        >;

    fn two_way_named_composed_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<
            '_,
            Self::Transport,
            composed_protocol::TwoWayNamedComposedWithError,
        >,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTablePayload,
        >;
}

impl<___T> ComposedProtocolClientSender for ::fidl_next::ClientSender<___T, ComposedProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn one_way_anon_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireComposedProtocolOneWayAnonComposedRequest,
        >,
    {
        self.as_untyped().send_one_way(7960710870216447007, request)
    }

    fn two_way_anon_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, composed_protocol::TwoWayAnonComposed>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireComposedProtocolTwoWayAnonComposedRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(8107448265006659060, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_anon_composed_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<
            '_,
            Self::Transport,
            composed_protocol::TwoWayAnonComposedWithError,
        >,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(5751989932125743144, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn one_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTablePayload,
        >,
    {
        self.as_untyped().send_one_way(1159174053475281336, request)
    }

    fn two_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, composed_protocol::TwoWayNamedComposed>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireUnionPayload,
        >,
    {
        self.as_untyped()
            .send_two_way(5022872388073111636, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_named_composed_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<
            '_,
            Self::Transport,
            composed_protocol::TwoWayNamedComposedWithError,
        >,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTablePayload,
        >,
    {
        self.as_untyped()
            .send_two_way(4973436213756973807, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the ComposedProtocol protocol.
///
/// See [`ComposedProtocol`] for more details.
pub trait ComposedProtocolClientHandler<___T: ::fidl_next::Transport> {
    fn on_anon_composed(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, ComposedProtocol>,

        message: ::fidl_next::ResponseBuffer<___T, composed_protocol::OnAnonComposed>,
    );

    fn on_named_composed(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, ComposedProtocol>,

        message: ::fidl_next::ResponseBuffer<___T, composed_protocol::OnNamedComposed>,
    );
}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for ComposedProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: ComposedProtocolClientHandler<___T>,

    <composed_protocol::TwoWayAnonComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::TwoWayAnonComposedWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::OnAnonComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::TwoWayNamedComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::TwoWayNamedComposedWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <composed_protocol::OnNamedComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            5307191872315199016 => {
                let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                handler.on_anon_composed(sender, buffer);
            }

            1712755118419701115 => {
                let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                handler.on_named_composed(sender, buffer);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `ComposedProtocol` server sender.
pub trait ComposedProtocolServerSender {
    type Transport: ::fidl_next::Transport;

    fn on_anon_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <composed_protocol::OnAnonComposed as ::fidl_next::Method>::Response,
        >;

    fn on_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <composed_protocol::OnNamedComposed as ::fidl_next::Method>::Response,
        >;
}

impl<___T> ComposedProtocolServerSender for ::fidl_next::ServerSender<___T, ComposedProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn on_anon_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <composed_protocol::OnAnonComposed as ::fidl_next::Method>::Response,
        >,
    {
        self.as_untyped().send_event(5307191872315199016, request)
    }

    fn on_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <composed_protocol::OnNamedComposed as ::fidl_next::Method>::Response,
        >,
    {
        self.as_untyped().send_event(1712755118419701115, request)
    }
}

/// A server handler for the ComposedProtocol protocol.
///
/// See [`ComposedProtocol`] for more details.
pub trait ComposedProtocolServerHandler<___T: ::fidl_next::Transport> {
    fn one_way_anon_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, ComposedProtocol>,

        request: ::fidl_next::RequestBuffer<___T, composed_protocol::OneWayAnonComposed>,
    );

    fn two_way_anon_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, ComposedProtocol>,

        request: ::fidl_next::RequestBuffer<___T, composed_protocol::TwoWayAnonComposed>,

        responder: ::fidl_next::Responder<composed_protocol::TwoWayAnonComposed>,
    );

    fn two_way_anon_composed_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, ComposedProtocol>,

        request: ::fidl_next::RequestBuffer<___T, composed_protocol::TwoWayAnonComposedWithError>,

        responder: ::fidl_next::Responder<composed_protocol::TwoWayAnonComposedWithError>,
    );

    fn one_way_named_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, ComposedProtocol>,

        request: ::fidl_next::RequestBuffer<___T, composed_protocol::OneWayNamedComposed>,
    );

    fn two_way_named_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, ComposedProtocol>,

        request: ::fidl_next::RequestBuffer<___T, composed_protocol::TwoWayNamedComposed>,

        responder: ::fidl_next::Responder<composed_protocol::TwoWayNamedComposed>,
    );

    fn two_way_named_composed_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, ComposedProtocol>,

        request: ::fidl_next::RequestBuffer<___T, composed_protocol::TwoWayNamedComposedWithError>,

        responder: ::fidl_next::Responder<composed_protocol::TwoWayNamedComposedWithError>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for ComposedProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: ComposedProtocolServerHandler<___T>,

    crate::WireComposedProtocolOneWayAnonComposedRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireComposedProtocolTwoWayAnonComposedRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireTablePayload: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireUnionPayload: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireTablePayload: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            7960710870216447007 => {
                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.one_way_anon_composed(sender, buffer);
            }

            1159174053475281336 => {
                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.one_way_named_composed(sender, buffer);
            }

            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            8107448265006659060 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.two_way_anon_composed(sender, buffer, responder);
            }

            5751989932125743144 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.two_way_anon_composed_with_error(sender, buffer, responder);
            }

            5022872388073111636 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.two_way_named_composed(sender, buffer, responder);
            }

            4973436213756973807 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.two_way_named_composed_with_error(sender, buffer, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Clone, Debug)]
pub struct MainProtocolOneWayAnonRequest {
    pub a: Option<u16>,
}

impl MainProtocolOneWayAnonRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolOneWayAnonRequest {
    type Encoded = WireMainProtocolOneWayAnonRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolOneWayAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolOneWayAnonRequest { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::ZeroPadding::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolOneWayAnonRequest> for MainProtocolOneWayAnonRequest {
    #[inline]
    fn take_from(from: &WireMainProtocolOneWayAnonRequest) -> Self {
        Self { a: from.a().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`MainProtocolOneWayAnonRequest`].
#[repr(C)]
pub struct WireMainProtocolOneWayAnonRequest {
    table: ::fidl_next::WireTable,
}

unsafe impl ::fidl_next::ZeroPadding for WireMainProtocolOneWayAnonRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolOneWayAnonRequest
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl WireMainProtocolOneWayAnonRequest {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireMainProtocolOneWayAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolOneWayAnonRequest").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayAnonRequest {
    B(bool),

    UnknownOrdinal_(u64),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonRequest {
    type Encoded = WireMainProtocolTwoWayAnonRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonRequest { raw } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolTwoWayAnonRequest> {
    type EncodedOption = WireOptionalMainProtocolTwoWayAnonRequest;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolTwoWayAnonRequest>
where
    ___E: ?Sized,
    MainProtocolTwoWayAnonRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayAnonRequest { raw } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(&mut **inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonRequest> for MainProtocolTwoWayAnonRequest {
    #[inline]
    fn take_from(from: &WireMainProtocolTwoWayAnonRequest) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalMainProtocolTwoWayAnonRequest>
    for Option<Box<MainProtocolTwoWayAnonRequest>>
{
    #[inline]
    fn take_from(from: &WireOptionalMainProtocolTwoWayAnonRequest) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonRequest`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayAnonRequest {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireMainProtocolTwoWayAnonRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod main_protocol_two_way_anon_request {
    pub enum Ref<'union> {
        B(&'union bool),

        UnknownOrdinal_(u64),
    }
}

impl WireMainProtocolTwoWayAnonRequest {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_anon_request::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_anon_request::Ref::B(unsafe {
                self.raw.get().deref_unchecked::<bool>()
            }),

            unknown => crate::main_protocol_two_way_anon_request::Ref::UnknownOrdinal_(unknown),
        }
    }
}

impl Clone for WireMainProtocolTwoWayAnonRequest {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayAnonRequest {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireOptionalMainProtocolTwoWayAnonRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalMainProtocolTwoWayAnonRequest {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayAnonRequest> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalMainProtocolTwoWayAnonRequest {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalMainProtocolTwoWayAnonRequest {
                raw: ::fidl_next::RawWireUnion::absent(),
            };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalMainProtocolTwoWayAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolTwoWayAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct MainProtocolTwoWayAnonResponse {
    pub a: Option<u16>,
}

impl MainProtocolTwoWayAnonResponse {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonResponse {
    type Encoded = WireMainProtocolTwoWayAnonResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonResponse { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::ZeroPadding::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonResponse> for MainProtocolTwoWayAnonResponse {
    #[inline]
    fn take_from(from: &WireMainProtocolTwoWayAnonResponse) -> Self {
        Self { a: from.a().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonResponse`].
#[repr(C)]
pub struct WireMainProtocolTwoWayAnonResponse {
    table: ::fidl_next::WireTable,
}

unsafe impl ::fidl_next::ZeroPadding for WireMainProtocolTwoWayAnonResponse {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonResponse
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl WireMainProtocolTwoWayAnonResponse {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolTwoWayAnonResponse").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub struct MainProtocolTwoWayAnonWithErrorRequest {
    pub a: Option<u16>,
}

impl MainProtocolTwoWayAnonWithErrorRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonWithErrorRequest {
    type Encoded = WireMainProtocolTwoWayAnonWithErrorRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonWithErrorRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonWithErrorRequest { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::ZeroPadding::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(a, preallocated.encoder, &mut out)?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonWithErrorRequest>
    for MainProtocolTwoWayAnonWithErrorRequest
{
    #[inline]
    fn take_from(from: &WireMainProtocolTwoWayAnonWithErrorRequest) -> Self {
        Self { a: from.a().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonWithErrorRequest`].
#[repr(C)]
pub struct WireMainProtocolTwoWayAnonWithErrorRequest {
    table: ::fidl_next::WireTable,
}

unsafe impl ::fidl_next::ZeroPadding for WireMainProtocolTwoWayAnonWithErrorRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonWithErrorRequest
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl WireMainProtocolTwoWayAnonWithErrorRequest {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonWithErrorRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolTwoWayAnonWithErrorRequest").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayAnonWithErrorResponse {
    B(bool),

    UnknownOrdinal_(u64),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonWithErrorResponse {
    type Encoded = WireMainProtocolTwoWayAnonWithErrorResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonWithErrorResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonWithErrorResponse { raw } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolTwoWayAnonWithErrorResponse> {
    type EncodedOption = WireOptionalMainProtocolTwoWayAnonWithErrorResponse;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolTwoWayAnonWithErrorResponse>
where
    ___E: ?Sized,
    MainProtocolTwoWayAnonWithErrorResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayAnonWithErrorResponse { raw } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(&mut **inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonWithErrorResponse>
    for MainProtocolTwoWayAnonWithErrorResponse
{
    #[inline]
    fn take_from(from: &WireMainProtocolTwoWayAnonWithErrorResponse) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalMainProtocolTwoWayAnonWithErrorResponse>
    for Option<Box<MainProtocolTwoWayAnonWithErrorResponse>>
{
    #[inline]
    fn take_from(from: &WireOptionalMainProtocolTwoWayAnonWithErrorResponse) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonWithErrorResponse`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayAnonWithErrorResponse {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireMainProtocolTwoWayAnonWithErrorResponse {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod main_protocol_two_way_anon_with_error_response {
    pub enum Ref<'union> {
        B(&'union bool),

        UnknownOrdinal_(u64),
    }
}

impl WireMainProtocolTwoWayAnonWithErrorResponse {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_anon_with_error_response::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_anon_with_error_response::Ref::B(unsafe {
                self.raw.get().deref_unchecked::<bool>()
            }),

            unknown => {
                crate::main_protocol_two_way_anon_with_error_response::Ref::UnknownOrdinal_(unknown)
            }
        }
    }
}

impl Clone for WireMainProtocolTwoWayAnonWithErrorResponse {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonWithErrorResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonWithErrorResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayAnonWithErrorResponse> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
                raw: ::fidl_next::RawWireUnion::absent(),
            };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalMainProtocolTwoWayAnonWithErrorResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolOnAnonRequest {
    B(bool),

    UnknownOrdinal_(u64),
}

impl ::fidl_next::Encodable for MainProtocolOnAnonRequest {
    type Encoded = WireMainProtocolOnAnonRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolOnAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolOnAnonRequest { raw } = out);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolOnAnonRequest> {
    type EncodedOption = WireOptionalMainProtocolOnAnonRequest;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolOnAnonRequest>
where
    ___E: ?Sized,
    MainProtocolOnAnonRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolOnAnonRequest { raw } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(&mut **inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolOnAnonRequest> for MainProtocolOnAnonRequest {
    #[inline]
    fn take_from(from: &WireMainProtocolOnAnonRequest) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked::<bool>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalMainProtocolOnAnonRequest>
    for Option<Box<MainProtocolOnAnonRequest>>
{
    #[inline]
    fn take_from(from: &WireOptionalMainProtocolOnAnonRequest) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolOnAnonRequest`].
#[repr(transparent)]
pub struct WireMainProtocolOnAnonRequest {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireMainProtocolOnAnonRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod main_protocol_on_anon_request {
    pub enum Ref<'union> {
        B(&'union bool),

        UnknownOrdinal_(u64),
    }
}

impl WireMainProtocolOnAnonRequest {
    pub fn as_ref(&self) -> crate::main_protocol_on_anon_request::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_on_anon_request::Ref::B(unsafe {
                self.raw.get().deref_unchecked::<bool>()
            }),

            unknown => crate::main_protocol_on_anon_request::Ref::UnknownOrdinal_(unknown),
        }
    }
}

impl Clone for WireMainProtocolOnAnonRequest {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolOnAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolOnAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolOnAnonRequest {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireOptionalMainProtocolOnAnonRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalMainProtocolOnAnonRequest {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolOnAnonRequest> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalMainProtocolOnAnonRequest {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalMainProtocolOnAnonRequest {
                raw: ::fidl_next::RawWireUnion::absent(),
            };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalMainProtocolOnAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolOnAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

/// The type corresponding to the MainProtocol protocol.
#[derive(Debug)]
pub struct MainProtocol;

pub mod main_protocol {
    pub mod prelude {
        pub use crate::{
            main_protocol, MainProtocol, MainProtocolClientHandler, MainProtocolClientSender,
            MainProtocolServerHandler, MainProtocolServerSender,
        };

        pub use crate::ComposedProtocolOnAnonComposedRequest;

        pub use crate::ComposedProtocolOneWayAnonComposedRequest;

        pub use crate::ComposedProtocolTwoWayAnonComposedRequest;

        pub use crate::ComposedProtocolTwoWayAnonComposedResponse;

        pub use crate::ComposedProtocolTwoWayAnonComposedWithErrorRequest;

        pub use crate::ComposedProtocolTwoWayAnonComposedWithErrorResponse;

        pub use crate::MainProtocolOnAnonRequest;

        pub use crate::MainProtocolOneWayAnonRequest;

        pub use crate::MainProtocolTwoWayAnonRequest;

        pub use crate::MainProtocolTwoWayAnonResponse;

        pub use crate::MainProtocolTwoWayAnonWithErrorRequest;

        pub use crate::MainProtocolTwoWayAnonWithErrorResponse;

        pub use crate::TablePayload;

        pub use crate::UnionPayload;
    }

    pub struct OneWayAnonComposed;

    impl ::fidl_next::Method for OneWayAnonComposed {
        const ORDINAL: u64 = 7960710870216447007;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireComposedProtocolOneWayAnonComposedRequest;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayAnonComposed;

    impl ::fidl_next::Method for TwoWayAnonComposed {
        const ORDINAL: u64 = 8107448265006659060;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireComposedProtocolTwoWayAnonComposedRequest;

        type Response = crate::WireComposedProtocolTwoWayAnonComposedResponse;
    }

    pub struct TwoWayAnonComposedWithError;

    impl ::fidl_next::Method for TwoWayAnonComposedWithError {
        const ORDINAL: u64 = 5751989932125743144;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest;

        type Response = ::fidl_next::WireResult<
            crate::WireComposedProtocolTwoWayAnonComposedWithErrorResponse,
            ::fidl_next::WireU32,
        >;
    }

    pub struct OnAnonComposed;

    impl ::fidl_next::Method for OnAnonComposed {
        const ORDINAL: u64 = 5307191872315199016;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireComposedProtocolOnAnonComposedRequest;
    }

    pub struct OneWayNamedComposed;

    impl ::fidl_next::Method for OneWayNamedComposed {
        const ORDINAL: u64 = 1159174053475281336;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireTablePayload;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayNamedComposed;

    impl ::fidl_next::Method for TwoWayNamedComposed {
        const ORDINAL: u64 = 5022872388073111636;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireUnionPayload;

        type Response = crate::WireTablePayload;
    }

    pub struct TwoWayNamedComposedWithError;

    impl ::fidl_next::Method for TwoWayNamedComposedWithError {
        const ORDINAL: u64 = 4973436213756973807;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireTablePayload;

        type Response = ::fidl_next::WireResult<crate::WireUnionPayload, ::fidl_next::WireU32>;
    }

    pub struct OnNamedComposed;

    impl ::fidl_next::Method for OnNamedComposed {
        const ORDINAL: u64 = 1712755118419701115;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireUnionPayload;
    }

    pub struct OneWayLocal;

    impl ::fidl_next::Method for OneWayLocal {
        const ORDINAL: u64 = 4131125523789731521;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireTablePayload;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayLocal;

    impl ::fidl_next::Method for TwoWayLocal {
        const ORDINAL: u64 = 2781407403924167255;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireUnionPayload;

        type Response = crate::WireTablePayload;
    }

    pub struct TwoWayLocalWithError;

    impl ::fidl_next::Method for TwoWayLocalWithError {
        const ORDINAL: u64 = 5367158046384127463;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireTablePayload;

        type Response = ::fidl_next::WireResult<crate::WireUnionPayload, ::fidl_next::WireU32>;
    }

    pub struct OnLocal;

    impl ::fidl_next::Method for OnLocal {
        const ORDINAL: u64 = 8208103053879750285;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireUnionPayload;
    }

    pub struct OneWayAnon;

    impl ::fidl_next::Method for OneWayAnon {
        const ORDINAL: u64 = 8596232895075765804;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireMainProtocolOneWayAnonRequest;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayAnon;

    impl ::fidl_next::Method for TwoWayAnon {
        const ORDINAL: u64 = 4600336371166510638;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireMainProtocolTwoWayAnonRequest;

        type Response = crate::WireMainProtocolTwoWayAnonResponse;
    }

    pub struct TwoWayAnonWithError;

    impl ::fidl_next::Method for TwoWayAnonWithError {
        const ORDINAL: u64 = 2104032160763523653;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireMainProtocolTwoWayAnonWithErrorRequest;

        type Response = ::fidl_next::WireResult<
            crate::WireMainProtocolTwoWayAnonWithErrorResponse,
            ::fidl_next::WireU32,
        >;
    }

    pub struct OnAnon;

    impl ::fidl_next::Method for OnAnon {
        const ORDINAL: u64 = 977183060572945300;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireMainProtocolOnAnonRequest;
    }
}

/// A helper trait for the `MainProtocol` client sender.
pub trait MainProtocolClientSender {
    type Transport: ::fidl_next::Transport;

    fn one_way_anon_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireComposedProtocolOneWayAnonComposedRequest,
        >;

    fn two_way_anon_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnonComposed>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireComposedProtocolTwoWayAnonComposedRequest,
        >;

    fn two_way_anon_composed_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<
            '_,
            Self::Transport,
            main_protocol::TwoWayAnonComposedWithError,
        >,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest,
        >;

    fn one_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTablePayload,
        >;

    fn two_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayNamedComposed>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireUnionPayload,
        >;

    fn two_way_named_composed_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<
            '_,
            Self::Transport,
            main_protocol::TwoWayNamedComposedWithError,
        >,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTablePayload,
        >;

    fn one_way_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTablePayload,
        >;

    fn two_way_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayLocal>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireUnionPayload,
        >;

    fn two_way_local_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayLocalWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTablePayload,
        >;

    fn one_way_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolOneWayAnonRequest,
        >;

    fn two_way_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnon>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolTwoWayAnonRequest,
        >;

    fn two_way_anon_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnonWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolTwoWayAnonWithErrorRequest,
        >;
}

impl<___T> MainProtocolClientSender for ::fidl_next::ClientSender<___T, MainProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn one_way_anon_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireComposedProtocolOneWayAnonComposedRequest,
        >,
    {
        self.as_untyped().send_one_way(7960710870216447007, request)
    }

    fn two_way_anon_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnonComposed>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireComposedProtocolTwoWayAnonComposedRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(8107448265006659060, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_anon_composed_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<
            '_,
            Self::Transport,
            main_protocol::TwoWayAnonComposedWithError,
        >,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(5751989932125743144, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn one_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTablePayload,
        >,
    {
        self.as_untyped().send_one_way(1159174053475281336, request)
    }

    fn two_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayNamedComposed>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireUnionPayload,
        >,
    {
        self.as_untyped()
            .send_two_way(5022872388073111636, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_named_composed_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<
            '_,
            Self::Transport,
            main_protocol::TwoWayNamedComposedWithError,
        >,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTablePayload,
        >,
    {
        self.as_untyped()
            .send_two_way(4973436213756973807, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn one_way_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTablePayload,
        >,
    {
        self.as_untyped().send_one_way(4131125523789731521, request)
    }

    fn two_way_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayLocal>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireUnionPayload,
        >,
    {
        self.as_untyped()
            .send_two_way(2781407403924167255, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_local_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayLocalWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireTablePayload,
        >,
    {
        self.as_untyped()
            .send_two_way(5367158046384127463, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn one_way_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolOneWayAnonRequest,
        >,
    {
        self.as_untyped().send_one_way(8596232895075765804, request)
    }

    fn two_way_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnon>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolTwoWayAnonRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(4600336371166510638, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_anon_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnonWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolTwoWayAnonWithErrorRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(2104032160763523653, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the MainProtocol protocol.
///
/// See [`MainProtocol`] for more details.
pub trait MainProtocolClientHandler<___T: ::fidl_next::Transport> {
    fn on_anon_composed(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, MainProtocol>,

        message: ::fidl_next::ResponseBuffer<___T, main_protocol::OnAnonComposed>,
    );

    fn on_named_composed(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, MainProtocol>,

        message: ::fidl_next::ResponseBuffer<___T, main_protocol::OnNamedComposed>,
    );

    fn on_local(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, MainProtocol>,

        message: ::fidl_next::ResponseBuffer<___T, main_protocol::OnLocal>,
    );

    fn on_anon(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, MainProtocol>,

        message: ::fidl_next::ResponseBuffer<___T, main_protocol::OnAnon>,
    );
}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for MainProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: MainProtocolClientHandler<___T>,

    <main_protocol::TwoWayAnonComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnonComposedWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OnAnonComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayNamedComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayNamedComposedWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OnNamedComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayLocal as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayLocalWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OnLocal as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnon as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnonWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OnAnon as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            5307191872315199016 => {
                let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                handler.on_anon_composed(sender, buffer);
            }

            1712755118419701115 => {
                let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                handler.on_named_composed(sender, buffer);
            }

            8208103053879750285 => {
                let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                handler.on_local(sender, buffer);
            }

            977183060572945300 => {
                let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                handler.on_anon(sender, buffer);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `MainProtocol` server sender.
pub trait MainProtocolServerSender {
    type Transport: ::fidl_next::Transport;

    fn on_anon_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnAnonComposed as ::fidl_next::Method>::Response,
        >;

    fn on_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnNamedComposed as ::fidl_next::Method>::Response,
        >;

    fn on_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnLocal as ::fidl_next::Method>::Response,
        >;

    fn on_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnAnon as ::fidl_next::Method>::Response,
        >;
}

impl<___T> MainProtocolServerSender for ::fidl_next::ServerSender<___T, MainProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn on_anon_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnAnonComposed as ::fidl_next::Method>::Response,
        >,
    {
        self.as_untyped().send_event(5307191872315199016, request)
    }

    fn on_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnNamedComposed as ::fidl_next::Method>::Response,
        >,
    {
        self.as_untyped().send_event(1712755118419701115, request)
    }

    fn on_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnLocal as ::fidl_next::Method>::Response,
        >,
    {
        self.as_untyped().send_event(8208103053879750285, request)
    }

    fn on_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnAnon as ::fidl_next::Method>::Response,
        >,
    {
        self.as_untyped().send_event(977183060572945300, request)
    }
}

/// A server handler for the MainProtocol protocol.
///
/// See [`MainProtocol`] for more details.
pub trait MainProtocolServerHandler<___T: ::fidl_next::Transport> {
    fn one_way_anon_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::OneWayAnonComposed>,
    );

    fn two_way_anon_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayAnonComposed>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnonComposed>,
    );

    fn two_way_anon_composed_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayAnonComposedWithError>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnonComposedWithError>,
    );

    fn one_way_named_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::OneWayNamedComposed>,
    );

    fn two_way_named_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayNamedComposed>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayNamedComposed>,
    );

    fn two_way_named_composed_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayNamedComposedWithError>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayNamedComposedWithError>,
    );

    fn one_way_local(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::OneWayLocal>,
    );

    fn two_way_local(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayLocal>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayLocal>,
    );

    fn two_way_local_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayLocalWithError>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayLocalWithError>,
    );

    fn one_way_anon(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::OneWayAnon>,
    );

    fn two_way_anon(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayAnon>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnon>,
    );

    fn two_way_anon_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayAnonWithError>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnonWithError>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for MainProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: MainProtocolServerHandler<___T>,

    crate::WireComposedProtocolOneWayAnonComposedRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireComposedProtocolTwoWayAnonComposedRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireTablePayload: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireUnionPayload: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireTablePayload: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireTablePayload: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireUnionPayload: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireTablePayload: ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireMainProtocolOneWayAnonRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireMainProtocolTwoWayAnonRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireMainProtocolTwoWayAnonWithErrorRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            7960710870216447007 => {
                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.one_way_anon_composed(sender, buffer);
            }

            1159174053475281336 => {
                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.one_way_named_composed(sender, buffer);
            }

            4131125523789731521 => {
                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.one_way_local(sender, buffer);
            }

            8596232895075765804 => {
                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.one_way_anon(sender, buffer);
            }

            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            8107448265006659060 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.two_way_anon_composed(sender, buffer, responder);
            }

            5751989932125743144 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.two_way_anon_composed_with_error(sender, buffer, responder);
            }

            5022872388073111636 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.two_way_named_composed(sender, buffer, responder);
            }

            4973436213756973807 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.two_way_named_composed_with_error(sender, buffer, responder);
            }

            2781407403924167255 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.two_way_local(sender, buffer, responder);
            }

            5367158046384127463 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.two_way_local_with_error(sender, buffer, responder);
            }

            4600336371166510638 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.two_way_anon(sender, buffer, responder);
            }

            2104032160763523653 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.two_way_anon_with_error(sender, buffer, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    impl ::fidl_next::TakeFrom<crate::WireComposedProtocolOneWayAnonComposedRequest>
        for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolOneWayAnonComposedRequest
    {
        #[inline]
        fn take_from(from: &crate::WireComposedProtocolOneWayAnonComposedRequest) -> Self {
            Self {
                a: from.a().map(::fidl_next::TakeFrom::take_from),

                __source_breaking: ::fidl::marker::SourceBreaking,
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireComposedProtocolTwoWayAnonComposedRequest>
        for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedRequest
    {
        #[inline]
        fn take_from(from: &crate::WireComposedProtocolTwoWayAnonComposedRequest) -> Self {
            match from.as_ref() {
                crate::composed_protocol_two_way_anon_composed_request::Ref::B(value) => {
                    Self::B(::fidl_next::TakeFrom::take_from(value))
                }
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireOptionalComposedProtocolTwoWayAnonComposedRequest>
        for Option<
            Box<::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedRequest>,
        >
    {
        #[inline]
        fn take_from(from: &crate::WireOptionalComposedProtocolTwoWayAnonComposedRequest) -> Self {
            if let Some(inner) = from.as_ref() {
                Some(::fidl_next::TakeFrom::take_from(inner))
            } else {
                None
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireComposedProtocolTwoWayAnonComposedResponse>
        for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedResponse
    {
        #[inline]
        fn take_from(from: &crate::WireComposedProtocolTwoWayAnonComposedResponse) -> Self {
            Self {
                a: from.a().map(::fidl_next::TakeFrom::take_from),

                __source_breaking: ::fidl::marker::SourceBreaking,
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest> for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorRequest {
                        #[inline]
                        fn take_from(from: &crate::WireComposedProtocolTwoWayAnonComposedWithErrorRequest) -> Self {
                            Self {

                                    a: from.a().map(::fidl_next::TakeFrom::take_from),

                                __source_breaking: ::fidl::marker::SourceBreaking,
                            }
                        }
                    }

    impl ::fidl_next::TakeFrom<crate::WireComposedProtocolTwoWayAnonComposedWithErrorResponse> for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorResponse {
                            #[inline]
                            fn take_from(from: &crate::WireComposedProtocolTwoWayAnonComposedWithErrorResponse) -> Self {
                                match from.as_ref() {

                                        crate::composed_protocol_two_way_anon_composed_with_error_response::Ref::B(value) =>
                                            Self::B(::fidl_next::TakeFrom::take_from(value)),


                                }
                            }
                        }

    impl ::fidl_next::TakeFrom<crate::WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse> for Option<Box<::fidl_test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorResponse>> {
                            #[inline]
                            fn take_from(from: &crate::WireOptionalComposedProtocolTwoWayAnonComposedWithErrorResponse) -> Self {
                                if let Some(inner) = from.as_ref() {
                                    Some(::fidl_next::TakeFrom::take_from(inner))
                                } else {
                                    None
                                }
                            }
                        }

    impl ::fidl_next::TakeFrom<crate::WireComposedProtocolOnAnonComposedRequest>
        for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest
    {
        #[inline]
        fn take_from(from: &crate::WireComposedProtocolOnAnonComposedRequest) -> Self {
            match from.as_ref() {
                crate::composed_protocol_on_anon_composed_request::Ref::B(value) => {
                    Self::B(::fidl_next::TakeFrom::take_from(value))
                }
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireOptionalComposedProtocolOnAnonComposedRequest>
        for Option<
            Box<::fidl_test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest>,
        >
    {
        #[inline]
        fn take_from(from: &crate::WireOptionalComposedProtocolOnAnonComposedRequest) -> Self {
            if let Some(inner) = from.as_ref() {
                Some(::fidl_next::TakeFrom::take_from(inner))
            } else {
                None
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireTablePayload>
        for ::fidl_test_protocollayoutssamelibrary::TablePayload
    {
        #[inline]
        fn take_from(from: &crate::WireTablePayload) -> Self {
            Self {
                a: from.a().map(::fidl_next::TakeFrom::take_from),

                __source_breaking: ::fidl::marker::SourceBreaking,
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireUnionPayload>
        for ::fidl_test_protocollayoutssamelibrary::UnionPayload
    {
        #[inline]
        fn take_from(from: &crate::WireUnionPayload) -> Self {
            match from.as_ref() {
                crate::union_payload::Ref::B(value) => {
                    Self::B(::fidl_next::TakeFrom::take_from(value))
                }
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireOptionalUnionPayload>
        for Option<Box<::fidl_test_protocollayoutssamelibrary::UnionPayload>>
    {
        #[inline]
        fn take_from(from: &crate::WireOptionalUnionPayload) -> Self {
            if let Some(inner) = from.as_ref() {
                Some(::fidl_next::TakeFrom::take_from(inner))
            } else {
                None
            }
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `ComposedProtocol`
    /// protocol.
    pub type ComposedProtocolProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::ComposedProtocol>;

    impl ::fidl_next::TakeFrom<crate::ComposedProtocol>
        for ::fidl_test_protocollayoutssamelibrary::ComposedProtocolMarker
    {
        #[inline]
        fn take_from(from: &crate::ComposedProtocol) -> Self {
            Self
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireMainProtocolOneWayAnonRequest>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolOneWayAnonRequest
    {
        #[inline]
        fn take_from(from: &crate::WireMainProtocolOneWayAnonRequest) -> Self {
            Self {
                a: from.a().map(::fidl_next::TakeFrom::take_from),

                __source_breaking: ::fidl::marker::SourceBreaking,
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireMainProtocolTwoWayAnonRequest>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonRequest
    {
        #[inline]
        fn take_from(from: &crate::WireMainProtocolTwoWayAnonRequest) -> Self {
            match from.as_ref() {
                crate::main_protocol_two_way_anon_request::Ref::B(value) => {
                    Self::B(::fidl_next::TakeFrom::take_from(value))
                }

                crate::main_protocol_two_way_anon_request::Ref::UnknownOrdinal_(
                    unknown_ordinal,
                ) => Self::__SourceBreaking { unknown_ordinal },
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireOptionalMainProtocolTwoWayAnonRequest>
        for Option<Box<::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonRequest>>
    {
        #[inline]
        fn take_from(from: &crate::WireOptionalMainProtocolTwoWayAnonRequest) -> Self {
            if let Some(inner) = from.as_ref() {
                Some(::fidl_next::TakeFrom::take_from(inner))
            } else {
                None
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireMainProtocolTwoWayAnonResponse>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonResponse
    {
        #[inline]
        fn take_from(from: &crate::WireMainProtocolTwoWayAnonResponse) -> Self {
            Self {
                a: from.a().map(::fidl_next::TakeFrom::take_from),

                __source_breaking: ::fidl::marker::SourceBreaking,
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireMainProtocolTwoWayAnonWithErrorRequest>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorRequest
    {
        #[inline]
        fn take_from(from: &crate::WireMainProtocolTwoWayAnonWithErrorRequest) -> Self {
            Self {
                a: from.a().map(::fidl_next::TakeFrom::take_from),

                __source_breaking: ::fidl::marker::SourceBreaking,
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireMainProtocolTwoWayAnonWithErrorResponse>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorResponse
    {
        #[inline]
        fn take_from(from: &crate::WireMainProtocolTwoWayAnonWithErrorResponse) -> Self {
            match from.as_ref() {
                crate::main_protocol_two_way_anon_with_error_response::Ref::B(value) => {
                    Self::B(::fidl_next::TakeFrom::take_from(value))
                }

                crate::main_protocol_two_way_anon_with_error_response::Ref::UnknownOrdinal_(
                    unknown_ordinal,
                ) => Self::__SourceBreaking { unknown_ordinal },
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireOptionalMainProtocolTwoWayAnonWithErrorResponse>
        for Option<
            Box<::fidl_test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorResponse>,
        >
    {
        #[inline]
        fn take_from(from: &crate::WireOptionalMainProtocolTwoWayAnonWithErrorResponse) -> Self {
            if let Some(inner) = from.as_ref() {
                Some(::fidl_next::TakeFrom::take_from(inner))
            } else {
                None
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireMainProtocolOnAnonRequest>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolOnAnonRequest
    {
        #[inline]
        fn take_from(from: &crate::WireMainProtocolOnAnonRequest) -> Self {
            match from.as_ref() {
                crate::main_protocol_on_anon_request::Ref::B(value) => {
                    Self::B(::fidl_next::TakeFrom::take_from(value))
                }

                crate::main_protocol_on_anon_request::Ref::UnknownOrdinal_(unknown_ordinal) => {
                    Self::__SourceBreaking { unknown_ordinal }
                }
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireOptionalMainProtocolOnAnonRequest>
        for Option<Box<::fidl_test_protocollayoutssamelibrary::MainProtocolOnAnonRequest>>
    {
        #[inline]
        fn take_from(from: &crate::WireOptionalMainProtocolOnAnonRequest) -> Self {
            if let Some(inner) = from.as_ref() {
                Some(::fidl_next::TakeFrom::take_from(inner))
            } else {
                None
            }
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `MainProtocol`
    /// protocol.
    pub type MainProtocolProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::MainProtocol>;

    impl ::fidl_next::TakeFrom<crate::MainProtocol>
        for ::fidl_test_protocollayoutssamelibrary::MainProtocolMarker
    {
        #[inline]
        fn take_from(from: &crate::MainProtocol) -> Self {
            Self
        }
    }
}
