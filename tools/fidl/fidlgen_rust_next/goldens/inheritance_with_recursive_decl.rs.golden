// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Debug)]
#[repr(C)]
pub struct ParentFirstRequest {
    pub request: ::fidl_next::ServerEnd<::fidl_next::fuchsia::zx::Channel, crate::Parent>,
}

impl ::fidl_next::Encodable for ParentFirstRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireParentFirstRequest> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<::fidl_next::fuchsia::zx::Channel,crate::Parent,
        > as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    type Encoded = WireParentFirstRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ParentFirstRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                request,

            } = out;
        }

        ::fidl_next::Encode::encode(self.request, encoder, request)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ParentFirstRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireParentFirstRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ParentFirstRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ParentFirstRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireParentFirstRequest> for ParentFirstRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireParentFirstRequest, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<::fidl_next::fuchsia::zx::Channel,crate::Parent,
        > as ::fidl_next::FromWire<::fidl_next::ServerEnd<::fidl_next::fuchsia::WireChannel,crate::Parent,
        >>
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    #[inline]
    fn from_wire(wire: WireParentFirstRequest) -> Self {
        Self { request: ::fidl_next::FromWire::from_wire(wire.request) }
    }
}

/// The wire type corresponding to [`ParentFirstRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireParentFirstRequest {
    pub request: ::fidl_next::ServerEnd<::fidl_next::fuchsia::WireChannel, crate::Parent>,
}

unsafe impl ::fidl_next::Wire for WireParentFirstRequest {
    type Decoded<'de> = WireParentFirstRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireParentFirstRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut request,

            } = slot;
        }

        ::fidl_next::Decode::decode(request.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the Parent protocol.
#[derive(Debug)]
pub struct Parent;

pub mod parent {
    pub mod prelude {
        pub use crate::{
            parent, Parent, ParentClientHandler, ParentClientSender, ParentServerHandler,
            ParentServerSender,
        };

        pub use crate::ParentFirstRequest;
    }

    pub struct First;

    impl ::fidl_next::Method for First {
        const ORDINAL: u64 = 3973163707930985819;

        type Protocol = crate::Parent;

        type Request = crate::WireParentFirstRequest;

        type Response = ::fidl_next::Never;
    }
}

/// A helper trait for the `Parent` client sender.
pub trait ParentClientSender {
    type Transport: ::fidl_next::Transport;

    fn first<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireParentFirstRequest,
        >;
}

impl<___T> ParentClientSender for ::fidl_next::ClientSender<___T, Parent>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn first<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireParentFirstRequest,
        >,
    {
        self.as_untyped().send_one_way(3973163707930985819, request)
    }
}

/// A client handler for the Parent protocol.
///
/// See [`Parent`] for more details.
pub trait ParentClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for Parent
where
    ___T: ::fidl_next::Transport,
    ___H: ParentClientHandler<___T>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `Parent` server sender.
pub trait ParentServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> ParentServerSender for ::fidl_next::ServerSender<___T, Parent>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the Parent protocol.
///
/// See [`Parent`] for more details.
pub trait ParentServerHandler<___T: ::fidl_next::Transport> {
    fn first(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Parent>,

        request: ::fidl_next::Request<___T, parent::First>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for Parent
where
    ___T: ::fidl_next::Transport,
    ___H: ParentServerHandler<___T>,

    <parent::First as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            3973163707930985819 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.first(sender, decoded),
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct ChildSecondRequest {
    pub request: ::fidl_next::ServerEnd<::fidl_next::fuchsia::zx::Channel, crate::Parent>,
}

impl ::fidl_next::Encodable for ChildSecondRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireChildSecondRequest> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<::fidl_next::fuchsia::zx::Channel,crate::Parent,
        > as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    type Encoded = WireChildSecondRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ChildSecondRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                request,

            } = out;
        }

        ::fidl_next::Encode::encode(self.request, encoder, request)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ChildSecondRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireChildSecondRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ChildSecondRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ChildSecondRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireChildSecondRequest> for ChildSecondRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireChildSecondRequest, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<::fidl_next::fuchsia::zx::Channel,crate::Parent,
        > as ::fidl_next::FromWire<::fidl_next::ServerEnd<::fidl_next::fuchsia::WireChannel,crate::Parent,
        >>
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    #[inline]
    fn from_wire(wire: WireChildSecondRequest) -> Self {
        Self { request: ::fidl_next::FromWire::from_wire(wire.request) }
    }
}

/// The wire type corresponding to [`ChildSecondRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireChildSecondRequest {
    pub request: ::fidl_next::ServerEnd<::fidl_next::fuchsia::WireChannel, crate::Parent>,
}

unsafe impl ::fidl_next::Wire for WireChildSecondRequest {
    type Decoded<'de> = WireChildSecondRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireChildSecondRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut request,

            } = slot;
        }

        ::fidl_next::Decode::decode(request.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the Child protocol.
#[derive(Debug)]
pub struct Child;

pub mod child {
    pub mod prelude {
        pub use crate::{
            child, Child, ChildClientHandler, ChildClientSender, ChildServerHandler,
            ChildServerSender,
        };

        pub use crate::ChildSecondRequest;

        pub use crate::ParentFirstRequest;
    }

    pub struct First;

    impl ::fidl_next::Method for First {
        const ORDINAL: u64 = 3973163707930985819;

        type Protocol = crate::Child;

        type Request = crate::WireParentFirstRequest;

        type Response = ::fidl_next::Never;
    }

    pub struct Second;

    impl ::fidl_next::Method for Second {
        const ORDINAL: u64 = 2545123272820824165;

        type Protocol = crate::Child;

        type Request = crate::WireChildSecondRequest;

        type Response = ::fidl_next::Never;
    }
}

/// A helper trait for the `Child` client sender.
pub trait ChildClientSender {
    type Transport: ::fidl_next::Transport;

    fn first<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireParentFirstRequest,
        >;

    fn second<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireChildSecondRequest,
        >;
}

impl<___T> ChildClientSender for ::fidl_next::ClientSender<___T, Child>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn first<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireParentFirstRequest,
        >,
    {
        self.as_untyped().send_one_way(3973163707930985819, request)
    }

    fn second<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireChildSecondRequest,
        >,
    {
        self.as_untyped().send_one_way(2545123272820824165, request)
    }
}

/// A client handler for the Child protocol.
///
/// See [`Child`] for more details.
pub trait ChildClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for Child
where
    ___T: ::fidl_next::Transport,
    ___H: ChildClientHandler<___T>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `Child` server sender.
pub trait ChildServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> ChildServerSender for ::fidl_next::ServerSender<___T, Child>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the Child protocol.
///
/// See [`Child`] for more details.
pub trait ChildServerHandler<___T: ::fidl_next::Transport> {
    fn first(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Child>,

        request: ::fidl_next::Request<___T, child::First>,
    );

    fn second(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Child>,

        request: ::fidl_next::Request<___T, child::Second>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for Child
where
    ___T: ::fidl_next::Transport,
    ___H: ChildServerHandler<___T>,

    <child::First as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <child::Second as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            3973163707930985819 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.first(sender, decoded),
                Err(e) => {
                    sender.close();
                }
            },

            2545123272820824165 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.second(sender, decoded),
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Parent`
    /// protocol.
    pub type ParentProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Parent>;

    impl ::core::convert::From<crate::Parent>
        for ::fidl_test_inheritancewithrecursivedecl::ParentMarker
    {
        #[inline]
        fn from(_: crate::Parent) -> Self {
            Self
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Child`
    /// protocol.
    pub type ChildProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Child>;

    impl ::core::convert::From<crate::Child> for ::fidl_test_inheritancewithrecursivedecl::ChildMarker {
        #[inline]
        fn from(_: crate::Child) -> Self {
            Self
        }
    }
}
