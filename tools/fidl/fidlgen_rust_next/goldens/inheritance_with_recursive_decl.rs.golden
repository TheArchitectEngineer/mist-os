// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Debug)]
#[repr(C)]
pub struct ParentFirstRequest {
    pub request: ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::zx::Channel>,
}

impl ::fidl_next::Encodable for ParentFirstRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireParentFirstRequest> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::zx::Channel> as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    type Encoded = WireParentFirstRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ParentFirstRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                request,

            } = out;
        }

        ::fidl_next::Encode::encode(self.request, encoder, request)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ParentFirstRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireParentFirstRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ParentFirstRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ParentFirstRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireParentFirstRequest> for ParentFirstRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireParentFirstRequest, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::zx::Channel> as ::fidl_next::FromWire<::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::WireChannel>>
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    #[inline]
    fn from_wire(wire: WireParentFirstRequest) -> Self {
        Self { request: ::fidl_next::FromWire::from_wire(wire.request) }
    }
}

/// The wire type corresponding to [`ParentFirstRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireParentFirstRequest {
    pub request: ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::WireChannel>,
}

unsafe impl ::fidl_next::Wire for WireParentFirstRequest {
    type Decoded<'de> = WireParentFirstRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireParentFirstRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut request,

            } = slot;
        }

        ::fidl_next::Decode::decode(request.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the Parent protocol.
#[derive(Debug)]
pub struct Parent;

pub mod parent {
    pub mod prelude {
        pub use crate::{parent, Parent, ParentClientHandler, ParentServerHandler};

        pub use crate::ParentFirstRequest;
    }

    pub struct First;

    impl ::fidl_next::Method for First {
        const ORDINAL: u64 = 3973163707930985819;

        type Protocol = crate::Parent;

        type Request = crate::WireParentFirstRequest;

        type Response = ::fidl_next::Never;
    }

    mod ___detail {

        pub struct First<T0> {
            request: T0,
        }

        impl<T0> ::fidl_next::Encodable for First<T0>
        where
            T0: ::fidl_next::Encodable<
                Encoded = ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::WireChannel>,
            >,
        {
            type Encoded = crate::WireParentFirstRequest;
        }

        unsafe impl<___E, T0> ::fidl_next::Encode<___E> for First<T0>
        where
            ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

            ___E: ::fidl_next::fuchsia::HandleEncoder,

            T0: ::fidl_next::Encode<
                ___E,
                Encoded = ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::WireChannel>,
            >,
        {
            #[inline]
            fn encode(
                self,
                encoder: &mut ___E,
                out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
            ) -> Result<(), ::fidl_next::EncodeError> {
                ::fidl_next::munge! {
                    let Self::Encoded {
                        request,

                    } = out;
                }

                ::fidl_next::Encode::encode(self.request, encoder, request)?;

                Ok(())
            }
        }

        unsafe impl<___T> ::fidl_next::Protocol<___T> for crate::Parent
        where
            ___T: ::fidl_next::Transport,
        {
            type ClientSender = ParentClientSender<___T>;
            type ServerSender = ParentServerSender<___T>;
        }

        /// The client sender for the `Parent` protocol.
        pub struct ParentClientSender<___T: ::fidl_next::Transport> {
            #[allow(dead_code)]
            sender: ::fidl_next::protocol::ClientSender<___T>,
        }

        impl<___T> ParentClientSender<___T>
        where
            ___T: ::fidl_next::Transport,
        {
            pub fn first(
                &self,

                request: impl ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = ::fidl_next::ServerEnd<
                        crate::Parent,
                        ::fidl_next::fuchsia::WireChannel,
                    >,
                >,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                <___T as ::fidl_next::Transport>::SendBuffer:
                    ::fidl_next::encoder::InternalHandleEncoder,

                <___T as ::fidl_next::Transport>::SendBuffer: ::fidl_next::fuchsia::HandleEncoder,
            {
                self.first_with(First { request })
            }

            pub fn first_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireParentFirstRequest,
                >,
            {
                self.sender.send_one_way(3973163707930985819, request)
            }
        }

        /// The server sender for the `Parent` protocol.
        #[repr(transparent)]
        pub struct ParentServerSender<___T: ::fidl_next::Transport> {
            sender: ::fidl_next::protocol::ServerSender<___T>,
        }

        impl<___T> ParentServerSender<___T> where ___T: ::fidl_next::Transport {}
    }
}

/// A client handler for the Parent protocol.
///
/// See [`Parent`] for more details.
pub trait ParentClientHandler<___T: ::fidl_next::Transport> {}

impl<___H, ___T> ::fidl_next::ClientProtocol<___H, ___T> for Parent
where
    ___H: ParentClientHandler<___T> + Send,
    ___T: ::fidl_next::Transport,
{
    async fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A server handler for the Parent protocol.
///
/// See [`Parent`] for more details.
pub trait ParentServerHandler<___T: ::fidl_next::Transport> {
    fn first(
        &mut self,
        sender: &::fidl_next::ServerSender<Parent, ___T>,

        request: ::fidl_next::Request<parent::First, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;
}

impl<___H, ___T> ::fidl_next::ServerProtocol<___H, ___T> for Parent
where
    ___H: ParentServerHandler<___T> + Send,
    ___T: ::fidl_next::Transport,

    <parent::First as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    async fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            3973163707930985819 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.first(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }

    async fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct ChildSecondRequest {
    pub request: ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::zx::Channel>,
}

impl ::fidl_next::Encodable for ChildSecondRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireChildSecondRequest> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::zx::Channel> as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    type Encoded = WireChildSecondRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ChildSecondRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                request,

            } = out;
        }

        ::fidl_next::Encode::encode(self.request, encoder, request)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ChildSecondRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireChildSecondRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ChildSecondRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ChildSecondRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireChildSecondRequest> for ChildSecondRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireChildSecondRequest, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::zx::Channel> as ::fidl_next::FromWire<::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::WireChannel>>
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    #[inline]
    fn from_wire(wire: WireChildSecondRequest) -> Self {
        Self { request: ::fidl_next::FromWire::from_wire(wire.request) }
    }
}

/// The wire type corresponding to [`ChildSecondRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireChildSecondRequest {
    pub request: ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::WireChannel>,
}

unsafe impl ::fidl_next::Wire for WireChildSecondRequest {
    type Decoded<'de> = WireChildSecondRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireChildSecondRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut request,

            } = slot;
        }

        ::fidl_next::Decode::decode(request.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the Child protocol.
#[derive(Debug)]
pub struct Child;

pub mod child {
    pub mod prelude {
        pub use crate::{child, Child, ChildClientHandler, ChildServerHandler};

        pub use crate::ChildSecondRequest;

        pub use crate::ParentFirstRequest;
    }

    pub struct First;

    impl ::fidl_next::Method for First {
        const ORDINAL: u64 = 3973163707930985819;

        type Protocol = crate::Child;

        type Request = crate::WireParentFirstRequest;

        type Response = ::fidl_next::Never;
    }

    pub struct Second;

    impl ::fidl_next::Method for Second {
        const ORDINAL: u64 = 2545123272820824165;

        type Protocol = crate::Child;

        type Request = crate::WireChildSecondRequest;

        type Response = ::fidl_next::Never;
    }

    mod ___detail {

        pub struct First<T0> {
            request: T0,
        }

        impl<T0> ::fidl_next::Encodable for First<T0>
        where
            T0: ::fidl_next::Encodable<
                Encoded = ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::WireChannel>,
            >,
        {
            type Encoded = crate::WireParentFirstRequest;
        }

        unsafe impl<___E, T0> ::fidl_next::Encode<___E> for First<T0>
        where
            ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

            ___E: ::fidl_next::fuchsia::HandleEncoder,

            T0: ::fidl_next::Encode<
                ___E,
                Encoded = ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::WireChannel>,
            >,
        {
            #[inline]
            fn encode(
                self,
                encoder: &mut ___E,
                out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
            ) -> Result<(), ::fidl_next::EncodeError> {
                ::fidl_next::munge! {
                    let Self::Encoded {
                        request,

                    } = out;
                }

                ::fidl_next::Encode::encode(self.request, encoder, request)?;

                Ok(())
            }
        }

        pub struct Second<T0> {
            request: T0,
        }

        impl<T0> ::fidl_next::Encodable for Second<T0>
        where
            T0: ::fidl_next::Encodable<
                Encoded = ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::WireChannel>,
            >,
        {
            type Encoded = crate::WireChildSecondRequest;
        }

        unsafe impl<___E, T0> ::fidl_next::Encode<___E> for Second<T0>
        where
            ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

            ___E: ::fidl_next::fuchsia::HandleEncoder,

            T0: ::fidl_next::Encode<
                ___E,
                Encoded = ::fidl_next::ServerEnd<crate::Parent, ::fidl_next::fuchsia::WireChannel>,
            >,
        {
            #[inline]
            fn encode(
                self,
                encoder: &mut ___E,
                out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
            ) -> Result<(), ::fidl_next::EncodeError> {
                ::fidl_next::munge! {
                    let Self::Encoded {
                        request,

                    } = out;
                }

                ::fidl_next::Encode::encode(self.request, encoder, request)?;

                Ok(())
            }
        }

        unsafe impl<___T> ::fidl_next::Protocol<___T> for crate::Child
        where
            ___T: ::fidl_next::Transport,
        {
            type ClientSender = ChildClientSender<___T>;
            type ServerSender = ChildServerSender<___T>;
        }

        /// The client sender for the `Child` protocol.
        pub struct ChildClientSender<___T: ::fidl_next::Transport> {
            #[allow(dead_code)]
            sender: ::fidl_next::protocol::ClientSender<___T>,
        }

        impl<___T> ChildClientSender<___T>
        where
            ___T: ::fidl_next::Transport,
        {
            pub fn first(
                &self,

                request: impl ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = ::fidl_next::ServerEnd<
                        crate::Parent,
                        ::fidl_next::fuchsia::WireChannel,
                    >,
                >,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                <___T as ::fidl_next::Transport>::SendBuffer:
                    ::fidl_next::encoder::InternalHandleEncoder,

                <___T as ::fidl_next::Transport>::SendBuffer: ::fidl_next::fuchsia::HandleEncoder,
            {
                self.first_with(First { request })
            }

            pub fn first_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireParentFirstRequest,
                >,
            {
                self.sender.send_one_way(3973163707930985819, request)
            }

            pub fn second(
                &self,

                request: impl ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = ::fidl_next::ServerEnd<
                        crate::Parent,
                        ::fidl_next::fuchsia::WireChannel,
                    >,
                >,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                <___T as ::fidl_next::Transport>::SendBuffer:
                    ::fidl_next::encoder::InternalHandleEncoder,

                <___T as ::fidl_next::Transport>::SendBuffer: ::fidl_next::fuchsia::HandleEncoder,
            {
                self.second_with(Second { request })
            }

            pub fn second_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireChildSecondRequest,
                >,
            {
                self.sender.send_one_way(2545123272820824165, request)
            }
        }

        /// The server sender for the `Child` protocol.
        #[repr(transparent)]
        pub struct ChildServerSender<___T: ::fidl_next::Transport> {
            sender: ::fidl_next::protocol::ServerSender<___T>,
        }

        impl<___T> ChildServerSender<___T> where ___T: ::fidl_next::Transport {}
    }
}

/// A client handler for the Child protocol.
///
/// See [`Child`] for more details.
pub trait ChildClientHandler<___T: ::fidl_next::Transport> {}

impl<___H, ___T> ::fidl_next::ClientProtocol<___H, ___T> for Child
where
    ___H: ChildClientHandler<___T> + Send,
    ___T: ::fidl_next::Transport,
{
    async fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A server handler for the Child protocol.
///
/// See [`Child`] for more details.
pub trait ChildServerHandler<___T: ::fidl_next::Transport> {
    fn first(
        &mut self,
        sender: &::fidl_next::ServerSender<Child, ___T>,

        request: ::fidl_next::Request<child::First, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn second(
        &mut self,
        sender: &::fidl_next::ServerSender<Child, ___T>,

        request: ::fidl_next::Request<child::Second, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;
}

impl<___H, ___T> ::fidl_next::ServerProtocol<___H, ___T> for Child
where
    ___H: ChildServerHandler<___T> + Send,
    ___T: ::fidl_next::Transport,

    <child::First as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <child::Second as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    async fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            3973163707930985819 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.first(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            2545123272820824165 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.second(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }

    async fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    impl ::fidl_next::CompatFrom<crate::ParentFirstRequest>
        for ::fidl_test_inheritancewithrecursivedecl::ParentFirstRequest
    {
        #[inline]
        fn compat_from(value: crate::ParentFirstRequest) -> Self {
            Self { request: ::fidl_next::CompatFrom::compat_from(value.request) }
        }
    }

    impl ::fidl_next::CompatFrom<::fidl_test_inheritancewithrecursivedecl::ParentFirstRequest>
        for crate::ParentFirstRequest
    {
        #[inline]
        fn compat_from(
            value: ::fidl_test_inheritancewithrecursivedecl::ParentFirstRequest,
        ) -> Self {
            Self { request: ::fidl_next::CompatFrom::compat_from(value.request) }
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Parent`
    /// protocol.
    pub type ParentProxy = ::fidl_next::ClientSender<crate::Parent>;

    impl ::fidl_next::CompatFrom<crate::Parent>
        for ::fidl_test_inheritancewithrecursivedecl::ParentMarker
    {
        fn compat_from(_: crate::Parent) -> Self {
            Self
        }
    }

    impl ::fidl_next::CompatFrom<::fidl_test_inheritancewithrecursivedecl::ParentMarker>
        for crate::Parent
    {
        fn compat_from(_: ::fidl_test_inheritancewithrecursivedecl::ParentMarker) -> Self {
            Self
        }
    }

    #[cfg(target_os = "fuchsia")]

    impl ::fidl_next::ClientCompatFrom<::fidl_test_inheritancewithrecursivedecl::ParentProxy>
        for crate::Parent
    {
        fn client_compat_from(
            proxy: ::fidl_test_inheritancewithrecursivedecl::ParentProxy,
        ) -> ::fidl_next::Client<Self, ::fidl_next::fuchsia::zx::Channel> {
            let channel = ::fidl::endpoints::Proxy::into_channel(proxy).unwrap().into_zx_channel();
            let client_end = ::fidl_next::ClientEnd::from_untyped(channel);
            ::fidl_next::Client::new(client_end)
        }
    }

    impl ::fidl_next::CompatFrom<crate::ChildSecondRequest>
        for ::fidl_test_inheritancewithrecursivedecl::ChildSecondRequest
    {
        #[inline]
        fn compat_from(value: crate::ChildSecondRequest) -> Self {
            Self { request: ::fidl_next::CompatFrom::compat_from(value.request) }
        }
    }

    impl ::fidl_next::CompatFrom<::fidl_test_inheritancewithrecursivedecl::ChildSecondRequest>
        for crate::ChildSecondRequest
    {
        #[inline]
        fn compat_from(
            value: ::fidl_test_inheritancewithrecursivedecl::ChildSecondRequest,
        ) -> Self {
            Self { request: ::fidl_next::CompatFrom::compat_from(value.request) }
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Child`
    /// protocol.
    pub type ChildProxy = ::fidl_next::ClientSender<crate::Child>;

    impl ::fidl_next::CompatFrom<crate::Child>
        for ::fidl_test_inheritancewithrecursivedecl::ChildMarker
    {
        fn compat_from(_: crate::Child) -> Self {
            Self
        }
    }

    impl ::fidl_next::CompatFrom<::fidl_test_inheritancewithrecursivedecl::ChildMarker>
        for crate::Child
    {
        fn compat_from(_: ::fidl_test_inheritancewithrecursivedecl::ChildMarker) -> Self {
            Self
        }
    }

    #[cfg(target_os = "fuchsia")]

    impl ::fidl_next::ClientCompatFrom<::fidl_test_inheritancewithrecursivedecl::ChildProxy>
        for crate::Child
    {
        fn client_compat_from(
            proxy: ::fidl_test_inheritancewithrecursivedecl::ChildProxy,
        ) -> ::fidl_next::Client<Self, ::fidl_next::fuchsia::zx::Channel> {
            let channel = ::fidl::endpoints::Proxy::into_channel(proxy).unwrap().into_zx_channel();
            let client_end = ::fidl_next::ClientEnd::from_untyped(channel);
            ::fidl_next::Client::new(client_end)
        }
    }
}
