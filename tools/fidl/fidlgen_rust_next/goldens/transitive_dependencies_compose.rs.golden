// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

/// The type corresponding to the Top protocol.
#[derive(Debug)]
pub struct Top;

pub mod top {

    pub struct GetFoo;

    impl ::fidl_next::Method for GetFoo {
        const ORDINAL: u64 = 2618685789258237543;

        type Protocol = crate::Top;

        type Request = ();

        type Response = ::fidl_next_test_bottom::WireBottomGetFooResponse;
    }
}

/// A helper trait for the `Top` client sender.
pub trait TopClientSender {
    type Transport: ::fidl_next::Transport;

    fn get_foo(
        &self,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, top::GetFoo>,
        ::fidl_next::EncodeError,
    >;
}

impl<___T> TopClientSender for ::fidl_next::ClientSender<___T, Top>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn get_foo(
        &self,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, top::GetFoo>,
        ::fidl_next::EncodeError,
    > {
        self.as_untyped()
            .send_two_way(2618685789258237543, &mut ())
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the Top protocol.
///
/// See [`Top`] for more details.
pub trait TopClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for Top
where
    ___T: ::fidl_next::Transport,
    ___H: TopClientHandler<___T>,

    ::fidl_next_test_bottom::WireBottomGetFooResponse:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `Top` server sender.
pub trait TopServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> TopServerSender for ::fidl_next::ServerSender<___T, Top>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the Top protocol.
///
/// See [`Top`] for more details.
pub trait TopServerHandler<___T: ::fidl_next::Transport> {
    fn get_foo(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Top>,

        responder: ::fidl_next::Responder<top::GetFoo>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for Top
where
    ___T: ::fidl_next::Transport,
    ___H: TopServerHandler<___T>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            2618685789258237543 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                handler.get_foo(sender, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Commonly-used items that should usually be in scope, such as extension traits.
pub mod prelude {
    pub use super::{TopClientSender, TopServerSender};
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Top`
    /// protocol.
    pub type TopProxy = ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Top>;
}
