// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Debug)]
#[repr(C)]
pub struct ClientEndWrapper {
    pub value: ::fidl_next::ClientEnd<::fidl_next::fuchsia::zx::Channel, crate::DriverProtocol>,
}

impl ::fidl_next::Encodable for ClientEndWrapper {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireClientEndWrapper> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <::fidl_next::ClientEnd<
                ::fidl_next::fuchsia::zx::Channel,
                crate::DriverProtocol,
            > as ::fidl_next::Encodable>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    type Encoded = WireClientEndWrapper;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ClientEndWrapper
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                value,

            } = out;
        }

        ::fidl_next::Encode::encode(self.value, encoder, value)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ClientEndWrapper {
    type EncodedOption = ::fidl_next::WireBox<'static, WireClientEndWrapper>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ClientEndWrapper
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ClientEndWrapper: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireClientEndWrapper> for ClientEndWrapper {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireClientEndWrapper, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <::fidl_next::ClientEnd<
                ::fidl_next::fuchsia::zx::Channel,
                crate::DriverProtocol,
            > as ::fidl_next::FromWire<
                ::fidl_next::ClientEnd<::fidl_next::fuchsia::WireChannel, crate::DriverProtocol>,
            >>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireClientEndWrapper) -> Self {
        Self { value: ::fidl_next::FromWire::from_wire(wire.value) }
    }
}

/// The wire type corresponding to [`ClientEndWrapper`].
#[derive(Debug)]
#[repr(C)]
pub struct WireClientEndWrapper {
    pub value: ::fidl_next::ClientEnd<::fidl_next::fuchsia::WireChannel, crate::DriverProtocol>,
}

unsafe impl ::fidl_next::Wire for WireClientEndWrapper {
    type Decoded<'de> = WireClientEndWrapper;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireClientEndWrapper
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut value,

            } = slot;
        }

        ::fidl_next::Decode::decode(value.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the DriverProtocol protocol.
#[derive(Debug)]
pub struct DriverProtocol;

pub mod driver_protocol {
    pub mod prelude {
        pub use crate::{
            driver_protocol, DriverProtocol, DriverProtocolClientHandler,
            DriverProtocolClientSender, DriverProtocolServerHandler, DriverProtocolServerSender,
        };
    }
}

/// A helper trait for the `DriverProtocol` client sender.
pub trait DriverProtocolClientSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> DriverProtocolClientSender for ::fidl_next::ClientSender<___T, DriverProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A client handler for the DriverProtocol protocol.
///
/// See [`DriverProtocol`] for more details.
pub trait DriverProtocolClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for DriverProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: DriverProtocolClientHandler<___T>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `DriverProtocol` server sender.
pub trait DriverProtocolServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> DriverProtocolServerSender for ::fidl_next::ServerSender<___T, DriverProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the DriverProtocol protocol.
///
/// See [`DriverProtocol`] for more details.
pub trait DriverProtocolServerHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for DriverProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: DriverProtocolServerHandler<___T>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Debug, Default)]
pub struct T {
    pub zircon_handle: Option<::fidl_next::fuchsia::zx::Handle>,

    pub fdf_handle:
        Option<::fidl_next::ClientEnd<::fidl_next::fuchsia::zx::Channel, crate::DriverProtocol>>,
}

impl T {
    fn __max_ordinal(&self) -> usize {
        if self.fdf_handle.is_some() {
            return 2;
        }

        if self.zircon_handle.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for T {
    type Encoded = WireT<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for T
where
    ___E: ::fidl_next::Encoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireT { table } = out);

        let max_ord = self.__max_ordinal();

        let mut out = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        ::fidl_next::Wire::zero_padding(&mut out);

        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            match i {
                2 => {
                    if let Some(fdf_handle) = self.fdf_handle.take() {
                        ::fidl_next::WireEnvelope::encode_value(
                            fdf_handle,
                            preallocated.encoder,
                            &mut out,
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                1 => {
                    if let Some(zircon_handle) = self.zircon_handle.take() {
                        ::fidl_next::WireEnvelope::encode_value(
                            zircon_handle,
                            preallocated.encoder,
                            &mut out,
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(&mut out)
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(&mut out),
            }
            unsafe {
                preallocated.write_next(out.assume_init_ref());
            }
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireT<'de>> for T {
    #[inline]
    fn from_wire(wire: WireT<'de>) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);

        let zircon_handle = wire.table.get(1);

        let fdf_handle = wire.table.get(2);

        Self {
            zircon_handle: zircon_handle.map(|envelope| {
                ::fidl_next::FromWire::from_wire(unsafe {
                    envelope.read_unchecked::<::fidl_next::fuchsia::WireHandle>()
                })
            }),

            fdf_handle: fdf_handle.map(|envelope| {
                ::fidl_next::FromWire::from_wire(unsafe {
                    envelope.read_unchecked::<::fidl_next::ClientEnd<
                        ::fidl_next::fuchsia::WireChannel,
                        crate::DriverProtocol,
                    >>()
                })
            }),
        }
    }
}

/// The wire type corresponding to [`T`].
#[repr(C)]
pub struct WireT<'de> {
    table: ::fidl_next::WireTable<'de>,
}

impl<'de> Drop for WireT<'de> {
    fn drop(&mut self) {
        let _ = self.table.get(1).map(|envelope| unsafe {
            envelope.read_unchecked::<::fidl_next::fuchsia::WireHandle>()
        });

        let _ = self.table.get(2)
                .map(|envelope| unsafe {
                    envelope.read_unchecked::<::fidl_next::ClientEnd<::fidl_next::fuchsia::WireChannel,crate::DriverProtocol,
        >>()
                });
    }
}

unsafe impl ::fidl_next::Wire for WireT<'static> {
    type Decoded<'de> = WireT<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { table } = out);
        ::fidl_next::WireTable::zero_padding(table);
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireT<'static>
where
    ___D: ::fidl_next::Decoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::fuchsia::WireHandle>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                2 => {
                    ::fidl_next::WireEnvelope::decode_as::<
                        ___D,
                        ::fidl_next::ClientEnd<
                            ::fidl_next::fuchsia::WireChannel,
                            crate::DriverProtocol,
                        >,
                    >(slot.as_mut(), decoder)?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'de> WireT<'de> {
    pub fn zircon_handle(&self) -> Option<&::fidl_next::fuchsia::WireHandle> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn fdf_handle(
        &self,
    ) -> Option<&::fidl_next::ClientEnd<::fidl_next::fuchsia::WireChannel, crate::DriverProtocol>>
    {
        unsafe { Some(self.table.get(2)?.deref_unchecked()) }
    }
}

impl<'de> ::core::fmt::Debug for WireT<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("T")
            .field("zircon_handle", &self.zircon_handle())
            .field("fdf_handle", &self.fdf_handle())
            .finish()
    }
}

#[derive(Debug)]
pub struct HandlesInProtocolSendHandlesRequest {
    pub t: crate::T,
}

impl ::fidl_next::Encodable for HandlesInProtocolSendHandlesRequest {
    type Encoded = WireHandlesInProtocolSendHandlesRequest<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for HandlesInProtocolSendHandlesRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                t,

            } = out;
        }

        ::fidl_next::Encode::encode(self.t, encoder, t)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for HandlesInProtocolSendHandlesRequest {
    type EncodedOption =
        ::fidl_next::WireBox<'static, WireHandlesInProtocolSendHandlesRequest<'static>>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for HandlesInProtocolSendHandlesRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    HandlesInProtocolSendHandlesRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireHandlesInProtocolSendHandlesRequest<'de>>
    for HandlesInProtocolSendHandlesRequest
{
    #[inline]
    fn from_wire(wire: WireHandlesInProtocolSendHandlesRequest<'de>) -> Self {
        Self { t: ::fidl_next::FromWire::from_wire(wire.t) }
    }
}

/// The wire type corresponding to [`HandlesInProtocolSendHandlesRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireHandlesInProtocolSendHandlesRequest<'de> {
    pub t: crate::WireT<'de>,
}

unsafe impl ::fidl_next::Wire for WireHandlesInProtocolSendHandlesRequest<'static> {
    type Decoded<'de> = WireHandlesInProtocolSendHandlesRequest<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireHandlesInProtocolSendHandlesRequest<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut t,

            } = slot;
        }

        ::fidl_next::Decode::decode(t.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the HandlesInProtocol protocol.
#[derive(Debug)]
pub struct HandlesInProtocol;

pub mod handles_in_protocol {
    pub mod prelude {
        pub use crate::{
            handles_in_protocol, HandlesInProtocol, HandlesInProtocolClientHandler,
            HandlesInProtocolClientSender, HandlesInProtocolServerHandler,
            HandlesInProtocolServerSender,
        };

        pub use crate::HandlesInProtocolSendHandlesRequest;
    }

    pub struct SendHandles;

    impl ::fidl_next::Method for SendHandles {
        const ORDINAL: u64 = 8904504160365833729;

        type Protocol = crate::HandlesInProtocol;

        type Request = crate::WireHandlesInProtocolSendHandlesRequest<'static>;

        type Response = ::fidl_next::Never;
    }
}

/// A helper trait for the `HandlesInProtocol` client sender.
pub trait HandlesInProtocolClientSender {
    type Transport: ::fidl_next::Transport;

    fn send_handles<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireHandlesInProtocolSendHandlesRequest<'static>,
        >;
}

impl<___T> HandlesInProtocolClientSender for ::fidl_next::ClientSender<___T, HandlesInProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn send_handles<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireHandlesInProtocolSendHandlesRequest<'static>,
        >,
    {
        self.as_untyped().send_one_way(8904504160365833729, request)
    }
}

/// A client handler for the HandlesInProtocol protocol.
///
/// See [`HandlesInProtocol`] for more details.
pub trait HandlesInProtocolClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for HandlesInProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: HandlesInProtocolClientHandler<___T>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `HandlesInProtocol` server sender.
pub trait HandlesInProtocolServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> HandlesInProtocolServerSender for ::fidl_next::ServerSender<___T, HandlesInProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the HandlesInProtocol protocol.
///
/// See [`HandlesInProtocol`] for more details.
pub trait HandlesInProtocolServerHandler<___T: ::fidl_next::Transport> {
    fn send_handles(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, HandlesInProtocol>,

        request: ::fidl_next::Request<___T, handles_in_protocol::SendHandles>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for HandlesInProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: HandlesInProtocolServerHandler<___T>,

    <handles_in_protocol::SendHandles as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            8904504160365833729 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.send_handles(sender, decoded),
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct ServerEndWrapper {
    pub value: ::fidl_next::ServerEnd<::fidl_next::fuchsia::zx::Channel, crate::DriverProtocol>,
}

impl ::fidl_next::Encodable for ServerEndWrapper {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireServerEndWrapper> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <::fidl_next::ServerEnd<
                ::fidl_next::fuchsia::zx::Channel,
                crate::DriverProtocol,
            > as ::fidl_next::Encodable>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    type Encoded = WireServerEndWrapper;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ServerEndWrapper
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                value,

            } = out;
        }

        ::fidl_next::Encode::encode(self.value, encoder, value)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ServerEndWrapper {
    type EncodedOption = ::fidl_next::WireBox<'static, WireServerEndWrapper>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ServerEndWrapper
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ServerEndWrapper: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireServerEndWrapper> for ServerEndWrapper {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireServerEndWrapper, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <::fidl_next::ServerEnd<
                ::fidl_next::fuchsia::zx::Channel,
                crate::DriverProtocol,
            > as ::fidl_next::FromWire<
                ::fidl_next::ServerEnd<::fidl_next::fuchsia::WireChannel, crate::DriverProtocol>,
            >>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireServerEndWrapper) -> Self {
        Self { value: ::fidl_next::FromWire::from_wire(wire.value) }
    }
}

/// The wire type corresponding to [`ServerEndWrapper`].
#[derive(Debug)]
#[repr(C)]
pub struct WireServerEndWrapper {
    pub value: ::fidl_next::ServerEnd<::fidl_next::fuchsia::WireChannel, crate::DriverProtocol>,
}

unsafe impl ::fidl_next::Wire for WireServerEndWrapper {
    type Decoded<'de> = WireServerEndWrapper;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireServerEndWrapper
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut value,

            } = slot;
        }

        ::fidl_next::Decode::decode(value.as_mut(), decoder)?;

        Ok(())
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `DriverProtocol`
    /// protocol.
    pub type DriverProtocolProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::DriverProtocol>;

    #[cfg(feature = "driver")]
    impl ::core::convert::From<crate::DriverProtocol>
        for ::fidl_test_driverhandle::DriverProtocolMarker
    {
        #[inline]
        fn from(_: crate::DriverProtocol) -> Self {
            Self
        }
    }
}
