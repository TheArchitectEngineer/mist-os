// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct LocalTablePayload {
    pub a: Option<u16>,
}

impl LocalTablePayload {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for LocalTablePayload {
    type Encoded = WireLocalTablePayload;
}

impl<___E> ::fidl_next::Encode<___E> for LocalTablePayload
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireLocalTablePayload { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireLocalTablePayload> for LocalTablePayload {
    #[inline]
    fn take_from(from: &WireLocalTablePayload) -> Self {
        Self { a: from.a().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`LocalTablePayload`].
#[repr(C)]
pub struct WireLocalTablePayload {
    table: ::fidl_next::WireTable,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireLocalTablePayload
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl WireLocalTablePayload {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireLocalTablePayload {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("LocalTablePayload").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum LocalUnionPayload {
    B(bool),

    UnknownOrdinal_(u64),
}

impl ::fidl_next::Encodable for LocalUnionPayload {
    type Encoded = WireLocalUnionPayload;
}

impl<___E> ::fidl_next::Encode<___E> for LocalUnionPayload
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireLocalUnionPayload { raw } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<LocalUnionPayload> {
    type EncodedOption = WireOptionalLocalUnionPayload;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<LocalUnionPayload>
where
    ___E: ?Sized,
    LocalUnionPayload: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalLocalUnionPayload { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireLocalUnionPayload> for LocalUnionPayload {
    #[inline]
    fn take_from(from: &WireLocalUnionPayload) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalLocalUnionPayload> for Option<Box<LocalUnionPayload>> {
    #[inline]
    fn take_from(from: &WireOptionalLocalUnionPayload) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`LocalUnionPayload`].
#[repr(transparent)]
pub struct WireLocalUnionPayload {
    raw: ::fidl_next::RawWireUnion,
}

pub mod local_union_payload {
    pub enum Ref<'union> {
        B(&'union bool),

        UnknownOrdinal_(u64),
    }
}

impl WireLocalUnionPayload {
    pub fn as_ref(&self) -> crate::local_union_payload::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::local_union_payload::Ref::B(unsafe { self.raw.get().deref_unchecked() }),

            unknown => crate::local_union_payload::Ref::UnknownOrdinal_(unknown),
        }
    }
}

impl Clone for WireLocalUnionPayload {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireLocalUnionPayload
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireLocalUnionPayload {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalLocalUnionPayload {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalLocalUnionPayload {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireLocalUnionPayload> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalLocalUnionPayload {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalLocalUnionPayload { raw: ::fidl_next::RawWireUnion::absent() };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalLocalUnionPayload
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalLocalUnionPayload {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayImportWithErrorResult {
    Response(::fidl_next_test_protocollayouts_imported::ImportUnionPayload),

    Err(u32),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayImportWithErrorResult {
    type Encoded = WireMainProtocolTwoWayImportWithErrorResult;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayImportWithErrorResult
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayImportWithErrorResult { raw } = slot);

        match self {
            Self::Response(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                ::fidl_next_test_protocollayouts_imported::ImportUnionPayload,
            >(value, 1, encoder, raw)?,

            Self::Err(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolTwoWayImportWithErrorResult> {
    type EncodedOption = WireOptionalMainProtocolTwoWayImportWithErrorResult;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolTwoWayImportWithErrorResult>
where
    ___E: ?Sized,
    MainProtocolTwoWayImportWithErrorResult: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayImportWithErrorResult { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolTwoWayImportWithErrorResult>
    for MainProtocolTwoWayImportWithErrorResult
{
    #[inline]
    fn take_from(from: &WireMainProtocolTwoWayImportWithErrorResult) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            2 => Self::Err(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalMainProtocolTwoWayImportWithErrorResult>
    for Option<Box<MainProtocolTwoWayImportWithErrorResult>>
{
    #[inline]
    fn take_from(from: &WireOptionalMainProtocolTwoWayImportWithErrorResult) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayImportWithErrorResult`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayImportWithErrorResult {
    raw: ::fidl_next::RawWireUnion,
}

pub mod main_protocol_two_way_import_with_error_result {
    pub enum Ref<'union> {
        Response(&'union ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload),

        Err(&'union ::fidl_next::WireU32),
    }
}

impl WireMainProtocolTwoWayImportWithErrorResult {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_import_with_error_result::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_import_with_error_result::Ref::Response(unsafe {
                self.raw.get().deref_unchecked()
            }),

            2 => crate::main_protocol_two_way_import_with_error_result::Ref::Err(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayImportWithErrorResult
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
            >(raw, decoder)?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireU32>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayImportWithErrorResult {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<
                            ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload
                        >().fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireU32>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayImportWithErrorResult {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalMainProtocolTwoWayImportWithErrorResult {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayImportWithErrorResult> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalMainProtocolTwoWayImportWithErrorResult
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
            >(raw, decoder)?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireU32>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolTwoWayImportWithErrorResult {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayLocalWithErrorResult {
    Response(crate::LocalUnionPayload),

    Err(u32),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayLocalWithErrorResult {
    type Encoded = WireMainProtocolTwoWayLocalWithErrorResult;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayLocalWithErrorResult
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayLocalWithErrorResult { raw } = slot);

        match self {
            Self::Response(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::LocalUnionPayload,
            >(value, 1, encoder, raw)?,

            Self::Err(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolTwoWayLocalWithErrorResult> {
    type EncodedOption = WireOptionalMainProtocolTwoWayLocalWithErrorResult;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolTwoWayLocalWithErrorResult>
where
    ___E: ?Sized,
    MainProtocolTwoWayLocalWithErrorResult: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayLocalWithErrorResult { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolTwoWayLocalWithErrorResult>
    for MainProtocolTwoWayLocalWithErrorResult
{
    #[inline]
    fn take_from(from: &WireMainProtocolTwoWayLocalWithErrorResult) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            2 => Self::Err(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalMainProtocolTwoWayLocalWithErrorResult>
    for Option<Box<MainProtocolTwoWayLocalWithErrorResult>>
{
    #[inline]
    fn take_from(from: &WireOptionalMainProtocolTwoWayLocalWithErrorResult) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayLocalWithErrorResult`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayLocalWithErrorResult {
    raw: ::fidl_next::RawWireUnion,
}

pub mod main_protocol_two_way_local_with_error_result {
    pub enum Ref<'union> {
        Response(&'union crate::WireLocalUnionPayload),

        Err(&'union ::fidl_next::WireU32),
    }
}

impl WireMainProtocolTwoWayLocalWithErrorResult {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_local_with_error_result::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_local_with_error_result::Ref::Response(unsafe {
                self.raw.get().deref_unchecked()
            }),

            2 => crate::main_protocol_two_way_local_with_error_result::Ref::Err(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayLocalWithErrorResult
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireLocalUnionPayload>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireU32>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayLocalWithErrorResult {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<crate::WireLocalUnionPayload>().fmt(f) },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireU32>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayLocalWithErrorResult {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalMainProtocolTwoWayLocalWithErrorResult {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayLocalWithErrorResult> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalMainProtocolTwoWayLocalWithErrorResult
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireLocalUnionPayload>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireU32>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolTwoWayLocalWithErrorResult {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct MainProtocolOneWayAnonRequest {
    pub a: Option<u16>,
}

impl MainProtocolOneWayAnonRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolOneWayAnonRequest {
    type Encoded = WireMainProtocolOneWayAnonRequest;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolOneWayAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolOneWayAnonRequest { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolOneWayAnonRequest> for MainProtocolOneWayAnonRequest {
    #[inline]
    fn take_from(from: &WireMainProtocolOneWayAnonRequest) -> Self {
        Self { a: from.a().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`MainProtocolOneWayAnonRequest`].
#[repr(C)]
pub struct WireMainProtocolOneWayAnonRequest {
    table: ::fidl_next::WireTable,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolOneWayAnonRequest
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl WireMainProtocolOneWayAnonRequest {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireMainProtocolOneWayAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolOneWayAnonRequest").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayAnonRequest {
    B(bool),

    UnknownOrdinal_(u64),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonRequest {
    type Encoded = WireMainProtocolTwoWayAnonRequest;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonRequest { raw } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolTwoWayAnonRequest> {
    type EncodedOption = WireOptionalMainProtocolTwoWayAnonRequest;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolTwoWayAnonRequest>
where
    ___E: ?Sized,
    MainProtocolTwoWayAnonRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayAnonRequest { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonRequest> for MainProtocolTwoWayAnonRequest {
    #[inline]
    fn take_from(from: &WireMainProtocolTwoWayAnonRequest) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalMainProtocolTwoWayAnonRequest>
    for Option<Box<MainProtocolTwoWayAnonRequest>>
{
    #[inline]
    fn take_from(from: &WireOptionalMainProtocolTwoWayAnonRequest) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonRequest`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayAnonRequest {
    raw: ::fidl_next::RawWireUnion,
}

pub mod main_protocol_two_way_anon_request {
    pub enum Ref<'union> {
        B(&'union bool),

        UnknownOrdinal_(u64),
    }
}

impl WireMainProtocolTwoWayAnonRequest {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_anon_request::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_anon_request::Ref::B(unsafe {
                self.raw.get().deref_unchecked()
            }),

            unknown => crate::main_protocol_two_way_anon_request::Ref::UnknownOrdinal_(unknown),
        }
    }
}

impl Clone for WireMainProtocolTwoWayAnonRequest {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayAnonRequest {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalMainProtocolTwoWayAnonRequest {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayAnonRequest> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalMainProtocolTwoWayAnonRequest {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalMainProtocolTwoWayAnonRequest {
                raw: ::fidl_next::RawWireUnion::absent(),
            };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalMainProtocolTwoWayAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolTwoWayAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct MainProtocolTwoWayAnonResponse {
    pub a: Option<u16>,
}

impl MainProtocolTwoWayAnonResponse {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonResponse {
    type Encoded = WireMainProtocolTwoWayAnonResponse;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonResponse { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonResponse> for MainProtocolTwoWayAnonResponse {
    #[inline]
    fn take_from(from: &WireMainProtocolTwoWayAnonResponse) -> Self {
        Self { a: from.a().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonResponse`].
#[repr(C)]
pub struct WireMainProtocolTwoWayAnonResponse {
    table: ::fidl_next::WireTable,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonResponse
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl WireMainProtocolTwoWayAnonResponse {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolTwoWayAnonResponse").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub struct MainProtocolTwoWayAnonWithErrorRequest {
    pub a: Option<u16>,
}

impl MainProtocolTwoWayAnonWithErrorRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonWithErrorRequest {
    type Encoded = WireMainProtocolTwoWayAnonWithErrorRequest;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonWithErrorRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonWithErrorRequest { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonWithErrorRequest>
    for MainProtocolTwoWayAnonWithErrorRequest
{
    #[inline]
    fn take_from(from: &WireMainProtocolTwoWayAnonWithErrorRequest) -> Self {
        Self { a: from.a().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonWithErrorRequest`].
#[repr(C)]
pub struct WireMainProtocolTwoWayAnonWithErrorRequest {
    table: ::fidl_next::WireTable,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonWithErrorRequest
where
    ___D: ::fidl_next::Decoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireU16>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl WireMainProtocolTwoWayAnonWithErrorRequest {
    pub fn a(&self) -> Option<&::fidl_next::WireU16> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonWithErrorRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolTwoWayAnonWithErrorRequest").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayAnonWithErrorResponse {
    B(bool),

    UnknownOrdinal_(u64),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonWithErrorResponse {
    type Encoded = WireMainProtocolTwoWayAnonWithErrorResponse;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonWithErrorResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonWithErrorResponse { raw } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolTwoWayAnonWithErrorResponse> {
    type EncodedOption = WireOptionalMainProtocolTwoWayAnonWithErrorResponse;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolTwoWayAnonWithErrorResponse>
where
    ___E: ?Sized,
    MainProtocolTwoWayAnonWithErrorResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayAnonWithErrorResponse { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonWithErrorResponse>
    for MainProtocolTwoWayAnonWithErrorResponse
{
    #[inline]
    fn take_from(from: &WireMainProtocolTwoWayAnonWithErrorResponse) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalMainProtocolTwoWayAnonWithErrorResponse>
    for Option<Box<MainProtocolTwoWayAnonWithErrorResponse>>
{
    #[inline]
    fn take_from(from: &WireOptionalMainProtocolTwoWayAnonWithErrorResponse) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonWithErrorResponse`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayAnonWithErrorResponse {
    raw: ::fidl_next::RawWireUnion,
}

pub mod main_protocol_two_way_anon_with_error_response {
    pub enum Ref<'union> {
        B(&'union bool),

        UnknownOrdinal_(u64),
    }
}

impl WireMainProtocolTwoWayAnonWithErrorResponse {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_anon_with_error_response::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_anon_with_error_response::Ref::B(unsafe {
                self.raw.get().deref_unchecked()
            }),

            unknown => {
                crate::main_protocol_two_way_anon_with_error_response::Ref::UnknownOrdinal_(unknown)
            }
        }
    }
}

impl Clone for WireMainProtocolTwoWayAnonWithErrorResponse {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonWithErrorResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonWithErrorResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayAnonWithErrorResponse> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
                raw: ::fidl_next::RawWireUnion::absent(),
            };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalMainProtocolTwoWayAnonWithErrorResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayAnonWithErrorResult {
    Response(crate::MainProtocolTwoWayAnonWithErrorResponse),

    Err(u32),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonWithErrorResult {
    type Encoded = WireMainProtocolTwoWayAnonWithErrorResult;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonWithErrorResult
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonWithErrorResult { raw } = slot);

        match self {
            Self::Response(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::MainProtocolTwoWayAnonWithErrorResponse,
            >(value, 1, encoder, raw)?,

            Self::Err(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolTwoWayAnonWithErrorResult> {
    type EncodedOption = WireOptionalMainProtocolTwoWayAnonWithErrorResult;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolTwoWayAnonWithErrorResult>
where
    ___E: ?Sized,
    MainProtocolTwoWayAnonWithErrorResult: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayAnonWithErrorResult { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonWithErrorResult>
    for MainProtocolTwoWayAnonWithErrorResult
{
    #[inline]
    fn take_from(from: &WireMainProtocolTwoWayAnonWithErrorResult) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            2 => Self::Err(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalMainProtocolTwoWayAnonWithErrorResult>
    for Option<Box<MainProtocolTwoWayAnonWithErrorResult>>
{
    #[inline]
    fn take_from(from: &WireOptionalMainProtocolTwoWayAnonWithErrorResult) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonWithErrorResult`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayAnonWithErrorResult {
    raw: ::fidl_next::RawWireUnion,
}

pub mod main_protocol_two_way_anon_with_error_result {
    pub enum Ref<'union> {
        Response(&'union crate::WireMainProtocolTwoWayAnonWithErrorResponse),

        Err(&'union ::fidl_next::WireU32),
    }
}

impl WireMainProtocolTwoWayAnonWithErrorResult {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_anon_with_error_result::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_anon_with_error_result::Ref::Response(unsafe {
                self.raw.get().deref_unchecked()
            }),

            2 => crate::main_protocol_two_way_anon_with_error_result::Ref::Err(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonWithErrorResult
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                crate::WireMainProtocolTwoWayAnonWithErrorResponse,
            >(raw, decoder)?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireU32>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonWithErrorResult {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw
                    .get()
                    .deref_unchecked::<crate::WireMainProtocolTwoWayAnonWithErrorResponse>()
                    .fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireU32>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayAnonWithErrorResult {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalMainProtocolTwoWayAnonWithErrorResult {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayAnonWithErrorResult> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalMainProtocolTwoWayAnonWithErrorResult
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                crate::WireMainProtocolTwoWayAnonWithErrorResponse,
            >(raw, decoder)?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireU32>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolTwoWayAnonWithErrorResult {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolOnAnonRequest {
    B(bool),

    UnknownOrdinal_(u64),
}

impl ::fidl_next::Encodable for MainProtocolOnAnonRequest {
    type Encoded = WireMainProtocolOnAnonRequest;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolOnAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolOnAnonRequest { raw } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolOnAnonRequest> {
    type EncodedOption = WireOptionalMainProtocolOnAnonRequest;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolOnAnonRequest>
where
    ___E: ?Sized,
    MainProtocolOnAnonRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolOnAnonRequest { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolOnAnonRequest> for MainProtocolOnAnonRequest {
    #[inline]
    fn take_from(from: &WireMainProtocolOnAnonRequest) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalMainProtocolOnAnonRequest>
    for Option<Box<MainProtocolOnAnonRequest>>
{
    #[inline]
    fn take_from(from: &WireOptionalMainProtocolOnAnonRequest) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolOnAnonRequest`].
#[repr(transparent)]
pub struct WireMainProtocolOnAnonRequest {
    raw: ::fidl_next::RawWireUnion,
}

pub mod main_protocol_on_anon_request {
    pub enum Ref<'union> {
        B(&'union bool),

        UnknownOrdinal_(u64),
    }
}

impl WireMainProtocolOnAnonRequest {
    pub fn as_ref(&self) -> crate::main_protocol_on_anon_request::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_on_anon_request::Ref::B(unsafe {
                self.raw.get().deref_unchecked()
            }),

            unknown => crate::main_protocol_on_anon_request::Ref::UnknownOrdinal_(unknown),
        }
    }
}

impl Clone for WireMainProtocolOnAnonRequest {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolOnAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolOnAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolOnAnonRequest {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalMainProtocolOnAnonRequest {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolOnAnonRequest> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalMainProtocolOnAnonRequest {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalMainProtocolOnAnonRequest {
                raw: ::fidl_next::RawWireUnion::absent(),
            };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<bool>() } },

            _ => Self { raw: unsafe { self.raw.clone_unchecked::<()>() } },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalMainProtocolOnAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolOnAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

/// The type corresponding to the MainProtocol protocol.
#[derive(Debug)]
pub struct MainProtocol;

pub mod main_protocol {

    pub struct OneWayAnonComposed;

    impl ::fidl_next::Method for OneWayAnonComposed {
        const ORDINAL: u64 = 467706262354916833;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolOneWayAnonComposedRequest;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayAnonComposed;

    impl ::fidl_next::Method for TwoWayAnonComposed {
        const ORDINAL: u64 = 1634702755099390832;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedRequest;

        type Response = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedResponse;
    }

    pub struct TwoWayAnonComposedWithError;

    impl ::fidl_next::Method for TwoWayAnonComposedWithError {
        const ORDINAL: u64 = 3374101322700362141;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedWithErrorRequest;

        type Response = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedWithErrorResult;
    }

    pub struct OnAnonComposed;

    impl ::fidl_next::Method for OnAnonComposed {
        const ORDINAL: u64 = 9198778981238868491;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response =
            ::fidl_next_test_protocollayouts_imported::WireComposedProtocolOnAnonComposedRequest;
    }

    pub struct OneWayNamedComposed;

    impl ::fidl_next::Method for OneWayNamedComposed {
        const ORDINAL: u64 = 6735359826241449560;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayNamedComposed;

    impl ::fidl_next::Method for TwoWayNamedComposed {
        const ORDINAL: u64 = 1110122450485917712;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload;

        type Response = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload;
    }

    pub struct TwoWayNamedComposedWithError;

    impl ::fidl_next::Method for TwoWayNamedComposedWithError {
        const ORDINAL: u64 = 3520341666774118271;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload;

        type Response = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayNamedComposedWithErrorResult;
    }

    pub struct OnNamedComposed;

    impl ::fidl_next::Method for OnNamedComposed {
        const ORDINAL: u64 = 6802961197456477674;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload;
    }

    pub struct OneWayImport;

    impl ::fidl_next::Method for OneWayImport {
        const ORDINAL: u64 = 374039999976906043;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayImport;

    impl ::fidl_next::Method for TwoWayImport {
        const ORDINAL: u64 = 3167860988423964164;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload;

        type Response = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload;
    }

    pub struct TwoWayImportWithError;

    impl ::fidl_next::Method for TwoWayImportWithError {
        const ORDINAL: u64 = 4837028007581646602;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload;

        type Response = crate::WireMainProtocolTwoWayImportWithErrorResult;
    }

    pub struct OnImport;

    impl ::fidl_next::Method for OnImport {
        const ORDINAL: u64 = 6584793811321990352;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload;
    }

    pub struct OneWayLocal;

    impl ::fidl_next::Method for OneWayLocal {
        const ORDINAL: u64 = 6085941264859402051;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireLocalTablePayload;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayLocal;

    impl ::fidl_next::Method for TwoWayLocal {
        const ORDINAL: u64 = 7763901300032164763;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireLocalUnionPayload;

        type Response = crate::WireLocalTablePayload;
    }

    pub struct TwoWayLocalWithError;

    impl ::fidl_next::Method for TwoWayLocalWithError {
        const ORDINAL: u64 = 5609487496960056151;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireLocalTablePayload;

        type Response = crate::WireMainProtocolTwoWayLocalWithErrorResult;
    }

    pub struct OnLocal;

    impl ::fidl_next::Method for OnLocal {
        const ORDINAL: u64 = 4199259762307646332;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireLocalUnionPayload;
    }

    pub struct OneWayAnon;

    impl ::fidl_next::Method for OneWayAnon {
        const ORDINAL: u64 = 4203317713771984620;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireMainProtocolOneWayAnonRequest;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayAnon;

    impl ::fidl_next::Method for TwoWayAnon {
        const ORDINAL: u64 = 7435080039097281487;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireMainProtocolTwoWayAnonRequest;

        type Response = crate::WireMainProtocolTwoWayAnonResponse;
    }

    pub struct TwoWayAnonWithError;

    impl ::fidl_next::Method for TwoWayAnonWithError {
        const ORDINAL: u64 = 7770394869745610225;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireMainProtocolTwoWayAnonWithErrorRequest;

        type Response = crate::WireMainProtocolTwoWayAnonWithErrorResult;
    }

    pub struct OnAnon;

    impl ::fidl_next::Method for OnAnon {
        const ORDINAL: u64 = 7275479350674227467;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireMainProtocolOnAnonRequest;
    }
}

/// A helper trait for the `MainProtocol` client sender.
pub trait MainProtocolClientSender {
    type Transport: ::fidl_next::Transport;

    fn one_way_anon_composed<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolOneWayAnonComposedRequest,
                        >;

    fn two_way_anon_composed<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<
                            '_,
                            Self::Transport,
                            main_protocol::TwoWayAnonComposed,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedRequest,
                        >;

    fn two_way_anon_composed_with_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<
                            '_,
                            Self::Transport,
                            main_protocol::TwoWayAnonComposedWithError,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedWithErrorRequest,
                        >;

    fn one_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload,
        >;

    fn two_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayNamedComposed>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
        >;

    fn two_way_named_composed_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<
            '_,
            Self::Transport,
            main_protocol::TwoWayNamedComposedWithError,
        >,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload,
        >;

    fn one_way_import<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload,
        >;

    fn two_way_import<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayImport>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
        >;

    fn two_way_import_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayImportWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload,
        >;

    fn one_way_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalTablePayload,
        >;

    fn two_way_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayLocal>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalUnionPayload,
        >;

    fn two_way_local_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayLocalWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalTablePayload,
        >;

    fn one_way_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolOneWayAnonRequest,
        >;

    fn two_way_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnon>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolTwoWayAnonRequest,
        >;

    fn two_way_anon_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnonWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolTwoWayAnonWithErrorRequest,
        >;
}

impl<___T> MainProtocolClientSender for ::fidl_next::ClientSender<___T, MainProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;







                    fn one_way_anon_composed<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolOneWayAnonComposedRequest,
                        >,
                    {
        self.as_untyped().send_one_way(467706262354916833, request)
    }








                    fn two_way_anon_composed<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnonComposed>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedRequest,
                        >,
                    {
        self.as_untyped()
            .send_two_way(1634702755099390832, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }








                    fn two_way_anon_composed_with_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnonComposedWithError>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedWithErrorRequest,
                        >,
                    {
        self.as_untyped()
            .send_two_way(3374101322700362141, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn one_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload,
        >,
    {
        self.as_untyped().send_one_way(6735359826241449560, request)
    }

    fn two_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayNamedComposed>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
        >,
    {
        self.as_untyped()
            .send_two_way(1110122450485917712, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_named_composed_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<
            '_,
            Self::Transport,
            main_protocol::TwoWayNamedComposedWithError,
        >,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload,
        >,
    {
        self.as_untyped()
            .send_two_way(3520341666774118271, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn one_way_import<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload,
        >,
    {
        self.as_untyped().send_one_way(374039999976906043, request)
    }

    fn two_way_import<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayImport>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
        >,
    {
        self.as_untyped()
            .send_two_way(3167860988423964164, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_import_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayImportWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportTablePayload,
        >,
    {
        self.as_untyped()
            .send_two_way(4837028007581646602, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn one_way_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalTablePayload,
        >,
    {
        self.as_untyped().send_one_way(6085941264859402051, request)
    }

    fn two_way_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayLocal>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalUnionPayload,
        >,
    {
        self.as_untyped()
            .send_two_way(7763901300032164763, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_local_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayLocalWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalTablePayload,
        >,
    {
        self.as_untyped()
            .send_two_way(5609487496960056151, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn one_way_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolOneWayAnonRequest,
        >,
    {
        self.as_untyped().send_one_way(4203317713771984620, request)
    }

    fn two_way_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnon>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolTwoWayAnonRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(7435080039097281487, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_anon_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnonWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolTwoWayAnonWithErrorRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(7770394869745610225, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the MainProtocol protocol.
///
/// See [`MainProtocol`] for more details.
pub trait MainProtocolClientHandler<___T: ::fidl_next::Transport> {
    fn on_anon_composed(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, MainProtocol>,

        message: ::fidl_next::ResponseBuffer<___T, main_protocol::OnAnonComposed>,
    );

    fn on_named_composed(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, MainProtocol>,

        message: ::fidl_next::ResponseBuffer<___T, main_protocol::OnNamedComposed>,
    );

    fn on_import(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, MainProtocol>,

        message: ::fidl_next::ResponseBuffer<___T, main_protocol::OnImport>,
    );

    fn on_local(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, MainProtocol>,

        message: ::fidl_next::ResponseBuffer<___T, main_protocol::OnLocal>,
    );

    fn on_anon(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, MainProtocol>,

        message: ::fidl_next::ResponseBuffer<___T, main_protocol::OnAnon>,
    );
}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for MainProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: MainProtocolClientHandler<___T>,




            ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedResponse:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedWithErrorResult:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireComposedProtocolOnAnonComposedRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,





            ::fidl_next_test_protocollayouts_imported::WireImportTablePayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayNamedComposedWithErrorResult:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,





            ::fidl_next_test_protocollayouts_imported::WireImportTablePayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            crate::WireMainProtocolTwoWayImportWithErrorResult:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,





            crate::WireLocalTablePayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            crate::WireMainProtocolTwoWayLocalWithErrorResult:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            crate::WireLocalUnionPayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,





            crate::WireMainProtocolTwoWayAnonResponse:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            crate::WireMainProtocolTwoWayAnonWithErrorResult:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            crate::WireMainProtocolOnAnonRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,


{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {












                    9198778981238868491 => {

                            let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                            handler.on_anon_composed(sender, buffer);

                    }













                    6802961197456477674 => {

                            let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                            handler.on_named_composed(sender, buffer);

                    }













                    6584793811321990352 => {

                            let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                            handler.on_import(sender, buffer);

                    }













                    4199259762307646332 => {

                            let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                            handler.on_local(sender, buffer);

                    }













                    7275479350674227467 => {

                            let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                            handler.on_anon(sender, buffer);

                    }



                ordinal => {

                    sender.close();
                }

        }
    }
}

/// A helper trait for the `MainProtocol` server sender.
pub trait MainProtocolServerSender {
    type Transport: ::fidl_next::Transport;

    fn on_anon_composed<___R>(
                    &self,
                    request: &mut ___R,
                ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                where
                    ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                        Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolOnAnonComposedRequest,
                    >;

    fn on_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
        >;

    fn on_import<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
        >;

    fn on_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalUnionPayload,
        >;

    fn on_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolOnAnonRequest,
        >;
}

impl<___T> MainProtocolServerSender for ::fidl_next::ServerSender<___T, MainProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;


















                fn on_anon_composed<___R>(
                    &self,
                    request: &mut ___R,
                ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                where
                    ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                        Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedProtocolOnAnonComposedRequest,
                    >,
                {
        self.as_untyped().send_event(9198778981238868491, request)
    }

    fn on_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
        >,
    {
        self.as_untyped().send_event(6802961197456477674, request)
    }

    fn on_import<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
        >,
    {
        self.as_untyped().send_event(6584793811321990352, request)
    }

    fn on_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalUnionPayload,
        >,
    {
        self.as_untyped().send_event(4199259762307646332, request)
    }

    fn on_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolOnAnonRequest,
        >,
    {
        self.as_untyped().send_event(7275479350674227467, request)
    }
}

/// A server handler for the MainProtocol protocol.
///
/// See [`MainProtocol`] for more details.
pub trait MainProtocolServerHandler<___T: ::fidl_next::Transport> {
    fn one_way_anon_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::OneWayAnonComposed>,
    );

    fn two_way_anon_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayAnonComposed>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnonComposed>,
    );

    fn two_way_anon_composed_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayAnonComposedWithError>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnonComposedWithError>,
    );

    fn one_way_named_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::OneWayNamedComposed>,
    );

    fn two_way_named_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayNamedComposed>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayNamedComposed>,
    );

    fn two_way_named_composed_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayNamedComposedWithError>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayNamedComposedWithError>,
    );

    fn one_way_import(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::OneWayImport>,
    );

    fn two_way_import(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayImport>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayImport>,
    );

    fn two_way_import_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayImportWithError>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayImportWithError>,
    );

    fn one_way_local(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::OneWayLocal>,
    );

    fn two_way_local(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayLocal>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayLocal>,
    );

    fn two_way_local_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayLocalWithError>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayLocalWithError>,
    );

    fn one_way_anon(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::OneWayAnon>,
    );

    fn two_way_anon(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayAnon>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnon>,
    );

    fn two_way_anon_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::RequestBuffer<___T, main_protocol::TwoWayAnonWithError>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnonWithError>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for MainProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: MainProtocolServerHandler<___T>,


            ::fidl_next_test_protocollayouts_imported::WireComposedProtocolOneWayAnonComposedRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedWithErrorRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,





            ::fidl_next_test_protocollayouts_imported::WireImportTablePayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireImportTablePayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,





            ::fidl_next_test_protocollayouts_imported::WireImportTablePayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireImportUnionPayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireImportTablePayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,





            crate::WireLocalTablePayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            crate::WireLocalUnionPayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            crate::WireLocalTablePayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,





            crate::WireMainProtocolOneWayAnonRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            crate::WireMainProtocolTwoWayAnonRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            crate::WireMainProtocolTwoWayAnonWithErrorRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,




{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {



                    467706262354916833 => {

                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.one_way_anon_composed(sender, buffer);

                    }













                    6735359826241449560 => {

                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.one_way_named_composed(sender, buffer);

                    }













                    374039999976906043 => {

                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.one_way_import(sender, buffer);

                    }













                    6085941264859402051 => {

                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.one_way_local(sender, buffer);

                    }













                    4203317713771984620 => {

                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.one_way_anon(sender, buffer);

                    }












                ordinal => {

                    sender.close();
                }

        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {






                    1634702755099390832 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.two_way_anon_composed(sender, buffer, responder);

                    }




                    3374101322700362141 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.two_way_anon_composed_with_error(sender, buffer, responder);

                    }










                    1110122450485917712 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.two_way_named_composed(sender, buffer, responder);

                    }




                    3520341666774118271 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.two_way_named_composed_with_error(sender, buffer, responder);

                    }










                    3167860988423964164 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.two_way_import(sender, buffer, responder);

                    }




                    4837028007581646602 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.two_way_import_with_error(sender, buffer, responder);

                    }










                    7763901300032164763 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.two_way_local(sender, buffer, responder);

                    }




                    5609487496960056151 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.two_way_local_with_error(sender, buffer, responder);

                    }










                    7435080039097281487 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.two_way_anon(sender, buffer, responder);

                    }




                    7770394869745610225 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.two_way_anon_with_error(sender, buffer, responder);

                    }






                ordinal => {

                    sender.close();
                }

        }
    }
}

/// The type corresponding to the OpenProtocol protocol.
#[derive(Debug)]
pub struct OpenProtocol;

pub mod open_protocol {

    pub struct FlexibleOneWay;

    impl ::fidl_next::Method for FlexibleOneWay {
        const ORDINAL: u64 = 3516779973873009953;

        type Protocol = crate::OpenProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleOneWayRequest;

        type Response = ::fidl_next::Never;
    }

    pub struct FlexibleTwoWayNoError;

    impl ::fidl_next::Method for FlexibleTwoWayNoError {
        const ORDINAL: u64 = 5572735551219638488;

        type Protocol = crate::OpenProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayNoErrorRequest;

        type Response = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayNoErrorResult;
    }

    pub struct FlexibleTwoWayWithError;

    impl ::fidl_next::Method for FlexibleTwoWayWithError {
        const ORDINAL: u64 = 3504132377779779458;

        type Protocol = crate::OpenProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayWithErrorRequest;

        type Response = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayWithErrorResult;
    }

    pub struct FlexibleEvent;

    impl ::fidl_next::Method for FlexibleEvent {
        const ORDINAL: u64 = 9152311661656086484;

        type Protocol = crate::OpenProtocol;

        type Request = ::fidl_next::Never;

        type Response =
            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleEventRequest;
    }

    pub struct StrictOneWay;

    impl ::fidl_next::Method for StrictOneWay {
        const ORDINAL: u64 = 8790149921168801703;

        type Protocol = crate::OpenProtocol;

        type Request =
            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictOneWayRequest;

        type Response = ::fidl_next::Never;
    }

    pub struct StrictTwoWayNoError;

    impl ::fidl_next::Method for StrictTwoWayNoError {
        const ORDINAL: u64 = 3690935745864999300;

        type Protocol = crate::OpenProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayNoErrorRequest;

        type Response = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayNoErrorResponse;
    }

    pub struct StrictTwoWayWithError;

    impl ::fidl_next::Method for StrictTwoWayWithError {
        const ORDINAL: u64 = 5364624536440098871;

        type Protocol = crate::OpenProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayWithErrorRequest;

        type Response = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayWithErrorResult;
    }

    pub struct StrictEvent;

    impl ::fidl_next::Method for StrictEvent {
        const ORDINAL: u64 = 3921073878922106269;

        type Protocol = crate::OpenProtocol;

        type Request = ::fidl_next::Never;

        type Response =
            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictEventRequest;
    }

    pub struct FlexibleOneWayNamedPayload;

    impl ::fidl_next::Method for FlexibleOneWayNamedPayload {
        const ORDINAL: u64 = 1525606789639046512;

        type Protocol = crate::OpenProtocol;

        type Request = ::fidl_next_test_protocollayouts_imported::WireImportStructPayload;

        type Response = ::fidl_next::Never;
    }
}

/// A helper trait for the `OpenProtocol` client sender.
pub trait OpenProtocolClientSender {
    type Transport: ::fidl_next::Transport;

    fn flexible_one_way<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleOneWayRequest,
                        >;

    fn flexible_two_way_no_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<
                            '_,
                            Self::Transport,
                            open_protocol::FlexibleTwoWayNoError,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayNoErrorRequest,
                        >;

    fn flexible_two_way_with_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<
                            '_,
                            Self::Transport,
                            open_protocol::FlexibleTwoWayWithError,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayWithErrorRequest,
                        >;

    fn strict_one_way<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictOneWayRequest,
                        >;

    fn strict_two_way_no_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<
                            '_,
                            Self::Transport,
                            open_protocol::StrictTwoWayNoError,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayNoErrorRequest,
                        >;

    fn strict_two_way_with_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<
                            '_,
                            Self::Transport,
                            open_protocol::StrictTwoWayWithError,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayWithErrorRequest,
                        >;

    fn flexible_one_way_named_payload<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportStructPayload,
        >;
}

impl<___T> OpenProtocolClientSender for ::fidl_next::ClientSender<___T, OpenProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;







                    fn flexible_one_way<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleOneWayRequest,
                        >,
                    {
        self.as_untyped().send_one_way(3516779973873009953, request)
    }








                    fn flexible_two_way_no_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<'_, Self::Transport, open_protocol::FlexibleTwoWayNoError>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayNoErrorRequest,
                        >,
                    {
        self.as_untyped()
            .send_two_way(5572735551219638488, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }








                    fn flexible_two_way_with_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<'_, Self::Transport, open_protocol::FlexibleTwoWayWithError>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayWithErrorRequest,
                        >,
                    {
        self.as_untyped()
            .send_two_way(3504132377779779458, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }














                    fn strict_one_way<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictOneWayRequest,
                        >,
                    {
        self.as_untyped().send_one_way(8790149921168801703, request)
    }








                    fn strict_two_way_no_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<'_, Self::Transport, open_protocol::StrictTwoWayNoError>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayNoErrorRequest,
                        >,
                    {
        self.as_untyped()
            .send_two_way(3690935745864999300, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }








                    fn strict_two_way_with_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::ResponseFuture<'_, Self::Transport, open_protocol::StrictTwoWayWithError>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                            Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayWithErrorRequest,
                        >,
                    {
        self.as_untyped()
            .send_two_way(5364624536440098871, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn flexible_one_way_named_payload<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocollayouts_imported::WireImportStructPayload,
        >,
    {
        self.as_untyped().send_one_way(1525606789639046512, request)
    }
}

/// A client handler for the OpenProtocol protocol.
///
/// See [`OpenProtocol`] for more details.
pub trait OpenProtocolClientHandler<___T: ::fidl_next::Transport> {
    fn flexible_event(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, OpenProtocol>,

        message: ::fidl_next::ResponseBuffer<___T, open_protocol::FlexibleEvent>,
    );

    fn strict_event(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, OpenProtocol>,

        message: ::fidl_next::ResponseBuffer<___T, open_protocol::StrictEvent>,
    );

    fn on_unknown_interaction(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, OpenProtocol>,
        ordinal: u64,
    ) {
        sender.close();
    }
}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for OpenProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: OpenProtocolClientHandler<___T>,




            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayNoErrorResult:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayWithErrorResult:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleEventRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,





            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayNoErrorResponse:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayWithErrorResult:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictEventRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,




{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {












                    9152311661656086484 => {

                            let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                            handler.flexible_event(sender, buffer);

                    }













                    3921073878922106269 => {

                            let buffer = ::fidl_next::ResponseBuffer::from_untyped(buffer);
                            handler.strict_event(sender, buffer);

                    }






                ordinal => handler.on_unknown_interaction(sender, ordinal),

        }
    }
}

/// A helper trait for the `OpenProtocol` server sender.
pub trait OpenProtocolServerSender {
    type Transport: ::fidl_next::Transport;

    fn flexible_event<___R>(
                    &self,
                    request: &mut ___R,
                ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                where
                    ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                        Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleEventRequest,
                    >;

    fn strict_event<___R>(
                    &self,
                    request: &mut ___R,
                ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                where
                    ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                        Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictEventRequest,
                    >;
}

impl<___T> OpenProtocolServerSender for ::fidl_next::ServerSender<___T, OpenProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;


















                fn flexible_event<___R>(
                    &self,
                    request: &mut ___R,
                ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                where
                    ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                        Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleEventRequest,
                    >,
                {
        self.as_untyped().send_event(9152311661656086484, request)
    }



















                fn strict_event<___R>(
                    &self,
                    request: &mut ___R,
                ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
                where
                    ___R: ::fidl_next::Encode<
                            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
                        Encoded = ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictEventRequest,
                    >,
                {
        self.as_untyped().send_event(3921073878922106269, request)
    }
}

/// A server handler for the OpenProtocol protocol.
///
/// See [`OpenProtocol`] for more details.
pub trait OpenProtocolServerHandler<___T: ::fidl_next::Transport> {
    fn flexible_one_way(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, OpenProtocol>,

        request: ::fidl_next::RequestBuffer<___T, open_protocol::FlexibleOneWay>,
    );

    fn flexible_two_way_no_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, OpenProtocol>,

        request: ::fidl_next::RequestBuffer<___T, open_protocol::FlexibleTwoWayNoError>,

        responder: ::fidl_next::Responder<open_protocol::FlexibleTwoWayNoError>,
    );

    fn flexible_two_way_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, OpenProtocol>,

        request: ::fidl_next::RequestBuffer<___T, open_protocol::FlexibleTwoWayWithError>,

        responder: ::fidl_next::Responder<open_protocol::FlexibleTwoWayWithError>,
    );

    fn strict_one_way(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, OpenProtocol>,

        request: ::fidl_next::RequestBuffer<___T, open_protocol::StrictOneWay>,
    );

    fn strict_two_way_no_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, OpenProtocol>,

        request: ::fidl_next::RequestBuffer<___T, open_protocol::StrictTwoWayNoError>,

        responder: ::fidl_next::Responder<open_protocol::StrictTwoWayNoError>,
    );

    fn strict_two_way_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, OpenProtocol>,

        request: ::fidl_next::RequestBuffer<___T, open_protocol::StrictTwoWayWithError>,

        responder: ::fidl_next::Responder<open_protocol::StrictTwoWayWithError>,
    );

    fn flexible_one_way_named_payload(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, OpenProtocol>,

        request: ::fidl_next::RequestBuffer<___T, open_protocol::FlexibleOneWayNamedPayload>,
    );

    fn on_unknown_interaction(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, OpenProtocol>,
        ordinal: u64,
    ) {
        sender.close();
    }
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for OpenProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: OpenProtocolServerHandler<___T>,


            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleOneWayRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayNoErrorRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayWithErrorRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,





            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictOneWayRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayNoErrorRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,



            ::fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayWithErrorRequest:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,





            ::fidl_next_test_protocollayouts_imported::WireImportStructPayload:
                ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,


{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {



                    3516779973873009953 => {

                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.flexible_one_way(sender, buffer);

                    }













                    8790149921168801703 => {

                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.strict_one_way(sender, buffer);

                    }













                    1525606789639046512 => {

                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.flexible_one_way_named_payload(sender, buffer);

                    }



                ordinal => handler.on_unknown_interaction(sender, ordinal),

        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {






                    5572735551219638488 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.flexible_two_way_no_error(sender, buffer, responder);

                    }




                    3504132377779779458 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.flexible_two_way_with_error(sender, buffer, responder);

                    }










                    3690935745864999300 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.strict_two_way_no_error(sender, buffer, responder);

                    }




                    5364624536440098871 => {
                        let responder = ::fidl_next::Responder::from_untyped(responder);


                            let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                            handler.strict_two_way_with_error(sender, buffer, responder);

                    }









                ordinal => handler.on_unknown_interaction(sender, ordinal),

        }
    }
}

/// Commonly-used items that should usually be in scope, such as extension traits.
pub mod prelude {
    pub use super::{
        MainProtocolClientSender, MainProtocolServerSender, OpenProtocolClientSender,
        OpenProtocolServerSender,
    };
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `MainProtocol`
    /// protocol.
    pub type MainProtocolProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::MainProtocol>;

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `OpenProtocol`
    /// protocol.
    pub type OpenProtocolProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::OpenProtocol>;
}
