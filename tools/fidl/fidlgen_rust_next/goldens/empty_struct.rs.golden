// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
#[repr(C)]
pub struct Empty {}

impl ::fidl_next::Encodable for Empty {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireEmpty> =
        unsafe { ::fidl_next::CopyOptimization::enable_if(true) };

    type Encoded = WireEmpty;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for Empty
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {

            } = out;
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for Empty
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {

            } = out;
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Empty {
    type EncodedOption = ::fidl_next::WireBox<'static, WireEmpty>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Empty
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Empty: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for Empty
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Empty: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireEmpty> for Empty {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireEmpty, Self> =
        unsafe { ::fidl_next::CopyOptimization::enable_if(true) };

    #[inline]
    fn from_wire(wire: WireEmpty) -> Self {
        Self {}
    }
}

impl ::fidl_next::FromWireRef<WireEmpty> for Empty {
    #[inline]
    fn from_wire_ref(wire: &WireEmpty) -> Self {
        Self {}
    }
}

/// The wire type corresponding to [`Empty`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmpty {}

unsafe impl ::fidl_next::Wire for WireEmpty {
    type Decoded<'de> = WireEmpty;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireEmpty
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {

            } = slot;
        }

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct EmptyProtocolSendRequest {
    pub e: crate::Empty,
}

impl ::fidl_next::Encodable for EmptyProtocolSendRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireEmptyProtocolSendRequest> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <crate::Empty as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireEmptyProtocolSendRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for EmptyProtocolSendRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                e,

            } = out;
        }

        ::fidl_next::Encode::encode(self.e, encoder, e)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for EmptyProtocolSendRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                e,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.e, encoder, e)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for EmptyProtocolSendRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireEmptyProtocolSendRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for EmptyProtocolSendRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyProtocolSendRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for EmptyProtocolSendRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyProtocolSendRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireEmptyProtocolSendRequest> for EmptyProtocolSendRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireEmptyProtocolSendRequest, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <crate::Empty as ::fidl_next::FromWire<crate::WireEmpty>>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireEmptyProtocolSendRequest) -> Self {
        Self { e: ::fidl_next::FromWire::from_wire(wire.e) }
    }
}

impl ::fidl_next::FromWireRef<WireEmptyProtocolSendRequest> for EmptyProtocolSendRequest {
    #[inline]
    fn from_wire_ref(wire: &WireEmptyProtocolSendRequest) -> Self {
        Self { e: ::fidl_next::FromWireRef::from_wire_ref(&wire.e) }
    }
}

/// The wire type corresponding to [`EmptyProtocolSendRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolSendRequest {
    pub e: crate::WireEmpty,
}

unsafe impl ::fidl_next::Wire for WireEmptyProtocolSendRequest {
    type Decoded<'de> = WireEmptyProtocolSendRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireEmptyProtocolSendRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut e,

            } = slot;
        }

        ::fidl_next::Decode::decode(e.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct EmptyProtocolReceiveRequest {
    pub e: crate::Empty,
}

impl ::fidl_next::Encodable for EmptyProtocolReceiveRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireEmptyProtocolReceiveRequest> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <crate::Empty as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireEmptyProtocolReceiveRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for EmptyProtocolReceiveRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                e,

            } = out;
        }

        ::fidl_next::Encode::encode(self.e, encoder, e)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for EmptyProtocolReceiveRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                e,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.e, encoder, e)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for EmptyProtocolReceiveRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireEmptyProtocolReceiveRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for EmptyProtocolReceiveRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyProtocolReceiveRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for EmptyProtocolReceiveRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyProtocolReceiveRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireEmptyProtocolReceiveRequest> for EmptyProtocolReceiveRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireEmptyProtocolReceiveRequest, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <crate::Empty as ::fidl_next::FromWire<crate::WireEmpty>>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireEmptyProtocolReceiveRequest) -> Self {
        Self { e: ::fidl_next::FromWire::from_wire(wire.e) }
    }
}

impl ::fidl_next::FromWireRef<WireEmptyProtocolReceiveRequest> for EmptyProtocolReceiveRequest {
    #[inline]
    fn from_wire_ref(wire: &WireEmptyProtocolReceiveRequest) -> Self {
        Self { e: ::fidl_next::FromWireRef::from_wire_ref(&wire.e) }
    }
}

/// The wire type corresponding to [`EmptyProtocolReceiveRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolReceiveRequest {
    pub e: crate::WireEmpty,
}

unsafe impl ::fidl_next::Wire for WireEmptyProtocolReceiveRequest {
    type Decoded<'de> = WireEmptyProtocolReceiveRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireEmptyProtocolReceiveRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut e,

            } = slot;
        }

        ::fidl_next::Decode::decode(e.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct EmptyProtocolSendAndReceiveRequest {
    pub e: crate::Empty,
}

impl ::fidl_next::Encodable for EmptyProtocolSendAndReceiveRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        Self,
        WireEmptyProtocolSendAndReceiveRequest,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <crate::Empty as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireEmptyProtocolSendAndReceiveRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for EmptyProtocolSendAndReceiveRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                e,

            } = out;
        }

        ::fidl_next::Encode::encode(self.e, encoder, e)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for EmptyProtocolSendAndReceiveRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                e,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.e, encoder, e)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for EmptyProtocolSendAndReceiveRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireEmptyProtocolSendAndReceiveRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for EmptyProtocolSendAndReceiveRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyProtocolSendAndReceiveRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for EmptyProtocolSendAndReceiveRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyProtocolSendAndReceiveRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireEmptyProtocolSendAndReceiveRequest>
    for EmptyProtocolSendAndReceiveRequest
{
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        WireEmptyProtocolSendAndReceiveRequest,
        Self,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <crate::Empty as ::fidl_next::FromWire<crate::WireEmpty>>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireEmptyProtocolSendAndReceiveRequest) -> Self {
        Self { e: ::fidl_next::FromWire::from_wire(wire.e) }
    }
}

impl ::fidl_next::FromWireRef<WireEmptyProtocolSendAndReceiveRequest>
    for EmptyProtocolSendAndReceiveRequest
{
    #[inline]
    fn from_wire_ref(wire: &WireEmptyProtocolSendAndReceiveRequest) -> Self {
        Self { e: ::fidl_next::FromWireRef::from_wire_ref(&wire.e) }
    }
}

/// The wire type corresponding to [`EmptyProtocolSendAndReceiveRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolSendAndReceiveRequest {
    pub e: crate::WireEmpty,
}

unsafe impl ::fidl_next::Wire for WireEmptyProtocolSendAndReceiveRequest {
    type Decoded<'de> = WireEmptyProtocolSendAndReceiveRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireEmptyProtocolSendAndReceiveRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut e,

            } = slot;
        }

        ::fidl_next::Decode::decode(e.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct EmptyProtocolSendAndReceiveResponse {
    pub e: crate::Empty,
}

impl ::fidl_next::Encodable for EmptyProtocolSendAndReceiveResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        Self,
        WireEmptyProtocolSendAndReceiveResponse,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <crate::Empty as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireEmptyProtocolSendAndReceiveResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for EmptyProtocolSendAndReceiveResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                e,

            } = out;
        }

        ::fidl_next::Encode::encode(self.e, encoder, e)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for EmptyProtocolSendAndReceiveResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                e,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.e, encoder, e)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for EmptyProtocolSendAndReceiveResponse {
    type EncodedOption = ::fidl_next::WireBox<'static, WireEmptyProtocolSendAndReceiveResponse>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for EmptyProtocolSendAndReceiveResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyProtocolSendAndReceiveResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for EmptyProtocolSendAndReceiveResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyProtocolSendAndReceiveResponse: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireEmptyProtocolSendAndReceiveResponse>
    for EmptyProtocolSendAndReceiveResponse
{
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        WireEmptyProtocolSendAndReceiveResponse,
        Self,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <crate::Empty as ::fidl_next::FromWire<crate::WireEmpty>>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireEmptyProtocolSendAndReceiveResponse) -> Self {
        Self { e: ::fidl_next::FromWire::from_wire(wire.e) }
    }
}

impl ::fidl_next::FromWireRef<WireEmptyProtocolSendAndReceiveResponse>
    for EmptyProtocolSendAndReceiveResponse
{
    #[inline]
    fn from_wire_ref(wire: &WireEmptyProtocolSendAndReceiveResponse) -> Self {
        Self { e: ::fidl_next::FromWireRef::from_wire_ref(&wire.e) }
    }
}

/// The wire type corresponding to [`EmptyProtocolSendAndReceiveResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolSendAndReceiveResponse {
    pub e: crate::WireEmpty,
}

unsafe impl ::fidl_next::Wire for WireEmptyProtocolSendAndReceiveResponse {
    type Decoded<'de> = WireEmptyProtocolSendAndReceiveResponse;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireEmptyProtocolSendAndReceiveResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut e,

            } = slot;
        }

        ::fidl_next::Decode::decode(e.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the EmptyProtocol protocol.
#[derive(Debug)]
pub struct EmptyProtocol;

pub mod empty_protocol {
    pub mod prelude {
        pub use crate::{
            empty_protocol, EmptyProtocol, EmptyProtocolClientHandler, EmptyProtocolServerHandler,
        };

        pub use crate::EmptyProtocolReceiveRequest;

        pub use crate::EmptyProtocolSendAndReceiveRequest;

        pub use crate::EmptyProtocolSendAndReceiveResponse;

        pub use crate::EmptyProtocolSendRequest;
    }

    pub struct Send;

    impl ::fidl_next::Method for Send {
        const ORDINAL: u64 = 1378773277029173000;

        type Protocol = crate::EmptyProtocol;

        type Request = crate::WireEmptyProtocolSendRequest;

        type Response = ::fidl_next::Never;
    }

    pub struct Receive;

    impl ::fidl_next::Method for Receive {
        const ORDINAL: u64 = 2301564782476583487;

        type Protocol = crate::EmptyProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireEmptyProtocolReceiveRequest;
    }

    pub struct SendAndReceive;

    impl ::fidl_next::Method for SendAndReceive {
        const ORDINAL: u64 = 534401212734647530;

        type Protocol = crate::EmptyProtocol;

        type Request = crate::WireEmptyProtocolSendAndReceiveRequest;

        type Response = crate::WireEmptyProtocolSendAndReceiveResponse;
    }

    mod ___detail {

        pub struct Send<T0> {
            e: T0,
        }

        impl<T0> ::fidl_next::Encodable for Send<T0>
        where
            T0: ::fidl_next::Encodable<Encoded = crate::WireEmpty>,
        {
            type Encoded = crate::WireEmptyProtocolSendRequest;
        }

        unsafe impl<___E, T0> ::fidl_next::Encode<___E> for Send<T0>
        where
            ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

            T0: ::fidl_next::Encode<___E, Encoded = crate::WireEmpty>,
        {
            #[inline]
            fn encode(
                self,
                encoder: &mut ___E,
                out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
            ) -> Result<(), ::fidl_next::EncodeError> {
                ::fidl_next::munge! {
                    let Self::Encoded {
                        e,

                    } = out;
                }

                ::fidl_next::Encode::encode(self.e, encoder, e)?;

                Ok(())
            }
        }

        pub struct Receive<T0> {
            e: T0,
        }

        impl<T0> ::fidl_next::Encodable for Receive<T0>
        where
            T0: ::fidl_next::Encodable<Encoded = crate::WireEmpty>,
        {
            type Encoded = crate::WireEmptyProtocolReceiveRequest;
        }

        unsafe impl<___E, T0> ::fidl_next::Encode<___E> for Receive<T0>
        where
            ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

            T0: ::fidl_next::Encode<___E, Encoded = crate::WireEmpty>,
        {
            #[inline]
            fn encode(
                self,
                encoder: &mut ___E,
                out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
            ) -> Result<(), ::fidl_next::EncodeError> {
                ::fidl_next::munge! {
                    let Self::Encoded {
                        e,

                    } = out;
                }

                ::fidl_next::Encode::encode(self.e, encoder, e)?;

                Ok(())
            }
        }

        pub struct SendAndReceive<T0> {
            e: T0,
        }

        impl<T0> ::fidl_next::Encodable for SendAndReceive<T0>
        where
            T0: ::fidl_next::Encodable<Encoded = crate::WireEmpty>,
        {
            type Encoded = crate::WireEmptyProtocolSendAndReceiveRequest;
        }

        unsafe impl<___E, T0> ::fidl_next::Encode<___E> for SendAndReceive<T0>
        where
            ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

            T0: ::fidl_next::Encode<___E, Encoded = crate::WireEmpty>,
        {
            #[inline]
            fn encode(
                self,
                encoder: &mut ___E,
                out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
            ) -> Result<(), ::fidl_next::EncodeError> {
                ::fidl_next::munge! {
                    let Self::Encoded {
                        e,

                    } = out;
                }

                ::fidl_next::Encode::encode(self.e, encoder, e)?;

                Ok(())
            }
        }

        unsafe impl<___T> ::fidl_next::Protocol<___T> for crate::EmptyProtocol
        where
            ___T: ::fidl_next::Transport,
        {
            type ClientSender = EmptyProtocolClientSender<___T>;
            type ServerSender = EmptyProtocolServerSender<___T>;
        }

        /// The client sender for the `EmptyProtocol` protocol.
        pub struct EmptyProtocolClientSender<___T: ::fidl_next::Transport> {
            #[allow(dead_code)]
            sender: ::fidl_next::protocol::ClientSender<___T>,
        }

        impl<___T> EmptyProtocolClientSender<___T>
        where
            ___T: ::fidl_next::Transport,
        {
            pub fn send(
                &self,

                e: impl ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireEmpty,
                >,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                <___T as ::fidl_next::Transport>::SendBuffer:
                    ::fidl_next::encoder::InternalHandleEncoder,
            {
                self.send_with(Send { e })
            }

            pub fn send_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireEmptyProtocolSendRequest,
                >,
            {
                self.sender.send_one_way(1378773277029173000, request)
            }

            pub fn send_and_receive(
                &self,

                e: impl ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireEmpty,
                >,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::SendAndReceive, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                <___T as ::fidl_next::Transport>::SendBuffer:
                    ::fidl_next::encoder::InternalHandleEncoder,
            {
                self.send_and_receive_with(SendAndReceive { e })
            }

            pub fn send_and_receive_with<___R>(
                &self,
                request: ___R,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::SendAndReceive, ___T>,
                ::fidl_next::EncodeError,
            >
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireEmptyProtocolSendAndReceiveRequest,
                >,
            {
                self.sender
                    .send_two_way(534401212734647530, request)
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }
        }

        /// The server sender for the `EmptyProtocol` protocol.
        #[repr(transparent)]
        pub struct EmptyProtocolServerSender<___T: ::fidl_next::Transport> {
            sender: ::fidl_next::protocol::ServerSender<___T>,
        }

        impl<___T> EmptyProtocolServerSender<___T>
        where
            ___T: ::fidl_next::Transport,
        {
            pub fn receive(
                &self,

                e: impl ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireEmpty,
                >,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                <___T as ::fidl_next::Transport>::SendBuffer:
                    ::fidl_next::encoder::InternalHandleEncoder,
            {
                self.receive_with(Receive { e })
            }

            pub fn receive_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = <super::Receive as ::fidl_next::Method>::Response,
                >,
            {
                self.sender.send_event(2301564782476583487, request)
            }
        }
    }
}

/// A client handler for the EmptyProtocol protocol.
///
/// See [`EmptyProtocol`] for more details.
pub trait EmptyProtocolClientHandler<___T: ::fidl_next::Transport> {
    fn receive(
        &mut self,
        sender: &::fidl_next::ClientSender<EmptyProtocol, ___T>,

        event: ::fidl_next::Response<empty_protocol::Receive, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;
}

impl<___H, ___T> ::fidl_next::ClientProtocol<___H, ___T> for EmptyProtocol
where
    ___H: EmptyProtocolClientHandler<___T> + Send,
    ___T: ::fidl_next::Transport,

    <empty_protocol::Receive as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <empty_protocol::SendAndReceive as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    async fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            2301564782476583487 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.receive(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }
}

/// A server handler for the EmptyProtocol protocol.
///
/// See [`EmptyProtocol`] for more details.
pub trait EmptyProtocolServerHandler<___T: ::fidl_next::Transport> {
    fn send(
        &mut self,
        sender: &::fidl_next::ServerSender<EmptyProtocol, ___T>,

        request: ::fidl_next::Request<empty_protocol::Send, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn send_and_receive(
        &mut self,
        sender: &::fidl_next::ServerSender<EmptyProtocol, ___T>,

        request: ::fidl_next::Request<empty_protocol::SendAndReceive, ___T>,

        responder: ::fidl_next::Responder<empty_protocol::SendAndReceive>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;
}

impl<___H, ___T> ::fidl_next::ServerProtocol<___H, ___T> for EmptyProtocol
where
    ___H: EmptyProtocolServerHandler<___T> + Send,
    ___T: ::fidl_next::Transport,

    <empty_protocol::Send as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <empty_protocol::SendAndReceive as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    async fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            1378773277029173000 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.send(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }

    async fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            534401212734647530 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.send_and_receive(sender, decoded, responder).await,
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `EmptyProtocol`
    /// protocol.
    pub type EmptyProtocolProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::EmptyProtocol>;

    impl ::core::convert::From<crate::EmptyProtocol> for ::fidl_test_emptystruct::EmptyProtocolMarker {
        #[inline]
        fn from(_: crate::EmptyProtocol) -> Self {
            Self
        }
    }
}
