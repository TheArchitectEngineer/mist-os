// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub enum FlexibleFoo {
    S(String),

    I(i32),

    UnknownOrdinal_(u64),
}

impl ::fidl_next::Encodable for FlexibleFoo {
    type Encoded = WireFlexibleFoo;
}

impl<___E> ::fidl_next::Encode<___E> for FlexibleFoo
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireFlexibleFoo { raw } = slot);

        match self {
            Self::S(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, String>(value, 1, encoder, raw)?
            }

            Self::I(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, i32>(value, 2, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<FlexibleFoo> {
    type EncodedOption = WireOptionalFlexibleFoo;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<FlexibleFoo>
where
    ___E: ?Sized,
    FlexibleFoo: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalFlexibleFoo { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireFlexibleFoo> for FlexibleFoo {
    #[inline]
    fn take_from(from: &WireFlexibleFoo) -> Self {
        match from.raw.ordinal() {
            1 => Self::S(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            2 => Self::I(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalFlexibleFoo> for Option<Box<FlexibleFoo>> {
    #[inline]
    fn take_from(from: &WireOptionalFlexibleFoo) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`FlexibleFoo`].
#[repr(transparent)]
pub struct WireFlexibleFoo {
    raw: ::fidl_next::RawWireUnion,
}

pub mod flexible_foo {
    pub enum Ref<'union> {
        S(&'union ::fidl_next::WireString),

        I(&'union ::fidl_next::WireI32),

        UnknownOrdinal_(u64),
    }
}

impl WireFlexibleFoo {
    pub fn as_ref(&self) -> crate::flexible_foo::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::flexible_foo::Ref::S(unsafe { self.raw.get().deref_unchecked() }),

            2 => crate::flexible_foo::Ref::I(unsafe { self.raw.get().deref_unchecked() }),

            unknown => crate::flexible_foo::Ref::UnknownOrdinal_(unknown),
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireFlexibleFoo
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => {
                ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireString>(raw, decoder)?
            }

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireI32>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireFlexibleFoo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireString>().fmt(f) },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireI32>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalFlexibleFoo {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalFlexibleFoo {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireFlexibleFoo> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalFlexibleFoo
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => {
                ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireString>(raw, decoder)?
            }

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireI32>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalFlexibleFoo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum StrictFoo {
    S(String),

    I(i32),
}

impl ::fidl_next::Encodable for StrictFoo {
    type Encoded = WireStrictFoo;
}

impl<___E> ::fidl_next::Encode<___E> for StrictFoo
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireStrictFoo { raw } = slot);

        match self {
            Self::S(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, String>(value, 1, encoder, raw)?
            }

            Self::I(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, i32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StrictFoo> {
    type EncodedOption = WireOptionalStrictFoo;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StrictFoo>
where
    ___E: ?Sized,
    StrictFoo: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalStrictFoo { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStrictFoo> for StrictFoo {
    #[inline]
    fn take_from(from: &WireStrictFoo) -> Self {
        match from.raw.ordinal() {
            1 => Self::S(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            2 => Self::I(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalStrictFoo> for Option<Box<StrictFoo>> {
    #[inline]
    fn take_from(from: &WireOptionalStrictFoo) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`StrictFoo`].
#[repr(transparent)]
pub struct WireStrictFoo {
    raw: ::fidl_next::RawWireUnion,
}

pub mod strict_foo {
    pub enum Ref<'union> {
        S(&'union ::fidl_next::WireString),

        I(&'union ::fidl_next::WireI32),
    }
}

impl WireStrictFoo {
    pub fn as_ref(&self) -> crate::strict_foo::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::strict_foo::Ref::S(unsafe { self.raw.get().deref_unchecked() }),

            2 => crate::strict_foo::Ref::I(unsafe { self.raw.get().deref_unchecked() }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStrictFoo
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => {
                ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireString>(raw, decoder)?
            }

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireI32>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireStrictFoo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireString>().fmt(f) },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireI32>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalStrictFoo {
    raw: ::fidl_next::RawWireUnion,
}

impl WireOptionalStrictFoo {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireStrictFoo> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalStrictFoo
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => {
                ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireString>(raw, decoder)?
            }

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireI32>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalStrictFoo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestStrictResponseFlexibleRequest {
    pub s: crate::StrictFoo,
}

impl ::fidl_next::Encodable for ProtocolRequestStrictResponseFlexibleRequest {
    type Encoded = WireProtocolRequestStrictResponseFlexibleRequest;
}

impl<___E> ::fidl_next::Encode<___E> for ProtocolRequestStrictResponseFlexibleRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.s, encoder, s)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ProtocolRequestStrictResponseFlexibleRequest> {
    type EncodedOption = ::fidl_next::WireBox<WireProtocolRequestStrictResponseFlexibleRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ProtocolRequestStrictResponseFlexibleRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestStrictResponseFlexibleRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireProtocolRequestStrictResponseFlexibleRequest>
    for ProtocolRequestStrictResponseFlexibleRequest
{
    #[inline]
    fn take_from(from: &WireProtocolRequestStrictResponseFlexibleRequest) -> Self {
        Self { s: ::fidl_next::TakeFrom::take_from(&from.s) }
    }
}

/// The wire type corersponding to [`ProtocolRequestStrictResponseFlexibleRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestStrictResponseFlexibleRequest {
    pub s: crate::WireStrictFoo,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireProtocolRequestStrictResponseFlexibleRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,

            } = slot;
        }

        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestStrictResponseFlexibleResponse {
    pub f: crate::FlexibleFoo,
}

impl ::fidl_next::Encodable for ProtocolRequestStrictResponseFlexibleResponse {
    type Encoded = WireProtocolRequestStrictResponseFlexibleResponse;
}

impl<___E> ::fidl_next::Encode<___E> for ProtocolRequestStrictResponseFlexibleResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.f, encoder, f)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ProtocolRequestStrictResponseFlexibleResponse> {
    type EncodedOption = ::fidl_next::WireBox<WireProtocolRequestStrictResponseFlexibleResponse>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ProtocolRequestStrictResponseFlexibleResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestStrictResponseFlexibleResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireProtocolRequestStrictResponseFlexibleResponse>
    for ProtocolRequestStrictResponseFlexibleResponse
{
    #[inline]
    fn take_from(from: &WireProtocolRequestStrictResponseFlexibleResponse) -> Self {
        Self { f: ::fidl_next::TakeFrom::take_from(&from.f) }
    }
}

/// The wire type corersponding to [`ProtocolRequestStrictResponseFlexibleResponse`].
#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestStrictResponseFlexibleResponse {
    pub f: crate::WireFlexibleFoo,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireProtocolRequestStrictResponseFlexibleResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut f,

            } = slot;
        }

        ::fidl_next::Decode::decode(f.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestFlexibleResponseStrictRequest {
    pub s: crate::FlexibleFoo,
}

impl ::fidl_next::Encodable for ProtocolRequestFlexibleResponseStrictRequest {
    type Encoded = WireProtocolRequestFlexibleResponseStrictRequest;
}

impl<___E> ::fidl_next::Encode<___E> for ProtocolRequestFlexibleResponseStrictRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.s, encoder, s)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ProtocolRequestFlexibleResponseStrictRequest> {
    type EncodedOption = ::fidl_next::WireBox<WireProtocolRequestFlexibleResponseStrictRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ProtocolRequestFlexibleResponseStrictRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestFlexibleResponseStrictRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireProtocolRequestFlexibleResponseStrictRequest>
    for ProtocolRequestFlexibleResponseStrictRequest
{
    #[inline]
    fn take_from(from: &WireProtocolRequestFlexibleResponseStrictRequest) -> Self {
        Self { s: ::fidl_next::TakeFrom::take_from(&from.s) }
    }
}

/// The wire type corersponding to [`ProtocolRequestFlexibleResponseStrictRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestFlexibleResponseStrictRequest {
    pub s: crate::WireFlexibleFoo,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireProtocolRequestFlexibleResponseStrictRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,

            } = slot;
        }

        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestFlexibleResponseStrictResponse {
    pub f: crate::StrictFoo,
}

impl ::fidl_next::Encodable for ProtocolRequestFlexibleResponseStrictResponse {
    type Encoded = WireProtocolRequestFlexibleResponseStrictResponse;
}

impl<___E> ::fidl_next::Encode<___E> for ProtocolRequestFlexibleResponseStrictResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.f, encoder, f)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ProtocolRequestFlexibleResponseStrictResponse> {
    type EncodedOption = ::fidl_next::WireBox<WireProtocolRequestFlexibleResponseStrictResponse>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ProtocolRequestFlexibleResponseStrictResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestFlexibleResponseStrictResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireProtocolRequestFlexibleResponseStrictResponse>
    for ProtocolRequestFlexibleResponseStrictResponse
{
    #[inline]
    fn take_from(from: &WireProtocolRequestFlexibleResponseStrictResponse) -> Self {
        Self { f: ::fidl_next::TakeFrom::take_from(&from.f) }
    }
}

/// The wire type corersponding to [`ProtocolRequestFlexibleResponseStrictResponse`].
#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestFlexibleResponseStrictResponse {
    pub f: crate::WireStrictFoo,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireProtocolRequestFlexibleResponseStrictResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut f,

            } = slot;
        }

        ::fidl_next::Decode::decode(f.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the Protocol protocol.
#[derive(Debug)]
pub struct Protocol;

pub mod protocol {

    pub struct RequestStrictResponseFlexible;

    impl ::fidl_next::Method for RequestStrictResponseFlexible {
        const ORDINAL: u64 = 700529454616207123;

        type Protocol = crate::Protocol;

        type Request = crate::WireProtocolRequestStrictResponseFlexibleRequest;

        type Response = crate::WireProtocolRequestStrictResponseFlexibleResponse;
    }

    pub struct RequestFlexibleResponseStrict;

    impl ::fidl_next::Method for RequestFlexibleResponseStrict {
        const ORDINAL: u64 = 5191655763393883319;

        type Protocol = crate::Protocol;

        type Request = crate::WireProtocolRequestFlexibleResponseStrictRequest;

        type Response = crate::WireProtocolRequestFlexibleResponseStrictResponse;
    }
}

/// A helper trait for the `Protocol` client sender.
pub trait ProtocolClientSender {
    type Transport: ::fidl_next::Transport;

    fn request_strict_response_flexible<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, protocol::RequestStrictResponseFlexible>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireProtocolRequestStrictResponseFlexibleRequest,
        >;

    fn request_flexible_response_strict<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, protocol::RequestFlexibleResponseStrict>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireProtocolRequestFlexibleResponseStrictRequest,
        >;
}

impl<___T> ProtocolClientSender for ::fidl_next::ClientSender<___T, Protocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn request_strict_response_flexible<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, protocol::RequestStrictResponseFlexible>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireProtocolRequestStrictResponseFlexibleRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(700529454616207123, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn request_flexible_response_strict<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, protocol::RequestFlexibleResponseStrict>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireProtocolRequestFlexibleResponseStrictRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(5191655763393883319, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the Protocol protocol.
///
/// See [`Protocol`] for more details.
pub trait ProtocolClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for Protocol
where
    ___T: ::fidl_next::Transport,
    ___H: ProtocolClientHandler<___T>,

    crate::WireProtocolRequestStrictResponseFlexibleResponse:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireProtocolRequestFlexibleResponseStrictResponse:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `Protocol` server sender.
pub trait ProtocolServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> ProtocolServerSender for ::fidl_next::ServerSender<___T, Protocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the Protocol protocol.
///
/// See [`Protocol`] for more details.
pub trait ProtocolServerHandler<___T: ::fidl_next::Transport> {
    fn request_strict_response_flexible(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Protocol>,

        request: ::fidl_next::RequestBuffer<___T, protocol::RequestStrictResponseFlexible>,

        responder: ::fidl_next::Responder<protocol::RequestStrictResponseFlexible>,
    );

    fn request_flexible_response_strict(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Protocol>,

        request: ::fidl_next::RequestBuffer<___T, protocol::RequestFlexibleResponseStrict>,

        responder: ::fidl_next::Responder<protocol::RequestFlexibleResponseStrict>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for Protocol
where
    ___T: ::fidl_next::Transport,
    ___H: ProtocolServerHandler<___T>,

    crate::WireProtocolRequestStrictResponseFlexibleRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireProtocolRequestFlexibleResponseStrictRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            700529454616207123 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.request_strict_response_flexible(sender, buffer, responder);
            }

            5191655763393883319 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.request_flexible_response_strict(sender, buffer, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Commonly-used items that should usually be in scope, such as extension traits.
pub mod prelude {
    pub use super::{ProtocolClientSender, ProtocolServerSender};
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Protocol`
    /// protocol.
    pub type ProtocolProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Protocol>;
}
