// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub enum FlexibleFoo {
    S(String),

    I(i32),

    UnknownOrdinal_(u64),
}

impl ::fidl_next::Encodable for FlexibleFoo {
    type Encoded = WireFlexibleFoo<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for FlexibleFoo
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireFlexibleFoo { raw, _phantom: _ } = out);

        match self {
            Self::S(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, String>(value, 1, encoder, raw)?
            }

            Self::I(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, i32>(value, 2, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(ordinal as usize))
            }
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for FlexibleFoo
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireFlexibleFoo { raw, _phantom: _ } = out);

        match self {
            Self::S(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, &String>(value, 1, encoder, raw)?
            }

            Self::I(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, &i32>(value, 2, encoder, raw)?
            }

            Self::UnknownOrdinal_(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for FlexibleFoo {
    type EncodedOption = WireOptionalFlexibleFoo<'static>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for FlexibleFoo
where
    ___E: ?Sized,
    FlexibleFoo: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalFlexibleFoo { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for FlexibleFoo
where
    ___E: ?Sized,
    FlexibleFoo: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalFlexibleFoo { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::EncodeRef::encode_ref(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireFlexibleFoo<'de>> for FlexibleFoo {
    #[inline]
    fn from_wire(wire: WireFlexibleFoo<'de>) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);
        match wire.raw.ordinal() {
            1 => Self::S(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<::fidl_next::WireString<'de>>()
            })),

            2 => Self::I(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<::fidl_next::WireI32>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireFlexibleFoo<'de>> for FlexibleFoo {
    #[inline]
    fn from_wire_ref(wire: &WireFlexibleFoo<'de>) -> Self {
        match wire.raw.ordinal() {
            1 => Self::S(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<::fidl_next::WireString<'de>>()
            })),

            2 => Self::I(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<::fidl_next::WireI32>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'de> ::fidl_next::FromWireOption<WireOptionalFlexibleFoo<'de>> for Box<FlexibleFoo> {
    #[inline]
    fn from_wire_option(wire: WireOptionalFlexibleFoo<'de>) -> Option<Self> {
        if let Some(inner) = wire.into_option() {
            Some(Box::new(::fidl_next::FromWire::from_wire(inner)))
        } else {
            None
        }
    }
}

impl<'de> ::fidl_next::FromWireOptionRef<WireOptionalFlexibleFoo<'de>> for Box<FlexibleFoo> {
    #[inline]
    fn from_wire_option_ref(wire: &WireOptionalFlexibleFoo<'de>) -> Option<Self> {
        if let Some(inner) = wire.as_ref() {
            Some(Box::new(::fidl_next::FromWireRef::from_wire_ref(inner)))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`FlexibleFoo`].
#[repr(transparent)]
pub struct WireFlexibleFoo<'de> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'de mut [::fidl_next::Chunk]>,
}

impl<'de> Drop for WireFlexibleFoo<'de> {
    fn drop(&mut self) {
        match self.raw.ordinal() {
            1 => {
                let _ = unsafe { self.raw.get().read_unchecked::<::fidl_next::WireString<'de>>() };
            }

            2 => {
                let _ = unsafe { self.raw.get().read_unchecked::<::fidl_next::WireI32>() };
            }

            _ => (),
        }
    }
}

unsafe impl ::fidl_next::Wire for WireFlexibleFoo<'static> {
    type Decoded<'de> = WireFlexibleFoo<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod flexible_foo {
    pub enum Ref<'de> {
        S(&'de ::fidl_next::WireString<'de>),

        I(&'de ::fidl_next::WireI32),

        UnknownOrdinal_(u64),
    }
}

impl<'de> WireFlexibleFoo<'de> {
    pub fn as_ref(&self) -> crate::flexible_foo::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::flexible_foo::Ref::S(unsafe {
                self.raw.get().deref_unchecked::<::fidl_next::WireString<'_>>()
            }),

            2 => crate::flexible_foo::Ref::I(unsafe {
                self.raw.get().deref_unchecked::<::fidl_next::WireI32>()
            }),

            unknown => crate::flexible_foo::Ref::UnknownOrdinal_(unknown),
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireFlexibleFoo<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireString<'static>>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireI32>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'de> ::core::fmt::Debug for WireFlexibleFoo<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireString<'_>>().fmt(f) },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireI32>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalFlexibleFoo<'de> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'de mut [::fidl_next::Chunk]>,
}

unsafe impl ::fidl_next::Wire for WireOptionalFlexibleFoo<'static> {
    type Decoded<'de> = WireOptionalFlexibleFoo<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl<'de> WireOptionalFlexibleFoo<'de> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireFlexibleFoo<'de>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn into_option(self) -> Option<WireFlexibleFoo<'de>> {
        if self.is_some() {
            Some(WireFlexibleFoo { raw: self.raw, _phantom: ::core::marker::PhantomData })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalFlexibleFoo<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireString<'static>>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireI32>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'de> ::core::fmt::Debug for WireOptionalFlexibleFoo<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum StrictFoo {
    S(String),

    I(i32),
}

impl ::fidl_next::Encodable for StrictFoo {
    type Encoded = WireStrictFoo<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for StrictFoo
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireStrictFoo { raw, _phantom: _ } = out);

        match self {
            Self::S(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, String>(value, 1, encoder, raw)?
            }

            Self::I(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, i32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for StrictFoo
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireStrictFoo { raw, _phantom: _ } = out);

        match self {
            Self::S(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, &String>(value, 1, encoder, raw)?
            }

            Self::I(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, &i32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for StrictFoo {
    type EncodedOption = WireOptionalStrictFoo<'static>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for StrictFoo
where
    ___E: ?Sized,
    StrictFoo: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalStrictFoo { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for StrictFoo
where
    ___E: ?Sized,
    StrictFoo: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalStrictFoo { raw, _phantom: _ } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::EncodeRef::encode_ref(inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireStrictFoo<'de>> for StrictFoo {
    #[inline]
    fn from_wire(wire: WireStrictFoo<'de>) -> Self {
        let wire = ::core::mem::ManuallyDrop::new(wire);
        match wire.raw.ordinal() {
            1 => Self::S(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<::fidl_next::WireString<'de>>()
            })),

            2 => Self::I(::fidl_next::FromWire::from_wire(unsafe {
                wire.raw.get().read_unchecked::<::fidl_next::WireI32>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireStrictFoo<'de>> for StrictFoo {
    #[inline]
    fn from_wire_ref(wire: &WireStrictFoo<'de>) -> Self {
        match wire.raw.ordinal() {
            1 => Self::S(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<::fidl_next::WireString<'de>>()
            })),

            2 => Self::I(::fidl_next::FromWireRef::from_wire_ref(unsafe {
                wire.raw.get().deref_unchecked::<::fidl_next::WireI32>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'de> ::fidl_next::FromWireOption<WireOptionalStrictFoo<'de>> for Box<StrictFoo> {
    #[inline]
    fn from_wire_option(wire: WireOptionalStrictFoo<'de>) -> Option<Self> {
        if let Some(inner) = wire.into_option() {
            Some(Box::new(::fidl_next::FromWire::from_wire(inner)))
        } else {
            None
        }
    }
}

impl<'de> ::fidl_next::FromWireOptionRef<WireOptionalStrictFoo<'de>> for Box<StrictFoo> {
    #[inline]
    fn from_wire_option_ref(wire: &WireOptionalStrictFoo<'de>) -> Option<Self> {
        if let Some(inner) = wire.as_ref() {
            Some(Box::new(::fidl_next::FromWireRef::from_wire_ref(inner)))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`StrictFoo`].
#[repr(transparent)]
pub struct WireStrictFoo<'de> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'de mut [::fidl_next::Chunk]>,
}

impl<'de> Drop for WireStrictFoo<'de> {
    fn drop(&mut self) {
        match self.raw.ordinal() {
            1 => {
                let _ = unsafe { self.raw.get().read_unchecked::<::fidl_next::WireString<'de>>() };
            }

            2 => {
                let _ = unsafe { self.raw.get().read_unchecked::<::fidl_next::WireI32>() };
            }

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl ::fidl_next::Wire for WireStrictFoo<'static> {
    type Decoded<'de> = WireStrictFoo<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod strict_foo {
    pub enum Ref<'de> {
        S(&'de ::fidl_next::WireString<'de>),

        I(&'de ::fidl_next::WireI32),
    }
}

impl<'de> WireStrictFoo<'de> {
    pub fn as_ref(&self) -> crate::strict_foo::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::strict_foo::Ref::S(unsafe {
                self.raw.get().deref_unchecked::<::fidl_next::WireString<'_>>()
            }),

            2 => crate::strict_foo::Ref::I(unsafe {
                self.raw.get().deref_unchecked::<::fidl_next::WireI32>()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStrictFoo<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireString<'static>>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireI32>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'de> ::core::fmt::Debug for WireStrictFoo<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireString<'_>>().fmt(f) },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireI32>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalStrictFoo<'de> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'de mut [::fidl_next::Chunk]>,
}

unsafe impl ::fidl_next::Wire for WireOptionalStrictFoo<'static> {
    type Decoded<'de> = WireOptionalStrictFoo<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw, _phantom: _ } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl<'de> WireOptionalStrictFoo<'de> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireStrictFoo<'de>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn into_option(self) -> Option<WireStrictFoo<'de>> {
        if self.is_some() {
            Some(WireStrictFoo { raw: self.raw, _phantom: ::core::marker::PhantomData })
        } else {
            None
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalStrictFoo<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireString<'static>>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireI32>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'de> ::core::fmt::Debug for WireOptionalStrictFoo<'de> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestStrictResponseFlexibleRequest {
    pub s: crate::StrictFoo,
}

impl ::fidl_next::Encodable for ProtocolRequestStrictResponseFlexibleRequest {
    type Encoded = WireProtocolRequestStrictResponseFlexibleRequest<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ProtocolRequestStrictResponseFlexibleRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = out;
        }

        ::fidl_next::Encode::encode(self.s, encoder, s)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for ProtocolRequestStrictResponseFlexibleRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.s, encoder, s)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ProtocolRequestStrictResponseFlexibleRequest {
    type EncodedOption =
        ::fidl_next::WireBox<'static, WireProtocolRequestStrictResponseFlexibleRequest<'static>>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ProtocolRequestStrictResponseFlexibleRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestStrictResponseFlexibleRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E>
    for ProtocolRequestStrictResponseFlexibleRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestStrictResponseFlexibleRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireProtocolRequestStrictResponseFlexibleRequest<'de>>
    for ProtocolRequestStrictResponseFlexibleRequest
{
    #[inline]
    fn from_wire(wire: WireProtocolRequestStrictResponseFlexibleRequest<'de>) -> Self {
        Self { s: ::fidl_next::FromWire::from_wire(wire.s) }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireProtocolRequestStrictResponseFlexibleRequest<'de>>
    for ProtocolRequestStrictResponseFlexibleRequest
{
    #[inline]
    fn from_wire_ref(wire: &WireProtocolRequestStrictResponseFlexibleRequest<'de>) -> Self {
        Self { s: ::fidl_next::FromWireRef::from_wire_ref(&wire.s) }
    }
}

/// The wire type corresponding to [`ProtocolRequestStrictResponseFlexibleRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestStrictResponseFlexibleRequest<'de> {
    pub s: crate::WireStrictFoo<'de>,
}

unsafe impl ::fidl_next::Wire for WireProtocolRequestStrictResponseFlexibleRequest<'static> {
    type Decoded<'de> = WireProtocolRequestStrictResponseFlexibleRequest<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireProtocolRequestStrictResponseFlexibleRequest<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,

            } = slot;
        }

        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestStrictResponseFlexibleResponse {
    pub f: crate::FlexibleFoo,
}

impl ::fidl_next::Encodable for ProtocolRequestStrictResponseFlexibleResponse {
    type Encoded = WireProtocolRequestStrictResponseFlexibleResponse<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ProtocolRequestStrictResponseFlexibleResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f,

            } = out;
        }

        ::fidl_next::Encode::encode(self.f, encoder, f)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for ProtocolRequestStrictResponseFlexibleResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.f, encoder, f)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ProtocolRequestStrictResponseFlexibleResponse {
    type EncodedOption =
        ::fidl_next::WireBox<'static, WireProtocolRequestStrictResponseFlexibleResponse<'static>>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ProtocolRequestStrictResponseFlexibleResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestStrictResponseFlexibleResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E>
    for ProtocolRequestStrictResponseFlexibleResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestStrictResponseFlexibleResponse: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireProtocolRequestStrictResponseFlexibleResponse<'de>>
    for ProtocolRequestStrictResponseFlexibleResponse
{
    #[inline]
    fn from_wire(wire: WireProtocolRequestStrictResponseFlexibleResponse<'de>) -> Self {
        Self { f: ::fidl_next::FromWire::from_wire(wire.f) }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireProtocolRequestStrictResponseFlexibleResponse<'de>>
    for ProtocolRequestStrictResponseFlexibleResponse
{
    #[inline]
    fn from_wire_ref(wire: &WireProtocolRequestStrictResponseFlexibleResponse<'de>) -> Self {
        Self { f: ::fidl_next::FromWireRef::from_wire_ref(&wire.f) }
    }
}

/// The wire type corresponding to [`ProtocolRequestStrictResponseFlexibleResponse`].
#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestStrictResponseFlexibleResponse<'de> {
    pub f: crate::WireFlexibleFoo<'de>,
}

unsafe impl ::fidl_next::Wire for WireProtocolRequestStrictResponseFlexibleResponse<'static> {
    type Decoded<'de> = WireProtocolRequestStrictResponseFlexibleResponse<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireProtocolRequestStrictResponseFlexibleResponse<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut f,

            } = slot;
        }

        ::fidl_next::Decode::decode(f.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestFlexibleResponseStrictRequest {
    pub s: crate::FlexibleFoo,
}

impl ::fidl_next::Encodable for ProtocolRequestFlexibleResponseStrictRequest {
    type Encoded = WireProtocolRequestFlexibleResponseStrictRequest<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ProtocolRequestFlexibleResponseStrictRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = out;
        }

        ::fidl_next::Encode::encode(self.s, encoder, s)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for ProtocolRequestFlexibleResponseStrictRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.s, encoder, s)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ProtocolRequestFlexibleResponseStrictRequest {
    type EncodedOption =
        ::fidl_next::WireBox<'static, WireProtocolRequestFlexibleResponseStrictRequest<'static>>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ProtocolRequestFlexibleResponseStrictRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestFlexibleResponseStrictRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E>
    for ProtocolRequestFlexibleResponseStrictRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestFlexibleResponseStrictRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireProtocolRequestFlexibleResponseStrictRequest<'de>>
    for ProtocolRequestFlexibleResponseStrictRequest
{
    #[inline]
    fn from_wire(wire: WireProtocolRequestFlexibleResponseStrictRequest<'de>) -> Self {
        Self { s: ::fidl_next::FromWire::from_wire(wire.s) }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireProtocolRequestFlexibleResponseStrictRequest<'de>>
    for ProtocolRequestFlexibleResponseStrictRequest
{
    #[inline]
    fn from_wire_ref(wire: &WireProtocolRequestFlexibleResponseStrictRequest<'de>) -> Self {
        Self { s: ::fidl_next::FromWireRef::from_wire_ref(&wire.s) }
    }
}

/// The wire type corresponding to [`ProtocolRequestFlexibleResponseStrictRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestFlexibleResponseStrictRequest<'de> {
    pub s: crate::WireFlexibleFoo<'de>,
}

unsafe impl ::fidl_next::Wire for WireProtocolRequestFlexibleResponseStrictRequest<'static> {
    type Decoded<'de> = WireProtocolRequestFlexibleResponseStrictRequest<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireProtocolRequestFlexibleResponseStrictRequest<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,

            } = slot;
        }

        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestFlexibleResponseStrictResponse {
    pub f: crate::StrictFoo,
}

impl ::fidl_next::Encodable for ProtocolRequestFlexibleResponseStrictResponse {
    type Encoded = WireProtocolRequestFlexibleResponseStrictResponse<'static>;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ProtocolRequestFlexibleResponseStrictResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f,

            } = out;
        }

        ::fidl_next::Encode::encode(self.f, encoder, f)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for ProtocolRequestFlexibleResponseStrictResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.f, encoder, f)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ProtocolRequestFlexibleResponseStrictResponse {
    type EncodedOption =
        ::fidl_next::WireBox<'static, WireProtocolRequestFlexibleResponseStrictResponse<'static>>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ProtocolRequestFlexibleResponseStrictResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestFlexibleResponseStrictResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E>
    for ProtocolRequestFlexibleResponseStrictResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestFlexibleResponseStrictResponse: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl<'de> ::fidl_next::FromWire<WireProtocolRequestFlexibleResponseStrictResponse<'de>>
    for ProtocolRequestFlexibleResponseStrictResponse
{
    #[inline]
    fn from_wire(wire: WireProtocolRequestFlexibleResponseStrictResponse<'de>) -> Self {
        Self { f: ::fidl_next::FromWire::from_wire(wire.f) }
    }
}

impl<'de> ::fidl_next::FromWireRef<WireProtocolRequestFlexibleResponseStrictResponse<'de>>
    for ProtocolRequestFlexibleResponseStrictResponse
{
    #[inline]
    fn from_wire_ref(wire: &WireProtocolRequestFlexibleResponseStrictResponse<'de>) -> Self {
        Self { f: ::fidl_next::FromWireRef::from_wire_ref(&wire.f) }
    }
}

/// The wire type corresponding to [`ProtocolRequestFlexibleResponseStrictResponse`].
#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestFlexibleResponseStrictResponse<'de> {
    pub f: crate::WireStrictFoo<'de>,
}

unsafe impl ::fidl_next::Wire for WireProtocolRequestFlexibleResponseStrictResponse<'static> {
    type Decoded<'de> = WireProtocolRequestFlexibleResponseStrictResponse<'de>;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D>
    for WireProtocolRequestFlexibleResponseStrictResponse<'static>
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut f,

            } = slot;
        }

        ::fidl_next::Decode::decode(f.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the Protocol protocol.
#[derive(Debug)]
pub struct Protocol;

pub mod protocol {
    pub mod prelude {
        pub use crate::{
            protocol, Protocol, ProtocolClientHandler, ProtocolClientSender, ProtocolServerHandler,
            ProtocolServerSender,
        };

        pub use crate::ProtocolRequestFlexibleResponseStrictRequest;

        pub use crate::ProtocolRequestFlexibleResponseStrictResponse;

        pub use crate::ProtocolRequestStrictResponseFlexibleRequest;

        pub use crate::ProtocolRequestStrictResponseFlexibleResponse;
    }

    pub struct RequestStrictResponseFlexible;

    impl ::fidl_next::Method for RequestStrictResponseFlexible {
        const ORDINAL: u64 = 700529454616207123;

        type Protocol = crate::Protocol;

        type Request = crate::WireProtocolRequestStrictResponseFlexibleRequest<'static>;

        type Response = crate::WireProtocolRequestStrictResponseFlexibleResponse<'static>;
    }

    pub struct RequestFlexibleResponseStrict;

    impl ::fidl_next::Method for RequestFlexibleResponseStrict {
        const ORDINAL: u64 = 5191655763393883319;

        type Protocol = crate::Protocol;

        type Request = crate::WireProtocolRequestFlexibleResponseStrictRequest<'static>;

        type Response = crate::WireProtocolRequestFlexibleResponseStrictResponse<'static>;
    }
}

/// A helper trait for the `Protocol` client sender.
pub trait ProtocolClientSender {
    type Transport: ::fidl_next::Transport;

    fn request_strict_response_flexible<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, protocol::RequestStrictResponseFlexible>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireProtocolRequestStrictResponseFlexibleRequest<'static>,
        >;

    fn request_flexible_response_strict<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, protocol::RequestFlexibleResponseStrict>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireProtocolRequestFlexibleResponseStrictRequest<'static>,
        >;
}

impl<___T> ProtocolClientSender for ::fidl_next::ClientSender<___T, Protocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn request_strict_response_flexible<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, protocol::RequestStrictResponseFlexible>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireProtocolRequestStrictResponseFlexibleRequest<'static>,
        >,
    {
        self.as_untyped()
            .send_two_way(700529454616207123, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn request_flexible_response_strict<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, protocol::RequestFlexibleResponseStrict>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireProtocolRequestFlexibleResponseStrictRequest<'static>,
        >,
    {
        self.as_untyped()
            .send_two_way(5191655763393883319, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the Protocol protocol.
///
/// See [`Protocol`] for more details.
pub trait ProtocolClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for Protocol
where
    ___T: ::fidl_next::Transport,
    ___H: ProtocolClientHandler<___T>,

    <protocol::RequestStrictResponseFlexible as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <protocol::RequestFlexibleResponseStrict as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `Protocol` server sender.
pub trait ProtocolServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> ProtocolServerSender for ::fidl_next::ServerSender<___T, Protocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the Protocol protocol.
///
/// See [`Protocol`] for more details.
pub trait ProtocolServerHandler<___T: ::fidl_next::Transport> {
    fn request_strict_response_flexible(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Protocol>,

        request: ::fidl_next::Request<___T, protocol::RequestStrictResponseFlexible>,

        responder: ::fidl_next::Responder<protocol::RequestStrictResponseFlexible>,
    );

    fn request_flexible_response_strict(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Protocol>,

        request: ::fidl_next::Request<___T, protocol::RequestFlexibleResponseStrict>,

        responder: ::fidl_next::Responder<protocol::RequestFlexibleResponseStrict>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for Protocol
where
    ___T: ::fidl_next::Transport,
    ___H: ProtocolServerHandler<___T>,

    <protocol::RequestStrictResponseFlexible as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <protocol::RequestFlexibleResponseStrict as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            700529454616207123 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => {
                        handler.request_strict_response_flexible(sender, decoded, responder)
                    }
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            5191655763393883319 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => {
                        handler.request_flexible_response_strict(sender, decoded, responder)
                    }
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Protocol`
    /// protocol.
    pub type ProtocolProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Protocol>;

    impl ::core::convert::From<crate::Protocol>
        for ::fidl_test_requestflexibleenvelope::ProtocolMarker
    {
        #[inline]
        fn from(_: crate::Protocol) -> Self {
            Self
        }
    }
}
