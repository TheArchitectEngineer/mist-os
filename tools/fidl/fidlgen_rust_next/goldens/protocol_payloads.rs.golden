// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
#[repr(C)]
pub struct LocalStructPayload {
    pub a: u32,

    pub b: u32,
}

impl ::fidl_next::Encodable for LocalStructPayload {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireLocalStructPayload> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireLocalStructPayload;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for LocalStructPayload
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::Encode::encode(self.a, encoder, a)?;

        ::fidl_next::Encode::encode(self.b, encoder, b)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for LocalStructPayload
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.a, encoder, a)?;

        ::fidl_next::EncodeRef::encode_ref(&self.b, encoder, b)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for LocalStructPayload {
    type EncodedOption = ::fidl_next::WireBox<'static, WireLocalStructPayload>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for LocalStructPayload
where
    ___E: ::fidl_next::Encoder + ?Sized,
    LocalStructPayload: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for LocalStructPayload
where
    ___E: ::fidl_next::Encoder + ?Sized,
    LocalStructPayload: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireLocalStructPayload> for LocalStructPayload {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireLocalStructPayload, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                .is_enabled()
                && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                    .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireLocalStructPayload) -> Self {
        Self {
            a: ::fidl_next::FromWire::from_wire(wire.a),

            b: ::fidl_next::FromWire::from_wire(wire.b),
        }
    }
}

impl ::fidl_next::FromWireRef<WireLocalStructPayload> for LocalStructPayload {
    #[inline]
    fn from_wire_ref(wire: &WireLocalStructPayload) -> Self {
        Self {
            a: ::fidl_next::FromWireRef::from_wire_ref(&wire.a),

            b: ::fidl_next::FromWireRef::from_wire_ref(&wire.b),
        }
    }
}

/// The wire type corresponding to [`LocalStructPayload`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireLocalStructPayload {
    pub a: ::fidl_next::WireU32,

    pub b: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::Wire for WireLocalStructPayload {
    type Decoded<'de> = WireLocalStructPayload;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireLocalStructPayload
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
                mut b,

            } = slot;
        }

        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(b.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct MainProtocolOneWayAnonRequest {
    pub a: u32,

    pub b: u32,
}

impl ::fidl_next::Encodable for MainProtocolOneWayAnonRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        Self,
        WireMainProtocolOneWayAnonRequest,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireMainProtocolOneWayAnonRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolOneWayAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::Encode::encode(self.a, encoder, a)?;

        ::fidl_next::Encode::encode(self.b, encoder, b)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for MainProtocolOneWayAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.a, encoder, a)?;

        ::fidl_next::EncodeRef::encode_ref(&self.b, encoder, b)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for MainProtocolOneWayAnonRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireMainProtocolOneWayAnonRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for MainProtocolOneWayAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolOneWayAnonRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for MainProtocolOneWayAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolOneWayAnonRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireMainProtocolOneWayAnonRequest> for MainProtocolOneWayAnonRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        WireMainProtocolOneWayAnonRequest,
        Self,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                .is_enabled()
                && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                    .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireMainProtocolOneWayAnonRequest) -> Self {
        Self {
            a: ::fidl_next::FromWire::from_wire(wire.a),

            b: ::fidl_next::FromWire::from_wire(wire.b),
        }
    }
}

impl ::fidl_next::FromWireRef<WireMainProtocolOneWayAnonRequest> for MainProtocolOneWayAnonRequest {
    #[inline]
    fn from_wire_ref(wire: &WireMainProtocolOneWayAnonRequest) -> Self {
        Self {
            a: ::fidl_next::FromWireRef::from_wire_ref(&wire.a),

            b: ::fidl_next::FromWireRef::from_wire_ref(&wire.b),
        }
    }
}

/// The wire type corresponding to [`MainProtocolOneWayAnonRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireMainProtocolOneWayAnonRequest {
    pub a: ::fidl_next::WireU32,

    pub b: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::Wire for WireMainProtocolOneWayAnonRequest {
    type Decoded<'de> = WireMainProtocolOneWayAnonRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolOneWayAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
                mut b,

            } = slot;
        }

        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(b.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct MainProtocolTwoWayAnonRequest {
    pub a: u32,

    pub b: u32,
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        Self,
        WireMainProtocolTwoWayAnonRequest,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireMainProtocolTwoWayAnonRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::Encode::encode(self.a, encoder, a)?;

        ::fidl_next::Encode::encode(self.b, encoder, b)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for MainProtocolTwoWayAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.a, encoder, a)?;

        ::fidl_next::EncodeRef::encode_ref(&self.b, encoder, b)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for MainProtocolTwoWayAnonRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireMainProtocolTwoWayAnonRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for MainProtocolTwoWayAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayAnonRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for MainProtocolTwoWayAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayAnonRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireMainProtocolTwoWayAnonRequest> for MainProtocolTwoWayAnonRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        WireMainProtocolTwoWayAnonRequest,
        Self,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                .is_enabled()
                && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                    .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireMainProtocolTwoWayAnonRequest) -> Self {
        Self {
            a: ::fidl_next::FromWire::from_wire(wire.a),

            b: ::fidl_next::FromWire::from_wire(wire.b),
        }
    }
}

impl ::fidl_next::FromWireRef<WireMainProtocolTwoWayAnonRequest> for MainProtocolTwoWayAnonRequest {
    #[inline]
    fn from_wire_ref(wire: &WireMainProtocolTwoWayAnonRequest) -> Self {
        Self {
            a: ::fidl_next::FromWireRef::from_wire_ref(&wire.a),

            b: ::fidl_next::FromWireRef::from_wire_ref(&wire.b),
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireMainProtocolTwoWayAnonRequest {
    pub a: ::fidl_next::WireU32,

    pub b: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::Wire for WireMainProtocolTwoWayAnonRequest {
    type Decoded<'de> = WireMainProtocolTwoWayAnonRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
                mut b,

            } = slot;
        }

        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(b.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct MainProtocolTwoWayAnonResponse {
    pub a: u32,

    pub b: u32,
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        Self,
        WireMainProtocolTwoWayAnonResponse,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireMainProtocolTwoWayAnonResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::Encode::encode(self.a, encoder, a)?;

        ::fidl_next::Encode::encode(self.b, encoder, b)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for MainProtocolTwoWayAnonResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.a, encoder, a)?;

        ::fidl_next::EncodeRef::encode_ref(&self.b, encoder, b)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for MainProtocolTwoWayAnonResponse {
    type EncodedOption = ::fidl_next::WireBox<'static, WireMainProtocolTwoWayAnonResponse>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for MainProtocolTwoWayAnonResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayAnonResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for MainProtocolTwoWayAnonResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayAnonResponse: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireMainProtocolTwoWayAnonResponse> for MainProtocolTwoWayAnonResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        WireMainProtocolTwoWayAnonResponse,
        Self,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                .is_enabled()
                && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                    .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireMainProtocolTwoWayAnonResponse) -> Self {
        Self {
            a: ::fidl_next::FromWire::from_wire(wire.a),

            b: ::fidl_next::FromWire::from_wire(wire.b),
        }
    }
}

impl ::fidl_next::FromWireRef<WireMainProtocolTwoWayAnonResponse>
    for MainProtocolTwoWayAnonResponse
{
    #[inline]
    fn from_wire_ref(wire: &WireMainProtocolTwoWayAnonResponse) -> Self {
        Self {
            a: ::fidl_next::FromWireRef::from_wire_ref(&wire.a),

            b: ::fidl_next::FromWireRef::from_wire_ref(&wire.b),
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireMainProtocolTwoWayAnonResponse {
    pub a: ::fidl_next::WireU32,

    pub b: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::Wire for WireMainProtocolTwoWayAnonResponse {
    type Decoded<'de> = WireMainProtocolTwoWayAnonResponse;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
                mut b,

            } = slot;
        }

        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(b.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct MainProtocolTwoWayAnonWithErrorRequest {
    pub a: u32,

    pub b: u32,
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonWithErrorRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        Self,
        WireMainProtocolTwoWayAnonWithErrorRequest,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireMainProtocolTwoWayAnonWithErrorRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonWithErrorRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::Encode::encode(self.a, encoder, a)?;

        ::fidl_next::Encode::encode(self.b, encoder, b)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for MainProtocolTwoWayAnonWithErrorRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.a, encoder, a)?;

        ::fidl_next::EncodeRef::encode_ref(&self.b, encoder, b)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for MainProtocolTwoWayAnonWithErrorRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireMainProtocolTwoWayAnonWithErrorRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for MainProtocolTwoWayAnonWithErrorRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayAnonWithErrorRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for MainProtocolTwoWayAnonWithErrorRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayAnonWithErrorRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireMainProtocolTwoWayAnonWithErrorRequest>
    for MainProtocolTwoWayAnonWithErrorRequest
{
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        WireMainProtocolTwoWayAnonWithErrorRequest,
        Self,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                .is_enabled()
                && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                    .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireMainProtocolTwoWayAnonWithErrorRequest) -> Self {
        Self {
            a: ::fidl_next::FromWire::from_wire(wire.a),

            b: ::fidl_next::FromWire::from_wire(wire.b),
        }
    }
}

impl ::fidl_next::FromWireRef<WireMainProtocolTwoWayAnonWithErrorRequest>
    for MainProtocolTwoWayAnonWithErrorRequest
{
    #[inline]
    fn from_wire_ref(wire: &WireMainProtocolTwoWayAnonWithErrorRequest) -> Self {
        Self {
            a: ::fidl_next::FromWireRef::from_wire_ref(&wire.a),

            b: ::fidl_next::FromWireRef::from_wire_ref(&wire.b),
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonWithErrorRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireMainProtocolTwoWayAnonWithErrorRequest {
    pub a: ::fidl_next::WireU32,

    pub b: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::Wire for WireMainProtocolTwoWayAnonWithErrorRequest {
    type Decoded<'de> = WireMainProtocolTwoWayAnonWithErrorRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonWithErrorRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
                mut b,

            } = slot;
        }

        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(b.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct MainProtocolTwoWayAnonWithErrorResponse {
    pub a: u32,

    pub b: u32,
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonWithErrorResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        Self,
        WireMainProtocolTwoWayAnonWithErrorResponse,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireMainProtocolTwoWayAnonWithErrorResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonWithErrorResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::Encode::encode(self.a, encoder, a)?;

        ::fidl_next::Encode::encode(self.b, encoder, b)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for MainProtocolTwoWayAnonWithErrorResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.a, encoder, a)?;

        ::fidl_next::EncodeRef::encode_ref(&self.b, encoder, b)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for MainProtocolTwoWayAnonWithErrorResponse {
    type EncodedOption = ::fidl_next::WireBox<'static, WireMainProtocolTwoWayAnonWithErrorResponse>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for MainProtocolTwoWayAnonWithErrorResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayAnonWithErrorResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for MainProtocolTwoWayAnonWithErrorResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayAnonWithErrorResponse: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireMainProtocolTwoWayAnonWithErrorResponse>
    for MainProtocolTwoWayAnonWithErrorResponse
{
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        WireMainProtocolTwoWayAnonWithErrorResponse,
        Self,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                .is_enabled()
                && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                    .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireMainProtocolTwoWayAnonWithErrorResponse) -> Self {
        Self {
            a: ::fidl_next::FromWire::from_wire(wire.a),

            b: ::fidl_next::FromWire::from_wire(wire.b),
        }
    }
}

impl ::fidl_next::FromWireRef<WireMainProtocolTwoWayAnonWithErrorResponse>
    for MainProtocolTwoWayAnonWithErrorResponse
{
    #[inline]
    fn from_wire_ref(wire: &WireMainProtocolTwoWayAnonWithErrorResponse) -> Self {
        Self {
            a: ::fidl_next::FromWireRef::from_wire_ref(&wire.a),

            b: ::fidl_next::FromWireRef::from_wire_ref(&wire.b),
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonWithErrorResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireMainProtocolTwoWayAnonWithErrorResponse {
    pub a: ::fidl_next::WireU32,

    pub b: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::Wire for WireMainProtocolTwoWayAnonWithErrorResponse {
    type Decoded<'de> = WireMainProtocolTwoWayAnonWithErrorResponse;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonWithErrorResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
                mut b,

            } = slot;
        }

        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(b.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct MainProtocolOnAnonRequest {
    pub a: u32,

    pub b: u32,
}

impl ::fidl_next::Encodable for MainProtocolOnAnonRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireMainProtocolOnAnonRequest> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <u32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireMainProtocolOnAnonRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MainProtocolOnAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::Encode::encode(self.a, encoder, a)?;

        ::fidl_next::Encode::encode(self.b, encoder, b)?;

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for MainProtocolOnAnonRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::EncodeRef::encode_ref(&self.a, encoder, a)?;

        ::fidl_next::EncodeRef::encode_ref(&self.b, encoder, b)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for MainProtocolOnAnonRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireMainProtocolOnAnonRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for MainProtocolOnAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolOnAnonRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for MainProtocolOnAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolOnAnonRequest: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireMainProtocolOnAnonRequest> for MainProtocolOnAnonRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireMainProtocolOnAnonRequest, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                .is_enabled()
                && <u32 as ::fidl_next::FromWire<::fidl_next::WireU32>>::COPY_OPTIMIZATION
                    .is_enabled(),
        )
    };

    #[inline]
    fn from_wire(wire: WireMainProtocolOnAnonRequest) -> Self {
        Self {
            a: ::fidl_next::FromWire::from_wire(wire.a),

            b: ::fidl_next::FromWire::from_wire(wire.b),
        }
    }
}

impl ::fidl_next::FromWireRef<WireMainProtocolOnAnonRequest> for MainProtocolOnAnonRequest {
    #[inline]
    fn from_wire_ref(wire: &WireMainProtocolOnAnonRequest) -> Self {
        Self {
            a: ::fidl_next::FromWireRef::from_wire_ref(&wire.a),

            b: ::fidl_next::FromWireRef::from_wire_ref(&wire.b),
        }
    }
}

/// The wire type corresponding to [`MainProtocolOnAnonRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireMainProtocolOnAnonRequest {
    pub a: ::fidl_next::WireU32,

    pub b: ::fidl_next::WireU32,
}

unsafe impl ::fidl_next::Wire for WireMainProtocolOnAnonRequest {
    type Decoded<'de> = WireMainProtocolOnAnonRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMainProtocolOnAnonRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
                mut b,

            } = slot;
        }

        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(b.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the MainProtocol protocol.
#[derive(Debug)]
pub struct MainProtocol;

pub mod main_protocol {
    pub mod prelude {
        pub use crate::{
            main_protocol, MainProtocol, MainProtocolClientHandler, MainProtocolClientSender,
            MainProtocolServerHandler, MainProtocolServerSender,
        };

        pub use ::fidl_next_test_protocolpayloads_imported::ImportStructPayload;

        pub use crate::LocalStructPayload;

        pub use crate::MainProtocolOnAnonRequest;

        pub use crate::MainProtocolOneWayAnonRequest;

        pub use crate::MainProtocolTwoWayAnonRequest;

        pub use crate::MainProtocolTwoWayAnonResponse;

        pub use crate::MainProtocolTwoWayAnonWithErrorRequest;

        pub use crate::MainProtocolTwoWayAnonWithErrorResponse;
    }

    pub struct OneWayComposed;

    impl ::fidl_next::Method for OneWayComposed {
        const ORDINAL: u64 = 2602591870026304272;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayComposed;

    impl ::fidl_next::Method for TwoWayComposed {
        const ORDINAL: u64 = 2542459230546612144;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload;

        type Response = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload;
    }

    pub struct TwoWayComposedWithError;

    impl ::fidl_next::Method for TwoWayComposedWithError {
        const ORDINAL: u64 = 7681984876526769495;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload;

        type Response = ::fidl_next::WireResult<
            'static,
            ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
            ::fidl_next::WireU32,
        >;
    }

    pub struct OnComposed;

    impl ::fidl_next::Method for OnComposed {
        const ORDINAL: u64 = 1872339328378152762;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload;
    }

    pub struct OneWayLocal;

    impl ::fidl_next::Method for OneWayLocal {
        const ORDINAL: u64 = 7755175439334311701;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireLocalStructPayload;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayLocal;

    impl ::fidl_next::Method for TwoWayLocal {
        const ORDINAL: u64 = 8374292137648566031;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireLocalStructPayload;

        type Response = crate::WireLocalStructPayload;
    }

    pub struct TwoWayLocalWithError;

    impl ::fidl_next::Method for TwoWayLocalWithError {
        const ORDINAL: u64 = 2898559119954589948;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireLocalStructPayload;

        type Response =
            ::fidl_next::WireResult<'static, crate::WireLocalStructPayload, ::fidl_next::WireU32>;
    }

    pub struct OnLocal;

    impl ::fidl_next::Method for OnLocal {
        const ORDINAL: u64 = 5135782819583756313;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireLocalStructPayload;
    }

    pub struct OneWayImport;

    impl ::fidl_next::Method for OneWayImport {
        const ORDINAL: u64 = 3344777159365288972;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayImport;

    impl ::fidl_next::Method for TwoWayImport {
        const ORDINAL: u64 = 2374708679656510579;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload;

        type Response = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload;
    }

    pub struct TwoWayImportWithError;

    impl ::fidl_next::Method for TwoWayImportWithError {
        const ORDINAL: u64 = 4286143084949642173;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload;

        type Response = ::fidl_next::WireResult<
            'static,
            ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
            ::fidl_next::WireU32,
        >;
    }

    pub struct OnImport;

    impl ::fidl_next::Method for OnImport {
        const ORDINAL: u64 = 1996489653379631369;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload;
    }

    pub struct OneWayAnon;

    impl ::fidl_next::Method for OneWayAnon {
        const ORDINAL: u64 = 811587311021806764;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireMainProtocolOneWayAnonRequest;

        type Response = ::fidl_next::Never;
    }

    pub struct TwoWayAnon;

    impl ::fidl_next::Method for TwoWayAnon {
        const ORDINAL: u64 = 629880979996923737;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireMainProtocolTwoWayAnonRequest;

        type Response = crate::WireMainProtocolTwoWayAnonResponse;
    }

    pub struct TwoWayAnonWithError;

    impl ::fidl_next::Method for TwoWayAnonWithError {
        const ORDINAL: u64 = 6368863385719175734;

        type Protocol = crate::MainProtocol;

        type Request = crate::WireMainProtocolTwoWayAnonWithErrorRequest;

        type Response = ::fidl_next::WireResult<
            'static,
            crate::WireMainProtocolTwoWayAnonWithErrorResponse,
            ::fidl_next::WireU32,
        >;
    }

    pub struct OnAnon;

    impl ::fidl_next::Method for OnAnon {
        const ORDINAL: u64 = 4815229650203439104;

        type Protocol = crate::MainProtocol;

        type Request = ::fidl_next::Never;

        type Response = crate::WireMainProtocolOnAnonRequest;
    }
}

/// A helper trait for the `MainProtocol` client sender.
pub trait MainProtocolClientSender {
    type Transport: ::fidl_next::Transport;

    fn one_way_composed<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
        >;

    fn two_way_composed<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayComposed>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
        >;

    fn two_way_composed_with_error<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayComposedWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
        >;

    fn one_way_local<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalStructPayload,
        >;

    fn two_way_local<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayLocal>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalStructPayload,
        >;

    fn two_way_local_with_error<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayLocalWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalStructPayload,
        >;

    fn one_way_import<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
        >;

    fn two_way_import<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayImport>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
        >;

    fn two_way_import_with_error<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayImportWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
        >;

    fn one_way_anon<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolOneWayAnonRequest,
        >;

    fn two_way_anon<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnon>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolTwoWayAnonRequest,
        >;

    fn two_way_anon_with_error<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnonWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolTwoWayAnonWithErrorRequest,
        >;
}

impl<___T> MainProtocolClientSender for ::fidl_next::ClientSender<___T, MainProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn one_way_composed<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
        >,
    {
        self.as_untyped().send_one_way(2602591870026304272, request)
    }

    fn two_way_composed<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayComposed>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
        >,
    {
        self.as_untyped()
            .send_two_way(2542459230546612144, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_composed_with_error<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayComposedWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
        >,
    {
        self.as_untyped()
            .send_two_way(7681984876526769495, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn one_way_local<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalStructPayload,
        >,
    {
        self.as_untyped().send_one_way(7755175439334311701, request)
    }

    fn two_way_local<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayLocal>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalStructPayload,
        >,
    {
        self.as_untyped()
            .send_two_way(8374292137648566031, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_local_with_error<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayLocalWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireLocalStructPayload,
        >,
    {
        self.as_untyped()
            .send_two_way(2898559119954589948, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn one_way_import<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
        >,
    {
        self.as_untyped().send_one_way(3344777159365288972, request)
    }

    fn two_way_import<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayImport>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
        >,
    {
        self.as_untyped()
            .send_two_way(2374708679656510579, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_import_with_error<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayImportWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = ::fidl_next_test_protocolpayloads_imported::WireImportStructPayload,
        >,
    {
        self.as_untyped()
            .send_two_way(4286143084949642173, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn one_way_anon<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolOneWayAnonRequest,
        >,
    {
        self.as_untyped().send_one_way(811587311021806764, request)
    }

    fn two_way_anon<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnon>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolTwoWayAnonRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(629880979996923737, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn two_way_anon_with_error<___R>(
        &self,
        request: ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, main_protocol::TwoWayAnonWithError>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireMainProtocolTwoWayAnonWithErrorRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(6368863385719175734, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the MainProtocol protocol.
///
/// See [`MainProtocol`] for more details.
pub trait MainProtocolClientHandler<___T: ::fidl_next::Transport> {
    fn on_composed(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, MainProtocol>,

        event: ::fidl_next::Response<___T, main_protocol::OnComposed>,
    );

    fn on_local(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, MainProtocol>,

        event: ::fidl_next::Response<___T, main_protocol::OnLocal>,
    );

    fn on_import(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, MainProtocol>,

        event: ::fidl_next::Response<___T, main_protocol::OnImport>,
    );

    fn on_anon(
        &mut self,
        sender: &::fidl_next::ClientSender<___T, MainProtocol>,

        event: ::fidl_next::Response<___T, main_protocol::OnAnon>,
    );
}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for MainProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: MainProtocolClientHandler<___T>,

    <main_protocol::TwoWayComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayComposedWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OnComposed as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayLocal as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayLocalWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OnLocal as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayImport as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayImportWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OnImport as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnon as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnonWithError as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OnAnon as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            1872339328378152762 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.on_composed(sender, decoded),
                Err(e) => {
                    sender.close();
                }
            },

            5135782819583756313 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.on_local(sender, decoded),
                Err(e) => {
                    sender.close();
                }
            },

            1996489653379631369 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.on_import(sender, decoded),
                Err(e) => {
                    sender.close();
                }
            },

            4815229650203439104 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.on_anon(sender, decoded),
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `MainProtocol` server sender.
pub trait MainProtocolServerSender {
    type Transport: ::fidl_next::Transport;

    fn on_composed<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnComposed as ::fidl_next::Method>::Response,
        >;

    fn on_local<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnLocal as ::fidl_next::Method>::Response,
        >;

    fn on_import<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnImport as ::fidl_next::Method>::Response,
        >;

    fn on_anon<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnAnon as ::fidl_next::Method>::Response,
        >;
}

impl<___T> MainProtocolServerSender for ::fidl_next::ServerSender<___T, MainProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn on_composed<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnComposed as ::fidl_next::Method>::Response,
        >,
    {
        self.as_untyped().send_event(1872339328378152762, request)
    }

    fn on_local<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnLocal as ::fidl_next::Method>::Response,
        >,
    {
        self.as_untyped().send_event(5135782819583756313, request)
    }

    fn on_import<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnImport as ::fidl_next::Method>::Response,
        >,
    {
        self.as_untyped().send_event(1996489653379631369, request)
    }

    fn on_anon<___R>(
        &self,
        request: ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = <main_protocol::OnAnon as ::fidl_next::Method>::Response,
        >,
    {
        self.as_untyped().send_event(4815229650203439104, request)
    }
}

/// A server handler for the MainProtocol protocol.
///
/// See [`MainProtocol`] for more details.
pub trait MainProtocolServerHandler<___T: ::fidl_next::Transport> {
    fn one_way_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::Request<___T, main_protocol::OneWayComposed>,
    );

    fn two_way_composed(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::Request<___T, main_protocol::TwoWayComposed>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayComposed>,
    );

    fn two_way_composed_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::Request<___T, main_protocol::TwoWayComposedWithError>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayComposedWithError>,
    );

    fn one_way_local(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::Request<___T, main_protocol::OneWayLocal>,
    );

    fn two_way_local(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::Request<___T, main_protocol::TwoWayLocal>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayLocal>,
    );

    fn two_way_local_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::Request<___T, main_protocol::TwoWayLocalWithError>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayLocalWithError>,
    );

    fn one_way_import(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::Request<___T, main_protocol::OneWayImport>,
    );

    fn two_way_import(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::Request<___T, main_protocol::TwoWayImport>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayImport>,
    );

    fn two_way_import_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::Request<___T, main_protocol::TwoWayImportWithError>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayImportWithError>,
    );

    fn one_way_anon(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::Request<___T, main_protocol::OneWayAnon>,
    );

    fn two_way_anon(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::Request<___T, main_protocol::TwoWayAnon>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnon>,
    );

    fn two_way_anon_with_error(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, MainProtocol>,

        request: ::fidl_next::Request<___T, main_protocol::TwoWayAnonWithError>,

        responder: ::fidl_next::Responder<main_protocol::TwoWayAnonWithError>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for MainProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: MainProtocolServerHandler<___T>,

    <main_protocol::OneWayComposed as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayComposed as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayComposedWithError as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OneWayLocal as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayLocal as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayLocalWithError as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OneWayImport as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayImport as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayImportWithError as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::OneWayAnon as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnon as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <main_protocol::TwoWayAnonWithError as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            2602591870026304272 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.one_way_composed(sender, decoded),
                Err(e) => {
                    sender.close();
                }
            },

            7755175439334311701 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.one_way_local(sender, decoded),
                Err(e) => {
                    sender.close();
                }
            },

            3344777159365288972 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.one_way_import(sender, decoded),
                Err(e) => {
                    sender.close();
                }
            },

            811587311021806764 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.one_way_anon(sender, decoded),
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            2542459230546612144 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_composed(sender, decoded, responder),
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            7681984876526769495 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_composed_with_error(sender, decoded, responder),
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            8374292137648566031 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_local(sender, decoded, responder),
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            2898559119954589948 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_local_with_error(sender, decoded, responder),
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            2374708679656510579 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_import(sender, decoded, responder),
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            4286143084949642173 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_import_with_error(sender, decoded, responder),
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            629880979996923737 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_anon(sender, decoded, responder),
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            6368863385719175734 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                match ::fidl_next::DecoderExt::decode(buffer) {
                    Ok(decoded) => handler.two_way_anon_with_error(sender, decoded, responder),
                    Err(e) => {
                        sender.close();
                    }
                }
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `MainProtocol`
    /// protocol.
    pub type MainProtocolProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::MainProtocol>;

    impl ::core::convert::From<crate::MainProtocol>
        for ::fidl_test_protocolpayloads::MainProtocolMarker
    {
        #[inline]
        fn from(_: crate::MainProtocol) -> Self {
            Self
        }
    }
}
