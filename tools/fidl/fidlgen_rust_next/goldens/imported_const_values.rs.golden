// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

pub const BITS_MEMBER: ::fidl_next_test_dependent::MyBits =
    ::fidl_next_test_dependent::MyBits::MEMBER;

pub const BITS_MEMBER_PRIMITIVE: u8 = 1;

pub const ENUM_MEMBER: ::fidl_next_test_dependent::MyEnum =
    ::fidl_next_test_dependent::MyEnum::Member;

pub const ENUM_MEMBER_PRIMITIVE: u8 = 1;

#[derive(Clone, Debug)]
#[repr(C)]
pub struct MyStruct {}

impl ::fidl_next::Encodable for MyStruct {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireMyStruct> =
        unsafe { ::fidl_next::CopyOptimization::enable_if(true) };

    type Encoded = WireMyStruct;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for MyStruct
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {

            } = out;
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeRef<___E> for MyStruct
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode_ref(
        &self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {

            } = out;
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for MyStruct {
    type EncodedOption = ::fidl_next::WireBox<'static, WireMyStruct>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for MyStruct
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MyStruct: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

unsafe impl<___E> ::fidl_next::EncodeOptionRef<___E> for MyStruct
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MyStruct: ::fidl_next::EncodeRef<___E>,
{
    #[inline]
    fn encode_option_ref(
        this: Option<&Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireMyStruct> for MyStruct {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireMyStruct, Self> =
        unsafe { ::fidl_next::CopyOptimization::enable_if(true) };

    #[inline]
    fn from_wire(wire: WireMyStruct) -> Self {
        Self {}
    }
}

impl ::fidl_next::FromWireRef<WireMyStruct> for MyStruct {
    #[inline]
    fn from_wire_ref(wire: &WireMyStruct) -> Self {
        Self {}
    }
}

/// The wire type corresponding to [`MyStruct`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireMyStruct {}

unsafe impl ::fidl_next::Wire for WireMyStruct {
    type Decoded<'de> = WireMyStruct;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyStruct
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {

            } = slot;
        }

        Ok(())
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {}
