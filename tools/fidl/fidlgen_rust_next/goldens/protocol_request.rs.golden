// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

/// The type corresponding to the Child protocol.
#[derive(Debug)]
pub struct Child;

pub mod child {
    pub mod prelude {
        pub use crate::{child, Child, ChildClientHandler, ChildServerHandler};
    }

    mod ___detail {

        unsafe impl<___T> ::fidl_next::Protocol<___T> for crate::Child
        where
            ___T: ::fidl_next::Transport,
        {
            type ClientSender = ChildClientSender<___T>;
            type ServerSender = ChildServerSender<___T>;
        }

        /// The client sender for the `Child` protocol.
        pub struct ChildClientSender<___T: ::fidl_next::Transport> {
            #[allow(dead_code)]
            sender: ::fidl_next::protocol::ClientSender<___T>,
        }

        impl<___T> ChildClientSender<___T> where ___T: ::fidl_next::Transport {}

        /// The server sender for the `Child` protocol.
        #[repr(transparent)]
        pub struct ChildServerSender<___T: ::fidl_next::Transport> {
            sender: ::fidl_next::protocol::ServerSender<___T>,
        }

        impl<___T> ChildServerSender<___T> where ___T: ::fidl_next::Transport {}
    }
}

/// A client handler for the Child protocol.
///
/// See [`Child`] for more details.
pub trait ChildClientHandler<___T: ::fidl_next::Transport> {}

impl<___H, ___T> ::fidl_next::ClientProtocol<___H, ___T> for Child
where
    ___H: ChildClientHandler<___T> + Send,
    ___T: ::fidl_next::Transport,
{
    async fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A server handler for the Child protocol.
///
/// See [`Child`] for more details.
pub trait ChildServerHandler<___T: ::fidl_next::Transport> {}

impl<___H, ___T> ::fidl_next::ServerProtocol<___H, ___T> for Child
where
    ___H: ChildServerHandler<___T> + Send,
    ___T: ::fidl_next::Transport,
{
    async fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    async fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct ParentGetChildResponse {
    pub c: ::fidl_next::ClientEnd<crate::Child, ::fidl_next::fuchsia::zx::Channel>,
}

impl ::fidl_next::Encodable for ParentGetChildResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireParentGetChildResponse> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ClientEnd<
            crate::Child,::fidl_next::fuchsia::zx::Channel,> as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    type Encoded = WireParentGetChildResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ParentGetChildResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                c,

            } = out;
        }

        ::fidl_next::Encode::encode(self.c, encoder, c)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ParentGetChildResponse {
    type EncodedOption = ::fidl_next::WireBox<'static, WireParentGetChildResponse>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ParentGetChildResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ParentGetChildResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireParentGetChildResponse> for ParentGetChildResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireParentGetChildResponse, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ClientEnd<
            crate::Child,::fidl_next::fuchsia::zx::Channel,> as ::fidl_next::FromWire<::fidl_next::ClientEnd<
            crate::Child,::fidl_next::fuchsia::WireChannel,>>
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    #[inline]
    fn from_wire(wire: WireParentGetChildResponse) -> Self {
        Self { c: ::fidl_next::FromWire::from_wire(wire.c) }
    }
}

/// The wire type corresponding to [`ParentGetChildResponse`].
#[derive(Debug)]
#[repr(C)]
pub struct WireParentGetChildResponse {
    pub c: ::fidl_next::ClientEnd<crate::Child, ::fidl_next::fuchsia::WireChannel>,
}

unsafe impl ::fidl_next::Wire for WireParentGetChildResponse {
    type Decoded<'de> = WireParentGetChildResponse;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireParentGetChildResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut c,

            } = slot;
        }

        ::fidl_next::Decode::decode(c.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct ParentGetChildRequestResponse {
    pub r: ::fidl_next::ServerEnd<crate::Child, ::fidl_next::fuchsia::zx::Channel>,
}

impl ::fidl_next::Encodable for ParentGetChildRequestResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        Self,
        WireParentGetChildRequestResponse,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<
            crate::Child,::fidl_next::fuchsia::zx::Channel,> as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    type Encoded = WireParentGetChildRequestResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ParentGetChildRequestResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                r,

            } = out;
        }

        ::fidl_next::Encode::encode(self.r, encoder, r)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ParentGetChildRequestResponse {
    type EncodedOption = ::fidl_next::WireBox<'static, WireParentGetChildRequestResponse>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ParentGetChildRequestResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ParentGetChildRequestResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireParentGetChildRequestResponse> for ParentGetChildRequestResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        WireParentGetChildRequestResponse,
        Self,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<
            crate::Child,::fidl_next::fuchsia::zx::Channel,> as ::fidl_next::FromWire<::fidl_next::ServerEnd<
            crate::Child,::fidl_next::fuchsia::WireChannel,>>
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    #[inline]
    fn from_wire(wire: WireParentGetChildRequestResponse) -> Self {
        Self { r: ::fidl_next::FromWire::from_wire(wire.r) }
    }
}

/// The wire type corresponding to [`ParentGetChildRequestResponse`].
#[derive(Debug)]
#[repr(C)]
pub struct WireParentGetChildRequestResponse {
    pub r: ::fidl_next::ServerEnd<crate::Child, ::fidl_next::fuchsia::WireChannel>,
}

unsafe impl ::fidl_next::Wire for WireParentGetChildRequestResponse {
    type Decoded<'de> = WireParentGetChildRequestResponse;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireParentGetChildRequestResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut r,

            } = slot;
        }

        ::fidl_next::Decode::decode(r.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct ParentTakeChildRequest {
    pub c: ::fidl_next::ClientEnd<crate::Child, ::fidl_next::fuchsia::zx::Channel>,
}

impl ::fidl_next::Encodable for ParentTakeChildRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self, WireParentTakeChildRequest> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ClientEnd<
            crate::Child,::fidl_next::fuchsia::zx::Channel,> as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    type Encoded = WireParentTakeChildRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ParentTakeChildRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                c,

            } = out;
        }

        ::fidl_next::Encode::encode(self.c, encoder, c)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ParentTakeChildRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireParentTakeChildRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ParentTakeChildRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ParentTakeChildRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireParentTakeChildRequest> for ParentTakeChildRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<WireParentTakeChildRequest, Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ClientEnd<
            crate::Child,::fidl_next::fuchsia::zx::Channel,> as ::fidl_next::FromWire<::fidl_next::ClientEnd<
            crate::Child,::fidl_next::fuchsia::WireChannel,>>
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    #[inline]
    fn from_wire(wire: WireParentTakeChildRequest) -> Self {
        Self { c: ::fidl_next::FromWire::from_wire(wire.c) }
    }
}

/// The wire type corresponding to [`ParentTakeChildRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireParentTakeChildRequest {
    pub c: ::fidl_next::ClientEnd<crate::Child, ::fidl_next::fuchsia::WireChannel>,
}

unsafe impl ::fidl_next::Wire for WireParentTakeChildRequest {
    type Decoded<'de> = WireParentTakeChildRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireParentTakeChildRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut c,

            } = slot;
        }

        ::fidl_next::Decode::decode(c.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct ParentTakeChildRequestRequest {
    pub r: ::fidl_next::ServerEnd<crate::Child, ::fidl_next::fuchsia::zx::Channel>,
}

impl ::fidl_next::Encodable for ParentTakeChildRequestRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        Self,
        WireParentTakeChildRequestRequest,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<
            crate::Child,::fidl_next::fuchsia::zx::Channel,> as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    type Encoded = WireParentTakeChildRequestRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ParentTakeChildRequestRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                r,

            } = out;
        }

        ::fidl_next::Encode::encode(self.r, encoder, r)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for ParentTakeChildRequestRequest {
    type EncodedOption = ::fidl_next::WireBox<'static, WireParentTakeChildRequestRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for ParentTakeChildRequestRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ParentTakeChildRequestRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::FromWire<WireParentTakeChildRequestRequest> for ParentTakeChildRequestRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<
        WireParentTakeChildRequestRequest,
        Self,
    > = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<
            crate::Child,::fidl_next::fuchsia::zx::Channel,> as ::fidl_next::FromWire<::fidl_next::ServerEnd<
            crate::Child,::fidl_next::fuchsia::WireChannel,>>
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    #[inline]
    fn from_wire(wire: WireParentTakeChildRequestRequest) -> Self {
        Self { r: ::fidl_next::FromWire::from_wire(wire.r) }
    }
}

/// The wire type corresponding to [`ParentTakeChildRequestRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireParentTakeChildRequestRequest {
    pub r: ::fidl_next::ServerEnd<crate::Child, ::fidl_next::fuchsia::WireChannel>,
}

unsafe impl ::fidl_next::Wire for WireParentTakeChildRequestRequest {
    type Decoded<'de> = WireParentTakeChildRequestRequest;

    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireParentTakeChildRequestRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut r,

            } = slot;
        }

        ::fidl_next::Decode::decode(r.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the Parent protocol.
#[derive(Debug)]
pub struct Parent;

pub mod parent {
    pub mod prelude {
        pub use crate::{parent, Parent, ParentClientHandler, ParentServerHandler};

        pub use crate::ParentGetChildRequestResponse;

        pub use crate::ParentGetChildResponse;

        pub use crate::ParentTakeChildRequest;

        pub use crate::ParentTakeChildRequestRequest;
    }

    pub struct GetChild;

    impl ::fidl_next::Method for GetChild {
        const ORDINAL: u64 = 881818649151440699;

        type Protocol = crate::Parent;

        type Request = ();

        type Response = crate::WireParentGetChildResponse;
    }

    pub struct GetChildRequest;

    impl ::fidl_next::Method for GetChildRequest {
        const ORDINAL: u64 = 1096855814967598201;

        type Protocol = crate::Parent;

        type Request = ();

        type Response = crate::WireParentGetChildRequestResponse;
    }

    pub struct TakeChild;

    impl ::fidl_next::Method for TakeChild {
        const ORDINAL: u64 = 4470101341872267920;

        type Protocol = crate::Parent;

        type Request = crate::WireParentTakeChildRequest;

        type Response = ::fidl_next::Never;
    }

    pub struct TakeChildRequest;

    impl ::fidl_next::Method for TakeChildRequest {
        const ORDINAL: u64 = 2333981071306416007;

        type Protocol = crate::Parent;

        type Request = crate::WireParentTakeChildRequestRequest;

        type Response = ::fidl_next::Never;
    }

    mod ___detail {

        pub struct TakeChild<T0> {
            c: T0,
        }

        impl<T0> ::fidl_next::Encodable for TakeChild<T0>
        where
            T0: ::fidl_next::Encodable<
                Encoded = ::fidl_next::ClientEnd<crate::Child, ::fidl_next::fuchsia::WireChannel>,
            >,
        {
            type Encoded = crate::WireParentTakeChildRequest;
        }

        unsafe impl<___E, T0> ::fidl_next::Encode<___E> for TakeChild<T0>
        where
            ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

            ___E: ::fidl_next::fuchsia::HandleEncoder,

            T0: ::fidl_next::Encode<
                ___E,
                Encoded = ::fidl_next::ClientEnd<crate::Child, ::fidl_next::fuchsia::WireChannel>,
            >,
        {
            #[inline]
            fn encode(
                self,
                encoder: &mut ___E,
                out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
            ) -> Result<(), ::fidl_next::EncodeError> {
                ::fidl_next::munge! {
                    let Self::Encoded {
                        c,

                    } = out;
                }

                ::fidl_next::Encode::encode(self.c, encoder, c)?;

                Ok(())
            }
        }

        pub struct TakeChildRequest<T0> {
            r: T0,
        }

        impl<T0> ::fidl_next::Encodable for TakeChildRequest<T0>
        where
            T0: ::fidl_next::Encodable<
                Encoded = ::fidl_next::ServerEnd<crate::Child, ::fidl_next::fuchsia::WireChannel>,
            >,
        {
            type Encoded = crate::WireParentTakeChildRequestRequest;
        }

        unsafe impl<___E, T0> ::fidl_next::Encode<___E> for TakeChildRequest<T0>
        where
            ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

            ___E: ::fidl_next::fuchsia::HandleEncoder,

            T0: ::fidl_next::Encode<
                ___E,
                Encoded = ::fidl_next::ServerEnd<crate::Child, ::fidl_next::fuchsia::WireChannel>,
            >,
        {
            #[inline]
            fn encode(
                self,
                encoder: &mut ___E,
                out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
            ) -> Result<(), ::fidl_next::EncodeError> {
                ::fidl_next::munge! {
                    let Self::Encoded {
                        r,

                    } = out;
                }

                ::fidl_next::Encode::encode(self.r, encoder, r)?;

                Ok(())
            }
        }

        unsafe impl<___T> ::fidl_next::Protocol<___T> for crate::Parent
        where
            ___T: ::fidl_next::Transport,
        {
            type ClientSender = ParentClientSender<___T>;
            type ServerSender = ParentServerSender<___T>;
        }

        /// The client sender for the `Parent` protocol.
        pub struct ParentClientSender<___T: ::fidl_next::Transport> {
            #[allow(dead_code)]
            sender: ::fidl_next::protocol::ClientSender<___T>,
        }

        impl<___T> ParentClientSender<___T>
        where
            ___T: ::fidl_next::Transport,
        {
            pub fn get_child(
                &self,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::GetChild, ___T>,
                ::fidl_next::EncodeError,
            > {
                self.sender
                    .send_two_way(881818649151440699, ())
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }

            pub fn get_child_request(
                &self,
            ) -> Result<
                ::fidl_next::ResponseFuture<'_, super::GetChildRequest, ___T>,
                ::fidl_next::EncodeError,
            > {
                self.sender
                    .send_two_way(1096855814967598201, ())
                    .map(::fidl_next::ResponseFuture::from_untyped)
            }

            pub fn take_child(
                &self,

                c: impl ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = ::fidl_next::ClientEnd<
                        crate::Child,
                        ::fidl_next::fuchsia::WireChannel,
                    >,
                >,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                <___T as ::fidl_next::Transport>::SendBuffer:
                    ::fidl_next::encoder::InternalHandleEncoder,

                <___T as ::fidl_next::Transport>::SendBuffer: ::fidl_next::fuchsia::HandleEncoder,
            {
                self.take_child_with(TakeChild { c })
            }

            pub fn take_child_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireParentTakeChildRequest,
                >,
            {
                self.sender.send_one_way(4470101341872267920, request)
            }

            pub fn take_child_request(
                &self,

                r: impl ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = ::fidl_next::ServerEnd<
                        crate::Child,
                        ::fidl_next::fuchsia::WireChannel,
                    >,
                >,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                <___T as ::fidl_next::Transport>::SendBuffer:
                    ::fidl_next::encoder::InternalHandleEncoder,

                <___T as ::fidl_next::Transport>::SendBuffer: ::fidl_next::fuchsia::HandleEncoder,
            {
                self.take_child_request_with(TakeChildRequest { r })
            }

            pub fn take_child_request_with<___R>(
                &self,
                request: ___R,
            ) -> Result<::fidl_next::SendFuture<'_, ___T>, ::fidl_next::EncodeError>
            where
                ___R: ::fidl_next::Encode<
                    <___T as ::fidl_next::Transport>::SendBuffer,
                    Encoded = crate::WireParentTakeChildRequestRequest,
                >,
            {
                self.sender.send_one_way(2333981071306416007, request)
            }
        }

        /// The server sender for the `Parent` protocol.
        #[repr(transparent)]
        pub struct ParentServerSender<___T: ::fidl_next::Transport> {
            sender: ::fidl_next::protocol::ServerSender<___T>,
        }

        impl<___T> ParentServerSender<___T> where ___T: ::fidl_next::Transport {}
    }
}

/// A client handler for the Parent protocol.
///
/// See [`Parent`] for more details.
pub trait ParentClientHandler<___T: ::fidl_next::Transport> {}

impl<___H, ___T> ::fidl_next::ClientProtocol<___H, ___T> for Parent
where
    ___H: ParentClientHandler<___T> + Send,
    ___T: ::fidl_next::Transport,

    <parent::GetChild as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <parent::GetChildRequest as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    async fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A server handler for the Parent protocol.
///
/// See [`Parent`] for more details.
pub trait ParentServerHandler<___T: ::fidl_next::Transport> {
    fn get_child(
        &mut self,
        sender: &::fidl_next::ServerSender<Parent, ___T>,

        responder: ::fidl_next::Responder<parent::GetChild>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn get_child_request(
        &mut self,
        sender: &::fidl_next::ServerSender<Parent, ___T>,

        responder: ::fidl_next::Responder<parent::GetChildRequest>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn take_child(
        &mut self,
        sender: &::fidl_next::ServerSender<Parent, ___T>,

        request: ::fidl_next::Request<parent::TakeChild, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;

    fn take_child_request(
        &mut self,
        sender: &::fidl_next::ServerSender<Parent, ___T>,

        request: ::fidl_next::Request<parent::TakeChildRequest, ___T>,
    ) -> impl ::core::future::Future<Output = ()> + ::core::marker::Send;
}

impl<___H, ___T> ::fidl_next::ServerProtocol<___H, ___T> for Parent
where
    ___H: ParentServerHandler<___T> + Send,
    ___T: ::fidl_next::Transport,

    <parent::TakeChild as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <parent::TakeChildRequest as ::fidl_next::Method>::Request:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    async fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            4470101341872267920 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.take_child(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            2333981071306416007 => match ::fidl_next::DecoderExt::decode(buffer) {
                Ok(decoded) => handler.take_child_request(sender, decoded).await,
                Err(e) => {
                    sender.close();
                }
            },

            ordinal => {
                sender.close();
            }
        }
    }

    async fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<Self, ___T>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            881818649151440699 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                handler.get_child(sender, responder).await;
            }

            1096855814967598201 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                handler.get_child_request(sender, responder).await;
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Child`
    /// protocol.
    pub type ChildProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Child>;

    impl ::core::convert::From<crate::Child> for ::fidl_test_protocolrequest::ChildMarker {
        #[inline]
        fn from(_: crate::Child) -> Self {
            Self
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Parent`
    /// protocol.
    pub type ParentProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Parent>;

    impl ::core::convert::From<crate::Parent> for ::fidl_test_protocolrequest::ParentMarker {
        #[inline]
        fn from(_: crate::Parent) -> Self {
            Self
        }
    }
}
