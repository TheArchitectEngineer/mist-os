// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

/// The type corresponding to the Child protocol.
#[derive(Debug)]
pub struct Child;

pub mod child {
    pub mod prelude {
        pub use crate::{
            child, Child, ChildClientHandler, ChildClientSender, ChildServerHandler,
            ChildServerSender,
        };
    }
}

/// A helper trait for the `Child` client sender.
pub trait ChildClientSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> ChildClientSender for ::fidl_next::ClientSender<___T, Child>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A client handler for the Child protocol.
///
/// See [`Child`] for more details.
pub trait ChildClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for Child
where
    ___T: ::fidl_next::Transport,
    ___H: ChildClientHandler<___T>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `Child` server sender.
pub trait ChildServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> ChildServerSender for ::fidl_next::ServerSender<___T, Child>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the Child protocol.
///
/// See [`Child`] for more details.
pub trait ChildServerHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for Child
where
    ___T: ::fidl_next::Transport,
    ___H: ChildServerHandler<___T>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct ParentGetChildResponse {
    pub c: ::fidl_next::ClientEnd<::fidl_next::fuchsia::zx::Channel, crate::Child>,
}

impl ::fidl_next::Encodable for ParentGetChildResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ClientEnd<::fidl_next::fuchsia::zx::Channel,crate::Child,
        > as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    type Encoded = WireParentGetChildResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ParentGetChildResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                c,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.c, encoder, c)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ParentGetChildResponse> {
    type EncodedOption = ::fidl_next::WireBox<WireParentGetChildResponse>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<ParentGetChildResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ParentGetChildResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireParentGetChildResponse> for ParentGetChildResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ClientEnd<::fidl_next::fuchsia::zx::Channel,crate::Child,
        > as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    #[inline]
    fn take_from(from: &WireParentGetChildResponse) -> Self {
        Self { c: ::fidl_next::TakeFrom::take_from(&from.c) }
    }
}

/// The wire type corresponding to [`ParentGetChildResponse`].
#[derive(Debug)]
#[repr(C)]
pub struct WireParentGetChildResponse {
    pub c: ::fidl_next::ClientEnd<::fidl_next::fuchsia::WireChannel, crate::Child>,
}

unsafe impl ::fidl_next::ZeroPadding for WireParentGetChildResponse {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireParentGetChildResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut c,

            } = slot;
        }

        ::fidl_next::Decode::decode(c.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct ParentGetChildRequestResponse {
    pub r: ::fidl_next::ServerEnd<::fidl_next::fuchsia::zx::Channel, crate::Child>,
}

impl ::fidl_next::Encodable for ParentGetChildRequestResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<::fidl_next::fuchsia::zx::Channel,crate::Child,
        > as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    type Encoded = WireParentGetChildRequestResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ParentGetChildRequestResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                r,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.r, encoder, r)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ParentGetChildRequestResponse> {
    type EncodedOption = ::fidl_next::WireBox<WireParentGetChildRequestResponse>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<ParentGetChildRequestResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ParentGetChildRequestResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireParentGetChildRequestResponse> for ParentGetChildRequestResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<::fidl_next::fuchsia::zx::Channel,crate::Child,
        > as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    #[inline]
    fn take_from(from: &WireParentGetChildRequestResponse) -> Self {
        Self { r: ::fidl_next::TakeFrom::take_from(&from.r) }
    }
}

/// The wire type corresponding to [`ParentGetChildRequestResponse`].
#[derive(Debug)]
#[repr(C)]
pub struct WireParentGetChildRequestResponse {
    pub r: ::fidl_next::ServerEnd<::fidl_next::fuchsia::WireChannel, crate::Child>,
}

unsafe impl ::fidl_next::ZeroPadding for WireParentGetChildRequestResponse {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireParentGetChildRequestResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut r,

            } = slot;
        }

        ::fidl_next::Decode::decode(r.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct ParentTakeChildRequest {
    pub c: ::fidl_next::ClientEnd<::fidl_next::fuchsia::zx::Channel, crate::Child>,
}

impl ::fidl_next::Encodable for ParentTakeChildRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ClientEnd<::fidl_next::fuchsia::zx::Channel,crate::Child,
        > as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    type Encoded = WireParentTakeChildRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ParentTakeChildRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                c,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.c, encoder, c)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ParentTakeChildRequest> {
    type EncodedOption = ::fidl_next::WireBox<WireParentTakeChildRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<ParentTakeChildRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ParentTakeChildRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireParentTakeChildRequest> for ParentTakeChildRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ClientEnd<::fidl_next::fuchsia::zx::Channel,crate::Child,
        > as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    #[inline]
    fn take_from(from: &WireParentTakeChildRequest) -> Self {
        Self { c: ::fidl_next::TakeFrom::take_from(&from.c) }
    }
}

/// The wire type corresponding to [`ParentTakeChildRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireParentTakeChildRequest {
    pub c: ::fidl_next::ClientEnd<::fidl_next::fuchsia::WireChannel, crate::Child>,
}

unsafe impl ::fidl_next::ZeroPadding for WireParentTakeChildRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireParentTakeChildRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut c,

            } = slot;
        }

        ::fidl_next::Decode::decode(c.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct ParentTakeChildRequestRequest {
    pub r: ::fidl_next::ServerEnd<::fidl_next::fuchsia::zx::Channel, crate::Child>,
}

impl ::fidl_next::Encodable for ParentTakeChildRequestRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<::fidl_next::fuchsia::zx::Channel,crate::Child,
        > as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    type Encoded = WireParentTakeChildRequestRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ParentTakeChildRequestRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                r,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.r, encoder, r)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ParentTakeChildRequestRequest> {
    type EncodedOption = ::fidl_next::WireBox<WireParentTakeChildRequestRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<ParentTakeChildRequestRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ParentTakeChildRequestRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireParentTakeChildRequestRequest> for ParentTakeChildRequestRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    ::fidl_next::ServerEnd<::fidl_next::fuchsia::zx::Channel,crate::Child,
        > as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    #[inline]
    fn take_from(from: &WireParentTakeChildRequestRequest) -> Self {
        Self { r: ::fidl_next::TakeFrom::take_from(&from.r) }
    }
}

/// The wire type corresponding to [`ParentTakeChildRequestRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireParentTakeChildRequestRequest {
    pub r: ::fidl_next::ServerEnd<::fidl_next::fuchsia::WireChannel, crate::Child>,
}

unsafe impl ::fidl_next::ZeroPadding for WireParentTakeChildRequestRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireParentTakeChildRequestRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut r,

            } = slot;
        }

        ::fidl_next::Decode::decode(r.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the Parent protocol.
#[derive(Debug)]
pub struct Parent;

pub mod parent {
    pub mod prelude {
        pub use crate::{
            parent, Parent, ParentClientHandler, ParentClientSender, ParentServerHandler,
            ParentServerSender,
        };

        pub use crate::ParentGetChildRequestResponse;

        pub use crate::ParentGetChildResponse;

        pub use crate::ParentTakeChildRequest;

        pub use crate::ParentTakeChildRequestRequest;
    }

    pub struct GetChild;

    impl ::fidl_next::Method for GetChild {
        const ORDINAL: u64 = 881818649151440699;

        type Protocol = crate::Parent;

        type Request = ();

        type Response = crate::WireParentGetChildResponse;
    }

    pub struct GetChildRequest;

    impl ::fidl_next::Method for GetChildRequest {
        const ORDINAL: u64 = 1096855814967598201;

        type Protocol = crate::Parent;

        type Request = ();

        type Response = crate::WireParentGetChildRequestResponse;
    }

    pub struct TakeChild;

    impl ::fidl_next::Method for TakeChild {
        const ORDINAL: u64 = 4470101341872267920;

        type Protocol = crate::Parent;

        type Request = crate::WireParentTakeChildRequest;

        type Response = ::fidl_next::Never;
    }

    pub struct TakeChildRequest;

    impl ::fidl_next::Method for TakeChildRequest {
        const ORDINAL: u64 = 2333981071306416007;

        type Protocol = crate::Parent;

        type Request = crate::WireParentTakeChildRequestRequest;

        type Response = ::fidl_next::Never;
    }
}

/// A helper trait for the `Parent` client sender.
pub trait ParentClientSender {
    type Transport: ::fidl_next::Transport;

    fn get_child(
        &self,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, parent::GetChild>,
        ::fidl_next::EncodeError,
    >;

    fn get_child_request(
        &self,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, parent::GetChildRequest>,
        ::fidl_next::EncodeError,
    >;

    fn take_child<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireParentTakeChildRequest,
        >;

    fn take_child_request<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireParentTakeChildRequestRequest,
        >;
}

impl<___T> ParentClientSender for ::fidl_next::ClientSender<___T, Parent>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn get_child(
        &self,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, parent::GetChild>,
        ::fidl_next::EncodeError,
    > {
        self.as_untyped()
            .send_two_way(881818649151440699, &mut ())
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn get_child_request(
        &self,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, parent::GetChildRequest>,
        ::fidl_next::EncodeError,
    > {
        self.as_untyped()
            .send_two_way(1096855814967598201, &mut ())
            .map(::fidl_next::ResponseFuture::from_untyped)
    }

    fn take_child<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireParentTakeChildRequest,
        >,
    {
        self.as_untyped().send_one_way(4470101341872267920, request)
    }

    fn take_child_request<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::SendFuture<'_, Self::Transport>, ::fidl_next::EncodeError>
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireParentTakeChildRequestRequest,
        >,
    {
        self.as_untyped().send_one_way(2333981071306416007, request)
    }
}

/// A client handler for the Parent protocol.
///
/// See [`Parent`] for more details.
pub trait ParentClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for Parent
where
    ___T: ::fidl_next::Transport,
    ___H: ParentClientHandler<___T>,

    <parent::GetChild as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    <parent::GetChildRequest as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `Parent` server sender.
pub trait ParentServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> ParentServerSender for ::fidl_next::ServerSender<___T, Parent>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the Parent protocol.
///
/// See [`Parent`] for more details.
pub trait ParentServerHandler<___T: ::fidl_next::Transport> {
    fn get_child(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Parent>,

        responder: ::fidl_next::Responder<parent::GetChild>,
    );

    fn get_child_request(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Parent>,

        responder: ::fidl_next::Responder<parent::GetChildRequest>,
    );

    fn take_child(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Parent>,

        request: ::fidl_next::RequestBuffer<___T, parent::TakeChild>,
    );

    fn take_child_request(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, Parent>,

        request: ::fidl_next::RequestBuffer<___T, parent::TakeChildRequest>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for Parent
where
    ___T: ::fidl_next::Transport,
    ___H: ParentServerHandler<___T>,

    crate::WireParentTakeChildRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,

    crate::WireParentTakeChildRequestRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            4470101341872267920 => {
                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.take_child(sender, buffer);
            }

            2333981071306416007 => {
                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.take_child_request(sender, buffer);
            }

            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            881818649151440699 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                handler.get_child(sender, responder);
            }

            1096855814967598201 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                handler.get_child_request(sender, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Child`
    /// protocol.
    pub type ChildProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Child>;

    impl ::fidl_next::TakeFrom<crate::Child> for ::fidl_test_protocolrequest::ChildMarker {
        #[inline]
        fn take_from(from: &crate::Child) -> Self {
            Self
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireParentGetChildResponse>
        for ::fidl_test_protocolrequest::ParentGetChildResponse
    {
        #[inline]
        fn take_from(from: &crate::WireParentGetChildResponse) -> Self {
            Self { c: ::fidl_next::TakeFrom::take_from(&from.c) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireParentGetChildRequestResponse>
        for ::fidl_test_protocolrequest::ParentGetChildRequestResponse
    {
        #[inline]
        fn take_from(from: &crate::WireParentGetChildRequestResponse) -> Self {
            Self { r: ::fidl_next::TakeFrom::take_from(&from.r) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireParentTakeChildRequest>
        for ::fidl_test_protocolrequest::ParentTakeChildRequest
    {
        #[inline]
        fn take_from(from: &crate::WireParentTakeChildRequest) -> Self {
            Self { c: ::fidl_next::TakeFrom::take_from(&from.c) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireParentTakeChildRequestRequest>
        for ::fidl_test_protocolrequest::ParentTakeChildRequestRequest
    {
        #[inline]
        fn take_from(from: &crate::WireParentTakeChildRequestRequest) -> Self {
            Self { r: ::fidl_next::TakeFrom::take_from(&from.r) }
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `Parent`
    /// protocol.
    pub type ParentProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::Parent>;

    impl ::fidl_next::TakeFrom<crate::Parent> for ::fidl_test_protocolrequest::ParentMarker {
        #[inline]
        fn take_from(from: &crate::Parent) -> Self {
            Self
        }
    }
}
