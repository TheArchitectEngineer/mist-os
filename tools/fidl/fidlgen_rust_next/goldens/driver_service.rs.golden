// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

/// The type corresponding to the DriverOnlyService service.
#[derive(Debug)]
pub struct DriverOnlyService;

/// A helper trait for instances of the `DriverOnlyService` service.
pub trait DriverOnlyServiceInstance {
    /// The error type for the instance.
    type Error: ::core::error::Error + Send + Sync + 'static;

    /// The transport type created by connecting to a member.
    type Transport: ::fidl_next::Transport;

    /// Attempts to connect to the `member` member.
    fn member(
        &mut self,
    ) -> Result<
        ::fidl_next::ClientEnd<
            Self::Transport,
            ::fidl_next::ClientEnd<::fidl_next::fuchsia::zx::Handle, crate::SomeDriverProtocol>,
        >,
        Self::Error,
    >;
}

impl<___I> DriverOnlyServiceInstance for ::fidl_next::ServiceInstance<___I, DriverOnlyService>
where
    ___I: ::fidl_next::protocol::ServiceInstance,
{
    type Error = ___I::Error;
    type Transport = ___I::Transport;

    fn member(
        &mut self,
    ) -> Result<
        ::fidl_next::ClientEnd<
            Self::Transport,
            ::fidl_next::ClientEnd<::fidl_next::fuchsia::zx::Handle, crate::SomeDriverProtocol>,
        >,
        Self::Error,
    > {
        self.as_untyped_mut().connect("member").map(::fidl_next::ClientEnd::from_untyped)
    }
}

/// The type corresponding to the SomeDriverProtocol protocol.
#[derive(Debug)]
pub struct SomeDriverProtocol;

pub mod some_driver_protocol {}

/// A helper trait for the `SomeDriverProtocol` client sender.
pub trait SomeDriverProtocolClientSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> SomeDriverProtocolClientSender for ::fidl_next::ClientSender<___T, SomeDriverProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A client handler for the SomeDriverProtocol protocol.
///
/// See [`SomeDriverProtocol`] for more details.
pub trait SomeDriverProtocolClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for SomeDriverProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: SomeDriverProtocolClientHandler<___T>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `SomeDriverProtocol` server sender.
pub trait SomeDriverProtocolServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> SomeDriverProtocolServerSender for ::fidl_next::ServerSender<___T, SomeDriverProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the SomeDriverProtocol protocol.
///
/// See [`SomeDriverProtocol`] for more details.
pub trait SomeDriverProtocolServerHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for SomeDriverProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: SomeDriverProtocolServerHandler<___T>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// Commonly-used items that should usually be in scope, such as extension traits.
pub mod prelude {
    pub use super::{
        DriverOnlyServiceInstance, SomeDriverProtocolClientSender, SomeDriverProtocolServerSender,
    };
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `SomeDriverProtocol`
    /// protocol.
    pub type SomeDriverProtocolProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::SomeDriverProtocol>;
}
