// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
#[repr(C)]
pub struct Int32Wrapper {
    pub val: i32,
}

impl ::fidl_next::Encodable for Int32Wrapper {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireInt32Wrapper;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for Int32Wrapper
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<Int32Wrapper> {
    type EncodedOption = ::fidl_next::WireBox<WireInt32Wrapper>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<Int32Wrapper>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Int32Wrapper: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireInt32Wrapper> for Int32Wrapper {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WireInt32Wrapper) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
    }
}

/// The wire type corresponding to [`Int32Wrapper`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireInt32Wrapper {
    pub val: ::fidl_next::WireI32,
}

unsafe impl ::fidl_next::ZeroPadding for WireInt32Wrapper {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireInt32Wrapper
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct SimpleProtocolAddRequest {
    pub a: i32,

    pub b: i32,
}

impl ::fidl_next::Encodable for SimpleProtocolAddRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <i32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireSimpleProtocolAddRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for SimpleProtocolAddRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.a, encoder, a)?;

        ::fidl_next::Encode::encode(&mut self.b, encoder, b)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SimpleProtocolAddRequest> {
    type EncodedOption = ::fidl_next::WireBox<WireSimpleProtocolAddRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<SimpleProtocolAddRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SimpleProtocolAddRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSimpleProtocolAddRequest> for SimpleProtocolAddRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled()
                && <i32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WireSimpleProtocolAddRequest) -> Self {
        Self {
            a: ::fidl_next::TakeFrom::take_from(&from.a),

            b: ::fidl_next::TakeFrom::take_from(&from.b),
        }
    }
}

/// The wire type corresponding to [`SimpleProtocolAddRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireSimpleProtocolAddRequest {
    pub a: ::fidl_next::WireI32,

    pub b: ::fidl_next::WireI32,
}

unsafe impl ::fidl_next::ZeroPadding for WireSimpleProtocolAddRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSimpleProtocolAddRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
                mut b,

            } = slot;
        }

        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(b.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct SimpleProtocolAddResponse {
    pub sum: i32,
}

impl ::fidl_next::Encodable for SimpleProtocolAddResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    type Encoded = WireSimpleProtocolAddResponse;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for SimpleProtocolAddResponse
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                sum,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.sum, encoder, sum)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SimpleProtocolAddResponse> {
    type EncodedOption = ::fidl_next::WireBox<WireSimpleProtocolAddResponse>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<SimpleProtocolAddResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SimpleProtocolAddResponse: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSimpleProtocolAddResponse> for SimpleProtocolAddResponse {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <i32 as ::fidl_next::Encodable>::COPY_OPTIMIZATION.is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WireSimpleProtocolAddResponse) -> Self {
        Self { sum: ::fidl_next::TakeFrom::take_from(&from.sum) }
    }
}

/// The wire type corresponding to [`SimpleProtocolAddResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireSimpleProtocolAddResponse {
    pub sum: ::fidl_next::WireI32,
}

unsafe impl ::fidl_next::ZeroPadding for WireSimpleProtocolAddResponse {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSimpleProtocolAddResponse
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut sum,

            } = slot;
        }

        ::fidl_next::Decode::decode(sum.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the SimpleProtocol protocol.
#[derive(Debug)]
pub struct SimpleProtocol;

pub mod simple_protocol {
    pub mod prelude {
        pub use crate::{
            simple_protocol, SimpleProtocol, SimpleProtocolClientHandler,
            SimpleProtocolClientSender, SimpleProtocolServerHandler, SimpleProtocolServerSender,
        };

        pub use crate::SimpleProtocolAddRequest;

        pub use crate::SimpleProtocolAddResponse;
    }

    pub struct Add;

    impl ::fidl_next::Method for Add {
        const ORDINAL: u64 = 9142761280038437494;

        type Protocol = crate::SimpleProtocol;

        type Request = crate::WireSimpleProtocolAddRequest;

        type Response = crate::WireSimpleProtocolAddResponse;
    }
}

/// A helper trait for the `SimpleProtocol` client sender.
pub trait SimpleProtocolClientSender {
    type Transport: ::fidl_next::Transport;

    fn add<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, simple_protocol::Add>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireSimpleProtocolAddRequest,
        >;
}

impl<___T> SimpleProtocolClientSender for ::fidl_next::ClientSender<___T, SimpleProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;

    fn add<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::ResponseFuture<'_, Self::Transport, simple_protocol::Add>,
        ::fidl_next::EncodeError,
    >
    where
        ___R: ::fidl_next::Encode<
            <Self::Transport as ::fidl_next::Transport>::SendBuffer,
            Encoded = crate::WireSimpleProtocolAddRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(9142761280038437494, request)
            .map(::fidl_next::ResponseFuture::from_untyped)
    }
}

/// A client handler for the SimpleProtocol protocol.
///
/// See [`SimpleProtocol`] for more details.
pub trait SimpleProtocolClientHandler<___T: ::fidl_next::Transport> {}

impl<___T, ___H> ::fidl_next::ClientProtocol<___T, ___H> for SimpleProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: SimpleProtocolClientHandler<___T>,

    <simple_protocol::Add as ::fidl_next::Method>::Response:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `SimpleProtocol` server sender.
pub trait SimpleProtocolServerSender {
    type Transport: ::fidl_next::Transport;
}

impl<___T> SimpleProtocolServerSender for ::fidl_next::ServerSender<___T, SimpleProtocol>
where
    ___T: ::fidl_next::Transport,
{
    type Transport = ___T;
}

/// A server handler for the SimpleProtocol protocol.
///
/// See [`SimpleProtocol`] for more details.
pub trait SimpleProtocolServerHandler<___T: ::fidl_next::Transport> {
    fn add(
        &mut self,
        sender: &::fidl_next::ServerSender<___T, SimpleProtocol>,

        request: ::fidl_next::RequestBuffer<___T, simple_protocol::Add>,

        responder: ::fidl_next::Responder<simple_protocol::Add>,
    );
}

impl<___T, ___H> ::fidl_next::ServerProtocol<___T, ___H> for SimpleProtocol
where
    ___T: ::fidl_next::Transport,
    ___H: SimpleProtocolServerHandler<___T>,

    crate::WireSimpleProtocolAddRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::Transport>::RecvBuffer>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            9142761280038437494 => {
                let responder = ::fidl_next::Responder::from_untyped(responder);

                let buffer = ::fidl_next::RequestBuffer::from_untyped(buffer);
                handler.add(sender, buffer, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Clone, Debug)]
pub enum SimpleUnion {
    A(i32),

    B(f32),
}

impl ::fidl_next::Encodable for SimpleUnion {
    type Encoded = WireSimpleUnion;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for SimpleUnion
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireSimpleUnion { raw } = out);

        match self {
            Self::A(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, i32>(value, 1, encoder, raw)?
            }

            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as_static::<___E, f32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SimpleUnion> {
    type EncodedOption = WireOptionalSimpleUnion;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<SimpleUnion>
where
    ___E: ?Sized,
    SimpleUnion: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalSimpleUnion { raw } = &mut *out);

        if let Some(inner) = this {
            let value_out = unsafe { &mut *out.as_mut_ptr().cast() };
            ::fidl_next::Encode::encode(&mut **inner, encoder, value_out)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSimpleUnion> for SimpleUnion {
    #[inline]
    fn take_from(from: &WireSimpleUnion) -> Self {
        match from.raw.ordinal() {
            1 => Self::A(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked::<::fidl_next::WireI32>()
            })),

            2 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get().deref_unchecked::<::fidl_next::WireF32>()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalSimpleUnion> for Option<Box<SimpleUnion>> {
    #[inline]
    fn take_from(from: &WireOptionalSimpleUnion) -> Self {
        if let Some(inner) = from.as_ref() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`SimpleUnion`].
#[repr(transparent)]
pub struct WireSimpleUnion {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireSimpleUnion {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

pub mod simple_union {
    pub enum Ref<'union> {
        A(&'union ::fidl_next::WireI32),

        B(&'union ::fidl_next::WireF32),
    }
}

impl WireSimpleUnion {
    pub fn as_ref(&self) -> crate::simple_union::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::simple_union::Ref::A(unsafe {
                self.raw.get().deref_unchecked::<::fidl_next::WireI32>()
            }),

            2 => crate::simple_union::Ref::B(unsafe {
                self.raw.get().deref_unchecked::<::fidl_next::WireF32>()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireSimpleUnion {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<::fidl_next::WireI32>() } },

            2 => Self { raw: unsafe { self.raw.clone_unchecked::<::fidl_next::WireF32>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSimpleUnion
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireI32>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireF32>(
                raw, decoder,
            )?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireSimpleUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireI32>().fmt(f) },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireF32>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalSimpleUnion {
    raw: ::fidl_next::RawWireUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireOptionalSimpleUnion {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        ::fidl_next::munge!(let Self { raw } = out);
        ::fidl_next::RawWireUnion::zero_padding(raw);
    }
}

impl WireOptionalSimpleUnion {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireSimpleUnion> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }
}

impl Clone for WireOptionalSimpleUnion {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalSimpleUnion { raw: ::fidl_next::RawWireUnion::absent() };
        }

        match self.raw.ordinal() {
            1 => Self { raw: unsafe { self.raw.clone_unchecked::<::fidl_next::WireI32>() } },

            2 => Self { raw: unsafe { self.raw.clone_unchecked::<::fidl_next::WireF32>() } },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireOptionalSimpleUnion
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireI32>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireF32>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalSimpleUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct StructWithNullableHandle {
    pub val: Option<::fidl_next::fuchsia::zx::Handle>,
}

impl ::fidl_next::Encodable for StructWithNullableHandle {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    Option<::fidl_next::fuchsia::zx::Handle> as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    type Encoded = WireStructWithNullableHandle;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for StructWithNullableHandle
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableHandle> {
    type EncodedOption = ::fidl_next::WireBox<WireStructWithNullableHandle>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableHandle>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableHandle: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructWithNullableHandle> for StructWithNullableHandle {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true

                && <
                    Option<::fidl_next::fuchsia::zx::Handle> as ::fidl_next::Encodable
                >::COPY_OPTIMIZATION.is_enabled()

        )
    };

    #[inline]
    fn take_from(from: &WireStructWithNullableHandle) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
    }
}

/// The wire type corresponding to [`StructWithNullableHandle`].
#[derive(Debug)]
#[repr(C)]
pub struct WireStructWithNullableHandle {
    pub val: ::fidl_next::fuchsia::WireOptionalHandle,
}

unsafe impl ::fidl_next::ZeroPadding for WireStructWithNullableHandle {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructWithNullableHandle
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct StructWithNullableProtocol {
    pub val:
        ::fidl_next::ClientEnd<Option<::fidl_next::fuchsia::zx::Channel>, crate::SimpleProtocol>,
}

impl ::fidl_next::Encodable for StructWithNullableProtocol {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <::fidl_next::ClientEnd<
                Option<::fidl_next::fuchsia::zx::Channel>,
                crate::SimpleProtocol,
            > as ::fidl_next::Encodable>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    type Encoded = WireStructWithNullableProtocol;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for StructWithNullableProtocol
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableProtocol> {
    type EncodedOption = ::fidl_next::WireBox<WireStructWithNullableProtocol>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableProtocol>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableProtocol: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructWithNullableProtocol> for StructWithNullableProtocol {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <::fidl_next::ClientEnd<
                Option<::fidl_next::fuchsia::zx::Channel>,
                crate::SimpleProtocol,
            > as ::fidl_next::Encodable>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WireStructWithNullableProtocol) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
    }
}

/// The wire type corresponding to [`StructWithNullableProtocol`].
#[derive(Debug)]
#[repr(C)]
pub struct WireStructWithNullableProtocol {
    pub val:
        ::fidl_next::ClientEnd<::fidl_next::fuchsia::WireOptionalChannel, crate::SimpleProtocol>,
}

unsafe impl ::fidl_next::ZeroPadding for WireStructWithNullableProtocol {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructWithNullableProtocol
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct StructWithNullableRequest {
    pub val:
        ::fidl_next::ServerEnd<Option<::fidl_next::fuchsia::zx::Channel>, crate::SimpleProtocol>,
}

impl ::fidl_next::Encodable for StructWithNullableRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <::fidl_next::ServerEnd<
                Option<::fidl_next::fuchsia::zx::Channel>,
                crate::SimpleProtocol,
            > as ::fidl_next::Encodable>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    type Encoded = WireStructWithNullableRequest;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for StructWithNullableRequest
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableRequest> {
    type EncodedOption = ::fidl_next::WireBox<WireStructWithNullableRequest>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableRequest: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructWithNullableRequest> for StructWithNullableRequest {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <::fidl_next::ServerEnd<
                Option<::fidl_next::fuchsia::zx::Channel>,
                crate::SimpleProtocol,
            > as ::fidl_next::Encodable>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WireStructWithNullableRequest) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
    }
}

/// The wire type corresponding to [`StructWithNullableRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireStructWithNullableRequest {
    pub val:
        ::fidl_next::ServerEnd<::fidl_next::fuchsia::WireOptionalChannel, crate::SimpleProtocol>,
}

unsafe impl ::fidl_next::ZeroPadding for WireStructWithNullableRequest {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructWithNullableRequest
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct StructWithNullableString {
    pub val: Option<String>,
}

impl ::fidl_next::Encodable for StructWithNullableString {
    type Encoded = WireStructWithNullableString;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for StructWithNullableString
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableString> {
    type EncodedOption = ::fidl_next::WireBox<WireStructWithNullableString>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableString>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableString: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructWithNullableString> for StructWithNullableString {
    #[inline]
    fn take_from(from: &WireStructWithNullableString) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
    }
}

/// The wire type corresponding to [`StructWithNullableString`].
#[derive(Debug)]
#[repr(C)]
pub struct WireStructWithNullableString {
    pub val: ::fidl_next::WireOptionalString,
}

unsafe impl ::fidl_next::ZeroPadding for WireStructWithNullableString {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructWithNullableString
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct StructWithNullableStruct {
    pub val: Option<Box<crate::Int32Wrapper>>,
}

impl ::fidl_next::Encodable for StructWithNullableStruct {
    type Encoded = WireStructWithNullableStruct;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for StructWithNullableStruct
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableStruct> {
    type EncodedOption = ::fidl_next::WireBox<WireStructWithNullableStruct>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableStruct>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableStruct: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructWithNullableStruct> for StructWithNullableStruct {
    #[inline]
    fn take_from(from: &WireStructWithNullableStruct) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
    }
}

/// The wire type corresponding to [`StructWithNullableStruct`].
#[derive(Debug)]
#[repr(C)]
pub struct WireStructWithNullableStruct {
    pub val: ::fidl_next::WireBox<crate::WireInt32Wrapper>,
}

unsafe impl ::fidl_next::ZeroPadding for WireStructWithNullableStruct {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructWithNullableStruct
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct StructWithNullableUnion {
    pub val: Option<Box<crate::SimpleUnion>>,
}

impl ::fidl_next::Encodable for StructWithNullableUnion {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <Option<Box<crate::SimpleUnion>> as ::fidl_next::Encodable>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    type Encoded = WireStructWithNullableUnion;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for StructWithNullableUnion
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableUnion> {
    type EncodedOption = ::fidl_next::WireBox<WireStructWithNullableUnion>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableUnion>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableUnion: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructWithNullableUnion> for StructWithNullableUnion {
    const COPY_OPTIMIZATION: ::fidl_next::CopyOptimization<Self> = unsafe {
        ::fidl_next::CopyOptimization::enable_if(
            true && <Option<Box<crate::SimpleUnion>> as ::fidl_next::Encodable>::COPY_OPTIMIZATION
                .is_enabled(),
        )
    };

    #[inline]
    fn take_from(from: &WireStructWithNullableUnion) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
    }
}

/// The wire type corresponding to [`StructWithNullableUnion`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireStructWithNullableUnion {
    pub val: crate::WireOptionalSimpleUnion,
}

unsafe impl ::fidl_next::ZeroPadding for WireStructWithNullableUnion {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructWithNullableUnion
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct StructWithNullableVector {
    pub val: Option<Vec<i32>>,
}

impl ::fidl_next::Encodable for StructWithNullableVector {
    type Encoded = WireStructWithNullableVector;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for StructWithNullableVector
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableVector> {
    type EncodedOption = ::fidl_next::WireBox<WireStructWithNullableVector>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableVector>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableVector: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructWithNullableVector> for StructWithNullableVector {
    #[inline]
    fn take_from(from: &WireStructWithNullableVector) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
    }
}

/// The wire type corresponding to [`StructWithNullableVector`].
#[derive(Debug)]
#[repr(C)]
pub struct WireStructWithNullableVector {
    pub val: ::fidl_next::WireOptionalVector<::fidl_next::WireI32>,
}

unsafe impl ::fidl_next::ZeroPadding for WireStructWithNullableVector {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructWithNullableVector
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    impl ::fidl_next::TakeFrom<crate::WireInt32Wrapper> for ::fidl_test_nullable::Int32Wrapper {
        #[inline]
        fn take_from(from: &crate::WireInt32Wrapper) -> Self {
            Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireSimpleProtocolAddRequest>
        for ::fidl_test_nullable::SimpleProtocolAddRequest
    {
        #[inline]
        fn take_from(from: &crate::WireSimpleProtocolAddRequest) -> Self {
            Self {
                a: ::fidl_next::TakeFrom::take_from(&from.a),

                b: ::fidl_next::TakeFrom::take_from(&from.b),
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireSimpleProtocolAddResponse>
        for ::fidl_test_nullable::SimpleProtocolAddResponse
    {
        #[inline]
        fn take_from(from: &crate::WireSimpleProtocolAddResponse) -> Self {
            Self { sum: ::fidl_next::TakeFrom::take_from(&from.sum) }
        }
    }

    #[cfg(target_os = "fuchsia")]
    /// An alias for a client sender over `zx::Channel` for the `SimpleProtocol`
    /// protocol.
    pub type SimpleProtocolProxy =
        ::fidl_next::ClientSender<::fidl_next::fuchsia::zx::Channel, crate::SimpleProtocol>;

    impl ::fidl_next::TakeFrom<crate::SimpleProtocol> for ::fidl_test_nullable::SimpleProtocolMarker {
        #[inline]
        fn take_from(from: &crate::SimpleProtocol) -> Self {
            Self
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireSimpleUnion> for ::fidl_test_nullable::SimpleUnion {
        #[inline]
        fn take_from(from: &crate::WireSimpleUnion) -> Self {
            match from.as_ref() {
                crate::simple_union::Ref::A(value) => {
                    Self::A(::fidl_next::TakeFrom::take_from(value))
                }

                crate::simple_union::Ref::B(value) => {
                    Self::B(::fidl_next::TakeFrom::take_from(value))
                }
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireOptionalSimpleUnion>
        for Option<Box<::fidl_test_nullable::SimpleUnion>>
    {
        #[inline]
        fn take_from(from: &crate::WireOptionalSimpleUnion) -> Self {
            if let Some(inner) = from.as_ref() {
                Some(::fidl_next::TakeFrom::take_from(inner))
            } else {
                None
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireStructWithNullableHandle>
        for ::fidl_test_nullable::StructWithNullableHandle
    {
        #[inline]
        fn take_from(from: &crate::WireStructWithNullableHandle) -> Self {
            Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireStructWithNullableProtocol>
        for ::fidl_test_nullable::StructWithNullableProtocol
    {
        #[inline]
        fn take_from(from: &crate::WireStructWithNullableProtocol) -> Self {
            Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireStructWithNullableRequest>
        for ::fidl_test_nullable::StructWithNullableRequest
    {
        #[inline]
        fn take_from(from: &crate::WireStructWithNullableRequest) -> Self {
            Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireStructWithNullableString>
        for ::fidl_test_nullable::StructWithNullableString
    {
        #[inline]
        fn take_from(from: &crate::WireStructWithNullableString) -> Self {
            Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireStructWithNullableStruct>
        for ::fidl_test_nullable::StructWithNullableStruct
    {
        #[inline]
        fn take_from(from: &crate::WireStructWithNullableStruct) -> Self {
            Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireStructWithNullableUnion>
        for ::fidl_test_nullable::StructWithNullableUnion
    {
        #[inline]
        fn take_from(from: &crate::WireStructWithNullableUnion) -> Self {
            Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireStructWithNullableVector>
        for ::fidl_test_nullable::StructWithNullableVector
    {
        #[inline]
        fn take_from(from: &crate::WireStructWithNullableVector) -> Self {
            Self { val: ::fidl_next::TakeFrom::take_from(&from.val) }
        }
    }
}
