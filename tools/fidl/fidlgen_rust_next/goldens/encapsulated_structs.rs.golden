// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct Int16Int8 {
    pub a: i16,

    pub b: i8,
}

impl ::fidl_next::Encodable for Int16Int8 {
    type Encoded = WireInt16Int8;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for Int16Int8
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.a, encoder, a)?;

        ::fidl_next::Encode::encode(&mut self.b, encoder, b)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<Int16Int8> {
    type EncodedOption = ::fidl_next::WireBox<WireInt16Int8>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<Int16Int8>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Int16Int8: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireInt16Int8> for Int16Int8 {
    #[inline]
    fn take_from(from: &WireInt16Int8) -> Self {
        Self {
            a: ::fidl_next::TakeFrom::take_from(&from.a),

            b: ::fidl_next::TakeFrom::take_from(&from.b),
        }
    }
}

/// The wire type corresponding to [`Int16Int8`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireInt16Int8 {
    pub a: ::fidl_next::WireI16,

    pub b: i8,
}

unsafe impl ::fidl_next::ZeroPadding for WireInt16Int8 {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        unsafe {
            out.as_mut_ptr().cast::<u8>().add(3).write_bytes(0, 1);
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireInt16Int8
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
                mut b,

            } = slot;
        }

        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(b.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ArrayInt16Int8 {
    pub arr: [crate::Int16Int8; 3],
}

impl ::fidl_next::Encodable for ArrayInt16Int8 {
    type Encoded = WireArrayInt16Int8;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for ArrayInt16Int8
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                arr,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.arr, encoder, arr)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ArrayInt16Int8> {
    type EncodedOption = ::fidl_next::WireBox<WireArrayInt16Int8>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<ArrayInt16Int8>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ArrayInt16Int8: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireArrayInt16Int8> for ArrayInt16Int8 {
    #[inline]
    fn take_from(from: &WireArrayInt16Int8) -> Self {
        Self { arr: ::fidl_next::TakeFrom::take_from(&from.arr) }
    }
}

/// The wire type corresponding to [`ArrayInt16Int8`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireArrayInt16Int8 {
    pub arr: [crate::WireInt16Int8; 3],
}

unsafe impl ::fidl_next::ZeroPadding for WireArrayInt16Int8 {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireArrayInt16Int8
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut arr,

            } = slot;
        }

        ::fidl_next::Decode::decode(arr.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Int8Int32 {
    pub a: i8,

    pub b: i32,
}

impl ::fidl_next::Encodable for Int8Int32 {
    type Encoded = WireInt8Int32;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for Int8Int32
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.a, encoder, a)?;

        ::fidl_next::Encode::encode(&mut self.b, encoder, b)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<Int8Int32> {
    type EncodedOption = ::fidl_next::WireBox<WireInt8Int32>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<Int8Int32>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Int8Int32: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireInt8Int32> for Int8Int32 {
    #[inline]
    fn take_from(from: &WireInt8Int32) -> Self {
        Self {
            a: ::fidl_next::TakeFrom::take_from(&from.a),

            b: ::fidl_next::TakeFrom::take_from(&from.b),
        }
    }
}

/// The wire type corresponding to [`Int8Int32`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireInt8Int32 {
    pub a: i8,

    pub b: ::fidl_next::WireI32,
}

unsafe impl ::fidl_next::ZeroPadding for WireInt8Int32 {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        unsafe {
            out.as_mut_ptr().cast::<u8>().add(1).write_bytes(0, 3);
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireInt8Int32
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
                mut b,

            } = slot;
        }

        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(b.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Debug)]
pub struct NonInlineStructTestStruct {
    pub element: Option<Box<crate::Int16Int8>>,

    pub h: ::fidl_next::fuchsia::zx::Handle,
}

impl ::fidl_next::Encodable for NonInlineStructTestStruct {
    type Encoded = WireNonInlineStructTestStruct;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for NonInlineStructTestStruct
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                element,
                h,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.element, encoder, element)?;

        ::fidl_next::Encode::encode(&mut self.h, encoder, h)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<NonInlineStructTestStruct> {
    type EncodedOption = ::fidl_next::WireBox<WireNonInlineStructTestStruct>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<NonInlineStructTestStruct>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    NonInlineStructTestStruct: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireNonInlineStructTestStruct> for NonInlineStructTestStruct {
    #[inline]
    fn take_from(from: &WireNonInlineStructTestStruct) -> Self {
        Self {
            element: ::fidl_next::TakeFrom::take_from(&from.element),

            h: ::fidl_next::TakeFrom::take_from(&from.h),
        }
    }
}

/// The wire type corresponding to [`NonInlineStructTestStruct`].
#[derive(Debug)]
#[repr(C)]
pub struct WireNonInlineStructTestStruct {
    pub element: ::fidl_next::WireBox<crate::WireInt16Int8>,

    pub h: ::fidl_next::fuchsia::WireHandle,
}

unsafe impl ::fidl_next::ZeroPadding for WireNonInlineStructTestStruct {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {
        unsafe {
            out.as_mut_ptr().cast::<u8>().add(12).write_bytes(0, 4);
        }
    }
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireNonInlineStructTestStruct
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut element,
                mut h,

            } = slot;
        }

        ::fidl_next::Decode::decode(element.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(h.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct StructPaddingTestStruct {
    pub trailing: crate::Int16Int8,

    pub inner: crate::Int8Int32,

    pub array: crate::ArrayInt16Int8,
}

impl ::fidl_next::Encodable for StructPaddingTestStruct {
    type Encoded = WireStructPaddingTestStruct;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for StructPaddingTestStruct
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                trailing,
                inner,
                array,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.trailing, encoder, trailing)?;

        ::fidl_next::Encode::encode(&mut self.inner, encoder, inner)?;

        ::fidl_next::Encode::encode(&mut self.array, encoder, array)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructPaddingTestStruct> {
    type EncodedOption = ::fidl_next::WireBox<WireStructPaddingTestStruct>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructPaddingTestStruct>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructPaddingTestStruct: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructPaddingTestStruct> for StructPaddingTestStruct {
    #[inline]
    fn take_from(from: &WireStructPaddingTestStruct) -> Self {
        Self {
            trailing: ::fidl_next::TakeFrom::take_from(&from.trailing),

            inner: ::fidl_next::TakeFrom::take_from(&from.inner),

            array: ::fidl_next::TakeFrom::take_from(&from.array),
        }
    }
}

/// The wire type corresponding to [`StructPaddingTestStruct`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireStructPaddingTestStruct {
    pub trailing: crate::WireInt16Int8,

    pub inner: crate::WireInt8Int32,

    pub array: crate::WireArrayInt16Int8,
}

unsafe impl ::fidl_next::ZeroPadding for WireStructPaddingTestStruct {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructPaddingTestStruct
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut trailing,
                mut inner,
                mut array,

            } = slot;
        }

        ::fidl_next::Decode::decode(trailing.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(inner.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(array.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Debug)]
pub struct TopLevelStruct {
    pub a: crate::StructPaddingTestStruct,

    pub b: crate::NonInlineStructTestStruct,
}

impl ::fidl_next::Encodable for TopLevelStruct {
    type Encoded = WireTopLevelStruct;
}

unsafe impl<___E> ::fidl_next::Encode<___E> for TopLevelStruct
where
    ___E: ::fidl_next::encoder::InternalHandleEncoder + ?Sized,

    ___E: ::fidl_next::Encoder,

    ___E: ::fidl_next::fuchsia::HandleEncoder,
{
    #[inline]
    fn encode(
        &mut self,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::Encoded>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = out;
        }

        ::fidl_next::Encode::encode(&mut self.a, encoder, a)?;

        ::fidl_next::Encode::encode(&mut self.b, encoder, b)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<TopLevelStruct> {
    type EncodedOption = ::fidl_next::WireBox<WireTopLevelStruct>;
}

unsafe impl<___E> ::fidl_next::EncodeOption<___E> for Box<TopLevelStruct>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    TopLevelStruct: ::fidl_next::Encode<___E>,
{
    #[inline]
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        out: &mut ::core::mem::MaybeUninit<Self::EncodedOption>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(out);
        } else {
            ::fidl_next::WireBox::encode_absent(out);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireTopLevelStruct> for TopLevelStruct {
    #[inline]
    fn take_from(from: &WireTopLevelStruct) -> Self {
        Self {
            a: ::fidl_next::TakeFrom::take_from(&from.a),

            b: ::fidl_next::TakeFrom::take_from(&from.b),
        }
    }
}

/// The wire type corresponding to [`TopLevelStruct`].
#[derive(Debug)]
#[repr(C)]
pub struct WireTopLevelStruct {
    pub a: crate::WireStructPaddingTestStruct,

    pub b: crate::WireNonInlineStructTestStruct,
}

unsafe impl ::fidl_next::ZeroPadding for WireTopLevelStruct {
    #[inline]
    fn zero_padding(out: &mut ::core::mem::MaybeUninit<Self>) {}
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireTopLevelStruct
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder + ?Sized,

    ___D: ::fidl_next::Decoder,

    ___D: ::fidl_next::fuchsia::HandleDecoder,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
                mut b,

            } = slot;
        }

        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(b.as_mut(), decoder)?;

        Ok(())
    }
}

/// Compatibility shims which mimic some API surfaces of the current Rust bindings.
pub mod compat {

    impl ::fidl_next::TakeFrom<crate::WireInt16Int8> for ::fidl_test_encapsulatedstructs::Int16Int8 {
        #[inline]
        fn take_from(from: &crate::WireInt16Int8) -> Self {
            Self {
                a: ::fidl_next::TakeFrom::take_from(&from.a),

                b: ::fidl_next::TakeFrom::take_from(&from.b),
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireArrayInt16Int8>
        for ::fidl_test_encapsulatedstructs::ArrayInt16Int8
    {
        #[inline]
        fn take_from(from: &crate::WireArrayInt16Int8) -> Self {
            Self { arr: ::fidl_next::TakeFrom::take_from(&from.arr) }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireInt8Int32> for ::fidl_test_encapsulatedstructs::Int8Int32 {
        #[inline]
        fn take_from(from: &crate::WireInt8Int32) -> Self {
            Self {
                a: ::fidl_next::TakeFrom::take_from(&from.a),

                b: ::fidl_next::TakeFrom::take_from(&from.b),
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireNonInlineStructTestStruct>
        for ::fidl_test_encapsulatedstructs::NonInlineStructTestStruct
    {
        #[inline]
        fn take_from(from: &crate::WireNonInlineStructTestStruct) -> Self {
            Self {
                element: ::fidl_next::TakeFrom::take_from(&from.element),

                h: ::fidl_next::TakeFrom::take_from(&from.h),
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireStructPaddingTestStruct>
        for ::fidl_test_encapsulatedstructs::StructPaddingTestStruct
    {
        #[inline]
        fn take_from(from: &crate::WireStructPaddingTestStruct) -> Self {
            Self {
                trailing: ::fidl_next::TakeFrom::take_from(&from.trailing),

                inner: ::fidl_next::TakeFrom::take_from(&from.inner),

                array: ::fidl_next::TakeFrom::take_from(&from.array),
            }
        }
    }

    impl ::fidl_next::TakeFrom<crate::WireTopLevelStruct>
        for ::fidl_test_encapsulatedstructs::TopLevelStruct
    {
        #[inline]
        fn take_from(from: &crate::WireTopLevelStruct) -> Self {
            Self {
                a: ::fidl_next::TakeFrom::take_from(&from.a),

                b: ::fidl_next::TakeFrom::take_from(&from.b),
            }
        }
    }
}
