# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")
import("//build/config/fuchsia/platform_version.gni")
import("//build/host.gni")
import("//build/rust/rustc_binary.gni")
import("//build/rust/rustc_test.gni")
import("//build/testing/host_test_data.gni")

declare_args() {
  # Enforce ABI compatibility checks for stable API levels.
  enforce_abi_compat = true

  # Check external to external IPC ABI compatibility
  check_external_external_abi_compat = false
}

# These API levels have known ABI incomaptibilities with the platform that we don't plan to fix.
allow_abi_breakage = [
  "16",
  "17",
]

# Don't follow enpoints to evaluate tear-off APIs at these levels
allow_tear_off_abi_breakage = [
  "16",
  "17",
  "19",
  "20",
  "21",
  "22",
  "23",
]

if (is_host) {
  abi_compat_deps = [
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:argh",
    "//third_party/rust_crates:bitflags",
    "//third_party/rust_crates:flyweights",
    "//third_party/rust_crates:itertools",
    "//third_party/rust_crates:maplit",
    "//third_party/rust_crates:serde",
    "//third_party/rust_crates:serde_json",
  ]
  abi_compat_sources = [
    "src/compare/handle.rs",
    "src/compare/mod.rs",
    "src/compare/path.rs",
    "src/compare/primitive.rs",
    "src/compare/problems.rs",
    "src/compare/types.rs",
    "src/convert.rs",
    "src/ir.rs",
    "src/main.rs",
  ]
  rustc_binary("abi_compat_bin") {
    name = "abi_compat"
    edition = "2021"
    deps = abi_compat_deps
    sources = abi_compat_sources
  }

  host_test_data("abi_compat_test_data") {
    sources = [ "$root_out_dir/fidlc" ]
    deps = [ "//tools/fidl/fidlc" ]
  }

  rustc_test("abi_compat_test") {
    edition = "2021"
    deps = abi_compat_deps + [ "//third_party/rust_crates:tempfile" ]
    sources = abi_compat_sources + [
                "src/compare/protocol_tests.rs",
                "src/compare/test.rs",
                "src/compare/types_tests.rs",
              ]
    source_root = "src/main.rs"
    data_deps = [ ":abi_compat_test_data" ]
  }

  # Run the abi_compat tool
  #
  # Parameters:
  #
  #   level_irs
  #     [list of strings] Paths to the combined IRs for the ABIs to compare.
  #     These files are generated by the //tools/fidl/platform-ir/ tool.
  #
  #   report
  #     [string] Path to write the compatibility report to.
  #
  #   deps
  #     [list of labels] Additional dependencies, typically on platform-ir
  #     generation.
  #
  #   tear_off (optional; default: false)
  #     [bool] Follow client_end and server_end to evaluate tear-off protocols.
  #
  #   enforce (optional; default: false)
  #     [bool] Stop the build if errors are found.
  template("abi_compat") {
    level_irs = invoker.level_irs
    report = invoker.report
    extra_deps = invoker.deps
    enforce = false
    if (defined(invoker.enforce)) {
      enforce = invoker.enforce
    }
    tear_off = false
    if (defined(invoker.tear_off)) {
      tear_off = invoker.tear_off
    }

    compiled_action(target_name) {
      tool = ":abi_compat_bin"
      tool_output_name = "abi_compat"
      mnemonic = "ABI"

      inputs = level_irs
      outputs = [ report ]

      args = [
        "--out",
        rebase_path(report, root_build_dir),
      ]

      if (enforce) {
        args += [ "--enforce" ]
      }

      if (tear_off) {
        args += [ "--tear-off" ]
      }

      args += rebase_path(level_irs, root_build_dir)

      deps = extra_deps
    }
  }

  reports = []
  foreach(api_level,
          platform_version.frozen_api_levels + [
                "NEXT",
                "HEAD",
              ]) {
    label = "report_${api_level}"
    reports += [ ":${label}" ]

    include_tear_off =
        filter_include(allow_tear_off_abi_breakage, [ "$api_level" ]) == []

    # Generate level <-> PLATFORM ABI reports without tear-off protocols, possibly block breakages.
    abi_compat(label) {
      report = "${root_build_dir}/compatibility-report-${api_level}.txt"
      level_irs = [
        "${root_build_dir}/platform-ir-PLATFORM.json",
        "${root_build_dir}/platform-ir-${api_level}.json",
      ]
      deps = [
        "//tools/fidl/platform-ir:platform_ir_${api_level}(${default_toolchain})",
        "//tools/fidl/platform-ir:platform_ir_platform(${default_toolchain})",
      ]

      # Optionally check tear-off ABI breakage here.
      tear_off = include_tear_off

      # Stop the build if errors are found, unless the API level is in `allow_abi_breakage`.
      if (enforce_abi_compat &&
          filter_include(allow_abi_breakage, [ "$api_level" ]) == []) {
        enforce = true
      }
    }

    # If we're not enforcing tear-off protocol ABI, at least generate some reports.
    if (!include_tear_off) {
      tear_off_label = "report_tear_off_${api_level}"
      reports += [ ":${tear_off_label}" ]

      # Generate level <-> PLATFORM ABI reports with tear-off protocols.
      abi_compat(tear_off_label) {
        tear_off = true
        report =
            "${root_build_dir}/compatibility-report-tear-off-${api_level}.txt"
        level_irs = [
          "${root_build_dir}/platform-ir-PLATFORM.json",
          "${root_build_dir}/platform-ir-${api_level}.json",
        ]
        deps = [
          "//tools/fidl/platform-ir:platform_ir_${api_level}(${default_toolchain})",
          "//tools/fidl/platform-ir:platform_ir_platform(${default_toolchain})",
        ]
      }
    }
  }

  if (check_external_external_abi_compat) {
    # Generate ABI report covering how each stable API level is compatible with each other.
    external_label = "report_external"
    reports += [ ":${external_label}" ]
    abi_compat(external_label) {
      tear_off = true
      enforce = false
      report = "${root_build_dir}/compatibility-report-external.txt"
      level_irs = []
      deps = []
      foreach(api_level, platform_version.frozen_api_levels + [ "NEXT" ]) {
        level_irs += [ "${root_build_dir}/platform-ir-${api_level}.json" ]
        deps += [ "//tools/fidl/platform-ir:platform_ir_${api_level}(${default_toolchain})" ]
      }
    }
  }

  group("generate-reports") {
    deps = reports
  }
  if (!enforce_abi_compat) {
    not_needed([ "allow_abi_breakage" ])
  }
} else {
  group("generate-reports") {
    deps = [ ":generate-reports($host_toolchain)" ]
  }

  not_needed([
               "allow_abi_breakage",
               "allow_tear_off_abi_breakage",
             ])
}

group("abi-compat") {
  deps = [ ":abi_compat($host_toolchain)" ]
}

group("tests") {
  deps = [ ":abi_compat_test($host_toolchain)" ]
  testonly = true
}

group("check-compatibility") {
  deps = [ ":generate-reports($host_toolchain)" ]
}
