// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.drivertwoway/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_drivertwoway::TwoWayAddRequest::TwoWayAddRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_drivertwoway::TwoWayAddRequest::TwoWayAddRequest(uint16_t addend1, uint16_t addend2) noexcept
    : storage_({.addend1 = std::move(addend1),
                .addend2 = std::move(addend2)}) {}

::test_drivertwoway::TwoWayAddRequest::TwoWayAddRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : TwoWayAddRequest(Storage_{
                                                                                                                          .addend1 = {},
                                                                                                                          .addend2 = {},
                                                                                                                      }) {}
::test_drivertwoway::TwoWayAddRequest::TwoWayAddRequest(const ::test_drivertwoway::TwoWayAddRequest& other) noexcept : ::test_drivertwoway::TwoWayAddRequest(other.CloneStorage_()) {}

::test_drivertwoway::TwoWayAddRequest& test_drivertwoway::TwoWayAddRequest::operator=(const ::test_drivertwoway::TwoWayAddRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_drivertwoway::TwoWayAddRequest::operator==(const TwoWayAddRequest& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_drivertwoway::TwoWayAddRequest, 4>::Equal(this, &other);
}

bool test_drivertwoway::TwoWayAddRequest::operator!=(const TwoWayAddRequest& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_drivertwoway::TwoWayAddRequest, 4>::Equal(this, &other);
}

::test_drivertwoway::TwoWayAddRequest::Storage_ test_drivertwoway::TwoWayAddRequest::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.addend1),
      ::fidl::internal::NaturalClone(storage_.addend2)};
}
uint16_t
test_drivertwoway::TwoWayAddRequest::addend1() const {
  return storage_.addend1;
}

uint16_t& ::test_drivertwoway::TwoWayAddRequest::addend1() {
  return storage_.addend1;
}

::test_drivertwoway::TwoWayAddRequest& ::test_drivertwoway::TwoWayAddRequest::addend1(uint16_t value) {
  storage_.addend1 = std::move(value);
  return *this;
}
uint16_t
test_drivertwoway::TwoWayAddRequest::addend2() const {
  return storage_.addend2;
}

uint16_t& ::test_drivertwoway::TwoWayAddRequest::addend2() {
  return storage_.addend2;
}

::test_drivertwoway::TwoWayAddRequest& ::test_drivertwoway::TwoWayAddRequest::addend2(uint16_t value) {
  storage_.addend2 = std::move(value);
  return *this;
}

::test_drivertwoway::TwoWayAddResponse::TwoWayAddResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_drivertwoway::TwoWayAddResponse::TwoWayAddResponse(uint16_t sum) noexcept
    : storage_({.sum = std::move(sum)}) {}

::test_drivertwoway::TwoWayAddResponse::TwoWayAddResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : TwoWayAddResponse(Storage_{
                                                                                                                            .sum = {},
                                                                                                                        }) {}
::test_drivertwoway::TwoWayAddResponse::TwoWayAddResponse(const ::test_drivertwoway::TwoWayAddResponse& other) noexcept : ::test_drivertwoway::TwoWayAddResponse(other.CloneStorage_()) {}

::test_drivertwoway::TwoWayAddResponse& test_drivertwoway::TwoWayAddResponse::operator=(const ::test_drivertwoway::TwoWayAddResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_drivertwoway::TwoWayAddResponse::operator==(const TwoWayAddResponse& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_drivertwoway::TwoWayAddResponse, 2>::Equal(this, &other);
}

bool test_drivertwoway::TwoWayAddResponse::operator!=(const TwoWayAddResponse& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_drivertwoway::TwoWayAddResponse, 2>::Equal(this, &other);
}

::test_drivertwoway::TwoWayAddResponse::Storage_ test_drivertwoway::TwoWayAddResponse::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.sum)};
}
uint16_t
test_drivertwoway::TwoWayAddResponse::sum() const {
  return storage_.sum;
}

uint16_t& ::test_drivertwoway::TwoWayAddResponse::sum() {
  return storage_.sum;
}

::test_drivertwoway::TwoWayAddResponse& ::test_drivertwoway::TwoWayAddResponse::sum(uint16_t value) {
  storage_.sum = std::move(value);
  return *this;
}

#pragma clang diagnostic pop
