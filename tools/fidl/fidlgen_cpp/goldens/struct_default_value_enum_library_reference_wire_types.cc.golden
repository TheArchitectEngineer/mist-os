// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.structdefaultvalueenumlibraryreference/cpp/wire_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_structdefaultvalueenumlibraryreference::wire::Foo, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_structdefaultvalueenumlibraryreference::wire::Foo* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (kIsMemcpyCompatible) {
    memcpy(position.As<void>(), value, sizeof(::test_structdefaultvalueenumlibraryreference::wire::Foo));
  } else {
    internal::WireCodingTraits<::test_dependent::wire::MyEnum, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(encoder, &value->field, position + 0, recursion_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_structdefaultvalueenumlibraryreference::wire::Foo, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (!Base::are_members_memcpy_compatible) {
    internal::WireCodingTraits<::test_dependent::wire::MyEnum, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + 0, recursion_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_structdefaultvalueenumlibraryreference::wire::Foo, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_structdefaultvalueenumlibraryreference::wire::Foo, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_structdefaultvalueenumlibraryreference::wire::Foo>);
static_assert(offsetof(::test_structdefaultvalueenumlibraryreference::wire::Foo, field) == 0);
static_assert(sizeof(::test_structdefaultvalueenumlibraryreference::wire::Foo) == ::fidl::TypeTraits<::test_structdefaultvalueenumlibraryreference::wire::Foo>::kPrimarySize);

#pragma clang diagnostic pop
