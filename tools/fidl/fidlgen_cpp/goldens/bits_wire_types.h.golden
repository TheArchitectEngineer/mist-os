// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.bits/cpp/common_types.h>
#include <fidl/test.bits/cpp/markers.h>
#include <lib/fidl/cpp/wire/array.h>
#include <lib/fidl/cpp/wire/envelope.h>
#include <lib/fidl/cpp/wire/internal/framework_err.h>
#include <lib/fidl/cpp/wire/message.h>
#include <lib/fidl/cpp/wire/message_storage.h>
#include <lib/fidl/cpp/wire/object_view.h>
#include <lib/fidl/cpp/wire/string_view.h>
#include <lib/fidl/cpp/wire/traits.h>
#include <lib/fidl/cpp/wire/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_bits {

namespace wire {
using MyBits = ::test_bits::MyBits;

using StrictBits = ::test_bits::StrictBits;

using FlexibleBits = ::test_bits::FlexibleBits;

using EmptyBits = ::test_bits::EmptyBits;

}  // namespace wire
}  // namespace test_bits
namespace fidl {

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_bits::wire::MyBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = false;
  static void Encode(internal::WireEncoder* encoder, ::test_bits::wire::MyBits* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_bits::wire::StrictBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = sizeof(uint64_t);
  static constexpr bool kIsMemcpyCompatible = false;
  static void Encode(internal::WireEncoder* encoder, ::test_bits::wire::StrictBits* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_bits::wire::FlexibleBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = sizeof(uint64_t);
  static constexpr bool kIsMemcpyCompatible = true;
  static void Encode(internal::WireEncoder* encoder, ::test_bits::wire::FlexibleBits* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_bits::wire::EmptyBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = true;
  static void Encode(internal::WireEncoder* encoder, ::test_bits::wire::EmptyBits* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

#pragma clang diagnostic pop

}  // namespace fidl
