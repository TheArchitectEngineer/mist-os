// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.versions/cpp/common_types.h>
#include <fidl/test.versions/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_versions {

class Struct;

class Table;

class Union;

using Alias = ::std::string;

constexpr uint32_t kConst = 0u;

constexpr bool kAddedAtNext = true;

constexpr bool kAddedAtHead = true;

#ifdef __Fuchsia__

class Struct {
 private:
  struct Storage_;

 public:
  Struct(Storage_ storage) noexcept;
  Struct(uint32_t x) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |Struct| only if all of its members are default constructible.
  Struct() = default;
#pragma clang diagnostic pop

  Struct(Struct&&) noexcept = default;
  Struct& operator=(Struct&&) noexcept = default;

  uint32_t
  x() const;

  uint32_t& x();

  // Setter for x.
  //

  Struct& x(uint32_t value);

  Struct(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    uint32_t x = {};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_versions::Struct, 4>;
  friend struct ::fidl::internal::MemberVisitor<::test_versions::Struct>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::x, 0});
  static constexpr auto kPadding = std::make_tuple();
};

class Table {
 private:
  struct Storage_;

 public:
  Table(Storage_ storage) noexcept;
  Table() noexcept = default;
  Table(Table&&) noexcept = default;
  Table& operator=(Table&&) noexcept = default;

  bool IsEmpty() const;

  const std::optional<uint32_t>& x() const;
  ::std::optional<uint32_t>& x();

  // Setter for x.
  //

  Table& x(std::optional<uint32_t> value);

  Table(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::optional<uint32_t> x;
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_versions::Table>;
  friend struct ::fidl::internal::MemberVisitor<::test_versions::Table>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{
      1, &Storage_::x});
};

class Union {
 private:
  using Storage_ =
      std::variant<
          std::monostate, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kX = 1,  // 0x1
    _do_not_handle_this__write_a_default_case_instead = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  Union(Union&& other) noexcept;
  Union& operator=(Union&& other) noexcept;
  bool IsUnknown() const;

  ::test_versions::Union::Tag Which() const;
  static Union WithX(uint32_t val);
  const ::fidl::internal::UnionMemberView<1, Storage_> x() const;
  ::fidl::internal::UnionMemberView<1, Storage_> x();

  // Sets the union to hold the x member.
  //

  Union& x(uint32_t value);

  Union(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  std::shared_ptr<Storage_> storage_;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_versions::Union>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit Union(std::shared_ptr<Storage_> storage);

  static size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_versions::Union::Tag tag);
  static std::optional<::test_versions::Union::Tag> IndexToTag(size_t index);
};

#endif  // __Fuchsia__

}  // namespace test_versions
namespace fidl {

#ifdef __Fuchsia__

template <>
struct IsResource<::test_versions::Struct> : public std::true_type {};
template <>
struct IsFidlType<::test_versions::Struct> : public std::true_type {};

template <>
struct TypeTraits<::test_versions::Struct> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 4;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_versions::Struct> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_versions::Struct, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_versions::Struct, 4> {};

template <>
struct IsResource<::test_versions::Table> : public std::true_type {};
template <>
struct IsFidlType<::test_versions::Table> : public std::true_type {};

template <>
struct TypeTraits<::test_versions::Table> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_versions::Table> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_versions::Table, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_versions::Table> {};

template <>
struct IsResource<::test_versions::Union> : public std::true_type {};
template <>
struct IsFidlType<::test_versions::Union> : public std::true_type {};

template <>
struct TypeTraits<::test_versions::Union> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_versions::Union> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_versions::Union, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_versions::Union> {};

#endif  // __Fuchsia__

template <>
struct internal::NaturalCodingTraits<::test_versions::Bits, ::fidl::internal::NaturalCodingConstraintEmpty> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = true;

  static void Encode(internal::NaturalEncoder* encoder, ::test_versions::Bits* value, size_t offset, size_t recursion_depth);
  static void Decode(internal::NaturalDecoder* decoder, ::test_versions::Bits* value, size_t offset, size_t recursion_depth);
};

template <>
struct internal::NaturalCodingTraits<::test_versions::Enum, ::fidl::internal::NaturalCodingConstraintEmpty> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = true;

  static void Encode(internal::NaturalEncoder* encoder, ::test_versions::Enum* value, size_t offset, size_t recursion_depth);
  static void Decode(internal::NaturalDecoder* decoder, ::test_versions::Enum* value, size_t offset, size_t recursion_depth);
};

#pragma clang diagnostic pop

}  // namespace fidl
