// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.versions/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

void fidl::internal::NaturalCodingTraits<::test_versions::Bits, ::fidl::internal::NaturalCodingConstraintEmpty>::Encode(
    fidl::internal::NaturalEncoder* encoder, ::test_versions::Bits* value, size_t offset, size_t recursion_depth) {
  *encoder->template GetPtr<::test_versions::Bits>(offset) = *value;
}
void fidl::internal::NaturalCodingTraits<::test_versions::Bits, ::fidl::internal::NaturalCodingConstraintEmpty>::Decode(
    fidl::internal::NaturalDecoder* decoder, ::test_versions::Bits* value, size_t offset, size_t recursion_depth) {
  *value = *decoder->template GetPtr<::test_versions::Bits>(offset);
}

void fidl::internal::NaturalCodingTraits<::test_versions::Enum, ::fidl::internal::NaturalCodingConstraintEmpty>::Encode(
    fidl::internal::NaturalEncoder* encoder, ::test_versions::Enum* value, size_t offset, size_t recursion_depth) {
  *encoder->template GetPtr<::test_versions::Enum>(offset) = *value;
}

void fidl::internal::NaturalCodingTraits<::test_versions::Enum, ::fidl::internal::NaturalCodingConstraintEmpty>::Decode(
    fidl::internal::NaturalDecoder* decoder, ::test_versions::Enum* value, size_t offset, size_t recursion_depth) {
  *value = *decoder->template GetPtr<::test_versions::Enum>(offset);
}

#ifdef __Fuchsia__

::test_versions::Struct::Struct(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_versions::Struct::Struct(uint32_t x) noexcept
    : storage_({.x = std::move(x)}) {}

::test_versions::Struct::Struct(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Struct(Storage_{
                                                                                                  .x = {},
                                                                                              }) {}
uint32_t
test_versions::Struct::x() const {
  return storage_.x;
}

uint32_t& ::test_versions::Struct::x() {
  return storage_.x;
}

::test_versions::Struct& ::test_versions::Struct::x(uint32_t value) {
  storage_.x = std::move(value);
  return *this;
}

::test_versions::Table::Table(::test_versions::Table::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_versions::Table::Table(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Table(Storage_{}) {}

bool test_versions::Table::IsEmpty() const {
  return !(storage_.x.has_value());
}
const std::optional<uint32_t>& test_versions::Table::x() const {
  return storage_.x;
}

::std::optional<uint32_t>& test_versions::Table::x() {
  return storage_.x;
}

::test_versions::Table& test_versions::Table::x(std::optional<uint32_t> value) {
  storage_.x = std::move(value);
  return *this;
}

::test_versions::Union::Union(Union&& other) noexcept : Union(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_versions::Union& ::test_versions::Union::operator=(Union&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_versions::Union::Union(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_versions::Union::Union(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_versions::Union::Tag test_versions::Union::Which() const {
  return Union::IndexToTag(storage_->index()).value();
}

size_t test_versions::Union::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_versions::Union::Tag tag) {
  switch (tag) {
    case ::test_versions::Union::Tag::kX:
      return 1;
    default: {
      return 0;
    }
  }
}

std::optional<::test_versions::Union::Tag> test_versions::Union::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_versions::Union::Tag::kX;
    default:
      return ::test_versions::Union::Tag::_do_not_handle_this__write_a_default_case_instead;
  }
}

bool test_versions::Union::IsUnknown() const {
  return Which() == ::test_versions::Union::Tag::_do_not_handle_this__write_a_default_case_instead;
}
::test_versions::Union test_versions::Union::WithX(uint32_t val) {
  return Union(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_versions::Union::Storage_> test_versions::Union::x() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_versions::Union::Storage_> test_versions::Union::x() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_versions::Union& test_versions::Union::x(uint32_t value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}

#endif  // __Fuchsia__

#pragma clang diagnostic pop
