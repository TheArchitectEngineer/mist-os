// WARNING: This file is machine generated by fidlgen.

  // fidl_experiment = output_index_json

  #pragma once

  #include <cinttypes>

  #include <lib/fidl/cpp/wire/internal/framework_err.h>
  #include <lib/fidl/cpp/wire/array.h>
  #include <lib/fidl/cpp/wire/envelope.h>
  #include <lib/fidl/cpp/wire/message_storage.h>
  #include <lib/fidl/cpp/wire/message.h>
  #include <lib/fidl/cpp/wire/object_view.h>
  #include <lib/fidl/cpp/wire/string_view.h>
  #include <lib/fidl/cpp/wire/traits.h>
  #include <lib/fidl/cpp/wire/wire_types.h>
  #include <lib/stdcompat/optional.h>

  #include <fidl/test.table/cpp/markers.h>
  #include <fidl/test.table/cpp/common_types.h>

  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wshadow"

  namespace test_table {

namespace wire {

class EmptyTable;

class SimpleTable;

class OlderSimpleTable;

class NewerSimpleTable;

class ReverseOrdinalTable;

class TableWithAttributes;

class ExtensionTable;

class SixtyFourOrdinalTable;

  }  // namespace wire
}  // namespace test_table

template<>
class ::fidl::WireTableBuilder<::test_table::wire::EmptyTable>;
template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::EmptyTable>;

template <>
struct ::fidl::WireTableFrame<::test_table::wire::EmptyTable> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;

  friend class ::test_table::wire::EmptyTable;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::EmptyTable, ::fidl::WireTableBuilder<::test_table::wire::EmptyTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::EmptyTable, ::fidl::WireTableExternalBuilder<::test_table::wire::EmptyTable>>;
};

namespace test_table {
namespace wire {

class EmptyTable {
public:
  EmptyTable() = default;
  EmptyTable(const EmptyTable& other) noexcept = default;
  EmptyTable& operator=(const EmptyTable& other) noexcept = default;
  EmptyTable(EmptyTable&& other) noexcept = default;
  EmptyTable& operator=(EmptyTable&& other) noexcept = default;

  ~EmptyTable() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_table::wire::EmptyTable> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_table::wire::EmptyTable> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::EmptyTable>> frame);
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
public:
#else // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
private:
#endif // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  explicit EmptyTable(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit EmptyTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::EmptyTable>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::EmptyTable>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::EmptyTable, ::fidl::WireTableBuilder<::test_table::wire::EmptyTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::EmptyTable, ::fidl::WireTableExternalBuilder<::test_table::wire::EmptyTable>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::EmptyTable>> frame_ptr_;
};}  // namespace wire
}  // namespace test_table

template<typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_table::wire::EmptyTable, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_table::wire::EmptyTable Build();
 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::EmptyTable>>&& frame);

 private:
  ::test_table::wire::EmptyTable table_;
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::EmptyTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::EmptyTable, ::fidl::WireTableBuilder<::test_table::wire::EmptyTable>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::EmptyTable, ::fidl::WireTableBuilder<::test_table::wire::EmptyTable>>;

 public:
 private:
  friend class ::test_table::wire::EmptyTable;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;

};

template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::EmptyTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::EmptyTable, ::fidl::WireTableExternalBuilder<::test_table::wire::EmptyTable>>  {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::EmptyTable, ::fidl::WireTableExternalBuilder<::test_table::wire::EmptyTable>>;

 private:
  friend class ::test_table::wire::EmptyTable;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::EmptyTable>* frame);
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::SimpleTable>;
template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::SimpleTable>;

template <>
struct ::fidl::WireTableFrame<::test_table::wire::SimpleTable> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;
  ::fidl::Envelope<int64_t> x_;
  [[maybe_unused]] ::fidl::UntypedEnvelope reserved_1_;
  [[maybe_unused]] ::fidl::UntypedEnvelope reserved_2_;
  [[maybe_unused]] ::fidl::UntypedEnvelope reserved_3_;
  ::fidl::Envelope<int64_t> y_;

  friend class ::test_table::wire::SimpleTable;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, ::fidl::WireTableBuilder<::test_table::wire::SimpleTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::SimpleTable>>;
};

namespace test_table {
namespace wire {

class SimpleTable {
public:
  SimpleTable() = default;
  SimpleTable(const SimpleTable& other) noexcept = default;
  SimpleTable& operator=(const SimpleTable& other) noexcept = default;
  SimpleTable(SimpleTable&& other) noexcept = default;
  SimpleTable& operator=(SimpleTable&& other) noexcept = default;

  ~SimpleTable() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_table::wire::SimpleTable> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_table::wire::SimpleTable> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SimpleTable>> frame);

  [[ nodiscard ]] int64_t& x() const;
  [[ nodiscard ]] bool has_x() const;

  [[ nodiscard ]] int64_t& y() const;
  [[ nodiscard ]] bool has_y() const;
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
public:
#else // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
private:
#endif // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  SimpleTable& set_x(::fidl::ObjectView<int64_t> elem);
  SimpleTable& set_x(std::nullptr_t);
  template <typename... Args>
  SimpleTable& set_x(::fidl::AnyArena& allocator, Args&&... args) {
    return set_x(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SimpleTable& clear_x();
  SimpleTable& set_y(::fidl::ObjectView<int64_t> elem);
  SimpleTable& set_y(std::nullptr_t);
  template <typename... Args>
  SimpleTable& set_y(::fidl::AnyArena& allocator, Args&&... args) {
    return set_y(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SimpleTable& clear_y();

  explicit SimpleTable(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit SimpleTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SimpleTable>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SimpleTable>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, ::fidl::WireTableBuilder<::test_table::wire::SimpleTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::SimpleTable>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SimpleTable>> frame_ptr_;
};}  // namespace wire
}  // namespace test_table

template<typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_table::wire::SimpleTable Build();
    [[ nodiscard ]] bool has_x() const;

    // Clears the x field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_x();

    // Getter for x.
    //

    [[ nodiscard ]] int64_t& x() const;

    // Setter for x.
    //

      BuilderImpl& x(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_y() const;

    // Clears the y field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_y();

    // Getter for y.
    //

    [[ nodiscard ]] int64_t& y() const;

    // Setter for y.
    //

      BuilderImpl& y(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SimpleTable>>&& frame);

 private:
  ::test_table::wire::SimpleTable table_;
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::SimpleTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, ::fidl::WireTableBuilder<::test_table::wire::SimpleTable>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, ::fidl::WireTableBuilder<::test_table::wire::SimpleTable>>;

 public:
    using Base::x;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SimpleTable>& x(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        x(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::y;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SimpleTable>& y(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        y(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
 private:
  friend class ::test_table::wire::SimpleTable;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;

};

template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::SimpleTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::SimpleTable>>  {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::SimpleTable>>;

 private:
  friend class ::test_table::wire::SimpleTable;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::SimpleTable>* frame);
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::OlderSimpleTable>;
template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::OlderSimpleTable>;

template <>
struct ::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;
  ::fidl::Envelope<int64_t> x_;

  friend class ::test_table::wire::OlderSimpleTable;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, ::fidl::WireTableBuilder<::test_table::wire::OlderSimpleTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::OlderSimpleTable>>;
};

namespace test_table {
namespace wire {

class OlderSimpleTable {
public:
  OlderSimpleTable() = default;
  OlderSimpleTable(const OlderSimpleTable& other) noexcept = default;
  OlderSimpleTable& operator=(const OlderSimpleTable& other) noexcept = default;
  OlderSimpleTable(OlderSimpleTable&& other) noexcept = default;
  OlderSimpleTable& operator=(OlderSimpleTable&& other) noexcept = default;

  ~OlderSimpleTable() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_table::wire::OlderSimpleTable> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_table::wire::OlderSimpleTable> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>> frame);

  [[ nodiscard ]] int64_t& x() const;
  [[ nodiscard ]] bool has_x() const;
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
public:
#else // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
private:
#endif // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  OlderSimpleTable& set_x(::fidl::ObjectView<int64_t> elem);
  OlderSimpleTable& set_x(std::nullptr_t);
  template <typename... Args>
  OlderSimpleTable& set_x(::fidl::AnyArena& allocator, Args&&... args) {
    return set_x(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  OlderSimpleTable& clear_x();

  explicit OlderSimpleTable(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit OlderSimpleTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, ::fidl::WireTableBuilder<::test_table::wire::OlderSimpleTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::OlderSimpleTable>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>> frame_ptr_;
};}  // namespace wire
}  // namespace test_table

template<typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_table::wire::OlderSimpleTable Build();
    [[ nodiscard ]] bool has_x() const;

    // Clears the x field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_x();

    // Getter for x.
    //

    [[ nodiscard ]] int64_t& x() const;

    // Setter for x.
    //

      BuilderImpl& x(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>>&& frame);

 private:
  ::test_table::wire::OlderSimpleTable table_;
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::OlderSimpleTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, ::fidl::WireTableBuilder<::test_table::wire::OlderSimpleTable>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, ::fidl::WireTableBuilder<::test_table::wire::OlderSimpleTable>>;

 public:
    using Base::x;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::OlderSimpleTable>& x(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        x(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
 private:
  friend class ::test_table::wire::OlderSimpleTable;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;

};

template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::OlderSimpleTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::OlderSimpleTable>>  {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::OlderSimpleTable>>;

 private:
  friend class ::test_table::wire::OlderSimpleTable;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>* frame);
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable>;
template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::NewerSimpleTable>;

template <>
struct ::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;
  ::fidl::Envelope<int64_t> x_;
  [[maybe_unused]] ::fidl::UntypedEnvelope reserved_1_;
  [[maybe_unused]] ::fidl::UntypedEnvelope reserved_2_;
  [[maybe_unused]] ::fidl::UntypedEnvelope reserved_3_;
  ::fidl::Envelope<int64_t> y_;
  ::fidl::Envelope<int64_t> z_;

  friend class ::test_table::wire::NewerSimpleTable;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, ::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::NewerSimpleTable>>;
};

namespace test_table {
namespace wire {

class NewerSimpleTable {
public:
  NewerSimpleTable() = default;
  NewerSimpleTable(const NewerSimpleTable& other) noexcept = default;
  NewerSimpleTable& operator=(const NewerSimpleTable& other) noexcept = default;
  NewerSimpleTable(NewerSimpleTable&& other) noexcept = default;
  NewerSimpleTable& operator=(NewerSimpleTable&& other) noexcept = default;

  ~NewerSimpleTable() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_table::wire::NewerSimpleTable> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>> frame);

  [[ nodiscard ]] int64_t& x() const;
  [[ nodiscard ]] bool has_x() const;

  [[ nodiscard ]] int64_t& y() const;
  [[ nodiscard ]] bool has_y() const;

  [[ nodiscard ]] int64_t& z() const;
  [[ nodiscard ]] bool has_z() const;
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
public:
#else // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
private:
#endif // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  NewerSimpleTable& set_x(::fidl::ObjectView<int64_t> elem);
  NewerSimpleTable& set_x(std::nullptr_t);
  template <typename... Args>
  NewerSimpleTable& set_x(::fidl::AnyArena& allocator, Args&&... args) {
    return set_x(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  NewerSimpleTable& clear_x();
  NewerSimpleTable& set_y(::fidl::ObjectView<int64_t> elem);
  NewerSimpleTable& set_y(std::nullptr_t);
  template <typename... Args>
  NewerSimpleTable& set_y(::fidl::AnyArena& allocator, Args&&... args) {
    return set_y(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  NewerSimpleTable& clear_y();
  NewerSimpleTable& set_z(::fidl::ObjectView<int64_t> elem);
  NewerSimpleTable& set_z(std::nullptr_t);
  template <typename... Args>
  NewerSimpleTable& set_z(::fidl::AnyArena& allocator, Args&&... args) {
    return set_z(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  NewerSimpleTable& clear_z();

  explicit NewerSimpleTable(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit NewerSimpleTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, ::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::NewerSimpleTable>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>> frame_ptr_;
};}  // namespace wire
}  // namespace test_table

template<typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_table::wire::NewerSimpleTable Build();
    [[ nodiscard ]] bool has_x() const;

    // Clears the x field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_x();

    // Getter for x.
    //

    [[ nodiscard ]] int64_t& x() const;

    // Setter for x.
    //

      BuilderImpl& x(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_y() const;

    // Clears the y field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_y();

    // Getter for y.
    //

    [[ nodiscard ]] int64_t& y() const;

    // Setter for y.
    //

      BuilderImpl& y(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_z() const;

    // Clears the z field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_z();

    // Getter for z.
    //

    [[ nodiscard ]] int64_t& z() const;

    // Setter for z.
    //

      BuilderImpl& z(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>>&& frame);

 private:
  ::test_table::wire::NewerSimpleTable table_;
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, ::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, ::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable>>;

 public:
    using Base::x;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable>& x(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        x(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::y;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable>& y(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        y(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::z;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable>& z(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        z(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
 private:
  friend class ::test_table::wire::NewerSimpleTable;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;

};

template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::NewerSimpleTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::NewerSimpleTable>>  {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::NewerSimpleTable>>;

 private:
  friend class ::test_table::wire::NewerSimpleTable;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>* frame);
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable>;
template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::ReverseOrdinalTable>;

template <>
struct ::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;
  ::fidl::Envelope<int64_t> z_;
  ::fidl::Envelope<int64_t> y_;
  ::fidl::Envelope<int64_t> x_;

  friend class ::test_table::wire::ReverseOrdinalTable;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, ::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, ::fidl::WireTableExternalBuilder<::test_table::wire::ReverseOrdinalTable>>;
};

namespace test_table {
namespace wire {

class ReverseOrdinalTable {
public:
  ReverseOrdinalTable() = default;
  ReverseOrdinalTable(const ReverseOrdinalTable& other) noexcept = default;
  ReverseOrdinalTable& operator=(const ReverseOrdinalTable& other) noexcept = default;
  ReverseOrdinalTable(ReverseOrdinalTable&& other) noexcept = default;
  ReverseOrdinalTable& operator=(ReverseOrdinalTable&& other) noexcept = default;

  ~ReverseOrdinalTable() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_table::wire::ReverseOrdinalTable> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>> frame);

  [[ nodiscard ]] int64_t& z() const;
  [[ nodiscard ]] bool has_z() const;

  [[ nodiscard ]] int64_t& y() const;
  [[ nodiscard ]] bool has_y() const;

  [[ nodiscard ]] int64_t& x() const;
  [[ nodiscard ]] bool has_x() const;
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
public:
#else // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
private:
#endif // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  ReverseOrdinalTable& set_z(::fidl::ObjectView<int64_t> elem);
  ReverseOrdinalTable& set_z(std::nullptr_t);
  template <typename... Args>
  ReverseOrdinalTable& set_z(::fidl::AnyArena& allocator, Args&&... args) {
    return set_z(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  ReverseOrdinalTable& clear_z();
  ReverseOrdinalTable& set_y(::fidl::ObjectView<int64_t> elem);
  ReverseOrdinalTable& set_y(std::nullptr_t);
  template <typename... Args>
  ReverseOrdinalTable& set_y(::fidl::AnyArena& allocator, Args&&... args) {
    return set_y(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  ReverseOrdinalTable& clear_y();
  ReverseOrdinalTable& set_x(::fidl::ObjectView<int64_t> elem);
  ReverseOrdinalTable& set_x(std::nullptr_t);
  template <typename... Args>
  ReverseOrdinalTable& set_x(::fidl::AnyArena& allocator, Args&&... args) {
    return set_x(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  ReverseOrdinalTable& clear_x();

  explicit ReverseOrdinalTable(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit ReverseOrdinalTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, ::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, ::fidl::WireTableExternalBuilder<::test_table::wire::ReverseOrdinalTable>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>> frame_ptr_;
};}  // namespace wire
}  // namespace test_table

template<typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_table::wire::ReverseOrdinalTable Build();
    [[ nodiscard ]] bool has_z() const;

    // Clears the z field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_z();

    // Getter for z.
    //

    [[ nodiscard ]] int64_t& z() const;

    // Setter for z.
    //

      BuilderImpl& z(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_y() const;

    // Clears the y field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_y();

    // Getter for y.
    //

    [[ nodiscard ]] int64_t& y() const;

    // Setter for y.
    //

      BuilderImpl& y(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_x() const;

    // Clears the x field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_x();

    // Getter for x.
    //

    [[ nodiscard ]] int64_t& x() const;

    // Setter for x.
    //

      BuilderImpl& x(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>>&& frame);

 private:
  ::test_table::wire::ReverseOrdinalTable table_;
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, ::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, ::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable>>;

 public:
    using Base::z;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable>& z(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        z(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::y;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable>& y(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        y(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::x;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable>& x(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        x(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
 private:
  friend class ::test_table::wire::ReverseOrdinalTable;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;

};

template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::ReverseOrdinalTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, ::fidl::WireTableExternalBuilder<::test_table::wire::ReverseOrdinalTable>>  {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, ::fidl::WireTableExternalBuilder<::test_table::wire::ReverseOrdinalTable>>;

 private:
  friend class ::test_table::wire::ReverseOrdinalTable;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>* frame);
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::TableWithAttributes>;
template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::TableWithAttributes>;

template <>
struct ::fidl::WireTableFrame<::test_table::wire::TableWithAttributes> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;
  ::fidl::Envelope<int64_t> x_;

  friend class ::test_table::wire::TableWithAttributes;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, ::fidl::WireTableBuilder<::test_table::wire::TableWithAttributes>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, ::fidl::WireTableExternalBuilder<::test_table::wire::TableWithAttributes>>;
};

namespace test_table {
namespace wire {

class TableWithAttributes {
public:
  TableWithAttributes() = default;
  TableWithAttributes(const TableWithAttributes& other) noexcept = default;
  TableWithAttributes& operator=(const TableWithAttributes& other) noexcept = default;
  TableWithAttributes(TableWithAttributes&& other) noexcept = default;
  TableWithAttributes& operator=(TableWithAttributes&& other) noexcept = default;

  ~TableWithAttributes() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_table::wire::TableWithAttributes> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_table::wire::TableWithAttributes> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>> frame);

  [[ nodiscard ]] int64_t& x() const;
  [[ nodiscard ]] bool has_x() const;
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
public:
#else // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
private:
#endif // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  TableWithAttributes& set_x(::fidl::ObjectView<int64_t> elem);
  TableWithAttributes& set_x(std::nullptr_t);
  template <typename... Args>
  TableWithAttributes& set_x(::fidl::AnyArena& allocator, Args&&... args) {
    return set_x(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  TableWithAttributes& clear_x();

  explicit TableWithAttributes(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit TableWithAttributes(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, ::fidl::WireTableBuilder<::test_table::wire::TableWithAttributes>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, ::fidl::WireTableExternalBuilder<::test_table::wire::TableWithAttributes>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>> frame_ptr_;
};}  // namespace wire
}  // namespace test_table

template<typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_table::wire::TableWithAttributes Build();
    [[ nodiscard ]] bool has_x() const;

    // Clears the x field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_x();

    // Getter for x.
    //

    [[ nodiscard ]] int64_t& x() const;

    // Setter for x.
    //

      BuilderImpl& x(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>>&& frame);

 private:
  ::test_table::wire::TableWithAttributes table_;
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::TableWithAttributes> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, ::fidl::WireTableBuilder<::test_table::wire::TableWithAttributes>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, ::fidl::WireTableBuilder<::test_table::wire::TableWithAttributes>>;

 public:
    using Base::x;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::TableWithAttributes>& x(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        x(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
 private:
  friend class ::test_table::wire::TableWithAttributes;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;

};

template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::TableWithAttributes> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, ::fidl::WireTableExternalBuilder<::test_table::wire::TableWithAttributes>>  {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, ::fidl::WireTableExternalBuilder<::test_table::wire::TableWithAttributes>>;

 private:
  friend class ::test_table::wire::TableWithAttributes;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>* frame);
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::ExtensionTable>;
template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::ExtensionTable>;

template <>
struct ::fidl::WireTableFrame<::test_table::wire::ExtensionTable> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;

  friend class ::test_table::wire::ExtensionTable;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ExtensionTable, ::fidl::WireTableBuilder<::test_table::wire::ExtensionTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ExtensionTable, ::fidl::WireTableExternalBuilder<::test_table::wire::ExtensionTable>>;
};

namespace test_table {
namespace wire {

class ExtensionTable {
public:
  ExtensionTable() = default;
  ExtensionTable(const ExtensionTable& other) noexcept = default;
  ExtensionTable& operator=(const ExtensionTable& other) noexcept = default;
  ExtensionTable(ExtensionTable&& other) noexcept = default;
  ExtensionTable& operator=(ExtensionTable&& other) noexcept = default;

  ~ExtensionTable() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_table::wire::ExtensionTable> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_table::wire::ExtensionTable> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ExtensionTable>> frame);
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
public:
#else // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
private:
#endif // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  explicit ExtensionTable(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit ExtensionTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ExtensionTable>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ExtensionTable>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ExtensionTable, ::fidl::WireTableBuilder<::test_table::wire::ExtensionTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ExtensionTable, ::fidl::WireTableExternalBuilder<::test_table::wire::ExtensionTable>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ExtensionTable>> frame_ptr_;
};}  // namespace wire
}  // namespace test_table

template<typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ExtensionTable, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_table::wire::ExtensionTable Build();
 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ExtensionTable>>&& frame);

 private:
  ::test_table::wire::ExtensionTable table_;
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::ExtensionTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ExtensionTable, ::fidl::WireTableBuilder<::test_table::wire::ExtensionTable>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ExtensionTable, ::fidl::WireTableBuilder<::test_table::wire::ExtensionTable>>;

 public:
 private:
  friend class ::test_table::wire::ExtensionTable;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;

};

template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::ExtensionTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ExtensionTable, ::fidl::WireTableExternalBuilder<::test_table::wire::ExtensionTable>>  {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::ExtensionTable, ::fidl::WireTableExternalBuilder<::test_table::wire::ExtensionTable>>;

 private:
  friend class ::test_table::wire::ExtensionTable;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::ExtensionTable>* frame);
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>;
template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::SixtyFourOrdinalTable>;

template <>
struct ::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;
  ::fidl::Envelope<int64_t> v1_;
  ::fidl::Envelope<int64_t> v2_;
  ::fidl::Envelope<int64_t> v3_;
  ::fidl::Envelope<int64_t> v4_;
  ::fidl::Envelope<int64_t> v5_;
  ::fidl::Envelope<int64_t> v6_;
  ::fidl::Envelope<int64_t> v7_;
  ::fidl::Envelope<int64_t> v8_;
  ::fidl::Envelope<int64_t> v9_;
  ::fidl::Envelope<int64_t> v10_;
  ::fidl::Envelope<int64_t> v11_;
  ::fidl::Envelope<int64_t> v12_;
  ::fidl::Envelope<int64_t> v13_;
  ::fidl::Envelope<int64_t> v14_;
  ::fidl::Envelope<int64_t> v15_;
  ::fidl::Envelope<int64_t> v16_;
  ::fidl::Envelope<int64_t> v17_;
  ::fidl::Envelope<int64_t> v18_;
  ::fidl::Envelope<int64_t> v19_;
  ::fidl::Envelope<int64_t> v20_;
  ::fidl::Envelope<int64_t> v21_;
  ::fidl::Envelope<int64_t> v22_;
  ::fidl::Envelope<int64_t> v23_;
  ::fidl::Envelope<int64_t> v24_;
  ::fidl::Envelope<int64_t> v25_;
  ::fidl::Envelope<int64_t> v26_;
  ::fidl::Envelope<int64_t> v27_;
  ::fidl::Envelope<int64_t> v28_;
  ::fidl::Envelope<int64_t> v29_;
  ::fidl::Envelope<int64_t> v30_;
  ::fidl::Envelope<int64_t> v31_;
  ::fidl::Envelope<int64_t> v32_;
  ::fidl::Envelope<int64_t> v33_;
  ::fidl::Envelope<int64_t> v34_;
  ::fidl::Envelope<int64_t> v35_;
  ::fidl::Envelope<int64_t> v36_;
  ::fidl::Envelope<int64_t> v37_;
  ::fidl::Envelope<int64_t> v38_;
  ::fidl::Envelope<int64_t> v39_;
  ::fidl::Envelope<int64_t> v40_;
  ::fidl::Envelope<int64_t> v41_;
  ::fidl::Envelope<int64_t> v42_;
  ::fidl::Envelope<int64_t> v43_;
  ::fidl::Envelope<int64_t> v44_;
  ::fidl::Envelope<int64_t> v45_;
  ::fidl::Envelope<int64_t> v46_;
  ::fidl::Envelope<int64_t> v47_;
  ::fidl::Envelope<int64_t> v48_;
  ::fidl::Envelope<int64_t> v49_;
  ::fidl::Envelope<int64_t> v50_;
  ::fidl::Envelope<int64_t> v51_;
  ::fidl::Envelope<int64_t> v52_;
  ::fidl::Envelope<int64_t> v53_;
  ::fidl::Envelope<int64_t> v54_;
  ::fidl::Envelope<int64_t> v55_;
  ::fidl::Envelope<int64_t> v56_;
  ::fidl::Envelope<int64_t> v57_;
  ::fidl::Envelope<int64_t> v58_;
  ::fidl::Envelope<int64_t> v59_;
  ::fidl::Envelope<int64_t> v60_;
  ::fidl::Envelope<int64_t> v61_;
  ::fidl::Envelope<int64_t> v62_;
  ::fidl::Envelope<int64_t> v63_;
  ::fidl::Envelope<::test_table::wire::ExtensionTable> v64_;

  friend class ::test_table::wire::SixtyFourOrdinalTable;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, ::fidl::WireTableExternalBuilder<::test_table::wire::SixtyFourOrdinalTable>>;
};

namespace test_table {
namespace wire {

class SixtyFourOrdinalTable {
public:
  SixtyFourOrdinalTable() = default;
  SixtyFourOrdinalTable(const SixtyFourOrdinalTable& other) noexcept = default;
  SixtyFourOrdinalTable& operator=(const SixtyFourOrdinalTable& other) noexcept = default;
  SixtyFourOrdinalTable(SixtyFourOrdinalTable&& other) noexcept = default;
  SixtyFourOrdinalTable& operator=(SixtyFourOrdinalTable&& other) noexcept = default;

  ~SixtyFourOrdinalTable() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_table::wire::SixtyFourOrdinalTable> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>> frame);

  [[ nodiscard ]] int64_t& v1() const;
  [[ nodiscard ]] bool has_v1() const;

  [[ nodiscard ]] int64_t& v2() const;
  [[ nodiscard ]] bool has_v2() const;

  [[ nodiscard ]] int64_t& v3() const;
  [[ nodiscard ]] bool has_v3() const;

  [[ nodiscard ]] int64_t& v4() const;
  [[ nodiscard ]] bool has_v4() const;

  [[ nodiscard ]] int64_t& v5() const;
  [[ nodiscard ]] bool has_v5() const;

  [[ nodiscard ]] int64_t& v6() const;
  [[ nodiscard ]] bool has_v6() const;

  [[ nodiscard ]] int64_t& v7() const;
  [[ nodiscard ]] bool has_v7() const;

  [[ nodiscard ]] int64_t& v8() const;
  [[ nodiscard ]] bool has_v8() const;

  [[ nodiscard ]] int64_t& v9() const;
  [[ nodiscard ]] bool has_v9() const;

  [[ nodiscard ]] int64_t& v10() const;
  [[ nodiscard ]] bool has_v10() const;

  [[ nodiscard ]] int64_t& v11() const;
  [[ nodiscard ]] bool has_v11() const;

  [[ nodiscard ]] int64_t& v12() const;
  [[ nodiscard ]] bool has_v12() const;

  [[ nodiscard ]] int64_t& v13() const;
  [[ nodiscard ]] bool has_v13() const;

  [[ nodiscard ]] int64_t& v14() const;
  [[ nodiscard ]] bool has_v14() const;

  [[ nodiscard ]] int64_t& v15() const;
  [[ nodiscard ]] bool has_v15() const;

  [[ nodiscard ]] int64_t& v16() const;
  [[ nodiscard ]] bool has_v16() const;

  [[ nodiscard ]] int64_t& v17() const;
  [[ nodiscard ]] bool has_v17() const;

  [[ nodiscard ]] int64_t& v18() const;
  [[ nodiscard ]] bool has_v18() const;

  [[ nodiscard ]] int64_t& v19() const;
  [[ nodiscard ]] bool has_v19() const;

  [[ nodiscard ]] int64_t& v20() const;
  [[ nodiscard ]] bool has_v20() const;

  [[ nodiscard ]] int64_t& v21() const;
  [[ nodiscard ]] bool has_v21() const;

  [[ nodiscard ]] int64_t& v22() const;
  [[ nodiscard ]] bool has_v22() const;

  [[ nodiscard ]] int64_t& v23() const;
  [[ nodiscard ]] bool has_v23() const;

  [[ nodiscard ]] int64_t& v24() const;
  [[ nodiscard ]] bool has_v24() const;

  [[ nodiscard ]] int64_t& v25() const;
  [[ nodiscard ]] bool has_v25() const;

  [[ nodiscard ]] int64_t& v26() const;
  [[ nodiscard ]] bool has_v26() const;

  [[ nodiscard ]] int64_t& v27() const;
  [[ nodiscard ]] bool has_v27() const;

  [[ nodiscard ]] int64_t& v28() const;
  [[ nodiscard ]] bool has_v28() const;

  [[ nodiscard ]] int64_t& v29() const;
  [[ nodiscard ]] bool has_v29() const;

  [[ nodiscard ]] int64_t& v30() const;
  [[ nodiscard ]] bool has_v30() const;

  [[ nodiscard ]] int64_t& v31() const;
  [[ nodiscard ]] bool has_v31() const;

  [[ nodiscard ]] int64_t& v32() const;
  [[ nodiscard ]] bool has_v32() const;

  [[ nodiscard ]] int64_t& v33() const;
  [[ nodiscard ]] bool has_v33() const;

  [[ nodiscard ]] int64_t& v34() const;
  [[ nodiscard ]] bool has_v34() const;

  [[ nodiscard ]] int64_t& v35() const;
  [[ nodiscard ]] bool has_v35() const;

  [[ nodiscard ]] int64_t& v36() const;
  [[ nodiscard ]] bool has_v36() const;

  [[ nodiscard ]] int64_t& v37() const;
  [[ nodiscard ]] bool has_v37() const;

  [[ nodiscard ]] int64_t& v38() const;
  [[ nodiscard ]] bool has_v38() const;

  [[ nodiscard ]] int64_t& v39() const;
  [[ nodiscard ]] bool has_v39() const;

  [[ nodiscard ]] int64_t& v40() const;
  [[ nodiscard ]] bool has_v40() const;

  [[ nodiscard ]] int64_t& v41() const;
  [[ nodiscard ]] bool has_v41() const;

  [[ nodiscard ]] int64_t& v42() const;
  [[ nodiscard ]] bool has_v42() const;

  [[ nodiscard ]] int64_t& v43() const;
  [[ nodiscard ]] bool has_v43() const;

  [[ nodiscard ]] int64_t& v44() const;
  [[ nodiscard ]] bool has_v44() const;

  [[ nodiscard ]] int64_t& v45() const;
  [[ nodiscard ]] bool has_v45() const;

  [[ nodiscard ]] int64_t& v46() const;
  [[ nodiscard ]] bool has_v46() const;

  [[ nodiscard ]] int64_t& v47() const;
  [[ nodiscard ]] bool has_v47() const;

  [[ nodiscard ]] int64_t& v48() const;
  [[ nodiscard ]] bool has_v48() const;

  [[ nodiscard ]] int64_t& v49() const;
  [[ nodiscard ]] bool has_v49() const;

  [[ nodiscard ]] int64_t& v50() const;
  [[ nodiscard ]] bool has_v50() const;

  [[ nodiscard ]] int64_t& v51() const;
  [[ nodiscard ]] bool has_v51() const;

  [[ nodiscard ]] int64_t& v52() const;
  [[ nodiscard ]] bool has_v52() const;

  [[ nodiscard ]] int64_t& v53() const;
  [[ nodiscard ]] bool has_v53() const;

  [[ nodiscard ]] int64_t& v54() const;
  [[ nodiscard ]] bool has_v54() const;

  [[ nodiscard ]] int64_t& v55() const;
  [[ nodiscard ]] bool has_v55() const;

  [[ nodiscard ]] int64_t& v56() const;
  [[ nodiscard ]] bool has_v56() const;

  [[ nodiscard ]] int64_t& v57() const;
  [[ nodiscard ]] bool has_v57() const;

  [[ nodiscard ]] int64_t& v58() const;
  [[ nodiscard ]] bool has_v58() const;

  [[ nodiscard ]] int64_t& v59() const;
  [[ nodiscard ]] bool has_v59() const;

  [[ nodiscard ]] int64_t& v60() const;
  [[ nodiscard ]] bool has_v60() const;

  [[ nodiscard ]] int64_t& v61() const;
  [[ nodiscard ]] bool has_v61() const;

  [[ nodiscard ]] int64_t& v62() const;
  [[ nodiscard ]] bool has_v62() const;

  [[ nodiscard ]] int64_t& v63() const;
  [[ nodiscard ]] bool has_v63() const;

  [[ nodiscard ]] ::test_table::wire::ExtensionTable& v64() const;
  [[ nodiscard ]] bool has_v64() const;
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
public:
#else // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
private:
#endif // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  SixtyFourOrdinalTable& set_v1(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v1(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v1(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v1(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v1();
  SixtyFourOrdinalTable& set_v2(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v2(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v2(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v2(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v2();
  SixtyFourOrdinalTable& set_v3(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v3(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v3(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v3(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v3();
  SixtyFourOrdinalTable& set_v4(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v4(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v4(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v4(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v4();
  SixtyFourOrdinalTable& set_v5(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v5(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v5(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v5(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v5();
  SixtyFourOrdinalTable& set_v6(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v6(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v6(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v6(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v6();
  SixtyFourOrdinalTable& set_v7(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v7(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v7(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v7(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v7();
  SixtyFourOrdinalTable& set_v8(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v8(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v8(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v8(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v8();
  SixtyFourOrdinalTable& set_v9(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v9(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v9(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v9(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v9();
  SixtyFourOrdinalTable& set_v10(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v10(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v10(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v10(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v10();
  SixtyFourOrdinalTable& set_v11(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v11(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v11(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v11(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v11();
  SixtyFourOrdinalTable& set_v12(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v12(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v12(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v12(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v12();
  SixtyFourOrdinalTable& set_v13(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v13(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v13(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v13(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v13();
  SixtyFourOrdinalTable& set_v14(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v14(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v14(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v14(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v14();
  SixtyFourOrdinalTable& set_v15(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v15(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v15(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v15(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v15();
  SixtyFourOrdinalTable& set_v16(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v16(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v16(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v16(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v16();
  SixtyFourOrdinalTable& set_v17(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v17(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v17(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v17(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v17();
  SixtyFourOrdinalTable& set_v18(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v18(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v18(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v18(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v18();
  SixtyFourOrdinalTable& set_v19(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v19(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v19(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v19(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v19();
  SixtyFourOrdinalTable& set_v20(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v20(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v20(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v20(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v20();
  SixtyFourOrdinalTable& set_v21(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v21(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v21(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v21(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v21();
  SixtyFourOrdinalTable& set_v22(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v22(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v22(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v22(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v22();
  SixtyFourOrdinalTable& set_v23(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v23(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v23(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v23(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v23();
  SixtyFourOrdinalTable& set_v24(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v24(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v24(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v24(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v24();
  SixtyFourOrdinalTable& set_v25(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v25(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v25(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v25(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v25();
  SixtyFourOrdinalTable& set_v26(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v26(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v26(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v26(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v26();
  SixtyFourOrdinalTable& set_v27(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v27(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v27(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v27(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v27();
  SixtyFourOrdinalTable& set_v28(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v28(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v28(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v28(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v28();
  SixtyFourOrdinalTable& set_v29(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v29(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v29(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v29(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v29();
  SixtyFourOrdinalTable& set_v30(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v30(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v30(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v30(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v30();
  SixtyFourOrdinalTable& set_v31(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v31(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v31(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v31(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v31();
  SixtyFourOrdinalTable& set_v32(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v32(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v32(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v32(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v32();
  SixtyFourOrdinalTable& set_v33(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v33(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v33(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v33(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v33();
  SixtyFourOrdinalTable& set_v34(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v34(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v34(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v34(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v34();
  SixtyFourOrdinalTable& set_v35(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v35(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v35(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v35(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v35();
  SixtyFourOrdinalTable& set_v36(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v36(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v36(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v36(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v36();
  SixtyFourOrdinalTable& set_v37(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v37(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v37(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v37(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v37();
  SixtyFourOrdinalTable& set_v38(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v38(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v38(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v38(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v38();
  SixtyFourOrdinalTable& set_v39(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v39(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v39(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v39(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v39();
  SixtyFourOrdinalTable& set_v40(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v40(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v40(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v40(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v40();
  SixtyFourOrdinalTable& set_v41(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v41(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v41(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v41(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v41();
  SixtyFourOrdinalTable& set_v42(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v42(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v42(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v42(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v42();
  SixtyFourOrdinalTable& set_v43(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v43(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v43(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v43(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v43();
  SixtyFourOrdinalTable& set_v44(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v44(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v44(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v44(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v44();
  SixtyFourOrdinalTable& set_v45(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v45(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v45(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v45(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v45();
  SixtyFourOrdinalTable& set_v46(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v46(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v46(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v46(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v46();
  SixtyFourOrdinalTable& set_v47(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v47(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v47(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v47(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v47();
  SixtyFourOrdinalTable& set_v48(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v48(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v48(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v48(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v48();
  SixtyFourOrdinalTable& set_v49(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v49(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v49(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v49(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v49();
  SixtyFourOrdinalTable& set_v50(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v50(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v50(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v50(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v50();
  SixtyFourOrdinalTable& set_v51(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v51(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v51(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v51(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v51();
  SixtyFourOrdinalTable& set_v52(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v52(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v52(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v52(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v52();
  SixtyFourOrdinalTable& set_v53(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v53(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v53(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v53(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v53();
  SixtyFourOrdinalTable& set_v54(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v54(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v54(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v54(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v54();
  SixtyFourOrdinalTable& set_v55(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v55(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v55(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v55(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v55();
  SixtyFourOrdinalTable& set_v56(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v56(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v56(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v56(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v56();
  SixtyFourOrdinalTable& set_v57(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v57(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v57(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v57(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v57();
  SixtyFourOrdinalTable& set_v58(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v58(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v58(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v58(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v58();
  SixtyFourOrdinalTable& set_v59(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v59(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v59(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v59(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v59();
  SixtyFourOrdinalTable& set_v60(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v60(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v60(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v60(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v60();
  SixtyFourOrdinalTable& set_v61(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v61(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v61(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v61(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v61();
  SixtyFourOrdinalTable& set_v62(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v62(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v62(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v62(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v62();
  SixtyFourOrdinalTable& set_v63(::fidl::ObjectView<int64_t> elem);
  SixtyFourOrdinalTable& set_v63(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v63(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v63(
        ::fidl::ObjectView<int64_t>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v63();
  SixtyFourOrdinalTable& set_v64(::fidl::ObjectView<::test_table::wire::ExtensionTable> elem);
  SixtyFourOrdinalTable& set_v64(std::nullptr_t);
  template <typename... Args>
  SixtyFourOrdinalTable& set_v64(::fidl::AnyArena& allocator, Args&&... args) {
    return set_v64(
        ::fidl::ObjectView<::test_table::wire::ExtensionTable>(allocator, std::forward<Args>(args)...));
  }

  SixtyFourOrdinalTable& clear_v64();

  explicit SixtyFourOrdinalTable(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit SixtyFourOrdinalTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, ::fidl::WireTableExternalBuilder<::test_table::wire::SixtyFourOrdinalTable>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>> frame_ptr_;
};}  // namespace wire
}  // namespace test_table

template<typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_table::wire::SixtyFourOrdinalTable Build();
    [[ nodiscard ]] bool has_v1() const;

    // Clears the v1 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v1();

    // Getter for v1.
    //

    [[ nodiscard ]] int64_t& v1() const;

    // Setter for v1.
    //

      BuilderImpl& v1(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v2() const;

    // Clears the v2 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v2();

    // Getter for v2.
    //

    [[ nodiscard ]] int64_t& v2() const;

    // Setter for v2.
    //

      BuilderImpl& v2(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v3() const;

    // Clears the v3 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v3();

    // Getter for v3.
    //

    [[ nodiscard ]] int64_t& v3() const;

    // Setter for v3.
    //

      BuilderImpl& v3(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v4() const;

    // Clears the v4 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v4();

    // Getter for v4.
    //

    [[ nodiscard ]] int64_t& v4() const;

    // Setter for v4.
    //

      BuilderImpl& v4(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v5() const;

    // Clears the v5 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v5();

    // Getter for v5.
    //

    [[ nodiscard ]] int64_t& v5() const;

    // Setter for v5.
    //

      BuilderImpl& v5(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v6() const;

    // Clears the v6 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v6();

    // Getter for v6.
    //

    [[ nodiscard ]] int64_t& v6() const;

    // Setter for v6.
    //

      BuilderImpl& v6(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v7() const;

    // Clears the v7 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v7();

    // Getter for v7.
    //

    [[ nodiscard ]] int64_t& v7() const;

    // Setter for v7.
    //

      BuilderImpl& v7(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v8() const;

    // Clears the v8 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v8();

    // Getter for v8.
    //

    [[ nodiscard ]] int64_t& v8() const;

    // Setter for v8.
    //

      BuilderImpl& v8(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v9() const;

    // Clears the v9 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v9();

    // Getter for v9.
    //

    [[ nodiscard ]] int64_t& v9() const;

    // Setter for v9.
    //

      BuilderImpl& v9(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v10() const;

    // Clears the v10 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v10();

    // Getter for v10.
    //

    [[ nodiscard ]] int64_t& v10() const;

    // Setter for v10.
    //

      BuilderImpl& v10(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v11() const;

    // Clears the v11 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v11();

    // Getter for v11.
    //

    [[ nodiscard ]] int64_t& v11() const;

    // Setter for v11.
    //

      BuilderImpl& v11(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v12() const;

    // Clears the v12 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v12();

    // Getter for v12.
    //

    [[ nodiscard ]] int64_t& v12() const;

    // Setter for v12.
    //

      BuilderImpl& v12(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v13() const;

    // Clears the v13 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v13();

    // Getter for v13.
    //

    [[ nodiscard ]] int64_t& v13() const;

    // Setter for v13.
    //

      BuilderImpl& v13(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v14() const;

    // Clears the v14 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v14();

    // Getter for v14.
    //

    [[ nodiscard ]] int64_t& v14() const;

    // Setter for v14.
    //

      BuilderImpl& v14(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v15() const;

    // Clears the v15 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v15();

    // Getter for v15.
    //

    [[ nodiscard ]] int64_t& v15() const;

    // Setter for v15.
    //

      BuilderImpl& v15(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v16() const;

    // Clears the v16 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v16();

    // Getter for v16.
    //

    [[ nodiscard ]] int64_t& v16() const;

    // Setter for v16.
    //

      BuilderImpl& v16(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v17() const;

    // Clears the v17 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v17();

    // Getter for v17.
    //

    [[ nodiscard ]] int64_t& v17() const;

    // Setter for v17.
    //

      BuilderImpl& v17(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v18() const;

    // Clears the v18 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v18();

    // Getter for v18.
    //

    [[ nodiscard ]] int64_t& v18() const;

    // Setter for v18.
    //

      BuilderImpl& v18(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v19() const;

    // Clears the v19 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v19();

    // Getter for v19.
    //

    [[ nodiscard ]] int64_t& v19() const;

    // Setter for v19.
    //

      BuilderImpl& v19(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v20() const;

    // Clears the v20 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v20();

    // Getter for v20.
    //

    [[ nodiscard ]] int64_t& v20() const;

    // Setter for v20.
    //

      BuilderImpl& v20(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v21() const;

    // Clears the v21 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v21();

    // Getter for v21.
    //

    [[ nodiscard ]] int64_t& v21() const;

    // Setter for v21.
    //

      BuilderImpl& v21(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v22() const;

    // Clears the v22 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v22();

    // Getter for v22.
    //

    [[ nodiscard ]] int64_t& v22() const;

    // Setter for v22.
    //

      BuilderImpl& v22(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v23() const;

    // Clears the v23 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v23();

    // Getter for v23.
    //

    [[ nodiscard ]] int64_t& v23() const;

    // Setter for v23.
    //

      BuilderImpl& v23(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v24() const;

    // Clears the v24 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v24();

    // Getter for v24.
    //

    [[ nodiscard ]] int64_t& v24() const;

    // Setter for v24.
    //

      BuilderImpl& v24(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v25() const;

    // Clears the v25 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v25();

    // Getter for v25.
    //

    [[ nodiscard ]] int64_t& v25() const;

    // Setter for v25.
    //

      BuilderImpl& v25(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v26() const;

    // Clears the v26 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v26();

    // Getter for v26.
    //

    [[ nodiscard ]] int64_t& v26() const;

    // Setter for v26.
    //

      BuilderImpl& v26(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v27() const;

    // Clears the v27 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v27();

    // Getter for v27.
    //

    [[ nodiscard ]] int64_t& v27() const;

    // Setter for v27.
    //

      BuilderImpl& v27(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v28() const;

    // Clears the v28 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v28();

    // Getter for v28.
    //

    [[ nodiscard ]] int64_t& v28() const;

    // Setter for v28.
    //

      BuilderImpl& v28(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v29() const;

    // Clears the v29 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v29();

    // Getter for v29.
    //

    [[ nodiscard ]] int64_t& v29() const;

    // Setter for v29.
    //

      BuilderImpl& v29(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v30() const;

    // Clears the v30 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v30();

    // Getter for v30.
    //

    [[ nodiscard ]] int64_t& v30() const;

    // Setter for v30.
    //

      BuilderImpl& v30(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v31() const;

    // Clears the v31 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v31();

    // Getter for v31.
    //

    [[ nodiscard ]] int64_t& v31() const;

    // Setter for v31.
    //

      BuilderImpl& v31(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v32() const;

    // Clears the v32 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v32();

    // Getter for v32.
    //

    [[ nodiscard ]] int64_t& v32() const;

    // Setter for v32.
    //

      BuilderImpl& v32(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v33() const;

    // Clears the v33 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v33();

    // Getter for v33.
    //

    [[ nodiscard ]] int64_t& v33() const;

    // Setter for v33.
    //

      BuilderImpl& v33(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v34() const;

    // Clears the v34 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v34();

    // Getter for v34.
    //

    [[ nodiscard ]] int64_t& v34() const;

    // Setter for v34.
    //

      BuilderImpl& v34(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v35() const;

    // Clears the v35 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v35();

    // Getter for v35.
    //

    [[ nodiscard ]] int64_t& v35() const;

    // Setter for v35.
    //

      BuilderImpl& v35(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v36() const;

    // Clears the v36 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v36();

    // Getter for v36.
    //

    [[ nodiscard ]] int64_t& v36() const;

    // Setter for v36.
    //

      BuilderImpl& v36(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v37() const;

    // Clears the v37 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v37();

    // Getter for v37.
    //

    [[ nodiscard ]] int64_t& v37() const;

    // Setter for v37.
    //

      BuilderImpl& v37(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v38() const;

    // Clears the v38 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v38();

    // Getter for v38.
    //

    [[ nodiscard ]] int64_t& v38() const;

    // Setter for v38.
    //

      BuilderImpl& v38(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v39() const;

    // Clears the v39 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v39();

    // Getter for v39.
    //

    [[ nodiscard ]] int64_t& v39() const;

    // Setter for v39.
    //

      BuilderImpl& v39(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v40() const;

    // Clears the v40 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v40();

    // Getter for v40.
    //

    [[ nodiscard ]] int64_t& v40() const;

    // Setter for v40.
    //

      BuilderImpl& v40(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v41() const;

    // Clears the v41 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v41();

    // Getter for v41.
    //

    [[ nodiscard ]] int64_t& v41() const;

    // Setter for v41.
    //

      BuilderImpl& v41(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v42() const;

    // Clears the v42 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v42();

    // Getter for v42.
    //

    [[ nodiscard ]] int64_t& v42() const;

    // Setter for v42.
    //

      BuilderImpl& v42(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v43() const;

    // Clears the v43 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v43();

    // Getter for v43.
    //

    [[ nodiscard ]] int64_t& v43() const;

    // Setter for v43.
    //

      BuilderImpl& v43(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v44() const;

    // Clears the v44 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v44();

    // Getter for v44.
    //

    [[ nodiscard ]] int64_t& v44() const;

    // Setter for v44.
    //

      BuilderImpl& v44(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v45() const;

    // Clears the v45 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v45();

    // Getter for v45.
    //

    [[ nodiscard ]] int64_t& v45() const;

    // Setter for v45.
    //

      BuilderImpl& v45(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v46() const;

    // Clears the v46 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v46();

    // Getter for v46.
    //

    [[ nodiscard ]] int64_t& v46() const;

    // Setter for v46.
    //

      BuilderImpl& v46(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v47() const;

    // Clears the v47 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v47();

    // Getter for v47.
    //

    [[ nodiscard ]] int64_t& v47() const;

    // Setter for v47.
    //

      BuilderImpl& v47(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v48() const;

    // Clears the v48 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v48();

    // Getter for v48.
    //

    [[ nodiscard ]] int64_t& v48() const;

    // Setter for v48.
    //

      BuilderImpl& v48(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v49() const;

    // Clears the v49 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v49();

    // Getter for v49.
    //

    [[ nodiscard ]] int64_t& v49() const;

    // Setter for v49.
    //

      BuilderImpl& v49(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v50() const;

    // Clears the v50 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v50();

    // Getter for v50.
    //

    [[ nodiscard ]] int64_t& v50() const;

    // Setter for v50.
    //

      BuilderImpl& v50(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v51() const;

    // Clears the v51 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v51();

    // Getter for v51.
    //

    [[ nodiscard ]] int64_t& v51() const;

    // Setter for v51.
    //

      BuilderImpl& v51(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v52() const;

    // Clears the v52 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v52();

    // Getter for v52.
    //

    [[ nodiscard ]] int64_t& v52() const;

    // Setter for v52.
    //

      BuilderImpl& v52(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v53() const;

    // Clears the v53 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v53();

    // Getter for v53.
    //

    [[ nodiscard ]] int64_t& v53() const;

    // Setter for v53.
    //

      BuilderImpl& v53(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v54() const;

    // Clears the v54 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v54();

    // Getter for v54.
    //

    [[ nodiscard ]] int64_t& v54() const;

    // Setter for v54.
    //

      BuilderImpl& v54(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v55() const;

    // Clears the v55 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v55();

    // Getter for v55.
    //

    [[ nodiscard ]] int64_t& v55() const;

    // Setter for v55.
    //

      BuilderImpl& v55(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v56() const;

    // Clears the v56 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v56();

    // Getter for v56.
    //

    [[ nodiscard ]] int64_t& v56() const;

    // Setter for v56.
    //

      BuilderImpl& v56(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v57() const;

    // Clears the v57 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v57();

    // Getter for v57.
    //

    [[ nodiscard ]] int64_t& v57() const;

    // Setter for v57.
    //

      BuilderImpl& v57(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v58() const;

    // Clears the v58 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v58();

    // Getter for v58.
    //

    [[ nodiscard ]] int64_t& v58() const;

    // Setter for v58.
    //

      BuilderImpl& v58(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v59() const;

    // Clears the v59 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v59();

    // Getter for v59.
    //

    [[ nodiscard ]] int64_t& v59() const;

    // Setter for v59.
    //

      BuilderImpl& v59(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v60() const;

    // Clears the v60 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v60();

    // Getter for v60.
    //

    [[ nodiscard ]] int64_t& v60() const;

    // Setter for v60.
    //

      BuilderImpl& v60(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v61() const;

    // Clears the v61 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v61();

    // Getter for v61.
    //

    [[ nodiscard ]] int64_t& v61() const;

    // Setter for v61.
    //

      BuilderImpl& v61(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v62() const;

    // Clears the v62 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v62();

    // Getter for v62.
    //

    [[ nodiscard ]] int64_t& v62() const;

    // Setter for v62.
    //

      BuilderImpl& v62(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v63() const;

    // Clears the v63 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v63();

    // Getter for v63.
    //

    [[ nodiscard ]] int64_t& v63() const;

    // Setter for v63.
    //

      BuilderImpl& v63(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem);
    [[ nodiscard ]] bool has_v64() const;

    // Clears the v64 field.
    //
    // This method should be used sparingly, such as only during tests, as it has
    // O(number_of_fields) complexity.
    void clear_v64();

    // Getter for v64.
    //

    [[ nodiscard ]] ::test_table::wire::ExtensionTable& v64() const;

    // Setter for v64.
    //

      BuilderImpl& v64(Wrapper_Ignore_Me_<::fidl::ObjectView<::test_table::wire::ExtensionTable>> elem);
 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>>&& frame);

 private:
  ::test_table::wire::SixtyFourOrdinalTable table_;
};

template<>
class ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>>;

 public:
    using Base::v1;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v1(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v1(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v2;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v2(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v2(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v3;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v3(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v3(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v4;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v4(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v4(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v5;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v5(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v5(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v6;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v6(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v6(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v7;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v7(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v7(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v8;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v8(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v8(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v9;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v9(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v9(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v10;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v10(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v10(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v11;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v11(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v11(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v12;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v12(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v12(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v13;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v13(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v13(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v14;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v14(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v14(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v15;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v15(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v15(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v16;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v16(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v16(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v17;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v17(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v17(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v18;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v18(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v18(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v19;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v19(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v19(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v20;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v20(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v20(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v21;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v21(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v21(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v22;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v22(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v22(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v23;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v23(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v23(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v24;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v24(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v24(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v25;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v25(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v25(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v26;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v26(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v26(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v27;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v27(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v27(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v28;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v28(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v28(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v29;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v29(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v29(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v30;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v30(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v30(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v31;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v31(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v31(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v32;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v32(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v32(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v33;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v33(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v33(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v34;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v34(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v34(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v35;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v35(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v35(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v36;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v36(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v36(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v37;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v37(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v37(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v38;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v38(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v38(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v39;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v39(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v39(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v40;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v40(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v40(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v41;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v41(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v41(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v42;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v42(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v42(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v43;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v43(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v43(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v44;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v44(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v44(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v45;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v45(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v45(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v46;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v46(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v46(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v47;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v47(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v47(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v48;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v48(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v48(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v49;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v49(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v49(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v50;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v50(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v50(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v51;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v51(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v51(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v52;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v52(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v52(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v53;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v53(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v53(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v54;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v54(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v54(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v55;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v55(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v55(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v56;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v56(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v56(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v57;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v57(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v57(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v58;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v58(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v58(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v59;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v59(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v59(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v60;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v60(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v60(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v61;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v61(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v61(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v62;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v62(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v62(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v63;

      template <
          typename First = int64_t,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<int64_t>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v63(First&& first, Args&&... args_) {
        fidl::ObjectView<int64_t> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v63(Base::Wrapper_Ignore_Me_<fidl::ObjectView<int64_t>>(view_));
        return *this;
      }
    using Base::v64;

      template <
          typename First = ::test_table::wire::ExtensionTable,
          typename... Args,
          std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<::test_table::wire::ExtensionTable>>, int> = 0
      >
      ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>& v64(First&& first, Args&&... args_) {
        fidl::ObjectView<::test_table::wire::ExtensionTable> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
        v64(Base::Wrapper_Ignore_Me_<fidl::ObjectView<::test_table::wire::ExtensionTable>>(view_));
        return *this;
      }
 private:
  friend class ::test_table::wire::SixtyFourOrdinalTable;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;

};

template<>
class ::fidl::WireTableExternalBuilder<::test_table::wire::SixtyFourOrdinalTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, ::fidl::WireTableExternalBuilder<::test_table::wire::SixtyFourOrdinalTable>>  {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, ::fidl::WireTableExternalBuilder<::test_table::wire::SixtyFourOrdinalTable>>;

 private:
  friend class ::test_table::wire::SixtyFourOrdinalTable;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>* frame);
};
namespace fidl {

template <>
struct TypeTraits<::test_table::wire::EmptyTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_table::wire::EmptyTable> : public std::true_type {};
template <>
struct IsWire<::test_table::wire::EmptyTable> : public std::true_type {};
template <>
struct IsTable<::test_table::wire::EmptyTable> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_table::wire::EmptyTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_table::wire::EmptyTable* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_table::wire::SimpleTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 56;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_table::wire::SimpleTable> : public std::true_type {};
template <>
struct IsWire<::test_table::wire::SimpleTable> : public std::true_type {};
template <>
struct IsTable<::test_table::wire::SimpleTable> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_table::wire::SimpleTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_table::wire::SimpleTable* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_table::wire::OlderSimpleTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 16;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_table::wire::OlderSimpleTable> : public std::true_type {};
template <>
struct IsWire<::test_table::wire::OlderSimpleTable> : public std::true_type {};
template <>
struct IsTable<::test_table::wire::OlderSimpleTable> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_table::wire::OlderSimpleTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_table::wire::OlderSimpleTable* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_table::wire::NewerSimpleTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 72;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_table::wire::NewerSimpleTable> : public std::true_type {};
template <>
struct IsWire<::test_table::wire::NewerSimpleTable> : public std::true_type {};
template <>
struct IsTable<::test_table::wire::NewerSimpleTable> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_table::wire::NewerSimpleTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_table::wire::NewerSimpleTable* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_table::wire::ReverseOrdinalTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 48;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_table::wire::ReverseOrdinalTable> : public std::true_type {};
template <>
struct IsWire<::test_table::wire::ReverseOrdinalTable> : public std::true_type {};
template <>
struct IsTable<::test_table::wire::ReverseOrdinalTable> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_table::wire::ReverseOrdinalTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_table::wire::ReverseOrdinalTable* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_table::wire::TableWithAttributes> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 16;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_table::wire::TableWithAttributes> : public std::true_type {};
template <>
struct IsWire<::test_table::wire::TableWithAttributes> : public std::true_type {};
template <>
struct IsTable<::test_table::wire::TableWithAttributes> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_table::wire::TableWithAttributes, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_table::wire::TableWithAttributes* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_table::wire::ExtensionTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_table::wire::ExtensionTable> : public std::true_type {};
template <>
struct IsWire<::test_table::wire::ExtensionTable> : public std::true_type {};
template <>
struct IsTable<::test_table::wire::ExtensionTable> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_table::wire::ExtensionTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_table::wire::ExtensionTable* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_table::wire::SixtyFourOrdinalTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 3;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 1032;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_table::wire::SixtyFourOrdinalTable> : public std::true_type {};
template <>
struct IsWire<::test_table::wire::SixtyFourOrdinalTable> : public std::true_type {};
template <>
struct IsTable<::test_table::wire::SixtyFourOrdinalTable> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_table::wire::SixtyFourOrdinalTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_table::wire::SixtyFourOrdinalTable* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

  #pragma clang diagnostic pop

  }  // namespace fidl

