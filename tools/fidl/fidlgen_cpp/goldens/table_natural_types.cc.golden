// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.table/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_table::EmptyTable::EmptyTable(::test_table::EmptyTable::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_table::EmptyTable::EmptyTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : EmptyTable(Storage_{}) {}

::test_table::EmptyTable::EmptyTable(const ::test_table::EmptyTable& other) noexcept : EmptyTable(other.CloneStorage_()) {}

::test_table::EmptyTable& ::test_table::EmptyTable::operator=(const ::test_table::EmptyTable& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_table::EmptyTable::operator==(const EmptyTable& other) const noexcept {
  return ::fidl::internal::NaturalTableCodingTraits<::test_table::EmptyTable>::Equal(this, &other);
}
bool test_table::EmptyTable::operator!=(const EmptyTable& other) const noexcept {
  return !::fidl::internal::NaturalTableCodingTraits<::test_table::EmptyTable>::Equal(this, &other);
}

::test_table::EmptyTable::Storage_ test_table::EmptyTable::CloneStorage_() const {
  return Storage_{};
}

bool test_table::EmptyTable::IsEmpty() const {
  return true;
}

::test_table::SimpleTable::SimpleTable(::test_table::SimpleTable::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_table::SimpleTable::SimpleTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : SimpleTable(Storage_{}) {}

::test_table::SimpleTable::SimpleTable(const ::test_table::SimpleTable& other) noexcept : SimpleTable(other.CloneStorage_()) {}

::test_table::SimpleTable& ::test_table::SimpleTable::operator=(const ::test_table::SimpleTable& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_table::SimpleTable::operator==(const SimpleTable& other) const noexcept {
  return ::fidl::internal::NaturalTableCodingTraits<::test_table::SimpleTable>::Equal(this, &other);
}
bool test_table::SimpleTable::operator!=(const SimpleTable& other) const noexcept {
  return !::fidl::internal::NaturalTableCodingTraits<::test_table::SimpleTable>::Equal(this, &other);
}

::test_table::SimpleTable::Storage_ test_table::SimpleTable::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.x),
      ::fidl::internal::NaturalClone(storage_.y)};
}

bool test_table::SimpleTable::IsEmpty() const {
  return !(storage_.x.has_value() || storage_.y.has_value());
}
const std::optional<int64_t>& test_table::SimpleTable::x() const {
  return storage_.x;
}

::std::optional<int64_t>& test_table::SimpleTable::x() {
  return storage_.x;
}

::test_table::SimpleTable& test_table::SimpleTable::x(std::optional<int64_t> value) {
  storage_.x = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SimpleTable::y() const {
  return storage_.y;
}

::std::optional<int64_t>& test_table::SimpleTable::y() {
  return storage_.y;
}

::test_table::SimpleTable& test_table::SimpleTable::y(std::optional<int64_t> value) {
  storage_.y = std::move(value);
  return *this;
}

::test_table::OlderSimpleTable::OlderSimpleTable(::test_table::OlderSimpleTable::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_table::OlderSimpleTable::OlderSimpleTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : OlderSimpleTable(Storage_{}) {}

::test_table::OlderSimpleTable::OlderSimpleTable(const ::test_table::OlderSimpleTable& other) noexcept : OlderSimpleTable(other.CloneStorage_()) {}

::test_table::OlderSimpleTable& ::test_table::OlderSimpleTable::operator=(const ::test_table::OlderSimpleTable& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_table::OlderSimpleTable::operator==(const OlderSimpleTable& other) const noexcept {
  return ::fidl::internal::NaturalTableCodingTraits<::test_table::OlderSimpleTable>::Equal(this, &other);
}
bool test_table::OlderSimpleTable::operator!=(const OlderSimpleTable& other) const noexcept {
  return !::fidl::internal::NaturalTableCodingTraits<::test_table::OlderSimpleTable>::Equal(this, &other);
}

::test_table::OlderSimpleTable::Storage_ test_table::OlderSimpleTable::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.x)};
}

bool test_table::OlderSimpleTable::IsEmpty() const {
  return !(storage_.x.has_value());
}
const std::optional<int64_t>& test_table::OlderSimpleTable::x() const {
  return storage_.x;
}

::std::optional<int64_t>& test_table::OlderSimpleTable::x() {
  return storage_.x;
}

::test_table::OlderSimpleTable& test_table::OlderSimpleTable::x(std::optional<int64_t> value) {
  storage_.x = std::move(value);
  return *this;
}

::test_table::NewerSimpleTable::NewerSimpleTable(::test_table::NewerSimpleTable::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_table::NewerSimpleTable::NewerSimpleTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : NewerSimpleTable(Storage_{}) {}

::test_table::NewerSimpleTable::NewerSimpleTable(const ::test_table::NewerSimpleTable& other) noexcept : NewerSimpleTable(other.CloneStorage_()) {}

::test_table::NewerSimpleTable& ::test_table::NewerSimpleTable::operator=(const ::test_table::NewerSimpleTable& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_table::NewerSimpleTable::operator==(const NewerSimpleTable& other) const noexcept {
  return ::fidl::internal::NaturalTableCodingTraits<::test_table::NewerSimpleTable>::Equal(this, &other);
}
bool test_table::NewerSimpleTable::operator!=(const NewerSimpleTable& other) const noexcept {
  return !::fidl::internal::NaturalTableCodingTraits<::test_table::NewerSimpleTable>::Equal(this, &other);
}

::test_table::NewerSimpleTable::Storage_ test_table::NewerSimpleTable::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.x),
      ::fidl::internal::NaturalClone(storage_.y),
      ::fidl::internal::NaturalClone(storage_.z)};
}

bool test_table::NewerSimpleTable::IsEmpty() const {
  return !(storage_.x.has_value() || storage_.y.has_value() || storage_.z.has_value());
}
const std::optional<int64_t>& test_table::NewerSimpleTable::x() const {
  return storage_.x;
}

::std::optional<int64_t>& test_table::NewerSimpleTable::x() {
  return storage_.x;
}

::test_table::NewerSimpleTable& test_table::NewerSimpleTable::x(std::optional<int64_t> value) {
  storage_.x = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::NewerSimpleTable::y() const {
  return storage_.y;
}

::std::optional<int64_t>& test_table::NewerSimpleTable::y() {
  return storage_.y;
}

::test_table::NewerSimpleTable& test_table::NewerSimpleTable::y(std::optional<int64_t> value) {
  storage_.y = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::NewerSimpleTable::z() const {
  return storage_.z;
}

::std::optional<int64_t>& test_table::NewerSimpleTable::z() {
  return storage_.z;
}

::test_table::NewerSimpleTable& test_table::NewerSimpleTable::z(std::optional<int64_t> value) {
  storage_.z = std::move(value);
  return *this;
}

::test_table::ReverseOrdinalTable::ReverseOrdinalTable(::test_table::ReverseOrdinalTable::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_table::ReverseOrdinalTable::ReverseOrdinalTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : ReverseOrdinalTable(Storage_{}) {}

::test_table::ReverseOrdinalTable::ReverseOrdinalTable(const ::test_table::ReverseOrdinalTable& other) noexcept : ReverseOrdinalTable(other.CloneStorage_()) {}

::test_table::ReverseOrdinalTable& ::test_table::ReverseOrdinalTable::operator=(const ::test_table::ReverseOrdinalTable& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_table::ReverseOrdinalTable::operator==(const ReverseOrdinalTable& other) const noexcept {
  return ::fidl::internal::NaturalTableCodingTraits<::test_table::ReverseOrdinalTable>::Equal(this, &other);
}
bool test_table::ReverseOrdinalTable::operator!=(const ReverseOrdinalTable& other) const noexcept {
  return !::fidl::internal::NaturalTableCodingTraits<::test_table::ReverseOrdinalTable>::Equal(this, &other);
}

::test_table::ReverseOrdinalTable::Storage_ test_table::ReverseOrdinalTable::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.z),
      ::fidl::internal::NaturalClone(storage_.y),
      ::fidl::internal::NaturalClone(storage_.x)};
}

bool test_table::ReverseOrdinalTable::IsEmpty() const {
  return !(storage_.z.has_value() || storage_.y.has_value() || storage_.x.has_value());
}
const std::optional<int64_t>& test_table::ReverseOrdinalTable::z() const {
  return storage_.z;
}

::std::optional<int64_t>& test_table::ReverseOrdinalTable::z() {
  return storage_.z;
}

::test_table::ReverseOrdinalTable& test_table::ReverseOrdinalTable::z(std::optional<int64_t> value) {
  storage_.z = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::ReverseOrdinalTable::y() const {
  return storage_.y;
}

::std::optional<int64_t>& test_table::ReverseOrdinalTable::y() {
  return storage_.y;
}

::test_table::ReverseOrdinalTable& test_table::ReverseOrdinalTable::y(std::optional<int64_t> value) {
  storage_.y = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::ReverseOrdinalTable::x() const {
  return storage_.x;
}

::std::optional<int64_t>& test_table::ReverseOrdinalTable::x() {
  return storage_.x;
}

::test_table::ReverseOrdinalTable& test_table::ReverseOrdinalTable::x(std::optional<int64_t> value) {
  storage_.x = std::move(value);
  return *this;
}

::test_table::TableWithAttributes::TableWithAttributes(::test_table::TableWithAttributes::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_table::TableWithAttributes::TableWithAttributes(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : TableWithAttributes(Storage_{}) {}

::test_table::TableWithAttributes::TableWithAttributes(const ::test_table::TableWithAttributes& other) noexcept : TableWithAttributes(other.CloneStorage_()) {}

::test_table::TableWithAttributes& ::test_table::TableWithAttributes::operator=(const ::test_table::TableWithAttributes& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_table::TableWithAttributes::operator==(const TableWithAttributes& other) const noexcept {
  return ::fidl::internal::NaturalTableCodingTraits<::test_table::TableWithAttributes>::Equal(this, &other);
}
bool test_table::TableWithAttributes::operator!=(const TableWithAttributes& other) const noexcept {
  return !::fidl::internal::NaturalTableCodingTraits<::test_table::TableWithAttributes>::Equal(this, &other);
}

::test_table::TableWithAttributes::Storage_ test_table::TableWithAttributes::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.x)};
}

bool test_table::TableWithAttributes::IsEmpty() const {
  return !(storage_.x.has_value());
}
const std::optional<int64_t>& test_table::TableWithAttributes::x() const {
  return storage_.x;
}

::std::optional<int64_t>& test_table::TableWithAttributes::x() {
  return storage_.x;
}

::test_table::TableWithAttributes& test_table::TableWithAttributes::x(std::optional<int64_t> value) {
  storage_.x = std::move(value);
  return *this;
}

::test_table::ExtensionTable::ExtensionTable(::test_table::ExtensionTable::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_table::ExtensionTable::ExtensionTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : ExtensionTable(Storage_{}) {}

::test_table::ExtensionTable::ExtensionTable(const ::test_table::ExtensionTable& other) noexcept : ExtensionTable(other.CloneStorage_()) {}

::test_table::ExtensionTable& ::test_table::ExtensionTable::operator=(const ::test_table::ExtensionTable& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_table::ExtensionTable::operator==(const ExtensionTable& other) const noexcept {
  return ::fidl::internal::NaturalTableCodingTraits<::test_table::ExtensionTable>::Equal(this, &other);
}
bool test_table::ExtensionTable::operator!=(const ExtensionTable& other) const noexcept {
  return !::fidl::internal::NaturalTableCodingTraits<::test_table::ExtensionTable>::Equal(this, &other);
}

::test_table::ExtensionTable::Storage_ test_table::ExtensionTable::CloneStorage_() const {
  return Storage_{};
}

bool test_table::ExtensionTable::IsEmpty() const {
  return true;
}

::test_table::SixtyFourOrdinalTable::SixtyFourOrdinalTable(::test_table::SixtyFourOrdinalTable::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_table::SixtyFourOrdinalTable::SixtyFourOrdinalTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : SixtyFourOrdinalTable(Storage_{}) {}

::test_table::SixtyFourOrdinalTable::SixtyFourOrdinalTable(const ::test_table::SixtyFourOrdinalTable& other) noexcept : SixtyFourOrdinalTable(other.CloneStorage_()) {}

::test_table::SixtyFourOrdinalTable& ::test_table::SixtyFourOrdinalTable::operator=(const ::test_table::SixtyFourOrdinalTable& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_table::SixtyFourOrdinalTable::operator==(const SixtyFourOrdinalTable& other) const noexcept {
  return ::fidl::internal::NaturalTableCodingTraits<::test_table::SixtyFourOrdinalTable>::Equal(this, &other);
}
bool test_table::SixtyFourOrdinalTable::operator!=(const SixtyFourOrdinalTable& other) const noexcept {
  return !::fidl::internal::NaturalTableCodingTraits<::test_table::SixtyFourOrdinalTable>::Equal(this, &other);
}

::test_table::SixtyFourOrdinalTable::Storage_ test_table::SixtyFourOrdinalTable::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.v1),
      ::fidl::internal::NaturalClone(storage_.v2),
      ::fidl::internal::NaturalClone(storage_.v3),
      ::fidl::internal::NaturalClone(storage_.v4),
      ::fidl::internal::NaturalClone(storage_.v5),
      ::fidl::internal::NaturalClone(storage_.v6),
      ::fidl::internal::NaturalClone(storage_.v7),
      ::fidl::internal::NaturalClone(storage_.v8),
      ::fidl::internal::NaturalClone(storage_.v9),
      ::fidl::internal::NaturalClone(storage_.v10),
      ::fidl::internal::NaturalClone(storage_.v11),
      ::fidl::internal::NaturalClone(storage_.v12),
      ::fidl::internal::NaturalClone(storage_.v13),
      ::fidl::internal::NaturalClone(storage_.v14),
      ::fidl::internal::NaturalClone(storage_.v15),
      ::fidl::internal::NaturalClone(storage_.v16),
      ::fidl::internal::NaturalClone(storage_.v17),
      ::fidl::internal::NaturalClone(storage_.v18),
      ::fidl::internal::NaturalClone(storage_.v19),
      ::fidl::internal::NaturalClone(storage_.v20),
      ::fidl::internal::NaturalClone(storage_.v21),
      ::fidl::internal::NaturalClone(storage_.v22),
      ::fidl::internal::NaturalClone(storage_.v23),
      ::fidl::internal::NaturalClone(storage_.v24),
      ::fidl::internal::NaturalClone(storage_.v25),
      ::fidl::internal::NaturalClone(storage_.v26),
      ::fidl::internal::NaturalClone(storage_.v27),
      ::fidl::internal::NaturalClone(storage_.v28),
      ::fidl::internal::NaturalClone(storage_.v29),
      ::fidl::internal::NaturalClone(storage_.v30),
      ::fidl::internal::NaturalClone(storage_.v31),
      ::fidl::internal::NaturalClone(storage_.v32),
      ::fidl::internal::NaturalClone(storage_.v33),
      ::fidl::internal::NaturalClone(storage_.v34),
      ::fidl::internal::NaturalClone(storage_.v35),
      ::fidl::internal::NaturalClone(storage_.v36),
      ::fidl::internal::NaturalClone(storage_.v37),
      ::fidl::internal::NaturalClone(storage_.v38),
      ::fidl::internal::NaturalClone(storage_.v39),
      ::fidl::internal::NaturalClone(storage_.v40),
      ::fidl::internal::NaturalClone(storage_.v41),
      ::fidl::internal::NaturalClone(storage_.v42),
      ::fidl::internal::NaturalClone(storage_.v43),
      ::fidl::internal::NaturalClone(storage_.v44),
      ::fidl::internal::NaturalClone(storage_.v45),
      ::fidl::internal::NaturalClone(storage_.v46),
      ::fidl::internal::NaturalClone(storage_.v47),
      ::fidl::internal::NaturalClone(storage_.v48),
      ::fidl::internal::NaturalClone(storage_.v49),
      ::fidl::internal::NaturalClone(storage_.v50),
      ::fidl::internal::NaturalClone(storage_.v51),
      ::fidl::internal::NaturalClone(storage_.v52),
      ::fidl::internal::NaturalClone(storage_.v53),
      ::fidl::internal::NaturalClone(storage_.v54),
      ::fidl::internal::NaturalClone(storage_.v55),
      ::fidl::internal::NaturalClone(storage_.v56),
      ::fidl::internal::NaturalClone(storage_.v57),
      ::fidl::internal::NaturalClone(storage_.v58),
      ::fidl::internal::NaturalClone(storage_.v59),
      ::fidl::internal::NaturalClone(storage_.v60),
      ::fidl::internal::NaturalClone(storage_.v61),
      ::fidl::internal::NaturalClone(storage_.v62),
      ::fidl::internal::NaturalClone(storage_.v63),
      ::fidl::internal::NaturalClone(storage_.v64)};
}

bool test_table::SixtyFourOrdinalTable::IsEmpty() const {
  return !(storage_.v1.has_value() || storage_.v2.has_value() || storage_.v3.has_value() || storage_.v4.has_value() || storage_.v5.has_value() || storage_.v6.has_value() || storage_.v7.has_value() || storage_.v8.has_value() || storage_.v9.has_value() || storage_.v10.has_value() || storage_.v11.has_value() || storage_.v12.has_value() || storage_.v13.has_value() || storage_.v14.has_value() || storage_.v15.has_value() || storage_.v16.has_value() || storage_.v17.has_value() || storage_.v18.has_value() || storage_.v19.has_value() || storage_.v20.has_value() || storage_.v21.has_value() || storage_.v22.has_value() || storage_.v23.has_value() || storage_.v24.has_value() || storage_.v25.has_value() || storage_.v26.has_value() || storage_.v27.has_value() || storage_.v28.has_value() || storage_.v29.has_value() || storage_.v30.has_value() || storage_.v31.has_value() || storage_.v32.has_value() || storage_.v33.has_value() || storage_.v34.has_value() || storage_.v35.has_value() || storage_.v36.has_value() || storage_.v37.has_value() || storage_.v38.has_value() || storage_.v39.has_value() || storage_.v40.has_value() || storage_.v41.has_value() || storage_.v42.has_value() || storage_.v43.has_value() || storage_.v44.has_value() || storage_.v45.has_value() || storage_.v46.has_value() || storage_.v47.has_value() || storage_.v48.has_value() || storage_.v49.has_value() || storage_.v50.has_value() || storage_.v51.has_value() || storage_.v52.has_value() || storage_.v53.has_value() || storage_.v54.has_value() || storage_.v55.has_value() || storage_.v56.has_value() || storage_.v57.has_value() || storage_.v58.has_value() || storage_.v59.has_value() || storage_.v60.has_value() || storage_.v61.has_value() || storage_.v62.has_value() || storage_.v63.has_value() || storage_.v64.has_value());
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v1() const {
  return storage_.v1;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v1() {
  return storage_.v1;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v1(std::optional<int64_t> value) {
  storage_.v1 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v2() const {
  return storage_.v2;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v2() {
  return storage_.v2;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v2(std::optional<int64_t> value) {
  storage_.v2 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v3() const {
  return storage_.v3;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v3() {
  return storage_.v3;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v3(std::optional<int64_t> value) {
  storage_.v3 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v4() const {
  return storage_.v4;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v4() {
  return storage_.v4;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v4(std::optional<int64_t> value) {
  storage_.v4 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v5() const {
  return storage_.v5;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v5() {
  return storage_.v5;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v5(std::optional<int64_t> value) {
  storage_.v5 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v6() const {
  return storage_.v6;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v6() {
  return storage_.v6;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v6(std::optional<int64_t> value) {
  storage_.v6 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v7() const {
  return storage_.v7;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v7() {
  return storage_.v7;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v7(std::optional<int64_t> value) {
  storage_.v7 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v8() const {
  return storage_.v8;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v8() {
  return storage_.v8;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v8(std::optional<int64_t> value) {
  storage_.v8 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v9() const {
  return storage_.v9;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v9() {
  return storage_.v9;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v9(std::optional<int64_t> value) {
  storage_.v9 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v10() const {
  return storage_.v10;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v10() {
  return storage_.v10;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v10(std::optional<int64_t> value) {
  storage_.v10 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v11() const {
  return storage_.v11;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v11() {
  return storage_.v11;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v11(std::optional<int64_t> value) {
  storage_.v11 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v12() const {
  return storage_.v12;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v12() {
  return storage_.v12;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v12(std::optional<int64_t> value) {
  storage_.v12 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v13() const {
  return storage_.v13;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v13() {
  return storage_.v13;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v13(std::optional<int64_t> value) {
  storage_.v13 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v14() const {
  return storage_.v14;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v14() {
  return storage_.v14;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v14(std::optional<int64_t> value) {
  storage_.v14 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v15() const {
  return storage_.v15;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v15() {
  return storage_.v15;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v15(std::optional<int64_t> value) {
  storage_.v15 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v16() const {
  return storage_.v16;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v16() {
  return storage_.v16;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v16(std::optional<int64_t> value) {
  storage_.v16 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v17() const {
  return storage_.v17;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v17() {
  return storage_.v17;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v17(std::optional<int64_t> value) {
  storage_.v17 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v18() const {
  return storage_.v18;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v18() {
  return storage_.v18;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v18(std::optional<int64_t> value) {
  storage_.v18 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v19() const {
  return storage_.v19;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v19() {
  return storage_.v19;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v19(std::optional<int64_t> value) {
  storage_.v19 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v20() const {
  return storage_.v20;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v20() {
  return storage_.v20;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v20(std::optional<int64_t> value) {
  storage_.v20 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v21() const {
  return storage_.v21;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v21() {
  return storage_.v21;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v21(std::optional<int64_t> value) {
  storage_.v21 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v22() const {
  return storage_.v22;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v22() {
  return storage_.v22;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v22(std::optional<int64_t> value) {
  storage_.v22 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v23() const {
  return storage_.v23;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v23() {
  return storage_.v23;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v23(std::optional<int64_t> value) {
  storage_.v23 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v24() const {
  return storage_.v24;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v24() {
  return storage_.v24;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v24(std::optional<int64_t> value) {
  storage_.v24 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v25() const {
  return storage_.v25;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v25() {
  return storage_.v25;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v25(std::optional<int64_t> value) {
  storage_.v25 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v26() const {
  return storage_.v26;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v26() {
  return storage_.v26;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v26(std::optional<int64_t> value) {
  storage_.v26 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v27() const {
  return storage_.v27;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v27() {
  return storage_.v27;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v27(std::optional<int64_t> value) {
  storage_.v27 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v28() const {
  return storage_.v28;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v28() {
  return storage_.v28;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v28(std::optional<int64_t> value) {
  storage_.v28 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v29() const {
  return storage_.v29;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v29() {
  return storage_.v29;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v29(std::optional<int64_t> value) {
  storage_.v29 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v30() const {
  return storage_.v30;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v30() {
  return storage_.v30;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v30(std::optional<int64_t> value) {
  storage_.v30 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v31() const {
  return storage_.v31;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v31() {
  return storage_.v31;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v31(std::optional<int64_t> value) {
  storage_.v31 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v32() const {
  return storage_.v32;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v32() {
  return storage_.v32;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v32(std::optional<int64_t> value) {
  storage_.v32 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v33() const {
  return storage_.v33;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v33() {
  return storage_.v33;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v33(std::optional<int64_t> value) {
  storage_.v33 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v34() const {
  return storage_.v34;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v34() {
  return storage_.v34;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v34(std::optional<int64_t> value) {
  storage_.v34 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v35() const {
  return storage_.v35;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v35() {
  return storage_.v35;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v35(std::optional<int64_t> value) {
  storage_.v35 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v36() const {
  return storage_.v36;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v36() {
  return storage_.v36;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v36(std::optional<int64_t> value) {
  storage_.v36 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v37() const {
  return storage_.v37;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v37() {
  return storage_.v37;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v37(std::optional<int64_t> value) {
  storage_.v37 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v38() const {
  return storage_.v38;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v38() {
  return storage_.v38;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v38(std::optional<int64_t> value) {
  storage_.v38 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v39() const {
  return storage_.v39;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v39() {
  return storage_.v39;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v39(std::optional<int64_t> value) {
  storage_.v39 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v40() const {
  return storage_.v40;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v40() {
  return storage_.v40;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v40(std::optional<int64_t> value) {
  storage_.v40 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v41() const {
  return storage_.v41;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v41() {
  return storage_.v41;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v41(std::optional<int64_t> value) {
  storage_.v41 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v42() const {
  return storage_.v42;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v42() {
  return storage_.v42;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v42(std::optional<int64_t> value) {
  storage_.v42 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v43() const {
  return storage_.v43;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v43() {
  return storage_.v43;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v43(std::optional<int64_t> value) {
  storage_.v43 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v44() const {
  return storage_.v44;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v44() {
  return storage_.v44;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v44(std::optional<int64_t> value) {
  storage_.v44 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v45() const {
  return storage_.v45;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v45() {
  return storage_.v45;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v45(std::optional<int64_t> value) {
  storage_.v45 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v46() const {
  return storage_.v46;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v46() {
  return storage_.v46;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v46(std::optional<int64_t> value) {
  storage_.v46 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v47() const {
  return storage_.v47;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v47() {
  return storage_.v47;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v47(std::optional<int64_t> value) {
  storage_.v47 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v48() const {
  return storage_.v48;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v48() {
  return storage_.v48;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v48(std::optional<int64_t> value) {
  storage_.v48 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v49() const {
  return storage_.v49;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v49() {
  return storage_.v49;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v49(std::optional<int64_t> value) {
  storage_.v49 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v50() const {
  return storage_.v50;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v50() {
  return storage_.v50;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v50(std::optional<int64_t> value) {
  storage_.v50 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v51() const {
  return storage_.v51;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v51() {
  return storage_.v51;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v51(std::optional<int64_t> value) {
  storage_.v51 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v52() const {
  return storage_.v52;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v52() {
  return storage_.v52;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v52(std::optional<int64_t> value) {
  storage_.v52 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v53() const {
  return storage_.v53;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v53() {
  return storage_.v53;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v53(std::optional<int64_t> value) {
  storage_.v53 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v54() const {
  return storage_.v54;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v54() {
  return storage_.v54;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v54(std::optional<int64_t> value) {
  storage_.v54 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v55() const {
  return storage_.v55;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v55() {
  return storage_.v55;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v55(std::optional<int64_t> value) {
  storage_.v55 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v56() const {
  return storage_.v56;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v56() {
  return storage_.v56;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v56(std::optional<int64_t> value) {
  storage_.v56 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v57() const {
  return storage_.v57;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v57() {
  return storage_.v57;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v57(std::optional<int64_t> value) {
  storage_.v57 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v58() const {
  return storage_.v58;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v58() {
  return storage_.v58;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v58(std::optional<int64_t> value) {
  storage_.v58 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v59() const {
  return storage_.v59;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v59() {
  return storage_.v59;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v59(std::optional<int64_t> value) {
  storage_.v59 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v60() const {
  return storage_.v60;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v60() {
  return storage_.v60;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v60(std::optional<int64_t> value) {
  storage_.v60 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v61() const {
  return storage_.v61;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v61() {
  return storage_.v61;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v61(std::optional<int64_t> value) {
  storage_.v61 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v62() const {
  return storage_.v62;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v62() {
  return storage_.v62;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v62(std::optional<int64_t> value) {
  storage_.v62 = std::move(value);
  return *this;
}
const std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v63() const {
  return storage_.v63;
}

::std::optional<int64_t>& test_table::SixtyFourOrdinalTable::v63() {
  return storage_.v63;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v63(std::optional<int64_t> value) {
  storage_.v63 = std::move(value);
  return *this;
}
const std::optional<::test_table::ExtensionTable>& test_table::SixtyFourOrdinalTable::v64() const {
  return storage_.v64;
}

::std::optional<::test_table::ExtensionTable>& test_table::SixtyFourOrdinalTable::v64() {
  return storage_.v64;
}

::test_table::SixtyFourOrdinalTable& test_table::SixtyFourOrdinalTable::v64(std::optional<::test_table::ExtensionTable> value) {
  storage_.v64 = std::move(value);
  return *this;
}

#pragma clang diagnostic pop
