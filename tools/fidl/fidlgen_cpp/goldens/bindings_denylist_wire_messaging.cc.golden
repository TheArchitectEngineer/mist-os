// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json
#ifdef __Fuchsia__

#include <fidl/test.bindingsdenylist/cpp/wire_messaging.h>

#include <memory>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::fidl::internal::WireEventDispatcher<::test_bindingsdenylist::OnlyCppAndDeps>::WireEventDispatcher(::fidl::internal::WireEventHandlerInterface<::test_bindingsdenylist::OnlyCppAndDeps>* event_handler)
: IncomingEventDispatcher(event_handler) {}

  ::fidl::Status fidl::WireSyncEventHandler<::test_bindingsdenylist::OnlyCppAndDeps>::HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_bindingsdenylist::OnlyCppAndDeps> client_end) {
      ::fidl::internal::IncomingEventsStorage<::test_bindingsdenylist::OnlyCppAndDeps> event_storage;
      fidl::internal::WireEventDispatcher<::test_bindingsdenylist::OnlyCppAndDeps> dispatcher{this};
      return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
  }

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<::test_bindingsdenylist::OnlyCppAndDeps>::entries_[] = {
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<::test_bindingsdenylist::OnlyCppAndDeps>::entries_end_ =
    &entries_[0];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<::test_bindingsdenylist::OnlyCppAndDeps>::TryDispatch(
    ::fidl::WireServer<::test_bindingsdenylist::OnlyCppAndDeps>* impl, ::fidl::IncomingHeaderAndMessage& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
    impl, msg, storage_view, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_bindingsdenylist::OnlyCppAndDeps>::Dispatch(::fidl::WireServer<::test_bindingsdenylist::OnlyCppAndDeps>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_,
  &unknown_method_handler_entry_);
}

void fidl::WireServer<::test_bindingsdenylist::OnlyCppAndDeps>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::WireServerDispatcher<::test_bindingsdenylist::OnlyCppAndDeps>::Dispatch(this, std::move(msg), storage_view, txn);
}

fidl::WireServer<::test_bindingsdenylist::OnlyCppAndDeps>::Handler fidl::WireServer<::test_bindingsdenylist::OnlyCppAndDeps>::bind_handler(async_dispatcher_t* dispatcher) {
  return [impl=this, dispatcher=dispatcher](::fidl::ServerEnd<::test_bindingsdenylist::OnlyCppAndDeps> request) {
      (void) ::fidl::BindServer(dispatcher, std::move(request), impl);
  };
}

  namespace test_bindingsdenylist {

  [[maybe_unused]]
  constexpr uint64_t kDenyEachBinding_OnlyDenyDart_Ordinal = 8446571910689294295lu;

  [[maybe_unused]]
  constexpr ::fidl::MessageDynamicFlags kDenyEachBinding_OnlyDenyDart_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
    static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>)
        == ::fidl::TypeTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>>::kPrimarySize);
    static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, header) == 0);
      static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, body) == sizeof(fidl_message_header_t));

    static_assert(sizeof(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartRequest)
        == ::fidl::TypeTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartRequest>::kPrimarySize);
          static_assert(offsetof(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartRequest, a) == 0);
      static_assert(sizeof(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>)
          == ::fidl::TypeTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>>::kPrimarySize);
      static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>)
          == ::fidl::TypeTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>>::kPrimarySize);
      static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, header) == 0);
      static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, body) == sizeof(fidl_message_header_t));

  [[maybe_unused]]
  constexpr uint64_t kDenyEachBinding_OnlyDenyGo_Ordinal = 7311125300308839833lu;

  [[maybe_unused]]
  constexpr ::fidl::MessageDynamicFlags kDenyEachBinding_OnlyDenyGo_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
    static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>)
        == ::fidl::TypeTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>>::kPrimarySize);
    static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, header) == 0);
      static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, body) == sizeof(fidl_message_header_t));

    static_assert(sizeof(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoRequest)
        == ::fidl::TypeTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoRequest>::kPrimarySize);
          static_assert(offsetof(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoRequest, a) == 0);
      static_assert(sizeof(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>)
          == ::fidl::TypeTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>>::kPrimarySize);
      static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>)
          == ::fidl::TypeTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>>::kPrimarySize);
      static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, header) == 0);
      static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, body) == sizeof(fidl_message_header_t));

  [[maybe_unused]]
  constexpr uint64_t kDenyEachBinding_OnlyDenyPython_Ordinal = 3010747198252652930lu;

  [[maybe_unused]]
  constexpr ::fidl::MessageDynamicFlags kDenyEachBinding_OnlyDenyPython_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
    static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>)
        == ::fidl::TypeTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>>::kPrimarySize);
    static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, header) == 0);
      static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, body) == sizeof(fidl_message_header_t));

    static_assert(sizeof(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonRequest)
        == ::fidl::TypeTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonRequest>::kPrimarySize);
          static_assert(offsetof(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonRequest, a) == 0);
      static_assert(sizeof(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>)
          == ::fidl::TypeTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>>::kPrimarySize);
      static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>)
          == ::fidl::TypeTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>>::kPrimarySize);
      static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, header) == 0);
      static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, body) == sizeof(fidl_message_header_t));

  [[maybe_unused]]
  constexpr uint64_t kDenyEachBinding_OnlyDenyRust_Ordinal = 3719805222870932662lu;

  [[maybe_unused]]
  constexpr ::fidl::MessageDynamicFlags kDenyEachBinding_OnlyDenyRust_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
    static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>)
        == ::fidl::TypeTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>>::kPrimarySize);
    static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, header) == 0);
      static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, body) == sizeof(fidl_message_header_t));

    static_assert(sizeof(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustRequest)
        == ::fidl::TypeTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustRequest>::kPrimarySize);
          static_assert(offsetof(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustRequest, a) == 0);
      static_assert(sizeof(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>)
          == ::fidl::TypeTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>>::kPrimarySize);
      static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>)
          == ::fidl::TypeTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>>::kPrimarySize);
      static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, header) == 0);
      static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, body) == sizeof(fidl_message_header_t));

  [[maybe_unused]]
  constexpr uint64_t kDenyEachBinding_OnlyDenySyzkaller_Ordinal = 2319043834522757514lu;

  [[maybe_unused]]
  constexpr ::fidl::MessageDynamicFlags kDenyEachBinding_OnlyDenySyzkaller_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
    static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>)
        == ::fidl::TypeTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>>::kPrimarySize);
    static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, header) == 0);
      static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, body) == sizeof(fidl_message_header_t));

    static_assert(sizeof(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerRequest)
        == ::fidl::TypeTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerRequest>::kPrimarySize);
          static_assert(offsetof(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerRequest, a) == 0);
      static_assert(sizeof(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>)
          == ::fidl::TypeTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>>::kPrimarySize);
      static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>)
          == ::fidl::TypeTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>>::kPrimarySize);
      static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, header) == 0);
      static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, body) == sizeof(fidl_message_header_t));}  // namespace test_bindingsdenylist

::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::WireResult(
    ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding> client,
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>* request
) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
    ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>> handle_storage;
    ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>(
        outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{})
    );
    SetStatus(::fidl::internal::StatusFromResult(decoded));
      if (ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
}

::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>(result) {}

    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::WireUnownedResult(::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>* request) {
      constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>();
      ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
      if (!allocation.is_ok()) {
        SetStatus(allocation.error_value());
        return;
      }
      uint8_t* buffer = allocation->data;constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
            ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::MessageDirection::kSending>();
        uint8_t* request_bytes = buffer;
        static_assert(buffer_size > request_byte_capacity);
        uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
        uint8_t* response_bytes = &buffer[request_byte_capacity];

      ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>> request_message(
          request_bytes, request_byte_capacity, request);
      auto& outgoing = request_message.GetOutgoingMessage();
        ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>> handle_storage;
        ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>(
            outgoing.Call(
                client_end.handle(),
                handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))
            )
        );
        SetStatus(::fidl::internal::StatusFromResult(decoded));
          if (ok()) {
            decoded_ = std::move(decoded.value());
            ExtractValueFromDecoded(decoded_.pointer());
          }
    }
    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::WireUnownedResult(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>* response)
        : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>(fidl::Status::Ok()), decoded_(response) {
      ExtractValueFromDecoded(decoded_.pointer());
    }

    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::WireUnownedResult(
        ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>>>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>(::fidl::internal::StatusFromResult(decoded)) {
      if (decoded.is_ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
    }

  ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>(result) {}

::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::WireResult(
    ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding> client,
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>* request
) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
    ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>> handle_storage;
    ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>(
        outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{})
    );
    SetStatus(::fidl::internal::StatusFromResult(decoded));
      if (ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
}

::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>(result) {}

    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::WireUnownedResult(::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>* request) {
      constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>();
      ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
      if (!allocation.is_ok()) {
        SetStatus(allocation.error_value());
        return;
      }
      uint8_t* buffer = allocation->data;constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
            ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::MessageDirection::kSending>();
        uint8_t* request_bytes = buffer;
        static_assert(buffer_size > request_byte_capacity);
        uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
        uint8_t* response_bytes = &buffer[request_byte_capacity];

      ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>> request_message(
          request_bytes, request_byte_capacity, request);
      auto& outgoing = request_message.GetOutgoingMessage();
        ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>> handle_storage;
        ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>(
            outgoing.Call(
                client_end.handle(),
                handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))
            )
        );
        SetStatus(::fidl::internal::StatusFromResult(decoded));
          if (ok()) {
            decoded_ = std::move(decoded.value());
            ExtractValueFromDecoded(decoded_.pointer());
          }
    }
    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::WireUnownedResult(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>* response)
        : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>(fidl::Status::Ok()), decoded_(response) {
      ExtractValueFromDecoded(decoded_.pointer());
    }

    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::WireUnownedResult(
        ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>>>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>(::fidl::internal::StatusFromResult(decoded)) {
      if (decoded.is_ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
    }

  ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>(result) {}

::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::WireResult(
    ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding> client,
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>* request
) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
    ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>> handle_storage;
    ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>(
        outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{})
    );
    SetStatus(::fidl::internal::StatusFromResult(decoded));
      if (ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
}

::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>(result) {}

    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::WireUnownedResult(::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>* request) {
      constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>();
      ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
      if (!allocation.is_ok()) {
        SetStatus(allocation.error_value());
        return;
      }
      uint8_t* buffer = allocation->data;constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
            ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::MessageDirection::kSending>();
        uint8_t* request_bytes = buffer;
        static_assert(buffer_size > request_byte_capacity);
        uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
        uint8_t* response_bytes = &buffer[request_byte_capacity];

      ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>> request_message(
          request_bytes, request_byte_capacity, request);
      auto& outgoing = request_message.GetOutgoingMessage();
        ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>> handle_storage;
        ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>(
            outgoing.Call(
                client_end.handle(),
                handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))
            )
        );
        SetStatus(::fidl::internal::StatusFromResult(decoded));
          if (ok()) {
            decoded_ = std::move(decoded.value());
            ExtractValueFromDecoded(decoded_.pointer());
          }
    }
    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::WireUnownedResult(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>* response)
        : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>(fidl::Status::Ok()), decoded_(response) {
      ExtractValueFromDecoded(decoded_.pointer());
    }

    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::WireUnownedResult(
        ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>>>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>(::fidl::internal::StatusFromResult(decoded)) {
      if (decoded.is_ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
    }

  ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>(result) {}

::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::WireResult(
    ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding> client,
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>* request
) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
    ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>> handle_storage;
    ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>(
        outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{})
    );
    SetStatus(::fidl::internal::StatusFromResult(decoded));
      if (ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
}

::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>(result) {}

    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::WireUnownedResult(::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>* request) {
      constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>();
      ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
      if (!allocation.is_ok()) {
        SetStatus(allocation.error_value());
        return;
      }
      uint8_t* buffer = allocation->data;constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
            ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::MessageDirection::kSending>();
        uint8_t* request_bytes = buffer;
        static_assert(buffer_size > request_byte_capacity);
        uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
        uint8_t* response_bytes = &buffer[request_byte_capacity];

      ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>> request_message(
          request_bytes, request_byte_capacity, request);
      auto& outgoing = request_message.GetOutgoingMessage();
        ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>> handle_storage;
        ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>(
            outgoing.Call(
                client_end.handle(),
                handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))
            )
        );
        SetStatus(::fidl::internal::StatusFromResult(decoded));
          if (ok()) {
            decoded_ = std::move(decoded.value());
            ExtractValueFromDecoded(decoded_.pointer());
          }
    }
    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::WireUnownedResult(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>* response)
        : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>(fidl::Status::Ok()), decoded_(response) {
      ExtractValueFromDecoded(decoded_.pointer());
    }

    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::WireUnownedResult(
        ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>>>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>(::fidl::internal::StatusFromResult(decoded)) {
      if (decoded.is_ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
    }

  ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>(result) {}

::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::WireResult(
    ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding> client,
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>* request
) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
    ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>> handle_storage;
    ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>(
        outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{})
    );
    SetStatus(::fidl::internal::StatusFromResult(decoded));
      if (ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
}

::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>(result) {}

    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::WireUnownedResult(::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>* request) {
      constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>();
      ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
      if (!allocation.is_ok()) {
        SetStatus(allocation.error_value());
        return;
      }
      uint8_t* buffer = allocation->data;constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
            ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::MessageDirection::kSending>();
        uint8_t* request_bytes = buffer;
        static_assert(buffer_size > request_byte_capacity);
        uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
        uint8_t* response_bytes = &buffer[request_byte_capacity];

      ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>> request_message(
          request_bytes, request_byte_capacity, request);
      auto& outgoing = request_message.GetOutgoingMessage();
        ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>> handle_storage;
        ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>(
            outgoing.Call(
                client_end.handle(),
                handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))
            )
        );
        SetStatus(::fidl::internal::StatusFromResult(decoded));
          if (ok()) {
            decoded_ = std::move(decoded.value());
            ExtractValueFromDecoded(decoded_.pointer());
          }
    }
    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::WireUnownedResult(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>* response)
        : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>(fidl::Status::Ok()), decoded_(response) {
      ExtractValueFromDecoded(decoded_.pointer());
    }

    ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::WireUnownedResult(
        ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>>>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>(::fidl::internal::StatusFromResult(decoded)) {
      if (decoded.is_ok()) {
        decoded_ = std::move(decoded.value());
        ExtractValueFromDecoded(decoded_.pointer());
      }
    }

  ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>(result) {}

  ::fidl::internal::WireThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart> fidl::internal::WireWeakAsyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyDart(bool a) {
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart> _request{ a };
    return ::fidl::internal::WireThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>{
        _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
  }

  ::fidl::internal::WireThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo> fidl::internal::WireWeakAsyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyGo(bool a) {
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo> _request{ a };
    return ::fidl::internal::WireThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>{
        _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
  }

  ::fidl::internal::WireThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython> fidl::internal::WireWeakAsyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyPython(bool a) {
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython> _request{ a };
    return ::fidl::internal::WireThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>{
        _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
  }

  ::fidl::internal::WireThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust> fidl::internal::WireWeakAsyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyRust(bool a) {
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust> _request{ a };
    return ::fidl::internal::WireThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>{
        _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
  }

  ::fidl::internal::WireThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller> fidl::internal::WireWeakAsyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenySyzkaller(bool a) {
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller> _request{ a };
    return ::fidl::internal::WireThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>{
        _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
  }
::fidl::internal::WireBufferThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart> fidl::internal::WireWeakAsyncBufferClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyDart(bool a) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>();
  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart> _request{ a };
  return ::fidl::internal::WireBufferThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}
::fidl::internal::WireBufferThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo> fidl::internal::WireWeakAsyncBufferClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyGo(bool a) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>();
  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo> _request{ a };
  return ::fidl::internal::WireBufferThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}
::fidl::internal::WireBufferThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython> fidl::internal::WireWeakAsyncBufferClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyPython(bool a) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>();
  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython> _request{ a };
  return ::fidl::internal::WireBufferThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}
::fidl::internal::WireBufferThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust> fidl::internal::WireWeakAsyncBufferClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyRust(bool a) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>();
  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust> _request{ a };
  return ::fidl::internal::WireBufferThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}
::fidl::internal::WireBufferThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller> fidl::internal::WireWeakAsyncBufferClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenySyzkaller(bool a) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>();
  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller> _request{ a };
  return ::fidl::internal::WireBufferThenable<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}

  ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>
  fidl::internal::WireWeakSyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyDart(bool a) {
    return _client_base()->MakeSyncCallWith(
        [&] (std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
          ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart> _request{ a };
          return ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>(::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
        });
  }

  ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>
  fidl::internal::WireWeakSyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyGo(bool a) {
    return _client_base()->MakeSyncCallWith(
        [&] (std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
          ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo> _request{ a };
          return ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>(::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
        });
  }

  ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>
  fidl::internal::WireWeakSyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyPython(bool a) {
    return _client_base()->MakeSyncCallWith(
        [&] (std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
          ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython> _request{ a };
          return ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>(::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
        });
  }

  ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>
  fidl::internal::WireWeakSyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyRust(bool a) {
    return _client_base()->MakeSyncCallWith(
        [&] (std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
          ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust> _request{ a };
          return ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>(::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
        });
  }

  ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>
  fidl::internal::WireWeakSyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenySyzkaller(bool a) {
    return _client_base()->MakeSyncCallWith(
        [&] (std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
          ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller> _request{ a };
          return ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>(::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
        });
  }

::fidl::internal::WireEventDispatcher<::test_bindingsdenylist::DenyEachBinding>::WireEventDispatcher(::fidl::internal::WireEventHandlerInterface<::test_bindingsdenylist::DenyEachBinding>* event_handler)
: IncomingEventDispatcher(event_handler) {}

  ::fidl::Status fidl::WireSyncEventHandler<::test_bindingsdenylist::DenyEachBinding>::HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding> client_end) {
      ::fidl::internal::IncomingEventsStorage<::test_bindingsdenylist::DenyEachBinding> event_storage;
      fidl::internal::WireEventDispatcher<::test_bindingsdenylist::DenyEachBinding> dispatcher{this};
      return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
  }

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<::test_bindingsdenylist::DenyEachBinding>::entries_[] = {
    { ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyDart_Ordinal,
      [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
         internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
        ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartRequest>(
            std::move(msg), metadata);
        if (unlikely(!decoded.is_ok())) {
          return decoded.error_value();
        }
        ::fidl::internal::WireCompleter<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::Sync completer(txn);
        reinterpret_cast<::fidl::WireServer<::test_bindingsdenylist::DenyEachBinding>*>(interface)->OnlyDenyDart(
            decoded.value().pointer(),
            completer
        );
        return ::fidl::Status::Ok();
      },
    },
    { ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyGo_Ordinal,
      [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
         internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
        ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoRequest>(
            std::move(msg), metadata);
        if (unlikely(!decoded.is_ok())) {
          return decoded.error_value();
        }
        ::fidl::internal::WireCompleter<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::Sync completer(txn);
        reinterpret_cast<::fidl::WireServer<::test_bindingsdenylist::DenyEachBinding>*>(interface)->OnlyDenyGo(
            decoded.value().pointer(),
            completer
        );
        return ::fidl::Status::Ok();
      },
    },
    { ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyPython_Ordinal,
      [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
         internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
        ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonRequest>(
            std::move(msg), metadata);
        if (unlikely(!decoded.is_ok())) {
          return decoded.error_value();
        }
        ::fidl::internal::WireCompleter<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::Sync completer(txn);
        reinterpret_cast<::fidl::WireServer<::test_bindingsdenylist::DenyEachBinding>*>(interface)->OnlyDenyPython(
            decoded.value().pointer(),
            completer
        );
        return ::fidl::Status::Ok();
      },
    },
    { ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyRust_Ordinal,
      [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
         internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
        ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustRequest>(
            std::move(msg), metadata);
        if (unlikely(!decoded.is_ok())) {
          return decoded.error_value();
        }
        ::fidl::internal::WireCompleter<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::Sync completer(txn);
        reinterpret_cast<::fidl::WireServer<::test_bindingsdenylist::DenyEachBinding>*>(interface)->OnlyDenyRust(
            decoded.value().pointer(),
            completer
        );
        return ::fidl::Status::Ok();
      },
    },
    { ::test_bindingsdenylist::kDenyEachBinding_OnlyDenySyzkaller_Ordinal,
      [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
         internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
        ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerRequest>(
            std::move(msg), metadata);
        if (unlikely(!decoded.is_ok())) {
          return decoded.error_value();
        }
        ::fidl::internal::WireCompleter<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::Sync completer(txn);
        reinterpret_cast<::fidl::WireServer<::test_bindingsdenylist::DenyEachBinding>*>(interface)->OnlyDenySyzkaller(
            decoded.value().pointer(),
            completer
        );
        return ::fidl::Status::Ok();
      },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<::test_bindingsdenylist::DenyEachBinding>::entries_end_ =
    &entries_[5];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<::test_bindingsdenylist::DenyEachBinding>::TryDispatch(
    ::fidl::WireServer<::test_bindingsdenylist::DenyEachBinding>* impl, ::fidl::IncomingHeaderAndMessage& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
    impl, msg, storage_view, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_bindingsdenylist::DenyEachBinding>::Dispatch(::fidl::WireServer<::test_bindingsdenylist::DenyEachBinding>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_,
  &unknown_method_handler_entry_);
}

void fidl::WireServer<::test_bindingsdenylist::DenyEachBinding>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::WireServerDispatcher<::test_bindingsdenylist::DenyEachBinding>::Dispatch(this, std::move(msg), storage_view, txn);
}

fidl::WireServer<::test_bindingsdenylist::DenyEachBinding>::Handler fidl::WireServer<::test_bindingsdenylist::DenyEachBinding>::bind_handler(async_dispatcher_t* dispatcher) {
  return [impl=this, dispatcher=dispatcher](::fidl::ServerEnd<::test_bindingsdenylist::DenyEachBinding> request) {
      (void) ::fidl::BindServer(dispatcher, std::move(request), impl);
  };
}

void
fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::Reply(::fit::result<uint32_t, ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult::WithResponse(std::move(*result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void
fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult DenyEachBindingOnlyDenyDartResult) {
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart> _response{ DenyEachBindingOnlyDenyDartResult };
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::ChannelTransport> _response_message{
      ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}
  void
  fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::ReplySuccess(int32_t b) {
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResponse _response = ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResponse {
  .b = std::move(b),
};
return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult::WithResponse(std::move(*&_response)));
  }

  void
  fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::ReplyError(uint32_t error) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult::WithErr(std::move(error)));
  }

void
fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::Reply(::fit::result<uint32_t, ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult::WithResponse(std::move(*result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void
fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult DenyEachBindingOnlyDenyDartResult) {
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart> _response{ DenyEachBindingOnlyDenyDartResult };
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::ChannelTransport> _response_message(
      _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
: CompleterBase(transaction, owned, expects_reply),
  WireCompleterImpl(this) {}
fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::WireCompleterBase(WireCompleterBase&& other) noexcept
    : CompleterBase(std::move(other)), WireCompleterImpl(this) {}

::fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>& fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::operator=(WireCompleterBase&& other) noexcept {
  CompleterBase::operator=(std::move(other));
  WireCompleterImpl::_set_core(this);
  return *this;
}
  void
  fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::ReplySuccess(int32_t b) {
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResponse _response = ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResponse {
  .b = std::move(b),
};
return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult::WithResponse(std::move(*&_response)));
  }

  void
  fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::ReplyError(uint32_t error) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult::WithErr(std::move(error)));
  }

void
fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::Reply(::fit::result<uint32_t, ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult::WithResponse(std::move(*result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void
fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult DenyEachBindingOnlyDenyGoResult) {
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo> _response{ DenyEachBindingOnlyDenyGoResult };
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::ChannelTransport> _response_message{
      ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}
  void
  fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::ReplySuccess(int32_t b) {
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResponse _response = ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResponse {
  .b = std::move(b),
};
return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult::WithResponse(std::move(*&_response)));
  }

  void
  fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::ReplyError(uint32_t error) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult::WithErr(std::move(error)));
  }

void
fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::Reply(::fit::result<uint32_t, ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult::WithResponse(std::move(*result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void
fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult DenyEachBindingOnlyDenyGoResult) {
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo> _response{ DenyEachBindingOnlyDenyGoResult };
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::ChannelTransport> _response_message(
      _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
: CompleterBase(transaction, owned, expects_reply),
  WireCompleterImpl(this) {}
fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::WireCompleterBase(WireCompleterBase&& other) noexcept
    : CompleterBase(std::move(other)), WireCompleterImpl(this) {}

::fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>& fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::operator=(WireCompleterBase&& other) noexcept {
  CompleterBase::operator=(std::move(other));
  WireCompleterImpl::_set_core(this);
  return *this;
}
  void
  fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::ReplySuccess(int32_t b) {
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResponse _response = ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResponse {
  .b = std::move(b),
};
return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult::WithResponse(std::move(*&_response)));
  }

  void
  fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::ReplyError(uint32_t error) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult::WithErr(std::move(error)));
  }

void
fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::Reply(::fit::result<uint32_t, ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResult::WithResponse(std::move(*result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void
fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResult DenyEachBindingOnlyDenyPythonResult) {
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython> _response{ DenyEachBindingOnlyDenyPythonResult };
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::ChannelTransport> _response_message{
      ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}
  void
  fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::ReplySuccess(int32_t b) {
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResponse _response = ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResponse {
  .b = std::move(b),
};
return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResult::WithResponse(std::move(*&_response)));
  }

  void
  fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::ReplyError(uint32_t error) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResult::WithErr(std::move(error)));
  }

void
fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::Reply(::fit::result<uint32_t, ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResult::WithResponse(std::move(*result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void
fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResult DenyEachBindingOnlyDenyPythonResult) {
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython> _response{ DenyEachBindingOnlyDenyPythonResult };
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::ChannelTransport> _response_message(
      _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
: CompleterBase(transaction, owned, expects_reply),
  WireCompleterImpl(this) {}
fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::WireCompleterBase(WireCompleterBase&& other) noexcept
    : CompleterBase(std::move(other)), WireCompleterImpl(this) {}

::fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>& fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::operator=(WireCompleterBase&& other) noexcept {
  CompleterBase::operator=(std::move(other));
  WireCompleterImpl::_set_core(this);
  return *this;
}
  void
  fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::ReplySuccess(int32_t b) {
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResponse _response = ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResponse {
  .b = std::move(b),
};
return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResult::WithResponse(std::move(*&_response)));
  }

  void
  fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::ReplyError(uint32_t error) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResult::WithErr(std::move(error)));
  }

void
fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::Reply(::fit::result<uint32_t, ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult::WithResponse(std::move(*result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void
fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult DenyEachBindingOnlyDenyRustResult) {
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust> _response{ DenyEachBindingOnlyDenyRustResult };
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::ChannelTransport> _response_message{
      ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}
  void
  fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::ReplySuccess(int32_t b) {
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResponse _response = ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResponse {
  .b = std::move(b),
};
return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult::WithResponse(std::move(*&_response)));
  }

  void
  fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::ReplyError(uint32_t error) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult::WithErr(std::move(error)));
  }

void
fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::Reply(::fit::result<uint32_t, ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult::WithResponse(std::move(*result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void
fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult DenyEachBindingOnlyDenyRustResult) {
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust> _response{ DenyEachBindingOnlyDenyRustResult };
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::ChannelTransport> _response_message(
      _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
: CompleterBase(transaction, owned, expects_reply),
  WireCompleterImpl(this) {}
fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::WireCompleterBase(WireCompleterBase&& other) noexcept
    : CompleterBase(std::move(other)), WireCompleterImpl(this) {}

::fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>& fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::operator=(WireCompleterBase&& other) noexcept {
  CompleterBase::operator=(std::move(other));
  WireCompleterImpl::_set_core(this);
  return *this;
}
  void
  fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::ReplySuccess(int32_t b) {
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResponse _response = ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResponse {
  .b = std::move(b),
};
return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult::WithResponse(std::move(*&_response)));
  }

  void
  fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::ReplyError(uint32_t error) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult::WithErr(std::move(error)));
  }

void
fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::Reply(::fit::result<uint32_t, ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult::WithResponse(std::move(*result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void
fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult DenyEachBindingOnlyDenySyzkallerResult) {
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller> _response{ DenyEachBindingOnlyDenySyzkallerResult };
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::ChannelTransport> _response_message{
      ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}
  void
  fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::ReplySuccess(int32_t b) {
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResponse _response = ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResponse {
  .b = std::move(b),
};
return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult::WithResponse(std::move(*&_response)));
  }

  void
  fidl::internal::WireCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::ReplyError(uint32_t error) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult::WithErr(std::move(error)));
  }

void
fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::Reply(::fit::result<uint32_t, ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult::WithResponse(std::move(*result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void
fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult DenyEachBindingOnlyDenySyzkallerResult) {
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller> _response{ DenyEachBindingOnlyDenySyzkallerResult };
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::ChannelTransport> _response_message(
      _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
: CompleterBase(transaction, owned, expects_reply),
  WireCompleterImpl(this) {}
fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::WireCompleterBase(WireCompleterBase&& other) noexcept
    : CompleterBase(std::move(other)), WireCompleterImpl(this) {}

::fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>& fidl::internal::WireCompleterBase<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::operator=(WireCompleterBase&& other) noexcept {
  CompleterBase::operator=(std::move(other));
  WireCompleterImpl::_set_core(this);
  return *this;
}
  void
  fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::ReplySuccess(int32_t b) {
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResponse _response = ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResponse {
  .b = std::move(b),
};
return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult::WithResponse(std::move(*&_response)));
  }

  void
  fidl::internal::WireBufferCompleterImpl<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::ReplyError(uint32_t error) {
    return MakeReply(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult::WithErr(std::move(error)));
  }

  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::TransactionalRequest() {
    ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyDart_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyDart_DynamicFlags);
  }

    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::TransactionalRequest(bool a)
    : body(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartRequest { a } ) {
      ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyDart_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyDart_DynamicFlags);
    }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
      ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartRequest, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartRequest, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::WireCodingConstraintEmpty, false>;

    ::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::WireResponse(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult DenyEachBindingOnlyDenyDartResult) : ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult(DenyEachBindingOnlyDenyDartResult){}

    ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::TransactionalResponse(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult DenyEachBindingOnlyDenyDartResult)
    : body(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>(DenyEachBindingOnlyDenyDartResult)) {
      ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyDart_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyDart_DynamicFlags);
    }
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>::TransactionalResponse() {
    ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyDart_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyDart_DynamicFlags);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
  }
  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
  }
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::WireCodingConstraintEmpty, false>;

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template
  struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>, ::fidl::internal::WireCodingConstraintEmpty, false>;

  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::TransactionalRequest() {
    ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyGo_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyGo_DynamicFlags);
  }

    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::TransactionalRequest(bool a)
    : body(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoRequest { a } ) {
      ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyGo_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyGo_DynamicFlags);
    }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
      ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoRequest, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoRequest, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::WireCodingConstraintEmpty, false>;

    ::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::WireResponse(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult DenyEachBindingOnlyDenyGoResult) : ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult(DenyEachBindingOnlyDenyGoResult){}

    ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::TransactionalResponse(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult DenyEachBindingOnlyDenyGoResult)
    : body(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>(DenyEachBindingOnlyDenyGoResult)) {
      ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyGo_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyGo_DynamicFlags);
    }
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>::TransactionalResponse() {
    ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyGo_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyGo_DynamicFlags);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
  }
  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
  }
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::WireCodingConstraintEmpty, false>;

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template
  struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>, ::fidl::internal::WireCodingConstraintEmpty, false>;

  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::TransactionalRequest() {
    ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyPython_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyPython_DynamicFlags);
  }

    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::TransactionalRequest(bool a)
    : body(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonRequest { a } ) {
      ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyPython_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyPython_DynamicFlags);
    }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
      ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonRequest, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonRequest, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::WireCodingConstraintEmpty, false>;

    ::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::WireResponse(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResult DenyEachBindingOnlyDenyPythonResult) : ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResult(DenyEachBindingOnlyDenyPythonResult){}

    ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::TransactionalResponse(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResult DenyEachBindingOnlyDenyPythonResult)
    : body(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>(DenyEachBindingOnlyDenyPythonResult)) {
      ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyPython_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyPython_DynamicFlags);
    }
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>::TransactionalResponse() {
    ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyPython_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyPython_DynamicFlags);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
  }
  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyPythonResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
  }
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::WireCodingConstraintEmpty, false>;

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template
  struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>, ::fidl::internal::WireCodingConstraintEmpty, false>;

  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::TransactionalRequest() {
    ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyRust_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyRust_DynamicFlags);
  }

    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::TransactionalRequest(bool a)
    : body(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustRequest { a } ) {
      ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyRust_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyRust_DynamicFlags);
    }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
      ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustRequest, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustRequest, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::WireCodingConstraintEmpty, false>;

    ::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::WireResponse(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult DenyEachBindingOnlyDenyRustResult) : ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult(DenyEachBindingOnlyDenyRustResult){}

    ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::TransactionalResponse(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult DenyEachBindingOnlyDenyRustResult)
    : body(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>(DenyEachBindingOnlyDenyRustResult)) {
      ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyRust_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyRust_DynamicFlags);
    }
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>::TransactionalResponse() {
    ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyRust_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenyRust_DynamicFlags);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
  }
  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
  }
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::WireCodingConstraintEmpty, false>;

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template
  struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>, ::fidl::internal::WireCodingConstraintEmpty, false>;

  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::TransactionalRequest() {
    ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenySyzkaller_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenySyzkaller_DynamicFlags);
  }

    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::TransactionalRequest(bool a)
    : body(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerRequest { a } ) {
      ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenySyzkaller_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenySyzkaller_DynamicFlags);
    }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
      ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerRequest, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerRequest, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::WireCodingConstraintEmpty, false>;

    ::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::WireResponse(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult DenyEachBindingOnlyDenySyzkallerResult) : ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult(DenyEachBindingOnlyDenySyzkallerResult){}

    ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::TransactionalResponse(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult DenyEachBindingOnlyDenySyzkallerResult)
    : body(::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>(DenyEachBindingOnlyDenySyzkallerResult)) {
      ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenySyzkaller_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenySyzkaller_DynamicFlags);
    }
  ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>::TransactionalResponse() {
    ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenySyzkaller_Ordinal, ::test_bindingsdenylist::kDenyEachBinding_OnlyDenySyzkaller_DynamicFlags);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
  }
  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
  }
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::WireCodingConstraintEmpty, false>;

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
      ::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }

  template
  struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template
  struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>, ::fidl::internal::WireCodingConstraintEmpty, false>;

      ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>
      fidl::internal::WireSyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyDart(bool a) {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart> _request{ a };
        return ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
      }

      ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>
      fidl::internal::WireSyncBufferClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyDart(bool a) {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart> _request{ a };
        return ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
      }
      ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>
      fidl::internal::WireSyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyGo(bool a) {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo> _request{ a };
        return ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
      }

      ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>
      fidl::internal::WireSyncBufferClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyGo(bool a) {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo> _request{ a };
        return ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
      }
      ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>
      fidl::internal::WireSyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyPython(bool a) {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython> _request{ a };
        return ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
      }

      ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>
      fidl::internal::WireSyncBufferClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyPython(bool a) {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython> _request{ a };
        return ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyPython>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
      }
      ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>
      fidl::internal::WireSyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyRust(bool a) {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust> _request{ a };
        return ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
      }

      ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>
      fidl::internal::WireSyncBufferClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenyRust(bool a) {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust> _request{ a };
        return ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
      }
      ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>
      fidl::internal::WireSyncClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenySyzkaller(bool a) {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller> _request{ a };
        return ::fidl::WireResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
      }

      ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>
      fidl::internal::WireSyncBufferClientImpl<::test_bindingsdenylist::DenyEachBinding>::OnlyDenySyzkaller(bool a) {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller> _request{ a };
        return ::fidl::WireUnownedResult<::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::DenyEachBinding>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
      }

::fidl::internal::WireEventDispatcher<::test_bindingsdenylist::Allowed>::WireEventDispatcher(::fidl::internal::WireEventHandlerInterface<::test_bindingsdenylist::Allowed>* event_handler)
: IncomingEventDispatcher(event_handler) {}

  ::fidl::Status fidl::WireSyncEventHandler<::test_bindingsdenylist::Allowed>::HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_bindingsdenylist::Allowed> client_end) {
      ::fidl::internal::IncomingEventsStorage<::test_bindingsdenylist::Allowed> event_storage;
      fidl::internal::WireEventDispatcher<::test_bindingsdenylist::Allowed> dispatcher{this};
      return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
  }

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<::test_bindingsdenylist::Allowed>::entries_[] = {
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<::test_bindingsdenylist::Allowed>::entries_end_ =
    &entries_[0];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<::test_bindingsdenylist::Allowed>::TryDispatch(
    ::fidl::WireServer<::test_bindingsdenylist::Allowed>* impl, ::fidl::IncomingHeaderAndMessage& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
    impl, msg, storage_view, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_bindingsdenylist::Allowed>::Dispatch(::fidl::WireServer<::test_bindingsdenylist::Allowed>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_,
  &unknown_method_handler_entry_);
}

void fidl::WireServer<::test_bindingsdenylist::Allowed>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::WireServerDispatcher<::test_bindingsdenylist::Allowed>::Dispatch(this, std::move(msg), storage_view, txn);
}

fidl::WireServer<::test_bindingsdenylist::Allowed>::Handler fidl::WireServer<::test_bindingsdenylist::Allowed>::bind_handler(async_dispatcher_t* dispatcher) {
  return [impl=this, dispatcher=dispatcher](::fidl::ServerEnd<::test_bindingsdenylist::Allowed> request) {
      (void) ::fidl::BindServer(dispatcher, std::move(request), impl);
  };
}

  namespace test_bindingsdenylist {

  [[maybe_unused]]
  constexpr uint64_t kImportsSameNameContext_Unattributed_Ordinal = 475191379775102607lu;

  [[maybe_unused]]
  constexpr ::fidl::MessageDynamicFlags kImportsSameNameContext_Unattributed_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;

  [[maybe_unused]]
  constexpr uint64_t kImportsSameNameContext_AlwaysAppearsInImportingLibrary_Ordinal = 2914965219653596920lu;

  [[maybe_unused]]
  constexpr ::fidl::MessageDynamicFlags kImportsSameNameContext_AlwaysAppearsInImportingLibrary_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;}  // namespace test_bindingsdenylist

::fidl::WireResult<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>::WireResult(
    ::fidl::UnownedClientEnd<::test_bindingsdenylist::ImportsSameNameContext> client,
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>* request
) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
    outgoing.Write(client.handle());
    SetStatus(outgoing);
}

::fidl::WireResult<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>(result) {}

    ::fidl::WireUnownedResult<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>::WireUnownedResult(::fidl::UnownedClientEnd<::test_bindingsdenylist::ImportsSameNameContext> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>* request) {
      constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>();
      ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
      if (!allocation.is_ok()) {
        SetStatus(allocation.error_value());
        return;
      }
      uint8_t* buffer = allocation->data;
        uint32_t request_byte_capacity = buffer_size;
        uint8_t* request_bytes = buffer;

      ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>> request_message(
          request_bytes, request_byte_capacity, request);
      auto& outgoing = request_message.GetOutgoingMessage();
        outgoing.Write(client_end.handle());
        SetStatus(outgoing);
    }
    ::fidl::WireUnownedResult<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>::WireUnownedResult(
        ::fit::result<::fidl::Error>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>(::fidl::internal::StatusFromResult(decoded)) {}

  ::fidl::WireUnownedResult<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>(result) {}

::fidl::WireResult<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>::WireResult(
    ::fidl::UnownedClientEnd<::test_bindingsdenylist::ImportsSameNameContext> client,
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>* request
) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
    outgoing.Write(client.handle());
    SetStatus(outgoing);
}

::fidl::WireResult<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>(result) {}

    ::fidl::WireUnownedResult<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>::WireUnownedResult(::fidl::UnownedClientEnd<::test_bindingsdenylist::ImportsSameNameContext> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>* request) {
      constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>();
      ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
      if (!allocation.is_ok()) {
        SetStatus(allocation.error_value());
        return;
      }
      uint8_t* buffer = allocation->data;
        uint32_t request_byte_capacity = buffer_size;
        uint8_t* request_bytes = buffer;

      ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>> request_message(
          request_bytes, request_byte_capacity, request);
      auto& outgoing = request_message.GetOutgoingMessage();
        outgoing.Write(client_end.handle());
        SetStatus(outgoing);
    }
    ::fidl::WireUnownedResult<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>::WireUnownedResult(
        ::fit::result<::fidl::Error>&& decoded,
        ::fidl::internal::MessageStorageViewBase* storage_view
    ) : ::fidl::BaseWireResult<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>(::fidl::internal::StatusFromResult(decoded)) {}

  ::fidl::WireUnownedResult<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>(result) {}

  ::fidl::OneWayStatus fidl::internal::WireWeakOnewayClientImpl<::test_bindingsdenylist::ImportsSameNameContext>::Unattributed() {
    FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed> _request_object{  };
    ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>, ::fidl::internal::ChannelTransport> _request_message(
        ::fidl::internal::AllowUnownedInputRef{}, &_request_object);
    return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
  }
  ::fidl::OneWayStatus fidl::internal::WireWeakOnewayClientImpl<::test_bindingsdenylist::ImportsSameNameContext>::AlwaysAppearsInImportingLibrary() {
    FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
    ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary> _request_object{  };
    ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>, ::fidl::internal::ChannelTransport> _request_message(
        ::fidl::internal::AllowUnownedInputRef{}, &_request_object);
    return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
  }
::fidl::OneWayStatus fidl::internal::WireWeakOnewayBufferClientImpl<::test_bindingsdenylist::ImportsSameNameContext>::Unattributed() {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    return ::fidl::OneWayStatus{_allocation.error_value()};
  }

  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed> _request{  };
  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>> _request_message(
      _allocation->data, _buffer_size, &_request);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayBufferClientImpl<::test_bindingsdenylist::ImportsSameNameContext>::AlwaysAppearsInImportingLibrary() {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    return ::fidl::OneWayStatus{_allocation.error_value()};
  }

  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary> _request{  };
  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>> _request_message(
      _allocation->data, _buffer_size, &_request);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}

::fidl::internal::WireEventDispatcher<::test_bindingsdenylist::ImportsSameNameContext>::WireEventDispatcher(::fidl::internal::WireEventHandlerInterface<::test_bindingsdenylist::ImportsSameNameContext>* event_handler)
: IncomingEventDispatcher(event_handler) {}

  ::fidl::Status fidl::WireSyncEventHandler<::test_bindingsdenylist::ImportsSameNameContext>::HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_bindingsdenylist::ImportsSameNameContext> client_end) {
      ::fidl::internal::IncomingEventsStorage<::test_bindingsdenylist::ImportsSameNameContext> event_storage;
      fidl::internal::WireEventDispatcher<::test_bindingsdenylist::ImportsSameNameContext> dispatcher{this};
      return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
  }

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<::test_bindingsdenylist::ImportsSameNameContext>::entries_[] = {
    { ::test_bindingsdenylist::kImportsSameNameContext_Unattributed_Ordinal,
      [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
         internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
        ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessageWithoutBody(
            msg, metadata);
        if (unlikely(!decoded.is_ok())) {
          return decoded.error_value();
        }
        ::fidl::internal::WireCompleter<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>::Sync completer(txn);
        reinterpret_cast<::fidl::WireServer<::test_bindingsdenylist::ImportsSameNameContext>*>(interface)->Unattributed(
            completer
        );
        return ::fidl::Status::Ok();
      },
    },
    { ::test_bindingsdenylist::kImportsSameNameContext_AlwaysAppearsInImportingLibrary_Ordinal,
      [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
         internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
        ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessageWithoutBody(
            msg, metadata);
        if (unlikely(!decoded.is_ok())) {
          return decoded.error_value();
        }
        ::fidl::internal::WireCompleter<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>::Sync completer(txn);
        reinterpret_cast<::fidl::WireServer<::test_bindingsdenylist::ImportsSameNameContext>*>(interface)->AlwaysAppearsInImportingLibrary(
            completer
        );
        return ::fidl::Status::Ok();
      },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<::test_bindingsdenylist::ImportsSameNameContext>::entries_end_ =
    &entries_[2];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<::test_bindingsdenylist::ImportsSameNameContext>::TryDispatch(
    ::fidl::WireServer<::test_bindingsdenylist::ImportsSameNameContext>* impl, ::fidl::IncomingHeaderAndMessage& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
    impl, msg, storage_view, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_bindingsdenylist::ImportsSameNameContext>::Dispatch(::fidl::WireServer<::test_bindingsdenylist::ImportsSameNameContext>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_,
  &unknown_method_handler_entry_);
}

void fidl::WireServer<::test_bindingsdenylist::ImportsSameNameContext>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::WireServerDispatcher<::test_bindingsdenylist::ImportsSameNameContext>::Dispatch(this, std::move(msg), storage_view, txn);
}

fidl::WireServer<::test_bindingsdenylist::ImportsSameNameContext>::Handler fidl::WireServer<::test_bindingsdenylist::ImportsSameNameContext>::bind_handler(async_dispatcher_t* dispatcher) {
  return [impl=this, dispatcher=dispatcher](::fidl::ServerEnd<::test_bindingsdenylist::ImportsSameNameContext> request) {
      (void) ::fidl::BindServer(dispatcher, std::move(request), impl);
  };
}

  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>::TransactionalRequest() {
    ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kImportsSameNameContext_Unattributed_Ordinal, ::test_bindingsdenylist::kImportsSameNameContext_Unattributed_DynamicFlags);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
      ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  }

  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>, ::fidl::internal::WireCodingConstraintEmpty, false>;

  ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>::TransactionalRequest() {
    ::fidl::InitTxnHeader(&header, 0, ::test_bindingsdenylist::kImportsSameNameContext_AlwaysAppearsInImportingLibrary_Ordinal, ::test_bindingsdenylist::kImportsSameNameContext_AlwaysAppearsInImportingLibrary_DynamicFlags);
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
      ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
  }

  template <bool IsRecursive>
  void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  }

  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>, ::fidl::internal::WireCodingConstraintEmpty, true>;
  template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>, ::fidl::internal::WireCodingConstraintEmpty, false>;

      ::fidl::OneWayStatus
      fidl::internal::WireSyncClientImpl<::test_bindingsdenylist::ImportsSameNameContext>::Unattributed() {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed> _request{  };
        return ::fidl::WireResult<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::ImportsSameNameContext>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
      }

      ::fidl::OneWayStatus
      fidl::internal::WireSyncBufferClientImpl<::test_bindingsdenylist::ImportsSameNameContext>::Unattributed() {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::Unattributed> _request{  };
        return ::fidl::WireUnownedResult<::test_bindingsdenylist::ImportsSameNameContext::Unattributed>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::ImportsSameNameContext>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
      }
      ::fidl::OneWayStatus
      fidl::internal::WireSyncClientImpl<::test_bindingsdenylist::ImportsSameNameContext>::AlwaysAppearsInImportingLibrary() {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary> _request{  };
        return ::fidl::WireResult<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::ImportsSameNameContext>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
      }

      ::fidl::OneWayStatus
      fidl::internal::WireSyncBufferClientImpl<::test_bindingsdenylist::ImportsSameNameContext>::AlwaysAppearsInImportingLibrary() {
        ::fidl::internal::TransactionalRequest<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary> _request{  };
        return ::fidl::WireUnownedResult<::test_bindingsdenylist::ImportsSameNameContext::AlwaysAppearsInImportingLibrary>(
          ::fidl::UnownedClientEnd<::test_bindingsdenylist::ImportsSameNameContext>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
      }

#pragma clang diagnostic pop

#endif  // __Fuchsia__

