// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#ifdef __Fuchsia__

#include <fidl/test.inheritance/cpp/natural_messaging.h>
#include <fidl/test.inheritance/cpp/wire_messaging.h>
#include <lib/fidl/cpp/wire/unknown_interactions.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_inheritance {

[[maybe_unused]]
constexpr inline uint64_t ksuper_foo_Ordinal = 7540745593380780216lu;

[[maybe_unused]]
constexpr inline ::fidl::MessageDynamicFlags ksuper_foo_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
}  // namespace test_inheritance

::fidl::Response<::test_inheritance::Super::Foo>::Response(::test_inheritance::SuperFooResponse v) : SuperFooResponse(std::move(v)) {}

::fidl::internal::NaturalThenable<::test_inheritance::Super::Foo>
fidl::internal::NaturalClientImpl<::test_inheritance::Super>::Foo(const ::fidl::Request<::test_inheritance::Super::Foo>& request) const {
  return ::fidl::internal::NaturalThenable<::test_inheritance::Super::Foo>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_inheritance::ksuper_foo_Ordinal, ::test_inheritance::ksuper_foo_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::Result<::test_inheritance::Super::Foo>
fidl::internal::NaturalSyncClientImpl<::test_inheritance::Super>::Foo(const ::fidl::Request<::test_inheritance::Super::Foo>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_inheritance::ksuper_foo_Ordinal, ::test_inheritance::ksuper_foo_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_inheritance::Super::Foo>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_inheritance::Super::Foo>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::UnownedClientEnd<::test_inheritance::Super> fidl::internal::NaturalSyncClientImpl<::test_inheritance::Super>::_client_end() const {
  return ::fidl::UnownedClientEnd<::test_inheritance::Super>(
      _transport().get<::fidl::internal::ChannelTransport>());
}

::fidl::Status fidl::SyncEventHandler<::test_inheritance::Super>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_inheritance::Super> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_inheritance::Super> event_storage;
  fidl::internal::NaturalEventDispatcher<::test_inheritance::Super> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}

::fidl::internal::NaturalEventDispatcher<::test_inheritance::Super>::NaturalEventDispatcher(::fidl::internal::NaturalEventHandlerInterface<::test_inheritance::Super>* event_handler)
    : IncomingEventDispatcher(event_handler) {}

void fidl::internal::NaturalCompleterBase<::test_inheritance::Super::Foo>::Reply(const ::fidl::Response<::test_inheritance::Super::Foo>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_inheritance::ksuper_foo_Ordinal, ::test_inheritance::ksuper_foo_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_inheritance::Super::Foo>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

::fidl::ProtocolHandler<::test_inheritance::Super> fidl::Server<::test_inheritance::Super>::bind_handler(async_dispatcher_t* dispatcher) {
  return [impl = this, dispatcher = dispatcher](::fidl::ServerEnd<::test_inheritance::Super> request) {
    (void)::fidl::BindServer(dispatcher, std::move(request), impl);
  };
}

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<::test_inheritance::Super>::entries_[] = {
    {
        ::test_inheritance::ksuper_foo_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_inheritance::SuperFooRequest>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_inheritance::Super::Foo>::Sync completer(txn);
          static_cast<::fidl::Server<::test_inheritance::Super>*>(interface)->Foo(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<::test_inheritance::Super>::entries_end_ =
    &entries_[1];

void fidl::internal::NaturalServerDispatcher<::test_inheritance::Super>::Dispatch(::fidl::Server<::test_inheritance::Super>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                  internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_, &unknown_method_handler_entry_);
}

void fidl::Server<::test_inheritance::Super>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::NaturalServerDispatcher<::test_inheritance::Super>::Dispatch(this, std::move(msg), storage_view, txn);
}
namespace test_inheritance {

[[maybe_unused]]
constexpr inline uint64_t ksub_foo_Ordinal = 7540745593380780216lu;

[[maybe_unused]]
constexpr inline ::fidl::MessageDynamicFlags ksub_foo_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
}  // namespace test_inheritance

::fidl::Response<::test_inheritance::Sub::Foo>::Response(::test_inheritance::SuperFooResponse v) : SuperFooResponse(std::move(v)) {}

::fidl::internal::NaturalThenable<::test_inheritance::Sub::Foo>
fidl::internal::NaturalClientImpl<::test_inheritance::Sub>::Foo(const ::fidl::Request<::test_inheritance::Sub::Foo>& request) const {
  return ::fidl::internal::NaturalThenable<::test_inheritance::Sub::Foo>(
      &client_base(), {}, &::fidl::internal::ChannelTransport::VTable, ::test_inheritance::ksub_foo_Ordinal, ::test_inheritance::ksub_foo_DynamicFlags,
      [request = request](NaturalMessageEncoder& encoder) mutable {
        encoder.EncodeBody(request);
        return ZX_OK;
      },
      [](
          ::fidl::internal::ThenableBase* base,
          ::fidl::internal::NaturalMessageEncoder& encoder,
          ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::Result<::test_inheritance::Sub::Foo>
fidl::internal::NaturalSyncClientImpl<::test_inheritance::Sub>::Foo(const ::fidl::Request<::test_inheritance::Sub::Foo>& request) {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_inheritance::ksub_foo_Ordinal, ::test_inheritance::ksub_foo_DynamicFlags};
  encoder.EncodeBody(request);
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_inheritance::Sub::Foo>> response_storage;
  return ::fidl::internal::DecodeResponseAndFoldError<::test_inheritance::Sub::Foo>(
      msg.Call(_client_end().handle(), response_storage.view()), nullptr);
}

::fidl::UnownedClientEnd<::test_inheritance::Sub> fidl::internal::NaturalSyncClientImpl<::test_inheritance::Sub>::_client_end() const {
  return ::fidl::UnownedClientEnd<::test_inheritance::Sub>(
      _transport().get<::fidl::internal::ChannelTransport>());
}

::fidl::Status fidl::SyncEventHandler<::test_inheritance::Sub>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_inheritance::Sub> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_inheritance::Sub> event_storage;
  fidl::internal::NaturalEventDispatcher<::test_inheritance::Sub> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}

::fidl::internal::NaturalEventDispatcher<::test_inheritance::Sub>::NaturalEventDispatcher(::fidl::internal::NaturalEventHandlerInterface<::test_inheritance::Sub>* event_handler)
    : IncomingEventDispatcher(event_handler) {}

void fidl::internal::NaturalCompleterBase<::test_inheritance::Sub::Foo>::Reply(const ::fidl::Response<::test_inheritance::Sub::Foo>& response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_inheritance::ksub_foo_Ordinal, ::test_inheritance::ksub_foo_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::ResponseMessageConverter<::test_inheritance::Sub::Foo>::IntoDomainObject(response));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

::fidl::ProtocolHandler<::test_inheritance::Sub> fidl::Server<::test_inheritance::Sub>::bind_handler(async_dispatcher_t* dispatcher) {
  return [impl = this, dispatcher = dispatcher](::fidl::ServerEnd<::test_inheritance::Sub> request) {
    (void)::fidl::BindServer(dispatcher, std::move(request), impl);
  };
}

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<::test_inheritance::Sub>::entries_[] = {
    {
        ::test_inheritance::ksub_foo_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneDecode<::test_inheritance::SuperFooRequest>(
              std::move(msg), metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_inheritance::Sub::Foo>::Sync completer(txn);
          static_cast<::fidl::Server<::test_inheritance::Sub>*>(interface)->Foo(
              decoded.value(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<::test_inheritance::Sub>::entries_end_ =
    &entries_[1];

void fidl::internal::NaturalServerDispatcher<::test_inheritance::Sub>::Dispatch(::fidl::Server<::test_inheritance::Sub>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_, &unknown_method_handler_entry_);
}

void fidl::Server<::test_inheritance::Sub>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::NaturalServerDispatcher<::test_inheritance::Sub>::Dispatch(this, std::move(msg), storage_view, txn);
}

#pragma clang diagnostic pop

#endif  // __Fuchsia__
