// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.bindingsdenylist/cpp/natural_types.h>
#include <fidl/test.dependent/cpp/natural_ostream.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::OnlyLlcpp> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::OnlyLlcpp& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary& value);
};
template <>
struct fidl::ostream::Formatter<::test_bindingsdenylist::OnlyAppearsInImportingLibrary> {
  static std::ostream& Format(std::ostream& os, const ::test_bindingsdenylist::OnlyAppearsInImportingLibrary& value);
};

namespace test_bindingsdenylist {

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::OnlyLlcpp& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary& value);

std::ostream& operator<<(std::ostream& os, const ::test_bindingsdenylist::OnlyAppearsInImportingLibrary& value);

}  // namespace test_bindingsdenylist

#ifdef __Fuchsia__

template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::OnlyCppAndDeps>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::OnlyCppAndDeps>& value);
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::OnlyCppAndDeps>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::OnlyCppAndDeps>& value);
};
template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::DenyEachBinding>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::DenyEachBinding>& value);
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::DenyEachBinding>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::DenyEachBinding>& value);
};
template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::Allowed>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::Allowed>& value);
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::Allowed>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::Allowed>& value);
};
template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_bindingsdenylist::ImportsSameNameContext>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::ImportsSameNameContext>& value);
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_bindingsdenylist::ImportsSameNameContext>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::ImportsSameNameContext>& value);
};

std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::OnlyCppAndDeps>& value);

std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::OnlyCppAndDeps>& value);
std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::DenyEachBinding>& value);

std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::DenyEachBinding>& value);
std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::Allowed>& value);

std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::Allowed>& value);
std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_bindingsdenylist::ImportsSameNameContext>& value);

std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_bindingsdenylist::ImportsSameNameContext>& value);

#endif  // __Fuchsia__

#pragma clang diagnostic pop
