// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.enum/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

void fidl::internal::NaturalCodingTraits<::test_enum::MyStrictEnum, ::fidl::internal::NaturalCodingConstraintEmpty>::Encode(
    fidl::internal::NaturalEncoder* encoder, ::test_enum::MyStrictEnum* value, size_t offset, size_t recursion_depth) {
  switch (*value) {
    case ::test_enum::MyStrictEnum::kFoo:
    case ::test_enum::MyStrictEnum::kBar:
      break;
    default:
      encoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
      return;
  }
  *encoder->template GetPtr<::test_enum::MyStrictEnum>(offset) = *value;
}

void fidl::internal::NaturalCodingTraits<::test_enum::MyStrictEnum, ::fidl::internal::NaturalCodingConstraintEmpty>::Decode(
    fidl::internal::NaturalDecoder* decoder, ::test_enum::MyStrictEnum* value, size_t offset, size_t recursion_depth) {
  *value = *decoder->template GetPtr<::test_enum::MyStrictEnum>(offset);
  switch (*value) {
    case ::test_enum::MyStrictEnum::kFoo:
    case ::test_enum::MyStrictEnum::kBar:
      break;
    default:
      decoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
      return;
  }
}

void fidl::internal::NaturalCodingTraits<::test_enum::MyFlexibleEnum, ::fidl::internal::NaturalCodingConstraintEmpty>::Encode(
    fidl::internal::NaturalEncoder* encoder, ::test_enum::MyFlexibleEnum* value, size_t offset, size_t recursion_depth) {
  *encoder->template GetPtr<::test_enum::MyFlexibleEnum>(offset) = *value;
}

void fidl::internal::NaturalCodingTraits<::test_enum::MyFlexibleEnum, ::fidl::internal::NaturalCodingConstraintEmpty>::Decode(
    fidl::internal::NaturalDecoder* decoder, ::test_enum::MyFlexibleEnum* value, size_t offset, size_t recursion_depth) {
  *value = *decoder->template GetPtr<::test_enum::MyFlexibleEnum>(offset);
}

void fidl::internal::NaturalCodingTraits<::test_enum::MyFlexibleEnumWithCustomUnknown, ::fidl::internal::NaturalCodingConstraintEmpty>::Encode(
    fidl::internal::NaturalEncoder* encoder, ::test_enum::MyFlexibleEnumWithCustomUnknown* value, size_t offset, size_t recursion_depth) {
  *encoder->template GetPtr<::test_enum::MyFlexibleEnumWithCustomUnknown>(offset) = *value;
}

void fidl::internal::NaturalCodingTraits<::test_enum::MyFlexibleEnumWithCustomUnknown, ::fidl::internal::NaturalCodingConstraintEmpty>::Decode(
    fidl::internal::NaturalDecoder* decoder, ::test_enum::MyFlexibleEnumWithCustomUnknown* value, size_t offset, size_t recursion_depth) {
  *value = *decoder->template GetPtr<::test_enum::MyFlexibleEnumWithCustomUnknown>(offset);
}

void fidl::internal::NaturalCodingTraits<::test_enum::MyEmptyFlexibleEnum, ::fidl::internal::NaturalCodingConstraintEmpty>::Encode(
    fidl::internal::NaturalEncoder* encoder, ::test_enum::MyEmptyFlexibleEnum* value, size_t offset, size_t recursion_depth) {
  *encoder->template GetPtr<::test_enum::MyEmptyFlexibleEnum>(offset) = *value;
}

void fidl::internal::NaturalCodingTraits<::test_enum::MyEmptyFlexibleEnum, ::fidl::internal::NaturalCodingConstraintEmpty>::Decode(
    fidl::internal::NaturalDecoder* decoder, ::test_enum::MyEmptyFlexibleEnum* value, size_t offset, size_t recursion_depth) {
  *value = *decoder->template GetPtr<::test_enum::MyEmptyFlexibleEnum>(offset);
}

#pragma clang diagnostic pop
