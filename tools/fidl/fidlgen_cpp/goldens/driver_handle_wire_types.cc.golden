// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.driverhandle/cpp/wire_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

#ifdef __Fuchsia__

void ::test_driverhandle::wire::ClientEndWrapper::_CloseHandles() {
  value.reset();
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_driverhandle::wire::ClientEndWrapper, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_driverhandle::wire::ClientEndWrapper* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (kIsMemcpyCompatible) {
    memcpy(position.As<void>(), value, sizeof(::test_driverhandle::wire::ClientEndWrapper));
  } else {
    internal::WireCodingTraits<::fdf::ClientEnd<::test_driverhandle::DriverProtocol>, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, ZX_DEFAULT_CHANNEL_RIGHTS, false>, IsRecursive>::Encode(encoder, &value->value, position + 0, recursion_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_driverhandle::wire::ClientEndWrapper, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (!Base::are_members_memcpy_compatible) {
    internal::WireCodingTraits<::fdf::ClientEnd<::test_driverhandle::DriverProtocol>, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, ZX_DEFAULT_CHANNEL_RIGHTS, false>, IsRecursive>::Decode(
        decoder, position + 0, recursion_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_driverhandle::wire::ClientEndWrapper, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_driverhandle::wire::ClientEndWrapper, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_driverhandle::wire::ClientEndWrapper>);
static_assert(offsetof(::test_driverhandle::wire::ClientEndWrapper, value) == 0);
static_assert(sizeof(::test_driverhandle::wire::ClientEndWrapper) == ::fidl::TypeTraits<::test_driverhandle::wire::ClientEndWrapper>::kPrimarySize);

void ::test_driverhandle::wire::ServerEndWrapper::_CloseHandles() {
  value.reset();
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_driverhandle::wire::ServerEndWrapper, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_driverhandle::wire::ServerEndWrapper* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (kIsMemcpyCompatible) {
    memcpy(position.As<void>(), value, sizeof(::test_driverhandle::wire::ServerEndWrapper));
  } else {
    internal::WireCodingTraits<::fdf::ServerEnd<::test_driverhandle::DriverProtocol>, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, ZX_DEFAULT_CHANNEL_RIGHTS, false>, IsRecursive>::Encode(encoder, &value->value, position + 0, recursion_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_driverhandle::wire::ServerEndWrapper, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (!Base::are_members_memcpy_compatible) {
    internal::WireCodingTraits<::fdf::ServerEnd<::test_driverhandle::DriverProtocol>, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, ZX_DEFAULT_CHANNEL_RIGHTS, false>, IsRecursive>::Decode(
        decoder, position + 0, recursion_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_driverhandle::wire::ServerEndWrapper, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_driverhandle::wire::ServerEndWrapper, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_driverhandle::wire::ServerEndWrapper>);
static_assert(offsetof(::test_driverhandle::wire::ServerEndWrapper, value) == 0);
static_assert(sizeof(::test_driverhandle::wire::ServerEndWrapper) == ::fidl::TypeTraits<::test_driverhandle::wire::ServerEndWrapper>::kPrimarySize);

void ::test_driverhandle::wire::HandlesInProtocolSendHandlesRequest::_CloseHandles() {
  t._CloseHandles();
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_driverhandle::wire::HandlesInProtocolSendHandlesRequest, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_driverhandle::wire::HandlesInProtocolSendHandlesRequest* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (kIsMemcpyCompatible) {
    memcpy(position.As<void>(), value, sizeof(::test_driverhandle::wire::HandlesInProtocolSendHandlesRequest));
  } else {
    internal::WireCodingTraits<::test_driverhandle::wire::T, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(encoder, &value->t, position + 0, recursion_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_driverhandle::wire::HandlesInProtocolSendHandlesRequest, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (!Base::are_members_memcpy_compatible) {
    internal::WireCodingTraits<::test_driverhandle::wire::T, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + 0, recursion_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_driverhandle::wire::HandlesInProtocolSendHandlesRequest, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_driverhandle::wire::HandlesInProtocolSendHandlesRequest, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_driverhandle::wire::HandlesInProtocolSendHandlesRequest>);
static_assert(offsetof(::test_driverhandle::wire::HandlesInProtocolSendHandlesRequest, t) == 0);
static_assert(sizeof(::test_driverhandle::wire::HandlesInProtocolSendHandlesRequest) == ::fidl::TypeTraits<::test_driverhandle::wire::HandlesInProtocolSendHandlesRequest>::kPrimarySize);

bool ::fidl::WireTableFrame<::test_driverhandle::wire::T>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_driverhandle::wire::T>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
  if (!zircon_handle_.has_data()) {
    max_ordinal = 1;
  }
  if (!fdf_handle_.has_data()) {
    max_ordinal = 2;
  }
  return max_ordinal;
}

::test_driverhandle::wire::T::T(::fidl::AnyArena& allocator)
    : frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_driverhandle::wire::T>>(allocator)) {}

::test_driverhandle::wire::T::T(::fidl::ObjectView<::fidl::WireTableFrame<::test_driverhandle::wire::T>>&& frame)
    : frame_ptr_(std::move(frame)) {}

void test_driverhandle::wire::T::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_driverhandle::wire::T>>(allocator);
}
void test_driverhandle::wire::T::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_driverhandle::wire::T>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_driverhandle::wire::T::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_driverhandle::wire::T::HasUnknownData() const {
  if (max_ordinal_ > 2) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

void ::test_driverhandle::wire::T::_CloseHandles() {
  if (has_zircon_handle()) {
    zircon_handle().reset();
  }
  if (has_fdf_handle()) {
    fdf_handle().reset();
  }
}

::zx::event& test_driverhandle::wire::T::zircon_handle() const {
  ZX_ASSERT(has_zircon_handle());
  return frame_ptr_->zircon_handle_.get_data();
}

bool test_driverhandle::wire::T::has_zircon_handle() const {
  return max_ordinal_ >= 1 && frame_ptr_->zircon_handle_.has_data();
}

::test_driverhandle::wire::T& test_driverhandle::wire::T::clear_zircon_handle() {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->zircon_handle_.clear_data();
  max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
  return *this;
}

::test_driverhandle::wire::T& test_driverhandle::wire::T::set_zircon_handle(::zx::event elem) {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->zircon_handle_.set_data(std::move(elem));
  max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
  return *this;
}

::fdf::ClientEnd<::test_driverhandle::DriverProtocol>& test_driverhandle::wire::T::fdf_handle() const {
  ZX_ASSERT(has_fdf_handle());
  return frame_ptr_->fdf_handle_.get_data();
}

bool test_driverhandle::wire::T::has_fdf_handle() const {
  return max_ordinal_ >= 2 && frame_ptr_->fdf_handle_.has_data();
}

::test_driverhandle::wire::T& test_driverhandle::wire::T::clear_fdf_handle() {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->fdf_handle_.clear_data();
  max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
  return *this;
}

::test_driverhandle::wire::T& test_driverhandle::wire::T::set_fdf_handle(::fdf::ClientEnd<::test_driverhandle::DriverProtocol> elem) {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->fdf_handle_.set_data(std::move(elem));
  max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(2));
  return *this;
}

::fidl::WireTableBuilder<::test_driverhandle::wire::T> test_driverhandle::wire::T::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_driverhandle::wire::T>(arena);
}
::fidl::WireTableExternalBuilder<::test_driverhandle::wire::T> test_driverhandle::wire::T::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_driverhandle::wire::T>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_driverhandle::wire::T>(std::move(frame));
}

template <typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_driverhandle::wire::T, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_driverhandle::wire::T>>&& frame)
    : table_(std::move(frame)) {}

template <typename BuilderImpl>
::test_driverhandle::wire::T fidl::internal::WireTableBaseBuilder<::test_driverhandle::wire::T, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_driverhandle::wire::T t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
template <typename BuilderImpl>
bool fidl::internal::WireTableBaseBuilder<::test_driverhandle::wire::T, BuilderImpl>::has_zircon_handle() const {
  return table_.has_zircon_handle();
}

template <typename BuilderImpl>
void fidl::internal::WireTableBaseBuilder<::test_driverhandle::wire::T, BuilderImpl>::clear_zircon_handle() {
  table_.clear_zircon_handle();
}

template <typename BuilderImpl>
::zx::event& fidl::internal::WireTableBaseBuilder<::test_driverhandle::wire::T, BuilderImpl>::zircon_handle() const {
  return table_.zircon_handle();
}
template <typename BuilderImpl>
BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_driverhandle::wire::T, BuilderImpl>::zircon_handle(::zx::event elem) {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  table_.frame_ptr_->zircon_handle_.set_data(std::move(elem));
  table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
  return *static_cast<BuilderImpl*>(this);
}
template <typename BuilderImpl>
bool fidl::internal::WireTableBaseBuilder<::test_driverhandle::wire::T, BuilderImpl>::has_fdf_handle() const {
  return table_.has_fdf_handle();
}

template <typename BuilderImpl>
void fidl::internal::WireTableBaseBuilder<::test_driverhandle::wire::T, BuilderImpl>::clear_fdf_handle() {
  table_.clear_fdf_handle();
}

template <typename BuilderImpl>
::fdf::ClientEnd<::test_driverhandle::DriverProtocol>& fidl::internal::WireTableBaseBuilder<::test_driverhandle::wire::T, BuilderImpl>::fdf_handle() const {
  return table_.fdf_handle();
}
template <typename BuilderImpl>
BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_driverhandle::wire::T, BuilderImpl>::fdf_handle(::fdf::ClientEnd<::test_driverhandle::DriverProtocol> elem) {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  table_.frame_ptr_->fdf_handle_.set_data(std::move(elem));
  table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(2));
  return *static_cast<BuilderImpl*>(this);
}

template class fidl::internal::WireTableBaseBuilder<::test_driverhandle::wire::T, ::fidl::WireTableBuilder<::test_driverhandle::wire::T>>;
template class fidl::internal::WireTableBaseBuilder<::test_driverhandle::wire::T, ::fidl::WireTableExternalBuilder<::test_driverhandle::wire::T>>;

::fidl::WireTableBuilder<::test_driverhandle::wire::T>::WireTableBuilder(::fidl::AnyArena& arena)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_driverhandle::wire::T>>(arena)),
      arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_driverhandle::wire::T>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_driverhandle::wire::T>* frame)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_driverhandle::wire::T>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_driverhandle::wire::T, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_driverhandle::wire::T* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
      Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {
    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<::zx::event, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_EVENT, 0x80000000, false>, IsRecursive>::kInlineSize;
        break;
      case 1:
        encode_inline_size = ::fidl::internal::WireCodingTraits<::fdf::ClientEnd<::test_driverhandle::DriverProtocol>, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, ZX_DEFAULT_CHANNEL_RIGHTS, false>, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<::zx::event, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_EVENT, 0x80000000, false>, IsRecursive>();
        break;
      case 1:
        encode_fn = ::fidl::internal::MakeEncodeFn<::fdf::ClientEnd<::test_driverhandle::DriverProtocol>, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, ZX_DEFAULT_CHANNEL_RIGHTS, false>, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_driverhandle::wire::T, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {
    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<::zx::event, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_EVENT, 0x80000000, false>, IsRecursive>::kInlineSize;
        break;
      case 1:
        decode_inline_size = ::fidl::internal::WireCodingTraits<::fdf::ClientEnd<::test_driverhandle::DriverProtocol>, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, ZX_DEFAULT_CHANNEL_RIGHTS, false>, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch (i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<::zx::event, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_EVENT, 0x80000000, false>, IsRecursive>();
        break;
      case 1:
        decode_fn = ::fidl::internal::MakeDecodeFn<::fdf::ClientEnd<::test_driverhandle::DriverProtocol>, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, ZX_DEFAULT_CHANNEL_RIGHTS, false>, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_driverhandle::wire::T, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_driverhandle::wire::T, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_driverhandle::wire::T>);

#endif  // __Fuchsia__

#pragma clang diagnostic pop
