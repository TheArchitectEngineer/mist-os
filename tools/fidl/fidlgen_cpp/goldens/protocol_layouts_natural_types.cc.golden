// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.protocollayouts/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_protocollayouts::LocalTablePayload::LocalTablePayload(::test_protocollayouts::LocalTablePayload::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_protocollayouts::LocalTablePayload::LocalTablePayload(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : LocalTablePayload(Storage_{}) {}

::test_protocollayouts::LocalTablePayload::LocalTablePayload(const ::test_protocollayouts::LocalTablePayload& other) noexcept : LocalTablePayload(other.CloneStorage_()) {}

::test_protocollayouts::LocalTablePayload& ::test_protocollayouts::LocalTablePayload::operator=(const ::test_protocollayouts::LocalTablePayload& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_protocollayouts::LocalTablePayload::operator==(const LocalTablePayload& other) const noexcept {
  return ::fidl::internal::NaturalTableCodingTraits<::test_protocollayouts::LocalTablePayload>::Equal(this, &other);
}
bool test_protocollayouts::LocalTablePayload::operator!=(const LocalTablePayload& other) const noexcept {
  return !::fidl::internal::NaturalTableCodingTraits<::test_protocollayouts::LocalTablePayload>::Equal(this, &other);
}

::test_protocollayouts::LocalTablePayload::Storage_ test_protocollayouts::LocalTablePayload::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a)};
}

bool test_protocollayouts::LocalTablePayload::IsEmpty() const {
  return !(storage_.a.has_value());
}
const std::optional<uint16_t>& test_protocollayouts::LocalTablePayload::a() const {
  return storage_.a;
}

::std::optional<uint16_t>& test_protocollayouts::LocalTablePayload::a() {
  return storage_.a;
}

::test_protocollayouts::LocalTablePayload& test_protocollayouts::LocalTablePayload::a(std::optional<uint16_t> value) {
  storage_.a = std::move(value);
  return *this;
}

::test_protocollayouts::MainProtocolOneWayAnonRequest::MainProtocolOneWayAnonRequest(::test_protocollayouts::MainProtocolOneWayAnonRequest::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_protocollayouts::MainProtocolOneWayAnonRequest::MainProtocolOneWayAnonRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolOneWayAnonRequest(Storage_{}) {}

::test_protocollayouts::MainProtocolOneWayAnonRequest::MainProtocolOneWayAnonRequest(const ::test_protocollayouts::MainProtocolOneWayAnonRequest& other) noexcept : MainProtocolOneWayAnonRequest(other.CloneStorage_()) {}

::test_protocollayouts::MainProtocolOneWayAnonRequest& ::test_protocollayouts::MainProtocolOneWayAnonRequest::operator=(const ::test_protocollayouts::MainProtocolOneWayAnonRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_protocollayouts::MainProtocolOneWayAnonRequest::operator==(const MainProtocolOneWayAnonRequest& other) const noexcept {
  return ::fidl::internal::NaturalTableCodingTraits<::test_protocollayouts::MainProtocolOneWayAnonRequest>::Equal(this, &other);
}
bool test_protocollayouts::MainProtocolOneWayAnonRequest::operator!=(const MainProtocolOneWayAnonRequest& other) const noexcept {
  return !::fidl::internal::NaturalTableCodingTraits<::test_protocollayouts::MainProtocolOneWayAnonRequest>::Equal(this, &other);
}

::test_protocollayouts::MainProtocolOneWayAnonRequest::Storage_ test_protocollayouts::MainProtocolOneWayAnonRequest::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a)};
}

bool test_protocollayouts::MainProtocolOneWayAnonRequest::IsEmpty() const {
  return !(storage_.a.has_value());
}
const std::optional<uint16_t>& test_protocollayouts::MainProtocolOneWayAnonRequest::a() const {
  return storage_.a;
}

::std::optional<uint16_t>& test_protocollayouts::MainProtocolOneWayAnonRequest::a() {
  return storage_.a;
}

::test_protocollayouts::MainProtocolOneWayAnonRequest& test_protocollayouts::MainProtocolOneWayAnonRequest::a(std::optional<uint16_t> value) {
  storage_.a = std::move(value);
  return *this;
}

::test_protocollayouts::MainProtocolTwoWayAnonResponse::MainProtocolTwoWayAnonResponse(::test_protocollayouts::MainProtocolTwoWayAnonResponse::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_protocollayouts::MainProtocolTwoWayAnonResponse::MainProtocolTwoWayAnonResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolTwoWayAnonResponse(Storage_{}) {}

::test_protocollayouts::MainProtocolTwoWayAnonResponse::MainProtocolTwoWayAnonResponse(const ::test_protocollayouts::MainProtocolTwoWayAnonResponse& other) noexcept : MainProtocolTwoWayAnonResponse(other.CloneStorage_()) {}

::test_protocollayouts::MainProtocolTwoWayAnonResponse& ::test_protocollayouts::MainProtocolTwoWayAnonResponse::operator=(const ::test_protocollayouts::MainProtocolTwoWayAnonResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_protocollayouts::MainProtocolTwoWayAnonResponse::operator==(const MainProtocolTwoWayAnonResponse& other) const noexcept {
  return ::fidl::internal::NaturalTableCodingTraits<::test_protocollayouts::MainProtocolTwoWayAnonResponse>::Equal(this, &other);
}
bool test_protocollayouts::MainProtocolTwoWayAnonResponse::operator!=(const MainProtocolTwoWayAnonResponse& other) const noexcept {
  return !::fidl::internal::NaturalTableCodingTraits<::test_protocollayouts::MainProtocolTwoWayAnonResponse>::Equal(this, &other);
}

::test_protocollayouts::MainProtocolTwoWayAnonResponse::Storage_ test_protocollayouts::MainProtocolTwoWayAnonResponse::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a)};
}

bool test_protocollayouts::MainProtocolTwoWayAnonResponse::IsEmpty() const {
  return !(storage_.a.has_value());
}
const std::optional<uint16_t>& test_protocollayouts::MainProtocolTwoWayAnonResponse::a() const {
  return storage_.a;
}

::std::optional<uint16_t>& test_protocollayouts::MainProtocolTwoWayAnonResponse::a() {
  return storage_.a;
}

::test_protocollayouts::MainProtocolTwoWayAnonResponse& test_protocollayouts::MainProtocolTwoWayAnonResponse::a(std::optional<uint16_t> value) {
  storage_.a = std::move(value);
  return *this;
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest::MainProtocolTwoWayAnonWithErrorRequest(::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest::MainProtocolTwoWayAnonWithErrorRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MainProtocolTwoWayAnonWithErrorRequest(Storage_{}) {}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest::MainProtocolTwoWayAnonWithErrorRequest(const ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest& other) noexcept : MainProtocolTwoWayAnonWithErrorRequest(other.CloneStorage_()) {}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest& ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest::operator=(const ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest::operator==(const MainProtocolTwoWayAnonWithErrorRequest& other) const noexcept {
  return ::fidl::internal::NaturalTableCodingTraits<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest>::Equal(this, &other);
}
bool test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest::operator!=(const MainProtocolTwoWayAnonWithErrorRequest& other) const noexcept {
  return !::fidl::internal::NaturalTableCodingTraits<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest>::Equal(this, &other);
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest::Storage_ test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a)};
}

bool test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest::IsEmpty() const {
  return !(storage_.a.has_value());
}
const std::optional<uint16_t>& test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest::a() const {
  return storage_.a;
}

::std::optional<uint16_t>& test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest::a() {
  return storage_.a;
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest& test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest::a(std::optional<uint16_t> value) {
  storage_.a = std::move(value);
  return *this;
}

::test_protocollayouts::LocalUnionPayload::LocalUnionPayload(LocalUnionPayload&& other) noexcept : LocalUnionPayload(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_protocollayouts::LocalUnionPayload& ::test_protocollayouts::LocalUnionPayload::operator=(LocalUnionPayload&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_protocollayouts::LocalUnionPayload::LocalUnionPayload(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_protocollayouts::LocalUnionPayload::LocalUnionPayload(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_protocollayouts::LocalUnionPayload::Tag test_protocollayouts::LocalUnionPayload::Which() const {
  return LocalUnionPayload::IndexToTag(storage_->index()).value();
}

size_t test_protocollayouts::LocalUnionPayload::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_protocollayouts::LocalUnionPayload::Tag tag) {
  switch (tag) {
    case ::test_protocollayouts::LocalUnionPayload::Tag::kB:
      return 1;
    default: {
      return 0;
    }
  }
}

std::optional<::test_protocollayouts::LocalUnionPayload::Tag> test_protocollayouts::LocalUnionPayload::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_protocollayouts::LocalUnionPayload::Tag::kB;
    default:
      return ::test_protocollayouts::LocalUnionPayload::Tag::_do_not_handle_this__write_a_default_case_instead;
  }
}

::test_protocollayouts::LocalUnionPayload::LocalUnionPayload(const LocalUnionPayload& other) noexcept : LocalUnionPayload(other.CloneStorage_()) {}

::test_protocollayouts::LocalUnionPayload& test_protocollayouts::LocalUnionPayload::operator=(const LocalUnionPayload& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_protocollayouts::LocalUnionPayload::operator==(const LocalUnionPayload& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_protocollayouts::LocalUnionPayload::operator!=(const LocalUnionPayload& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_protocollayouts::LocalUnionPayload::Storage_> test_protocollayouts::LocalUnionPayload::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
bool test_protocollayouts::LocalUnionPayload::IsUnknown() const {
  return Which() == ::test_protocollayouts::LocalUnionPayload::Tag::_do_not_handle_this__write_a_default_case_instead;
}
::test_protocollayouts::LocalUnionPayload test_protocollayouts::LocalUnionPayload::WithB(bool val) {
  return LocalUnionPayload(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_protocollayouts::LocalUnionPayload::Storage_> test_protocollayouts::LocalUnionPayload::b() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_protocollayouts::LocalUnionPayload::Storage_> test_protocollayouts::LocalUnionPayload::b() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_protocollayouts::LocalUnionPayload& test_protocollayouts::LocalUnionPayload::b(bool value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}

::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::MainProtocolTwoWayImportWithErrorResult(MainProtocolTwoWayImportWithErrorResult&& other) noexcept : MainProtocolTwoWayImportWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult& ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::operator=(MainProtocolTwoWayImportWithErrorResult&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::MainProtocolTwoWayImportWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::MainProtocolTwoWayImportWithErrorResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Tag test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Which() const {
  return MainProtocolTwoWayImportWithErrorResult::IndexToTag(storage_->index()).value();
}

size_t test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Tag tag) {
  switch (tag) {
    case ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Tag::kResponse:
      return 1;
    case ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Tag::kErr:
      return 2;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Tag> test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Tag::kResponse;
    case 2:
      return ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Tag::kErr;
    default:
      return std::nullopt;
  }
}

::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::MainProtocolTwoWayImportWithErrorResult(const MainProtocolTwoWayImportWithErrorResult& other) noexcept : MainProtocolTwoWayImportWithErrorResult(other.CloneStorage_()) {}

::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult& test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::operator=(const MainProtocolTwoWayImportWithErrorResult& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::operator==(const MainProtocolTwoWayImportWithErrorResult& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::operator!=(const MainProtocolTwoWayImportWithErrorResult& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage_>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::WithResponse(::test_protocollayouts_imported::ImportUnionPayload val) {
  return MainProtocolTwoWayImportWithErrorResult(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::response() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::response() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult& test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::response(::test_protocollayouts_imported::ImportUnionPayload value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}
::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::WithErr(uint32_t val) {
  return MainProtocolTwoWayImportWithErrorResult(std::make_shared<Storage_>(
      std::in_place_index_t<2>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<2, ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::err() const {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<2, ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::err() {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult& test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::err(uint32_t value) {
  storage_->emplace<2>(std::move(value));
  return *this;
}

::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::MainProtocolTwoWayLocalWithErrorResult(MainProtocolTwoWayLocalWithErrorResult&& other) noexcept : MainProtocolTwoWayLocalWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult& ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::operator=(MainProtocolTwoWayLocalWithErrorResult&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::MainProtocolTwoWayLocalWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::MainProtocolTwoWayLocalWithErrorResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Tag test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Which() const {
  return MainProtocolTwoWayLocalWithErrorResult::IndexToTag(storage_->index()).value();
}

size_t test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Tag tag) {
  switch (tag) {
    case ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Tag::kResponse:
      return 1;
    case ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Tag::kErr:
      return 2;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Tag> test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Tag::kResponse;
    case 2:
      return ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Tag::kErr;
    default:
      return std::nullopt;
  }
}

::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::MainProtocolTwoWayLocalWithErrorResult(const MainProtocolTwoWayLocalWithErrorResult& other) noexcept : MainProtocolTwoWayLocalWithErrorResult(other.CloneStorage_()) {}

::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult& test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::operator=(const MainProtocolTwoWayLocalWithErrorResult& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::operator==(const MainProtocolTwoWayLocalWithErrorResult& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::operator!=(const MainProtocolTwoWayLocalWithErrorResult& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage_>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::WithResponse(::test_protocollayouts::LocalUnionPayload val) {
  return MainProtocolTwoWayLocalWithErrorResult(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::response() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::response() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult& test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::response(::test_protocollayouts::LocalUnionPayload value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}
::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::WithErr(uint32_t val) {
  return MainProtocolTwoWayLocalWithErrorResult(std::make_shared<Storage_>(
      std::in_place_index_t<2>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<2, ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::err() const {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<2, ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::err() {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult& test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::err(uint32_t value) {
  storage_->emplace<2>(std::move(value));
  return *this;
}

::test_protocollayouts::MainProtocolTwoWayAnonRequest::MainProtocolTwoWayAnonRequest(MainProtocolTwoWayAnonRequest&& other) noexcept : MainProtocolTwoWayAnonRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_protocollayouts::MainProtocolTwoWayAnonRequest& ::test_protocollayouts::MainProtocolTwoWayAnonRequest::operator=(MainProtocolTwoWayAnonRequest&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_protocollayouts::MainProtocolTwoWayAnonRequest::MainProtocolTwoWayAnonRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_protocollayouts::MainProtocolTwoWayAnonRequest::MainProtocolTwoWayAnonRequest(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag test_protocollayouts::MainProtocolTwoWayAnonRequest::Which() const {
  return MainProtocolTwoWayAnonRequest::IndexToTag(storage_->index()).value();
}

size_t test_protocollayouts::MainProtocolTwoWayAnonRequest::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag tag) {
  switch (tag) {
    case ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag::kB:
      return 1;
    default: {
      return 0;
    }
  }
}

std::optional<::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag> test_protocollayouts::MainProtocolTwoWayAnonRequest::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag::kB;
    default:
      return ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag::_do_not_handle_this__write_a_default_case_instead;
  }
}

::test_protocollayouts::MainProtocolTwoWayAnonRequest::MainProtocolTwoWayAnonRequest(const MainProtocolTwoWayAnonRequest& other) noexcept : MainProtocolTwoWayAnonRequest(other.CloneStorage_()) {}

::test_protocollayouts::MainProtocolTwoWayAnonRequest& test_protocollayouts::MainProtocolTwoWayAnonRequest::operator=(const MainProtocolTwoWayAnonRequest& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_protocollayouts::MainProtocolTwoWayAnonRequest::operator==(const MainProtocolTwoWayAnonRequest& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_protocollayouts::MainProtocolTwoWayAnonRequest::operator!=(const MainProtocolTwoWayAnonRequest& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_protocollayouts::MainProtocolTwoWayAnonRequest::Storage_> test_protocollayouts::MainProtocolTwoWayAnonRequest::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
bool test_protocollayouts::MainProtocolTwoWayAnonRequest::IsUnknown() const {
  return Which() == ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag::_do_not_handle_this__write_a_default_case_instead;
}
::test_protocollayouts::MainProtocolTwoWayAnonRequest test_protocollayouts::MainProtocolTwoWayAnonRequest::WithB(bool val) {
  return MainProtocolTwoWayAnonRequest(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Storage_> test_protocollayouts::MainProtocolTwoWayAnonRequest::b() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Storage_> test_protocollayouts::MainProtocolTwoWayAnonRequest::b() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_protocollayouts::MainProtocolTwoWayAnonRequest& test_protocollayouts::MainProtocolTwoWayAnonRequest::b(bool value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::MainProtocolTwoWayAnonWithErrorResponse(MainProtocolTwoWayAnonWithErrorResponse&& other) noexcept : MainProtocolTwoWayAnonWithErrorResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse& ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::operator=(MainProtocolTwoWayAnonWithErrorResponse&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::MainProtocolTwoWayAnonWithErrorResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::MainProtocolTwoWayAnonWithErrorResponse(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::Tag test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::Which() const {
  return MainProtocolTwoWayAnonWithErrorResponse::IndexToTag(storage_->index()).value();
}

size_t test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::Tag tag) {
  switch (tag) {
    case ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::Tag::kB:
      return 1;
    default: {
      return 0;
    }
  }
}

std::optional<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::Tag> test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::Tag::kB;
    default:
      return ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::Tag::_do_not_handle_this__write_a_default_case_instead;
  }
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::MainProtocolTwoWayAnonWithErrorResponse(const MainProtocolTwoWayAnonWithErrorResponse& other) noexcept : MainProtocolTwoWayAnonWithErrorResponse(other.CloneStorage_()) {}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse& test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::operator=(const MainProtocolTwoWayAnonWithErrorResponse& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::operator==(const MainProtocolTwoWayAnonWithErrorResponse& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::operator!=(const MainProtocolTwoWayAnonWithErrorResponse& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::Storage_> test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
bool test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::IsUnknown() const {
  return Which() == ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::Tag::_do_not_handle_this__write_a_default_case_instead;
}
::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::WithB(bool val) {
  return MainProtocolTwoWayAnonWithErrorResponse(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::Storage_> test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::b() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::Storage_> test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::b() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse& test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::b(bool value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::MainProtocolTwoWayAnonWithErrorResult(MainProtocolTwoWayAnonWithErrorResult&& other) noexcept : MainProtocolTwoWayAnonWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult& ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::operator=(MainProtocolTwoWayAnonWithErrorResult&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::MainProtocolTwoWayAnonWithErrorResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::MainProtocolTwoWayAnonWithErrorResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Tag test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Which() const {
  return MainProtocolTwoWayAnonWithErrorResult::IndexToTag(storage_->index()).value();
}

size_t test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Tag tag) {
  switch (tag) {
    case ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Tag::kResponse:
      return 1;
    case ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Tag::kErr:
      return 2;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Tag> test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Tag::kResponse;
    case 2:
      return ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Tag::kErr;
    default:
      return std::nullopt;
  }
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::MainProtocolTwoWayAnonWithErrorResult(const MainProtocolTwoWayAnonWithErrorResult& other) noexcept : MainProtocolTwoWayAnonWithErrorResult(other.CloneStorage_()) {}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult& test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::operator=(const MainProtocolTwoWayAnonWithErrorResult& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::operator==(const MainProtocolTwoWayAnonWithErrorResult& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::operator!=(const MainProtocolTwoWayAnonWithErrorResult& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage_>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::WithResponse(::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse val) {
  return MainProtocolTwoWayAnonWithErrorResult(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::response() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::response() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult& test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::response(::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}
::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::WithErr(uint32_t val) {
  return MainProtocolTwoWayAnonWithErrorResult(std::make_shared<Storage_>(
      std::in_place_index_t<2>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<2, ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::err() const {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<2, ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::Storage_> test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::err() {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult& test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::err(uint32_t value) {
  storage_->emplace<2>(std::move(value));
  return *this;
}

::test_protocollayouts::MainProtocolOnAnonRequest::MainProtocolOnAnonRequest(MainProtocolOnAnonRequest&& other) noexcept : MainProtocolOnAnonRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_protocollayouts::MainProtocolOnAnonRequest& ::test_protocollayouts::MainProtocolOnAnonRequest::operator=(MainProtocolOnAnonRequest&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_protocollayouts::MainProtocolOnAnonRequest::MainProtocolOnAnonRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_protocollayouts::MainProtocolOnAnonRequest::MainProtocolOnAnonRequest(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_protocollayouts::MainProtocolOnAnonRequest::Tag test_protocollayouts::MainProtocolOnAnonRequest::Which() const {
  return MainProtocolOnAnonRequest::IndexToTag(storage_->index()).value();
}

size_t test_protocollayouts::MainProtocolOnAnonRequest::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_protocollayouts::MainProtocolOnAnonRequest::Tag tag) {
  switch (tag) {
    case ::test_protocollayouts::MainProtocolOnAnonRequest::Tag::kB:
      return 1;
    default: {
      return 0;
    }
  }
}

std::optional<::test_protocollayouts::MainProtocolOnAnonRequest::Tag> test_protocollayouts::MainProtocolOnAnonRequest::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_protocollayouts::MainProtocolOnAnonRequest::Tag::kB;
    default:
      return ::test_protocollayouts::MainProtocolOnAnonRequest::Tag::_do_not_handle_this__write_a_default_case_instead;
  }
}

::test_protocollayouts::MainProtocolOnAnonRequest::MainProtocolOnAnonRequest(const MainProtocolOnAnonRequest& other) noexcept : MainProtocolOnAnonRequest(other.CloneStorage_()) {}

::test_protocollayouts::MainProtocolOnAnonRequest& test_protocollayouts::MainProtocolOnAnonRequest::operator=(const MainProtocolOnAnonRequest& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_protocollayouts::MainProtocolOnAnonRequest::operator==(const MainProtocolOnAnonRequest& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_protocollayouts::MainProtocolOnAnonRequest::operator!=(const MainProtocolOnAnonRequest& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_protocollayouts::MainProtocolOnAnonRequest::Storage_> test_protocollayouts::MainProtocolOnAnonRequest::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
bool test_protocollayouts::MainProtocolOnAnonRequest::IsUnknown() const {
  return Which() == ::test_protocollayouts::MainProtocolOnAnonRequest::Tag::_do_not_handle_this__write_a_default_case_instead;
}
::test_protocollayouts::MainProtocolOnAnonRequest test_protocollayouts::MainProtocolOnAnonRequest::WithB(bool val) {
  return MainProtocolOnAnonRequest(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_protocollayouts::MainProtocolOnAnonRequest::Storage_> test_protocollayouts::MainProtocolOnAnonRequest::b() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_protocollayouts::MainProtocolOnAnonRequest::Storage_> test_protocollayouts::MainProtocolOnAnonRequest::b() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_protocollayouts::MainProtocolOnAnonRequest& test_protocollayouts::MainProtocolOnAnonRequest::b(bool value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}

#pragma clang diagnostic pop
