// WARNING: This file is machine generated by fidlgen.

  // fidl_experiment = output_index_json

  #include <fidl/test.table/cpp/wire_types.h>

  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wshadow"

bool ::fidl::WireTableFrame<::test_table::wire::EmptyTable>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_table::wire::EmptyTable>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
  return max_ordinal;
}

::test_table::wire::EmptyTable::EmptyTable(::fidl::AnyArena& allocator)
: frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::EmptyTable>>(allocator)) {}

::test_table::wire::EmptyTable::EmptyTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::EmptyTable>>&& frame)
: frame_ptr_(std::move(frame)) {}

void test_table::wire::EmptyTable::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::EmptyTable>>(allocator);
}
void test_table::wire::EmptyTable::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::EmptyTable>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_table::wire::EmptyTable::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_table::wire::EmptyTable::HasUnknownData() const {
  if (max_ordinal_ > 0) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

::fidl::WireTableBuilder<::test_table::wire::EmptyTable> test_table::wire::EmptyTable::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_table::wire::EmptyTable>(arena);
}
::fidl::WireTableExternalBuilder<::test_table::wire::EmptyTable> test_table::wire::EmptyTable::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::EmptyTable>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_table::wire::EmptyTable>(std::move(frame));
}

template<typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_table::wire::EmptyTable, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::EmptyTable>>&& frame)
: table_(std::move(frame)) {}

template<typename BuilderImpl>
::test_table::wire::EmptyTable fidl::internal::WireTableBaseBuilder<::test_table::wire::EmptyTable, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_table::wire::EmptyTable t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}

template class fidl::internal::WireTableBaseBuilder<::test_table::wire::EmptyTable, ::fidl::WireTableBuilder<::test_table::wire::EmptyTable>>;
template class fidl::internal::WireTableBaseBuilder<::test_table::wire::EmptyTable, ::fidl::WireTableExternalBuilder<::test_table::wire::EmptyTable>>;

::fidl::WireTableBuilder<::test_table::wire::EmptyTable>::WireTableBuilder(::fidl::AnyArena& arena)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::EmptyTable>>(arena)),
  arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_table::wire::EmptyTable>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::EmptyTable>* frame)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::EmptyTable>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::EmptyTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_table::wire::EmptyTable* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
    Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {

    size_t encode_inline_size = 0;
    switch (i) {
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::EmptyTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {

    size_t decode_inline_size = 0;
    switch (i) {
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch(i) {
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_table::wire::EmptyTable, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_table::wire::EmptyTable, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_table::wire::EmptyTable>);

bool ::fidl::WireTableFrame<::test_table::wire::SimpleTable>::HasUnknownData() const {
      if (!reserved_1_.IsZeroEnvelope()) {
        return true;
      }
      if (!reserved_2_.IsZeroEnvelope()) {
        return true;
      }
      if (!reserved_3_.IsZeroEnvelope()) {
        return true;
      }
  return false;
}

uint64_t fidl::WireTableFrame<::test_table::wire::SimpleTable>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
      if (!x_.has_data()) {
        max_ordinal = 1;
      }
      if (!reserved_1_.IsZeroEnvelope()) {
        max_ordinal = 1;
      }
      if (!reserved_2_.IsZeroEnvelope()) {
        max_ordinal = 2;
      }
      if (!reserved_3_.IsZeroEnvelope()) {
        max_ordinal = 3;
      }
      if (!y_.has_data()) {
        max_ordinal = 5;
      }
  return max_ordinal;
}

::test_table::wire::SimpleTable::SimpleTable(::fidl::AnyArena& allocator)
: frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SimpleTable>>(allocator)) {}

::test_table::wire::SimpleTable::SimpleTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SimpleTable>>&& frame)
: frame_ptr_(std::move(frame)) {}

void test_table::wire::SimpleTable::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SimpleTable>>(allocator);
}
void test_table::wire::SimpleTable::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SimpleTable>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_table::wire::SimpleTable::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_table::wire::SimpleTable::HasUnknownData() const {
  if (max_ordinal_ > 5) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

  int64_t& test_table::wire::SimpleTable::x() const {
    ZX_ASSERT(has_x());
    return frame_ptr_->x_.get_data();
  }

  bool test_table::wire::SimpleTable::has_x() const {
    return max_ordinal_ >= 1 && frame_ptr_->x_.has_data();
  }

  ::test_table::wire::SimpleTable& test_table::wire::SimpleTable::clear_x() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->x_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SimpleTable& test_table::wire::SimpleTable::set_x(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->x_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
      return *this;
    }

    ::test_table::wire::SimpleTable& test_table::wire::SimpleTable::set_x(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->x_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SimpleTable::y() const {
    ZX_ASSERT(has_y());
    return frame_ptr_->y_.get_data();
  }

  bool test_table::wire::SimpleTable::has_y() const {
    return max_ordinal_ >= 5 && frame_ptr_->y_.has_data();
  }

  ::test_table::wire::SimpleTable& test_table::wire::SimpleTable::clear_y() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->y_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SimpleTable& test_table::wire::SimpleTable::set_y(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->y_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(5));
      return *this;
    }

    ::test_table::wire::SimpleTable& test_table::wire::SimpleTable::set_y(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->y_.set_data(nullptr);
      return *this;
    }

::fidl::WireTableBuilder<::test_table::wire::SimpleTable> test_table::wire::SimpleTable::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_table::wire::SimpleTable>(arena);
}
::fidl::WireTableExternalBuilder<::test_table::wire::SimpleTable> test_table::wire::SimpleTable::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SimpleTable>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_table::wire::SimpleTable>(std::move(frame));
}

template<typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SimpleTable>>&& frame)
: table_(std::move(frame)) {}

template<typename BuilderImpl>
::test_table::wire::SimpleTable fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_table::wire::SimpleTable t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, BuilderImpl>::has_x() const {
    return table_.has_x();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, BuilderImpl>::clear_x() {
    table_.clear_x();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, BuilderImpl>::x() const {
    return table_.x();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, BuilderImpl>::x(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->x_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, BuilderImpl>::has_y() const {
    return table_.has_y();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, BuilderImpl>::clear_y() {
    table_.clear_y();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, BuilderImpl>::y() const {
    return table_.y();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, BuilderImpl>::y(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->y_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(5));
      return *static_cast<BuilderImpl*>(this);
    }

template class fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, ::fidl::WireTableBuilder<::test_table::wire::SimpleTable>>;
template class fidl::internal::WireTableBaseBuilder<::test_table::wire::SimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::SimpleTable>>;

::fidl::WireTableBuilder<::test_table::wire::SimpleTable>::WireTableBuilder(::fidl::AnyArena& arena)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SimpleTable>>(arena)),
  arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_table::wire::SimpleTable>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::SimpleTable>* frame)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SimpleTable>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::SimpleTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_table::wire::SimpleTable* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
    Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {

    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 4:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 4:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::SimpleTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {

    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 4:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch(i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 4:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_table::wire::SimpleTable, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_table::wire::SimpleTable, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_table::wire::SimpleTable>);

bool ::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
      if (!x_.has_data()) {
        max_ordinal = 1;
      }
  return max_ordinal;
}

::test_table::wire::OlderSimpleTable::OlderSimpleTable(::fidl::AnyArena& allocator)
: frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>>(allocator)) {}

::test_table::wire::OlderSimpleTable::OlderSimpleTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>>&& frame)
: frame_ptr_(std::move(frame)) {}

void test_table::wire::OlderSimpleTable::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>>(allocator);
}
void test_table::wire::OlderSimpleTable::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_table::wire::OlderSimpleTable::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_table::wire::OlderSimpleTable::HasUnknownData() const {
  if (max_ordinal_ > 1) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

  int64_t& test_table::wire::OlderSimpleTable::x() const {
    ZX_ASSERT(has_x());
    return frame_ptr_->x_.get_data();
  }

  bool test_table::wire::OlderSimpleTable::has_x() const {
    return max_ordinal_ >= 1 && frame_ptr_->x_.has_data();
  }

  ::test_table::wire::OlderSimpleTable& test_table::wire::OlderSimpleTable::clear_x() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->x_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::OlderSimpleTable& test_table::wire::OlderSimpleTable::set_x(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->x_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
      return *this;
    }

    ::test_table::wire::OlderSimpleTable& test_table::wire::OlderSimpleTable::set_x(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->x_.set_data(nullptr);
      return *this;
    }

::fidl::WireTableBuilder<::test_table::wire::OlderSimpleTable> test_table::wire::OlderSimpleTable::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_table::wire::OlderSimpleTable>(arena);
}
::fidl::WireTableExternalBuilder<::test_table::wire::OlderSimpleTable> test_table::wire::OlderSimpleTable::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_table::wire::OlderSimpleTable>(std::move(frame));
}

template<typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>>&& frame)
: table_(std::move(frame)) {}

template<typename BuilderImpl>
::test_table::wire::OlderSimpleTable fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_table::wire::OlderSimpleTable t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, BuilderImpl>::has_x() const {
    return table_.has_x();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, BuilderImpl>::clear_x() {
    table_.clear_x();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, BuilderImpl>::x() const {
    return table_.x();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, BuilderImpl>::x(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->x_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
      return *static_cast<BuilderImpl*>(this);
    }

template class fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, ::fidl::WireTableBuilder<::test_table::wire::OlderSimpleTable>>;
template class fidl::internal::WireTableBaseBuilder<::test_table::wire::OlderSimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::OlderSimpleTable>>;

::fidl::WireTableBuilder<::test_table::wire::OlderSimpleTable>::WireTableBuilder(::fidl::AnyArena& arena)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>>(arena)),
  arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_table::wire::OlderSimpleTable>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>* frame)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::OlderSimpleTable>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::OlderSimpleTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_table::wire::OlderSimpleTable* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
    Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {

    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::OlderSimpleTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {

    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch(i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_table::wire::OlderSimpleTable, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_table::wire::OlderSimpleTable, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_table::wire::OlderSimpleTable>);

bool ::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>::HasUnknownData() const {
      if (!reserved_1_.IsZeroEnvelope()) {
        return true;
      }
      if (!reserved_2_.IsZeroEnvelope()) {
        return true;
      }
      if (!reserved_3_.IsZeroEnvelope()) {
        return true;
      }
  return false;
}

uint64_t fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
      if (!x_.has_data()) {
        max_ordinal = 1;
      }
      if (!reserved_1_.IsZeroEnvelope()) {
        max_ordinal = 1;
      }
      if (!reserved_2_.IsZeroEnvelope()) {
        max_ordinal = 2;
      }
      if (!reserved_3_.IsZeroEnvelope()) {
        max_ordinal = 3;
      }
      if (!y_.has_data()) {
        max_ordinal = 5;
      }
      if (!z_.has_data()) {
        max_ordinal = 6;
      }
  return max_ordinal;
}

::test_table::wire::NewerSimpleTable::NewerSimpleTable(::fidl::AnyArena& allocator)
: frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>>(allocator)) {}

::test_table::wire::NewerSimpleTable::NewerSimpleTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>>&& frame)
: frame_ptr_(std::move(frame)) {}

void test_table::wire::NewerSimpleTable::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>>(allocator);
}
void test_table::wire::NewerSimpleTable::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_table::wire::NewerSimpleTable::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_table::wire::NewerSimpleTable::HasUnknownData() const {
  if (max_ordinal_ > 6) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

  int64_t& test_table::wire::NewerSimpleTable::x() const {
    ZX_ASSERT(has_x());
    return frame_ptr_->x_.get_data();
  }

  bool test_table::wire::NewerSimpleTable::has_x() const {
    return max_ordinal_ >= 1 && frame_ptr_->x_.has_data();
  }

  ::test_table::wire::NewerSimpleTable& test_table::wire::NewerSimpleTable::clear_x() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->x_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::NewerSimpleTable& test_table::wire::NewerSimpleTable::set_x(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->x_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
      return *this;
    }

    ::test_table::wire::NewerSimpleTable& test_table::wire::NewerSimpleTable::set_x(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->x_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::NewerSimpleTable::y() const {
    ZX_ASSERT(has_y());
    return frame_ptr_->y_.get_data();
  }

  bool test_table::wire::NewerSimpleTable::has_y() const {
    return max_ordinal_ >= 5 && frame_ptr_->y_.has_data();
  }

  ::test_table::wire::NewerSimpleTable& test_table::wire::NewerSimpleTable::clear_y() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->y_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::NewerSimpleTable& test_table::wire::NewerSimpleTable::set_y(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->y_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(5));
      return *this;
    }

    ::test_table::wire::NewerSimpleTable& test_table::wire::NewerSimpleTable::set_y(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->y_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::NewerSimpleTable::z() const {
    ZX_ASSERT(has_z());
    return frame_ptr_->z_.get_data();
  }

  bool test_table::wire::NewerSimpleTable::has_z() const {
    return max_ordinal_ >= 6 && frame_ptr_->z_.has_data();
  }

  ::test_table::wire::NewerSimpleTable& test_table::wire::NewerSimpleTable::clear_z() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->z_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::NewerSimpleTable& test_table::wire::NewerSimpleTable::set_z(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->z_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(6));
      return *this;
    }

    ::test_table::wire::NewerSimpleTable& test_table::wire::NewerSimpleTable::set_z(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->z_.set_data(nullptr);
      return *this;
    }

::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable> test_table::wire::NewerSimpleTable::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable>(arena);
}
::fidl::WireTableExternalBuilder<::test_table::wire::NewerSimpleTable> test_table::wire::NewerSimpleTable::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_table::wire::NewerSimpleTable>(std::move(frame));
}

template<typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>>&& frame)
: table_(std::move(frame)) {}

template<typename BuilderImpl>
::test_table::wire::NewerSimpleTable fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_table::wire::NewerSimpleTable t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::has_x() const {
    return table_.has_x();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::clear_x() {
    table_.clear_x();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::x() const {
    return table_.x();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::x(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->x_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::has_y() const {
    return table_.has_y();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::clear_y() {
    table_.clear_y();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::y() const {
    return table_.y();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::y(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->y_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(5));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::has_z() const {
    return table_.has_z();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::clear_z() {
    table_.clear_z();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::z() const {
    return table_.z();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, BuilderImpl>::z(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->z_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(6));
      return *static_cast<BuilderImpl*>(this);
    }

template class fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, ::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable>>;
template class fidl::internal::WireTableBaseBuilder<::test_table::wire::NewerSimpleTable, ::fidl::WireTableExternalBuilder<::test_table::wire::NewerSimpleTable>>;

::fidl::WireTableBuilder<::test_table::wire::NewerSimpleTable>::WireTableBuilder(::fidl::AnyArena& arena)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>>(arena)),
  arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_table::wire::NewerSimpleTable>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>* frame)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::NewerSimpleTable>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::NewerSimpleTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_table::wire::NewerSimpleTable* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
    Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {

    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 4:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 5:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 4:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 5:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::NewerSimpleTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {

    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 4:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 5:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch(i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 4:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 5:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_table::wire::NewerSimpleTable, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_table::wire::NewerSimpleTable, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_table::wire::NewerSimpleTable>);

bool ::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
      if (!z_.has_data()) {
        max_ordinal = 1;
      }
      if (!y_.has_data()) {
        max_ordinal = 2;
      }
      if (!x_.has_data()) {
        max_ordinal = 3;
      }
  return max_ordinal;
}

::test_table::wire::ReverseOrdinalTable::ReverseOrdinalTable(::fidl::AnyArena& allocator)
: frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>>(allocator)) {}

::test_table::wire::ReverseOrdinalTable::ReverseOrdinalTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>>&& frame)
: frame_ptr_(std::move(frame)) {}

void test_table::wire::ReverseOrdinalTable::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>>(allocator);
}
void test_table::wire::ReverseOrdinalTable::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_table::wire::ReverseOrdinalTable::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_table::wire::ReverseOrdinalTable::HasUnknownData() const {
  if (max_ordinal_ > 3) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

  int64_t& test_table::wire::ReverseOrdinalTable::z() const {
    ZX_ASSERT(has_z());
    return frame_ptr_->z_.get_data();
  }

  bool test_table::wire::ReverseOrdinalTable::has_z() const {
    return max_ordinal_ >= 1 && frame_ptr_->z_.has_data();
  }

  ::test_table::wire::ReverseOrdinalTable& test_table::wire::ReverseOrdinalTable::clear_z() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->z_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::ReverseOrdinalTable& test_table::wire::ReverseOrdinalTable::set_z(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->z_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
      return *this;
    }

    ::test_table::wire::ReverseOrdinalTable& test_table::wire::ReverseOrdinalTable::set_z(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->z_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::ReverseOrdinalTable::y() const {
    ZX_ASSERT(has_y());
    return frame_ptr_->y_.get_data();
  }

  bool test_table::wire::ReverseOrdinalTable::has_y() const {
    return max_ordinal_ >= 2 && frame_ptr_->y_.has_data();
  }

  ::test_table::wire::ReverseOrdinalTable& test_table::wire::ReverseOrdinalTable::clear_y() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->y_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::ReverseOrdinalTable& test_table::wire::ReverseOrdinalTable::set_y(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->y_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(2));
      return *this;
    }

    ::test_table::wire::ReverseOrdinalTable& test_table::wire::ReverseOrdinalTable::set_y(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->y_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::ReverseOrdinalTable::x() const {
    ZX_ASSERT(has_x());
    return frame_ptr_->x_.get_data();
  }

  bool test_table::wire::ReverseOrdinalTable::has_x() const {
    return max_ordinal_ >= 3 && frame_ptr_->x_.has_data();
  }

  ::test_table::wire::ReverseOrdinalTable& test_table::wire::ReverseOrdinalTable::clear_x() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->x_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::ReverseOrdinalTable& test_table::wire::ReverseOrdinalTable::set_x(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->x_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(3));
      return *this;
    }

    ::test_table::wire::ReverseOrdinalTable& test_table::wire::ReverseOrdinalTable::set_x(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->x_.set_data(nullptr);
      return *this;
    }

::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable> test_table::wire::ReverseOrdinalTable::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable>(arena);
}
::fidl::WireTableExternalBuilder<::test_table::wire::ReverseOrdinalTable> test_table::wire::ReverseOrdinalTable::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_table::wire::ReverseOrdinalTable>(std::move(frame));
}

template<typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>>&& frame)
: table_(std::move(frame)) {}

template<typename BuilderImpl>
::test_table::wire::ReverseOrdinalTable fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_table::wire::ReverseOrdinalTable t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::has_z() const {
    return table_.has_z();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::clear_z() {
    table_.clear_z();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::z() const {
    return table_.z();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::z(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->z_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::has_y() const {
    return table_.has_y();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::clear_y() {
    table_.clear_y();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::y() const {
    return table_.y();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::y(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->y_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(2));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::has_x() const {
    return table_.has_x();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::clear_x() {
    table_.clear_x();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::x() const {
    return table_.x();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, BuilderImpl>::x(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->x_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(3));
      return *static_cast<BuilderImpl*>(this);
    }

template class fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, ::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable>>;
template class fidl::internal::WireTableBaseBuilder<::test_table::wire::ReverseOrdinalTable, ::fidl::WireTableExternalBuilder<::test_table::wire::ReverseOrdinalTable>>;

::fidl::WireTableBuilder<::test_table::wire::ReverseOrdinalTable>::WireTableBuilder(::fidl::AnyArena& arena)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>>(arena)),
  arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_table::wire::ReverseOrdinalTable>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>* frame)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ReverseOrdinalTable>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::ReverseOrdinalTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_table::wire::ReverseOrdinalTable* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
    Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {

    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 1:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 2:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 1:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 2:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::ReverseOrdinalTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {

    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 1:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 2:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch(i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 1:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 2:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_table::wire::ReverseOrdinalTable, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_table::wire::ReverseOrdinalTable, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_table::wire::ReverseOrdinalTable>);

bool ::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_table::wire::TableWithAttributes>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
      if (!x_.has_data()) {
        max_ordinal = 1;
      }
  return max_ordinal;
}

::test_table::wire::TableWithAttributes::TableWithAttributes(::fidl::AnyArena& allocator)
: frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>>(allocator)) {}

::test_table::wire::TableWithAttributes::TableWithAttributes(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>>&& frame)
: frame_ptr_(std::move(frame)) {}

void test_table::wire::TableWithAttributes::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>>(allocator);
}
void test_table::wire::TableWithAttributes::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_table::wire::TableWithAttributes::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_table::wire::TableWithAttributes::HasUnknownData() const {
  if (max_ordinal_ > 1) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

  int64_t& test_table::wire::TableWithAttributes::x() const {
    ZX_ASSERT(has_x());
    return frame_ptr_->x_.get_data();
  }

  bool test_table::wire::TableWithAttributes::has_x() const {
    return max_ordinal_ >= 1 && frame_ptr_->x_.has_data();
  }

  ::test_table::wire::TableWithAttributes& test_table::wire::TableWithAttributes::clear_x() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->x_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::TableWithAttributes& test_table::wire::TableWithAttributes::set_x(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->x_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
      return *this;
    }

    ::test_table::wire::TableWithAttributes& test_table::wire::TableWithAttributes::set_x(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->x_.set_data(nullptr);
      return *this;
    }

::fidl::WireTableBuilder<::test_table::wire::TableWithAttributes> test_table::wire::TableWithAttributes::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_table::wire::TableWithAttributes>(arena);
}
::fidl::WireTableExternalBuilder<::test_table::wire::TableWithAttributes> test_table::wire::TableWithAttributes::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_table::wire::TableWithAttributes>(std::move(frame));
}

template<typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>>&& frame)
: table_(std::move(frame)) {}

template<typename BuilderImpl>
::test_table::wire::TableWithAttributes fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_table::wire::TableWithAttributes t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, BuilderImpl>::has_x() const {
    return table_.has_x();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, BuilderImpl>::clear_x() {
    table_.clear_x();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, BuilderImpl>::x() const {
    return table_.x();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, BuilderImpl>::x(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->x_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
      return *static_cast<BuilderImpl*>(this);
    }

template class fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, ::fidl::WireTableBuilder<::test_table::wire::TableWithAttributes>>;
template class fidl::internal::WireTableBaseBuilder<::test_table::wire::TableWithAttributes, ::fidl::WireTableExternalBuilder<::test_table::wire::TableWithAttributes>>;

::fidl::WireTableBuilder<::test_table::wire::TableWithAttributes>::WireTableBuilder(::fidl::AnyArena& arena)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>>(arena)),
  arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_table::wire::TableWithAttributes>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>* frame)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::TableWithAttributes>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::TableWithAttributes, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_table::wire::TableWithAttributes* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
    Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {

    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::TableWithAttributes, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {

    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch(i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_table::wire::TableWithAttributes, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_table::wire::TableWithAttributes, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_table::wire::TableWithAttributes>);

bool ::fidl::WireTableFrame<::test_table::wire::ExtensionTable>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_table::wire::ExtensionTable>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
  return max_ordinal;
}

::test_table::wire::ExtensionTable::ExtensionTable(::fidl::AnyArena& allocator)
: frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ExtensionTable>>(allocator)) {}

::test_table::wire::ExtensionTable::ExtensionTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ExtensionTable>>&& frame)
: frame_ptr_(std::move(frame)) {}

void test_table::wire::ExtensionTable::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ExtensionTable>>(allocator);
}
void test_table::wire::ExtensionTable::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ExtensionTable>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_table::wire::ExtensionTable::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_table::wire::ExtensionTable::HasUnknownData() const {
  if (max_ordinal_ > 0) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

::fidl::WireTableBuilder<::test_table::wire::ExtensionTable> test_table::wire::ExtensionTable::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_table::wire::ExtensionTable>(arena);
}
::fidl::WireTableExternalBuilder<::test_table::wire::ExtensionTable> test_table::wire::ExtensionTable::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ExtensionTable>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_table::wire::ExtensionTable>(std::move(frame));
}

template<typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_table::wire::ExtensionTable, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ExtensionTable>>&& frame)
: table_(std::move(frame)) {}

template<typename BuilderImpl>
::test_table::wire::ExtensionTable fidl::internal::WireTableBaseBuilder<::test_table::wire::ExtensionTable, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_table::wire::ExtensionTable t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}

template class fidl::internal::WireTableBaseBuilder<::test_table::wire::ExtensionTable, ::fidl::WireTableBuilder<::test_table::wire::ExtensionTable>>;
template class fidl::internal::WireTableBaseBuilder<::test_table::wire::ExtensionTable, ::fidl::WireTableExternalBuilder<::test_table::wire::ExtensionTable>>;

::fidl::WireTableBuilder<::test_table::wire::ExtensionTable>::WireTableBuilder(::fidl::AnyArena& arena)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ExtensionTable>>(arena)),
  arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_table::wire::ExtensionTable>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::ExtensionTable>* frame)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::ExtensionTable>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::ExtensionTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_table::wire::ExtensionTable* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
    Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {

    size_t encode_inline_size = 0;
    switch (i) {
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::ExtensionTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {

    size_t decode_inline_size = 0;
    switch (i) {
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch(i) {
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_table::wire::ExtensionTable, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_table::wire::ExtensionTable, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_table::wire::ExtensionTable>);

bool ::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
      if (!v1_.has_data()) {
        max_ordinal = 1;
      }
      if (!v2_.has_data()) {
        max_ordinal = 2;
      }
      if (!v3_.has_data()) {
        max_ordinal = 3;
      }
      if (!v4_.has_data()) {
        max_ordinal = 4;
      }
      if (!v5_.has_data()) {
        max_ordinal = 5;
      }
      if (!v6_.has_data()) {
        max_ordinal = 6;
      }
      if (!v7_.has_data()) {
        max_ordinal = 7;
      }
      if (!v8_.has_data()) {
        max_ordinal = 8;
      }
      if (!v9_.has_data()) {
        max_ordinal = 9;
      }
      if (!v10_.has_data()) {
        max_ordinal = 10;
      }
      if (!v11_.has_data()) {
        max_ordinal = 11;
      }
      if (!v12_.has_data()) {
        max_ordinal = 12;
      }
      if (!v13_.has_data()) {
        max_ordinal = 13;
      }
      if (!v14_.has_data()) {
        max_ordinal = 14;
      }
      if (!v15_.has_data()) {
        max_ordinal = 15;
      }
      if (!v16_.has_data()) {
        max_ordinal = 16;
      }
      if (!v17_.has_data()) {
        max_ordinal = 17;
      }
      if (!v18_.has_data()) {
        max_ordinal = 18;
      }
      if (!v19_.has_data()) {
        max_ordinal = 19;
      }
      if (!v20_.has_data()) {
        max_ordinal = 20;
      }
      if (!v21_.has_data()) {
        max_ordinal = 21;
      }
      if (!v22_.has_data()) {
        max_ordinal = 22;
      }
      if (!v23_.has_data()) {
        max_ordinal = 23;
      }
      if (!v24_.has_data()) {
        max_ordinal = 24;
      }
      if (!v25_.has_data()) {
        max_ordinal = 25;
      }
      if (!v26_.has_data()) {
        max_ordinal = 26;
      }
      if (!v27_.has_data()) {
        max_ordinal = 27;
      }
      if (!v28_.has_data()) {
        max_ordinal = 28;
      }
      if (!v29_.has_data()) {
        max_ordinal = 29;
      }
      if (!v30_.has_data()) {
        max_ordinal = 30;
      }
      if (!v31_.has_data()) {
        max_ordinal = 31;
      }
      if (!v32_.has_data()) {
        max_ordinal = 32;
      }
      if (!v33_.has_data()) {
        max_ordinal = 33;
      }
      if (!v34_.has_data()) {
        max_ordinal = 34;
      }
      if (!v35_.has_data()) {
        max_ordinal = 35;
      }
      if (!v36_.has_data()) {
        max_ordinal = 36;
      }
      if (!v37_.has_data()) {
        max_ordinal = 37;
      }
      if (!v38_.has_data()) {
        max_ordinal = 38;
      }
      if (!v39_.has_data()) {
        max_ordinal = 39;
      }
      if (!v40_.has_data()) {
        max_ordinal = 40;
      }
      if (!v41_.has_data()) {
        max_ordinal = 41;
      }
      if (!v42_.has_data()) {
        max_ordinal = 42;
      }
      if (!v43_.has_data()) {
        max_ordinal = 43;
      }
      if (!v44_.has_data()) {
        max_ordinal = 44;
      }
      if (!v45_.has_data()) {
        max_ordinal = 45;
      }
      if (!v46_.has_data()) {
        max_ordinal = 46;
      }
      if (!v47_.has_data()) {
        max_ordinal = 47;
      }
      if (!v48_.has_data()) {
        max_ordinal = 48;
      }
      if (!v49_.has_data()) {
        max_ordinal = 49;
      }
      if (!v50_.has_data()) {
        max_ordinal = 50;
      }
      if (!v51_.has_data()) {
        max_ordinal = 51;
      }
      if (!v52_.has_data()) {
        max_ordinal = 52;
      }
      if (!v53_.has_data()) {
        max_ordinal = 53;
      }
      if (!v54_.has_data()) {
        max_ordinal = 54;
      }
      if (!v55_.has_data()) {
        max_ordinal = 55;
      }
      if (!v56_.has_data()) {
        max_ordinal = 56;
      }
      if (!v57_.has_data()) {
        max_ordinal = 57;
      }
      if (!v58_.has_data()) {
        max_ordinal = 58;
      }
      if (!v59_.has_data()) {
        max_ordinal = 59;
      }
      if (!v60_.has_data()) {
        max_ordinal = 60;
      }
      if (!v61_.has_data()) {
        max_ordinal = 61;
      }
      if (!v62_.has_data()) {
        max_ordinal = 62;
      }
      if (!v63_.has_data()) {
        max_ordinal = 63;
      }
      if (!v64_.has_data()) {
        max_ordinal = 64;
      }
  return max_ordinal;
}

::test_table::wire::SixtyFourOrdinalTable::SixtyFourOrdinalTable(::fidl::AnyArena& allocator)
: frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>>(allocator)) {}

::test_table::wire::SixtyFourOrdinalTable::SixtyFourOrdinalTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>>&& frame)
: frame_ptr_(std::move(frame)) {}

void test_table::wire::SixtyFourOrdinalTable::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>>(allocator);
}
void test_table::wire::SixtyFourOrdinalTable::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_table::wire::SixtyFourOrdinalTable::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_table::wire::SixtyFourOrdinalTable::HasUnknownData() const {
  if (max_ordinal_ > 64) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

  int64_t& test_table::wire::SixtyFourOrdinalTable::v1() const {
    ZX_ASSERT(has_v1());
    return frame_ptr_->v1_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v1() const {
    return max_ordinal_ >= 1 && frame_ptr_->v1_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v1() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v1_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v1(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v1_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v1(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v1_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v2() const {
    ZX_ASSERT(has_v2());
    return frame_ptr_->v2_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v2() const {
    return max_ordinal_ >= 2 && frame_ptr_->v2_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v2() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v2_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v2(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v2_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(2));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v2(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v2_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v3() const {
    ZX_ASSERT(has_v3());
    return frame_ptr_->v3_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v3() const {
    return max_ordinal_ >= 3 && frame_ptr_->v3_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v3() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v3_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v3(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v3_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(3));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v3(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v3_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v4() const {
    ZX_ASSERT(has_v4());
    return frame_ptr_->v4_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v4() const {
    return max_ordinal_ >= 4 && frame_ptr_->v4_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v4() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v4_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v4(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v4_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(4));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v4(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v4_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v5() const {
    ZX_ASSERT(has_v5());
    return frame_ptr_->v5_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v5() const {
    return max_ordinal_ >= 5 && frame_ptr_->v5_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v5() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v5_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v5(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v5_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(5));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v5(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v5_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v6() const {
    ZX_ASSERT(has_v6());
    return frame_ptr_->v6_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v6() const {
    return max_ordinal_ >= 6 && frame_ptr_->v6_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v6() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v6_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v6(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v6_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(6));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v6(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v6_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v7() const {
    ZX_ASSERT(has_v7());
    return frame_ptr_->v7_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v7() const {
    return max_ordinal_ >= 7 && frame_ptr_->v7_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v7() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v7_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v7(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v7_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(7));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v7(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v7_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v8() const {
    ZX_ASSERT(has_v8());
    return frame_ptr_->v8_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v8() const {
    return max_ordinal_ >= 8 && frame_ptr_->v8_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v8() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v8_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v8(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v8_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(8));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v8(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v8_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v9() const {
    ZX_ASSERT(has_v9());
    return frame_ptr_->v9_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v9() const {
    return max_ordinal_ >= 9 && frame_ptr_->v9_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v9() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v9_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v9(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v9_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(9));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v9(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v9_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v10() const {
    ZX_ASSERT(has_v10());
    return frame_ptr_->v10_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v10() const {
    return max_ordinal_ >= 10 && frame_ptr_->v10_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v10() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v10_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v10(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v10_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(10));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v10(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v10_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v11() const {
    ZX_ASSERT(has_v11());
    return frame_ptr_->v11_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v11() const {
    return max_ordinal_ >= 11 && frame_ptr_->v11_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v11() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v11_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v11(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v11_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(11));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v11(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v11_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v12() const {
    ZX_ASSERT(has_v12());
    return frame_ptr_->v12_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v12() const {
    return max_ordinal_ >= 12 && frame_ptr_->v12_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v12() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v12_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v12(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v12_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(12));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v12(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v12_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v13() const {
    ZX_ASSERT(has_v13());
    return frame_ptr_->v13_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v13() const {
    return max_ordinal_ >= 13 && frame_ptr_->v13_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v13() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v13_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v13(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v13_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(13));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v13(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v13_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v14() const {
    ZX_ASSERT(has_v14());
    return frame_ptr_->v14_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v14() const {
    return max_ordinal_ >= 14 && frame_ptr_->v14_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v14() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v14_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v14(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v14_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(14));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v14(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v14_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v15() const {
    ZX_ASSERT(has_v15());
    return frame_ptr_->v15_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v15() const {
    return max_ordinal_ >= 15 && frame_ptr_->v15_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v15() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v15_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v15(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v15_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(15));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v15(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v15_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v16() const {
    ZX_ASSERT(has_v16());
    return frame_ptr_->v16_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v16() const {
    return max_ordinal_ >= 16 && frame_ptr_->v16_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v16() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v16_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v16(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v16_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(16));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v16(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v16_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v17() const {
    ZX_ASSERT(has_v17());
    return frame_ptr_->v17_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v17() const {
    return max_ordinal_ >= 17 && frame_ptr_->v17_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v17() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v17_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v17(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v17_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(17));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v17(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v17_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v18() const {
    ZX_ASSERT(has_v18());
    return frame_ptr_->v18_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v18() const {
    return max_ordinal_ >= 18 && frame_ptr_->v18_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v18() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v18_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v18(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v18_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(18));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v18(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v18_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v19() const {
    ZX_ASSERT(has_v19());
    return frame_ptr_->v19_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v19() const {
    return max_ordinal_ >= 19 && frame_ptr_->v19_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v19() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v19_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v19(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v19_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(19));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v19(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v19_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v20() const {
    ZX_ASSERT(has_v20());
    return frame_ptr_->v20_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v20() const {
    return max_ordinal_ >= 20 && frame_ptr_->v20_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v20() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v20_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v20(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v20_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(20));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v20(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v20_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v21() const {
    ZX_ASSERT(has_v21());
    return frame_ptr_->v21_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v21() const {
    return max_ordinal_ >= 21 && frame_ptr_->v21_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v21() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v21_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v21(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v21_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(21));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v21(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v21_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v22() const {
    ZX_ASSERT(has_v22());
    return frame_ptr_->v22_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v22() const {
    return max_ordinal_ >= 22 && frame_ptr_->v22_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v22() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v22_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v22(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v22_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(22));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v22(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v22_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v23() const {
    ZX_ASSERT(has_v23());
    return frame_ptr_->v23_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v23() const {
    return max_ordinal_ >= 23 && frame_ptr_->v23_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v23() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v23_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v23(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v23_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(23));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v23(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v23_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v24() const {
    ZX_ASSERT(has_v24());
    return frame_ptr_->v24_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v24() const {
    return max_ordinal_ >= 24 && frame_ptr_->v24_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v24() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v24_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v24(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v24_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(24));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v24(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v24_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v25() const {
    ZX_ASSERT(has_v25());
    return frame_ptr_->v25_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v25() const {
    return max_ordinal_ >= 25 && frame_ptr_->v25_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v25() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v25_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v25(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v25_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(25));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v25(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v25_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v26() const {
    ZX_ASSERT(has_v26());
    return frame_ptr_->v26_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v26() const {
    return max_ordinal_ >= 26 && frame_ptr_->v26_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v26() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v26_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v26(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v26_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(26));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v26(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v26_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v27() const {
    ZX_ASSERT(has_v27());
    return frame_ptr_->v27_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v27() const {
    return max_ordinal_ >= 27 && frame_ptr_->v27_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v27() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v27_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v27(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v27_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(27));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v27(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v27_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v28() const {
    ZX_ASSERT(has_v28());
    return frame_ptr_->v28_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v28() const {
    return max_ordinal_ >= 28 && frame_ptr_->v28_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v28() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v28_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v28(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v28_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(28));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v28(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v28_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v29() const {
    ZX_ASSERT(has_v29());
    return frame_ptr_->v29_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v29() const {
    return max_ordinal_ >= 29 && frame_ptr_->v29_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v29() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v29_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v29(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v29_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(29));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v29(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v29_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v30() const {
    ZX_ASSERT(has_v30());
    return frame_ptr_->v30_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v30() const {
    return max_ordinal_ >= 30 && frame_ptr_->v30_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v30() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v30_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v30(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v30_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(30));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v30(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v30_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v31() const {
    ZX_ASSERT(has_v31());
    return frame_ptr_->v31_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v31() const {
    return max_ordinal_ >= 31 && frame_ptr_->v31_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v31() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v31_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v31(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v31_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(31));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v31(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v31_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v32() const {
    ZX_ASSERT(has_v32());
    return frame_ptr_->v32_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v32() const {
    return max_ordinal_ >= 32 && frame_ptr_->v32_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v32() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v32_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v32(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v32_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(32));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v32(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v32_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v33() const {
    ZX_ASSERT(has_v33());
    return frame_ptr_->v33_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v33() const {
    return max_ordinal_ >= 33 && frame_ptr_->v33_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v33() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v33_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v33(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v33_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(33));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v33(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v33_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v34() const {
    ZX_ASSERT(has_v34());
    return frame_ptr_->v34_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v34() const {
    return max_ordinal_ >= 34 && frame_ptr_->v34_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v34() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v34_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v34(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v34_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(34));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v34(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v34_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v35() const {
    ZX_ASSERT(has_v35());
    return frame_ptr_->v35_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v35() const {
    return max_ordinal_ >= 35 && frame_ptr_->v35_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v35() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v35_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v35(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v35_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(35));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v35(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v35_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v36() const {
    ZX_ASSERT(has_v36());
    return frame_ptr_->v36_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v36() const {
    return max_ordinal_ >= 36 && frame_ptr_->v36_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v36() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v36_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v36(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v36_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(36));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v36(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v36_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v37() const {
    ZX_ASSERT(has_v37());
    return frame_ptr_->v37_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v37() const {
    return max_ordinal_ >= 37 && frame_ptr_->v37_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v37() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v37_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v37(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v37_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(37));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v37(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v37_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v38() const {
    ZX_ASSERT(has_v38());
    return frame_ptr_->v38_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v38() const {
    return max_ordinal_ >= 38 && frame_ptr_->v38_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v38() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v38_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v38(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v38_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(38));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v38(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v38_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v39() const {
    ZX_ASSERT(has_v39());
    return frame_ptr_->v39_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v39() const {
    return max_ordinal_ >= 39 && frame_ptr_->v39_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v39() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v39_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v39(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v39_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(39));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v39(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v39_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v40() const {
    ZX_ASSERT(has_v40());
    return frame_ptr_->v40_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v40() const {
    return max_ordinal_ >= 40 && frame_ptr_->v40_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v40() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v40_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v40(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v40_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(40));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v40(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v40_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v41() const {
    ZX_ASSERT(has_v41());
    return frame_ptr_->v41_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v41() const {
    return max_ordinal_ >= 41 && frame_ptr_->v41_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v41() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v41_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v41(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v41_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(41));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v41(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v41_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v42() const {
    ZX_ASSERT(has_v42());
    return frame_ptr_->v42_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v42() const {
    return max_ordinal_ >= 42 && frame_ptr_->v42_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v42() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v42_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v42(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v42_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(42));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v42(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v42_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v43() const {
    ZX_ASSERT(has_v43());
    return frame_ptr_->v43_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v43() const {
    return max_ordinal_ >= 43 && frame_ptr_->v43_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v43() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v43_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v43(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v43_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(43));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v43(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v43_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v44() const {
    ZX_ASSERT(has_v44());
    return frame_ptr_->v44_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v44() const {
    return max_ordinal_ >= 44 && frame_ptr_->v44_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v44() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v44_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v44(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v44_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(44));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v44(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v44_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v45() const {
    ZX_ASSERT(has_v45());
    return frame_ptr_->v45_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v45() const {
    return max_ordinal_ >= 45 && frame_ptr_->v45_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v45() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v45_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v45(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v45_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(45));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v45(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v45_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v46() const {
    ZX_ASSERT(has_v46());
    return frame_ptr_->v46_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v46() const {
    return max_ordinal_ >= 46 && frame_ptr_->v46_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v46() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v46_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v46(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v46_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(46));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v46(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v46_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v47() const {
    ZX_ASSERT(has_v47());
    return frame_ptr_->v47_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v47() const {
    return max_ordinal_ >= 47 && frame_ptr_->v47_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v47() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v47_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v47(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v47_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(47));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v47(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v47_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v48() const {
    ZX_ASSERT(has_v48());
    return frame_ptr_->v48_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v48() const {
    return max_ordinal_ >= 48 && frame_ptr_->v48_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v48() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v48_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v48(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v48_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(48));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v48(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v48_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v49() const {
    ZX_ASSERT(has_v49());
    return frame_ptr_->v49_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v49() const {
    return max_ordinal_ >= 49 && frame_ptr_->v49_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v49() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v49_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v49(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v49_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(49));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v49(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v49_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v50() const {
    ZX_ASSERT(has_v50());
    return frame_ptr_->v50_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v50() const {
    return max_ordinal_ >= 50 && frame_ptr_->v50_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v50() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v50_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v50(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v50_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(50));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v50(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v50_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v51() const {
    ZX_ASSERT(has_v51());
    return frame_ptr_->v51_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v51() const {
    return max_ordinal_ >= 51 && frame_ptr_->v51_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v51() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v51_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v51(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v51_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(51));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v51(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v51_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v52() const {
    ZX_ASSERT(has_v52());
    return frame_ptr_->v52_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v52() const {
    return max_ordinal_ >= 52 && frame_ptr_->v52_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v52() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v52_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v52(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v52_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(52));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v52(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v52_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v53() const {
    ZX_ASSERT(has_v53());
    return frame_ptr_->v53_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v53() const {
    return max_ordinal_ >= 53 && frame_ptr_->v53_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v53() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v53_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v53(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v53_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(53));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v53(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v53_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v54() const {
    ZX_ASSERT(has_v54());
    return frame_ptr_->v54_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v54() const {
    return max_ordinal_ >= 54 && frame_ptr_->v54_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v54() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v54_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v54(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v54_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(54));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v54(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v54_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v55() const {
    ZX_ASSERT(has_v55());
    return frame_ptr_->v55_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v55() const {
    return max_ordinal_ >= 55 && frame_ptr_->v55_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v55() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v55_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v55(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v55_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(55));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v55(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v55_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v56() const {
    ZX_ASSERT(has_v56());
    return frame_ptr_->v56_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v56() const {
    return max_ordinal_ >= 56 && frame_ptr_->v56_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v56() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v56_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v56(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v56_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(56));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v56(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v56_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v57() const {
    ZX_ASSERT(has_v57());
    return frame_ptr_->v57_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v57() const {
    return max_ordinal_ >= 57 && frame_ptr_->v57_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v57() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v57_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v57(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v57_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(57));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v57(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v57_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v58() const {
    ZX_ASSERT(has_v58());
    return frame_ptr_->v58_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v58() const {
    return max_ordinal_ >= 58 && frame_ptr_->v58_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v58() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v58_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v58(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v58_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(58));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v58(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v58_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v59() const {
    ZX_ASSERT(has_v59());
    return frame_ptr_->v59_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v59() const {
    return max_ordinal_ >= 59 && frame_ptr_->v59_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v59() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v59_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v59(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v59_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(59));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v59(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v59_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v60() const {
    ZX_ASSERT(has_v60());
    return frame_ptr_->v60_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v60() const {
    return max_ordinal_ >= 60 && frame_ptr_->v60_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v60() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v60_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v60(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v60_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(60));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v60(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v60_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v61() const {
    ZX_ASSERT(has_v61());
    return frame_ptr_->v61_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v61() const {
    return max_ordinal_ >= 61 && frame_ptr_->v61_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v61() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v61_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v61(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v61_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(61));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v61(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v61_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v62() const {
    ZX_ASSERT(has_v62());
    return frame_ptr_->v62_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v62() const {
    return max_ordinal_ >= 62 && frame_ptr_->v62_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v62() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v62_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v62(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v62_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(62));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v62(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v62_.set_data(nullptr);
      return *this;
    }

  int64_t& test_table::wire::SixtyFourOrdinalTable::v63() const {
    ZX_ASSERT(has_v63());
    return frame_ptr_->v63_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v63() const {
    return max_ordinal_ >= 63 && frame_ptr_->v63_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v63() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v63_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v63(::fidl::ObjectView<int64_t> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v63_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(63));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v63(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v63_.set_data(nullptr);
      return *this;
    }

  ::test_table::wire::ExtensionTable& test_table::wire::SixtyFourOrdinalTable::v64() const {
    ZX_ASSERT(has_v64());
    return frame_ptr_->v64_.get_data();
  }

  bool test_table::wire::SixtyFourOrdinalTable::has_v64() const {
    return max_ordinal_ >= 64 && frame_ptr_->v64_.has_data();
  }

  ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::clear_v64() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->v64_.clear_data();
    max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
    return *this;
  }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v64(::fidl::ObjectView<::test_table::wire::ExtensionTable> elem) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v64_.set_data(elem);
      max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(64));
      return *this;
    }

    ::test_table::wire::SixtyFourOrdinalTable& test_table::wire::SixtyFourOrdinalTable::set_v64(std::nullptr_t) {
      ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
      frame_ptr_->v64_.set_data(nullptr);
      return *this;
    }

::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable> test_table::wire::SixtyFourOrdinalTable::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>(arena);
}
::fidl::WireTableExternalBuilder<::test_table::wire::SixtyFourOrdinalTable> test_table::wire::SixtyFourOrdinalTable::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_table::wire::SixtyFourOrdinalTable>(std::move(frame));
}

template<typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>>&& frame)
: table_(std::move(frame)) {}

template<typename BuilderImpl>
::test_table::wire::SixtyFourOrdinalTable fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_table::wire::SixtyFourOrdinalTable t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v1() const {
    return table_.has_v1();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v1() {
    table_.clear_v1();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v1() const {
    return table_.v1();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v1(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v1_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v2() const {
    return table_.has_v2();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v2() {
    table_.clear_v2();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v2() const {
    return table_.v2();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v2(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v2_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(2));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v3() const {
    return table_.has_v3();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v3() {
    table_.clear_v3();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v3() const {
    return table_.v3();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v3(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v3_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(3));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v4() const {
    return table_.has_v4();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v4() {
    table_.clear_v4();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v4() const {
    return table_.v4();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v4(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v4_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(4));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v5() const {
    return table_.has_v5();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v5() {
    table_.clear_v5();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v5() const {
    return table_.v5();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v5(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v5_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(5));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v6() const {
    return table_.has_v6();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v6() {
    table_.clear_v6();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v6() const {
    return table_.v6();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v6(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v6_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(6));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v7() const {
    return table_.has_v7();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v7() {
    table_.clear_v7();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v7() const {
    return table_.v7();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v7(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v7_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(7));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v8() const {
    return table_.has_v8();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v8() {
    table_.clear_v8();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v8() const {
    return table_.v8();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v8(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v8_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(8));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v9() const {
    return table_.has_v9();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v9() {
    table_.clear_v9();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v9() const {
    return table_.v9();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v9(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v9_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(9));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v10() const {
    return table_.has_v10();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v10() {
    table_.clear_v10();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v10() const {
    return table_.v10();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v10(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v10_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(10));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v11() const {
    return table_.has_v11();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v11() {
    table_.clear_v11();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v11() const {
    return table_.v11();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v11(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v11_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(11));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v12() const {
    return table_.has_v12();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v12() {
    table_.clear_v12();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v12() const {
    return table_.v12();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v12(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v12_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(12));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v13() const {
    return table_.has_v13();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v13() {
    table_.clear_v13();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v13() const {
    return table_.v13();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v13(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v13_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(13));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v14() const {
    return table_.has_v14();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v14() {
    table_.clear_v14();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v14() const {
    return table_.v14();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v14(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v14_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(14));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v15() const {
    return table_.has_v15();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v15() {
    table_.clear_v15();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v15() const {
    return table_.v15();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v15(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v15_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(15));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v16() const {
    return table_.has_v16();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v16() {
    table_.clear_v16();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v16() const {
    return table_.v16();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v16(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v16_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(16));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v17() const {
    return table_.has_v17();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v17() {
    table_.clear_v17();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v17() const {
    return table_.v17();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v17(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v17_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(17));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v18() const {
    return table_.has_v18();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v18() {
    table_.clear_v18();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v18() const {
    return table_.v18();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v18(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v18_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(18));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v19() const {
    return table_.has_v19();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v19() {
    table_.clear_v19();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v19() const {
    return table_.v19();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v19(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v19_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(19));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v20() const {
    return table_.has_v20();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v20() {
    table_.clear_v20();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v20() const {
    return table_.v20();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v20(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v20_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(20));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v21() const {
    return table_.has_v21();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v21() {
    table_.clear_v21();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v21() const {
    return table_.v21();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v21(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v21_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(21));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v22() const {
    return table_.has_v22();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v22() {
    table_.clear_v22();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v22() const {
    return table_.v22();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v22(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v22_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(22));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v23() const {
    return table_.has_v23();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v23() {
    table_.clear_v23();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v23() const {
    return table_.v23();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v23(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v23_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(23));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v24() const {
    return table_.has_v24();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v24() {
    table_.clear_v24();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v24() const {
    return table_.v24();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v24(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v24_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(24));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v25() const {
    return table_.has_v25();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v25() {
    table_.clear_v25();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v25() const {
    return table_.v25();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v25(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v25_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(25));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v26() const {
    return table_.has_v26();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v26() {
    table_.clear_v26();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v26() const {
    return table_.v26();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v26(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v26_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(26));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v27() const {
    return table_.has_v27();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v27() {
    table_.clear_v27();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v27() const {
    return table_.v27();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v27(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v27_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(27));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v28() const {
    return table_.has_v28();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v28() {
    table_.clear_v28();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v28() const {
    return table_.v28();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v28(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v28_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(28));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v29() const {
    return table_.has_v29();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v29() {
    table_.clear_v29();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v29() const {
    return table_.v29();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v29(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v29_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(29));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v30() const {
    return table_.has_v30();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v30() {
    table_.clear_v30();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v30() const {
    return table_.v30();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v30(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v30_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(30));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v31() const {
    return table_.has_v31();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v31() {
    table_.clear_v31();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v31() const {
    return table_.v31();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v31(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v31_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(31));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v32() const {
    return table_.has_v32();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v32() {
    table_.clear_v32();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v32() const {
    return table_.v32();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v32(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v32_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(32));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v33() const {
    return table_.has_v33();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v33() {
    table_.clear_v33();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v33() const {
    return table_.v33();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v33(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v33_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(33));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v34() const {
    return table_.has_v34();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v34() {
    table_.clear_v34();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v34() const {
    return table_.v34();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v34(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v34_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(34));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v35() const {
    return table_.has_v35();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v35() {
    table_.clear_v35();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v35() const {
    return table_.v35();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v35(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v35_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(35));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v36() const {
    return table_.has_v36();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v36() {
    table_.clear_v36();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v36() const {
    return table_.v36();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v36(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v36_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(36));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v37() const {
    return table_.has_v37();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v37() {
    table_.clear_v37();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v37() const {
    return table_.v37();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v37(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v37_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(37));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v38() const {
    return table_.has_v38();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v38() {
    table_.clear_v38();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v38() const {
    return table_.v38();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v38(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v38_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(38));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v39() const {
    return table_.has_v39();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v39() {
    table_.clear_v39();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v39() const {
    return table_.v39();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v39(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v39_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(39));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v40() const {
    return table_.has_v40();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v40() {
    table_.clear_v40();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v40() const {
    return table_.v40();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v40(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v40_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(40));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v41() const {
    return table_.has_v41();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v41() {
    table_.clear_v41();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v41() const {
    return table_.v41();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v41(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v41_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(41));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v42() const {
    return table_.has_v42();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v42() {
    table_.clear_v42();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v42() const {
    return table_.v42();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v42(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v42_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(42));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v43() const {
    return table_.has_v43();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v43() {
    table_.clear_v43();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v43() const {
    return table_.v43();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v43(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v43_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(43));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v44() const {
    return table_.has_v44();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v44() {
    table_.clear_v44();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v44() const {
    return table_.v44();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v44(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v44_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(44));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v45() const {
    return table_.has_v45();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v45() {
    table_.clear_v45();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v45() const {
    return table_.v45();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v45(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v45_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(45));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v46() const {
    return table_.has_v46();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v46() {
    table_.clear_v46();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v46() const {
    return table_.v46();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v46(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v46_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(46));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v47() const {
    return table_.has_v47();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v47() {
    table_.clear_v47();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v47() const {
    return table_.v47();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v47(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v47_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(47));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v48() const {
    return table_.has_v48();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v48() {
    table_.clear_v48();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v48() const {
    return table_.v48();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v48(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v48_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(48));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v49() const {
    return table_.has_v49();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v49() {
    table_.clear_v49();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v49() const {
    return table_.v49();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v49(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v49_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(49));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v50() const {
    return table_.has_v50();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v50() {
    table_.clear_v50();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v50() const {
    return table_.v50();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v50(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v50_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(50));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v51() const {
    return table_.has_v51();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v51() {
    table_.clear_v51();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v51() const {
    return table_.v51();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v51(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v51_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(51));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v52() const {
    return table_.has_v52();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v52() {
    table_.clear_v52();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v52() const {
    return table_.v52();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v52(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v52_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(52));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v53() const {
    return table_.has_v53();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v53() {
    table_.clear_v53();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v53() const {
    return table_.v53();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v53(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v53_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(53));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v54() const {
    return table_.has_v54();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v54() {
    table_.clear_v54();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v54() const {
    return table_.v54();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v54(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v54_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(54));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v55() const {
    return table_.has_v55();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v55() {
    table_.clear_v55();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v55() const {
    return table_.v55();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v55(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v55_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(55));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v56() const {
    return table_.has_v56();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v56() {
    table_.clear_v56();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v56() const {
    return table_.v56();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v56(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v56_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(56));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v57() const {
    return table_.has_v57();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v57() {
    table_.clear_v57();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v57() const {
    return table_.v57();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v57(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v57_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(57));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v58() const {
    return table_.has_v58();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v58() {
    table_.clear_v58();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v58() const {
    return table_.v58();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v58(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v58_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(58));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v59() const {
    return table_.has_v59();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v59() {
    table_.clear_v59();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v59() const {
    return table_.v59();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v59(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v59_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(59));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v60() const {
    return table_.has_v60();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v60() {
    table_.clear_v60();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v60() const {
    return table_.v60();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v60(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v60_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(60));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v61() const {
    return table_.has_v61();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v61() {
    table_.clear_v61();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v61() const {
    return table_.v61();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v61(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v61_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(61));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v62() const {
    return table_.has_v62();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v62() {
    table_.clear_v62();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v62() const {
    return table_.v62();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v62(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v62_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(62));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v63() const {
    return table_.has_v63();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v63() {
    table_.clear_v63();
  }

  template<typename BuilderImpl>
  int64_t& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v63() const {
    return table_.v63();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v63(Wrapper_Ignore_Me_<::fidl::ObjectView<int64_t>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v63_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(63));
      return *static_cast<BuilderImpl*>(this);
    }
  template<typename BuilderImpl>
  bool fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::has_v64() const {
    return table_.has_v64();
  }

  template<typename BuilderImpl>
  void fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::clear_v64() {
    table_.clear_v64();
  }

  template<typename BuilderImpl>
  ::test_table::wire::ExtensionTable& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v64() const {
    return table_.v64();
  }
    template<typename BuilderImpl>
    BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, BuilderImpl>::v64(Wrapper_Ignore_Me_<::fidl::ObjectView<::test_table::wire::ExtensionTable>> elem) {
      ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
      ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
      table_.frame_ptr_->v64_.set_data(elem.value);
      table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(64));
      return *static_cast<BuilderImpl*>(this);
    }

template class fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, ::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>>;
template class fidl::internal::WireTableBaseBuilder<::test_table::wire::SixtyFourOrdinalTable, ::fidl::WireTableExternalBuilder<::test_table::wire::SixtyFourOrdinalTable>>;

::fidl::WireTableBuilder<::test_table::wire::SixtyFourOrdinalTable>::WireTableBuilder(::fidl::AnyArena& arena)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>>(arena)),
  arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_table::wire::SixtyFourOrdinalTable>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>* frame)
: Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_table::wire::SixtyFourOrdinalTable>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::SixtyFourOrdinalTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_table::wire::SixtyFourOrdinalTable* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
    Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {

    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 1:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 2:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 3:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 4:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 5:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 6:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 7:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 8:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 9:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 10:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 11:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 12:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 13:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 14:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 15:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 16:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 17:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 18:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 19:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 20:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 21:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 22:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 23:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 24:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 25:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 26:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 27:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 28:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 29:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 30:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 31:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 32:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 33:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 34:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 35:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 36:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 37:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 38:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 39:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 40:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 41:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 42:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 43:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 44:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 45:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 46:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 47:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 48:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 49:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 50:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 51:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 52:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 53:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 54:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 55:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 56:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 57:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 58:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 59:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 60:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 61:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 62:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 63:
        encode_inline_size = ::fidl::internal::WireCodingTraits<::test_table::wire::ExtensionTable, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 1:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 2:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 3:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 4:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 5:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 6:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 7:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 8:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 9:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 10:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 11:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 12:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 13:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 14:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 15:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 16:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 17:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 18:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 19:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 20:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 21:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 22:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 23:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 24:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 25:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 26:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 27:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 28:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 29:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 30:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 31:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 32:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 33:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 34:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 35:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 36:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 37:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 38:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 39:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 40:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 41:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 42:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 43:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 44:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 45:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 46:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 47:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 48:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 49:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 50:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 51:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 52:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 53:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 54:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 55:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 56:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 57:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 58:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 59:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 60:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 61:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 62:
        encode_fn = ::fidl::internal::MakeEncodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 63:
        encode_fn = ::fidl::internal::MakeEncodeFn<::test_table::wire::ExtensionTable, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_table::wire::SixtyFourOrdinalTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
      ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {

    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 1:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 2:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 3:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 4:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 5:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 6:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 7:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 8:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 9:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 10:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 11:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 12:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 13:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 14:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 15:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 16:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 17:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 18:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 19:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 20:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 21:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 22:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 23:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 24:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 25:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 26:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 27:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 28:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 29:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 30:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 31:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 32:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 33:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 34:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 35:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 36:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 37:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 38:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 39:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 40:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 41:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 42:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 43:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 44:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 45:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 46:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 47:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 48:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 49:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 50:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 51:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 52:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 53:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 54:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 55:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 56:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 57:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 58:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 59:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 60:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 61:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 62:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      case 63:
        decode_inline_size = ::fidl::internal::WireCodingTraits<::test_table::wire::ExtensionTable, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch(i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 1:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 2:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 3:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 4:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 5:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 6:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 7:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 8:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 9:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 10:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 11:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 12:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 13:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 14:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 15:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 16:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 17:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 18:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 19:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 20:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 21:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 22:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 23:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 24:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 25:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 26:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 27:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 28:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 29:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 30:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 31:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 32:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 33:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 34:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 35:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 36:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 37:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 38:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 39:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 40:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 41:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 42:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 43:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 44:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 45:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 46:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 47:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 48:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 49:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 50:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 51:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 52:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 53:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 54:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 55:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 56:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 57:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 58:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 59:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 60:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 61:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 62:
        decode_fn = ::fidl::internal::MakeDecodeFn<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 63:
        decode_fn = ::fidl::internal::MakeDecodeFn<::test_table::wire::ExtensionTable, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_table::wire::SixtyFourOrdinalTable, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_table::wire::SixtyFourOrdinalTable, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_table::wire::SixtyFourOrdinalTable>);

  #pragma clang diagnostic pop

