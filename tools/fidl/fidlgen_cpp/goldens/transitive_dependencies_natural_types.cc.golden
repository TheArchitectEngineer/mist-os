// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.transitivedependencies/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_transitivedependencies::Baz::Baz(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_transitivedependencies::Baz::Baz(::test_middle::Bar g) noexcept
    : storage_({.g = std::move(g)}) {}

::test_transitivedependencies::Baz::Baz(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Baz(Storage_{
                                                                                                          .g = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                      }) {}
::test_transitivedependencies::Baz::Baz(const ::test_transitivedependencies::Baz& other) noexcept : ::test_transitivedependencies::Baz(other.CloneStorage_()) {}

::test_transitivedependencies::Baz& test_transitivedependencies::Baz::operator=(const ::test_transitivedependencies::Baz& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_transitivedependencies::Baz::operator==(const Baz& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_transitivedependencies::Baz, 4>::Equal(this, &other);
}

bool test_transitivedependencies::Baz::operator!=(const Baz& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_transitivedependencies::Baz, 4>::Equal(this, &other);
}

::test_transitivedependencies::Baz::Storage_ test_transitivedependencies::Baz::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.g)};
}
const ::test_middle::Bar&
test_transitivedependencies::Baz::g() const {
  return storage_.g;
}

::test_middle::Bar& ::test_transitivedependencies::Baz::g() {
  return storage_.g;
}

::test_transitivedependencies::Baz& ::test_transitivedependencies::Baz::g(::test_middle::Bar value) {
  storage_.g = std::move(value);
  return *this;
}

#pragma clang diagnostic pop
