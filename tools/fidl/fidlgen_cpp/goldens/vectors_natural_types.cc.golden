// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.vectors/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_vectors::ExampleUseOfVectors::ExampleUseOfVectors(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_vectors::ExampleUseOfVectors::ExampleUseOfVectors(::std::vector<uint8_t> vector_of_uint8, ::std::vector<::std::vector<bool>> vector_of_vector_of_bool) noexcept
    : storage_({.vector_of_uint8 = std::move(vector_of_uint8),
                .vector_of_vector_of_bool = std::move(vector_of_vector_of_bool)}) {}

::test_vectors::ExampleUseOfVectors::ExampleUseOfVectors(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : ExampleUseOfVectors(Storage_{
                                                                                                                           .vector_of_uint8 = {},
                                                                                                                           .vector_of_vector_of_bool = {},
                                                                                                                       }) {}
::test_vectors::ExampleUseOfVectors::ExampleUseOfVectors(const ::test_vectors::ExampleUseOfVectors& other) noexcept : ::test_vectors::ExampleUseOfVectors(other.CloneStorage_()) {}

::test_vectors::ExampleUseOfVectors& test_vectors::ExampleUseOfVectors::operator=(const ::test_vectors::ExampleUseOfVectors& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_vectors::ExampleUseOfVectors::operator==(const ExampleUseOfVectors& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_vectors::ExampleUseOfVectors, 32>::Equal(this, &other);
}

bool test_vectors::ExampleUseOfVectors::operator!=(const ExampleUseOfVectors& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_vectors::ExampleUseOfVectors, 32>::Equal(this, &other);
}

::test_vectors::ExampleUseOfVectors::Storage_ test_vectors::ExampleUseOfVectors::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.vector_of_uint8),
      ::fidl::internal::NaturalClone(storage_.vector_of_vector_of_bool)};
}
const ::std::vector<uint8_t>&
test_vectors::ExampleUseOfVectors::vector_of_uint8() const {
  return storage_.vector_of_uint8;
}

::std::vector<uint8_t>& ::test_vectors::ExampleUseOfVectors::vector_of_uint8() {
  return storage_.vector_of_uint8;
}

::test_vectors::ExampleUseOfVectors& ::test_vectors::ExampleUseOfVectors::vector_of_uint8(::std::vector<uint8_t> value) {
  storage_.vector_of_uint8 = std::move(value);
  return *this;
}
const ::std::vector<::std::vector<bool>>&
test_vectors::ExampleUseOfVectors::vector_of_vector_of_bool() const {
  return storage_.vector_of_vector_of_bool;
}

::std::vector<::std::vector<bool>>& ::test_vectors::ExampleUseOfVectors::vector_of_vector_of_bool() {
  return storage_.vector_of_vector_of_bool;
}

::test_vectors::ExampleUseOfVectors& ::test_vectors::ExampleUseOfVectors::vector_of_vector_of_bool(::std::vector<::std::vector<bool>> value) {
  storage_.vector_of_vector_of_bool = std::move(value);
  return *this;
}

#pragma clang diagnostic pop
