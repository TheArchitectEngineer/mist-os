// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json
#ifdef __Fuchsia__

#include <fidl/test.anonymous/cpp/wire_messaging.h>

#include <memory>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_anonymous {

[[maybe_unused]]
constexpr uint64_t kSomeProtocol_SomeMethod_Ordinal = 2515914517457749720lu;

[[maybe_unused]]
constexpr ::fidl::MessageDynamicFlags kSomeProtocol_SomeMethod_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>) == ::fidl::TypeTraits<::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>, body) == sizeof(fidl_message_header_t));

static_assert(sizeof(::test_anonymous::wire::SomeProtocolSomeMethodRequest) == ::fidl::TypeTraits<::test_anonymous::wire::SomeProtocolSomeMethodRequest>::kPrimarySize);
static_assert(offsetof(::test_anonymous::wire::SomeProtocolSomeMethodRequest, union_member) == 0);
static_assert(offsetof(::test_anonymous::wire::SomeProtocolSomeMethodRequest, table_member) == 16);
static_assert(sizeof(::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>) == ::fidl::TypeTraits<::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>>::kPrimarySize);
static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>) == ::fidl::TypeTraits<::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>, body) == sizeof(fidl_message_header_t));
}  // namespace test_anonymous

::fidl::WireResult<::test_anonymous::SomeProtocol::SomeMethod>::WireResult(
    ::fidl::UnownedClientEnd<::test_anonymous::SomeProtocol> client,
    ::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>(
      outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{}));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}

::fidl::WireResult<::test_anonymous::SomeProtocol::SomeMethod>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_anonymous::SomeProtocol::SomeMethod>(result) {}

::fidl::WireUnownedResult<::test_anonymous::SomeProtocol::SomeMethod>::WireUnownedResult(::fidl::UnownedClientEnd<::test_anonymous::SomeProtocol> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_anonymous::SomeProtocol::SomeMethod>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>(
      outgoing.Call(
          client_end.handle(),
          handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
::fidl::WireUnownedResult<::test_anonymous::SomeProtocol::SomeMethod>::WireUnownedResult(::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>* response)
    : ::fidl::BaseWireResult<::test_anonymous::SomeProtocol::SomeMethod>(fidl::Status::Ok()), decoded_(response) {
  ExtractValueFromDecoded(decoded_.pointer());
}

::fidl::WireUnownedResult<::test_anonymous::SomeProtocol::SomeMethod>::WireUnownedResult(
    ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>>>&& decoded,
    ::fidl::internal::MessageStorageViewBase* storage_view) : ::fidl::BaseWireResult<::test_anonymous::SomeProtocol::SomeMethod>(::fidl::internal::StatusFromResult(decoded)) {
  if (decoded.is_ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}

::fidl::WireUnownedResult<::test_anonymous::SomeProtocol::SomeMethod>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_anonymous::SomeProtocol::SomeMethod>(result) {}

::fidl::internal::WireThenable<::test_anonymous::SomeProtocol::SomeMethod> fidl::internal::WireWeakAsyncClientImpl<::test_anonymous::SomeProtocol>::SomeMethod(::test_anonymous::wire::UnionMember union_member, ::test_anonymous::wire::TableMember table_member) {
  ::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod> _request{union_member, table_member};
  return ::fidl::internal::WireThenable<::test_anonymous::SomeProtocol::SomeMethod>{
      _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
}
::fidl::internal::WireBufferThenable<::test_anonymous::SomeProtocol::SomeMethod> fidl::internal::WireWeakAsyncBufferClientImpl<::test_anonymous::SomeProtocol>::SomeMethod(::test_anonymous::wire::UnionMember union_member, ::test_anonymous::wire::TableMember table_member) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_anonymous::SomeProtocol::SomeMethod>();
  ::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod> _request{union_member, table_member};
  return ::fidl::internal::WireBufferThenable<::test_anonymous::SomeProtocol::SomeMethod>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}

::fidl::WireResult<::test_anonymous::SomeProtocol::SomeMethod>
fidl::internal::WireWeakSyncClientImpl<::test_anonymous::SomeProtocol>::SomeMethod(::test_anonymous::wire::UnionMember union_member, ::test_anonymous::wire::TableMember table_member) {
  return _client_base()->MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod> _request{union_member, table_member};
        return ::fidl::WireResult<::test_anonymous::SomeProtocol::SomeMethod>(::fidl::UnownedClientEnd<::test_anonymous::SomeProtocol>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
      });
}

::fidl::internal::WireEventDispatcher<::test_anonymous::SomeProtocol>::WireEventDispatcher(::fidl::internal::WireEventHandlerInterface<::test_anonymous::SomeProtocol>* event_handler)
    : IncomingEventDispatcher(event_handler) {}

::fidl::Status fidl::WireSyncEventHandler<::test_anonymous::SomeProtocol>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_anonymous::SomeProtocol> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_anonymous::SomeProtocol> event_storage;
  fidl::internal::WireEventDispatcher<::test_anonymous::SomeProtocol> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<::test_anonymous::SomeProtocol>::entries_[] = {
    {
        ::test_anonymous::kSomeProtocol_SomeMethod_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_anonymous::wire::SomeProtocolSomeMethodRequest>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_anonymous::SomeProtocol::SomeMethod>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_anonymous::SomeProtocol>*>(interface)->SomeMethod(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<::test_anonymous::SomeProtocol>::entries_end_ =
    &entries_[1];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<::test_anonymous::SomeProtocol>::TryDispatch(
    ::fidl::WireServer<::test_anonymous::SomeProtocol>* impl, ::fidl::IncomingHeaderAndMessage& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, storage_view, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_anonymous::SomeProtocol>::Dispatch(::fidl::WireServer<::test_anonymous::SomeProtocol>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_,
                             &unknown_method_handler_entry_);
}

void fidl::WireServer<::test_anonymous::SomeProtocol>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::WireServerDispatcher<::test_anonymous::SomeProtocol>::Dispatch(this, std::move(msg), storage_view, txn);
}

fidl::WireServer<::test_anonymous::SomeProtocol>::Handler fidl::WireServer<::test_anonymous::SomeProtocol>::bind_handler(async_dispatcher_t* dispatcher) {
  return [impl = this, dispatcher = dispatcher](::fidl::ServerEnd<::test_anonymous::SomeProtocol> request) {
    (void)::fidl::BindServer(dispatcher, std::move(request), impl);
  };
}

void fidl::internal::WireCompleterImpl<::test_anonymous::SomeProtocol::SomeMethod>::Reply(::fit::result<::test_anonymous::wire::SomeProtocolSomeMethodError, ::test_anonymous::wire::SomeProtocolSomeMethodResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_anonymous::wire::SomeProtocolSomeMethodResult::WithResponse(std::move(*result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void fidl::internal::WireCompleterImpl<::test_anonymous::SomeProtocol::SomeMethod>::MakeReply(::test_anonymous::wire::SomeProtocolSomeMethodResult SomeProtocolSomeMethodResult) {
  ::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod> _response{SomeProtocolSomeMethodResult};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::ChannelTransport>
      _response_message{
          ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}
void fidl::internal::WireCompleterImpl<::test_anonymous::SomeProtocol::SomeMethod>::ReplySuccess(::test_anonymous::wire::BitsMember bits_member) {
  ::test_anonymous::wire::SomeProtocolSomeMethodResponse _response = ::test_anonymous::wire::SomeProtocolSomeMethodResponse{
      .bits_member = std::move(bits_member),
  };
  return MakeReply(::test_anonymous::wire::SomeProtocolSomeMethodResult::WithResponse(std::move(*&_response)));
}

void fidl::internal::WireCompleterImpl<::test_anonymous::SomeProtocol::SomeMethod>::ReplyError(::test_anonymous::wire::SomeProtocolSomeMethodError error) {
  return MakeReply(::test_anonymous::wire::SomeProtocolSomeMethodResult::WithErr(std::move(error)));
}

void fidl::internal::WireBufferCompleterImpl<::test_anonymous::SomeProtocol::SomeMethod>::Reply(::fit::result<::test_anonymous::wire::SomeProtocolSomeMethodError, ::test_anonymous::wire::SomeProtocolSomeMethodResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_anonymous::wire::SomeProtocolSomeMethodResult::WithResponse(std::move(*result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void fidl::internal::WireBufferCompleterImpl<::test_anonymous::SomeProtocol::SomeMethod>::MakeReply(::test_anonymous::wire::SomeProtocolSomeMethodResult SomeProtocolSomeMethodResult) {
  ::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod> _response{SomeProtocolSomeMethodResult};
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_anonymous::SomeProtocol::SomeMethod>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::ChannelTransport>
      _response_message(
          _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

fidl::internal::WireCompleterBase<::test_anonymous::SomeProtocol::SomeMethod>::WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
    : CompleterBase(transaction, owned, expects_reply),
      WireCompleterImpl(this) {}
fidl::internal::WireCompleterBase<::test_anonymous::SomeProtocol::SomeMethod>::WireCompleterBase(WireCompleterBase&& other) noexcept
    : CompleterBase(std::move(other)), WireCompleterImpl(this) {}

::fidl::internal::WireCompleterBase<::test_anonymous::SomeProtocol::SomeMethod>& fidl::internal::WireCompleterBase<::test_anonymous::SomeProtocol::SomeMethod>::operator=(WireCompleterBase&& other) noexcept {
  CompleterBase::operator=(std::move(other));
  WireCompleterImpl::_set_core(this);
  return *this;
}
void fidl::internal::WireBufferCompleterImpl<::test_anonymous::SomeProtocol::SomeMethod>::ReplySuccess(::test_anonymous::wire::BitsMember bits_member) {
  ::test_anonymous::wire::SomeProtocolSomeMethodResponse _response = ::test_anonymous::wire::SomeProtocolSomeMethodResponse{
      .bits_member = std::move(bits_member),
  };
  return MakeReply(::test_anonymous::wire::SomeProtocolSomeMethodResult::WithResponse(std::move(*&_response)));
}

void fidl::internal::WireBufferCompleterImpl<::test_anonymous::SomeProtocol::SomeMethod>::ReplyError(::test_anonymous::wire::SomeProtocolSomeMethodError error) {
  return MakeReply(::test_anonymous::wire::SomeProtocolSomeMethodResult::WithErr(std::move(error)));
}

::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>::TransactionalRequest() {
  ::fidl::InitTxnHeader(&header, 0, ::test_anonymous::kSomeProtocol_SomeMethod_Ordinal, ::test_anonymous::kSomeProtocol_SomeMethod_DynamicFlags);
}

::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>::TransactionalRequest(::test_anonymous::wire::UnionMember union_member, ::test_anonymous::wire::TableMember table_member)
    : body(::test_anonymous::wire::SomeProtocolSomeMethodRequest{union_member, table_member}) {
  ::fidl::InitTxnHeader(&header, 0, ::test_anonymous::kSomeProtocol_SomeMethod_Ordinal, ::test_anonymous::kSomeProtocol_SomeMethod_DynamicFlags);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
                                                                                                                                                                                              ::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<fidl_message_header_t>() = value->header;
  WireCodingTraits<::test_anonymous::wire::SomeProtocolSomeMethodRequest, WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  WireCodingTraits<::test_anonymous::wire::SomeProtocolSomeMethodRequest, WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position + sizeof(fidl_message_header_t), recursion_depth);
}

template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::WireCodingConstraintEmpty, false>;

::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>::WireResponse(::test_anonymous::wire::SomeProtocolSomeMethodResult SomeProtocolSomeMethodResult) : ::test_anonymous::wire::SomeProtocolSomeMethodResult(SomeProtocolSomeMethodResult) {}

::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>::TransactionalResponse(::test_anonymous::wire::SomeProtocolSomeMethodResult SomeProtocolSomeMethodResult)
    : body(::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>(SomeProtocolSomeMethodResult)) {
  ::fidl::InitTxnHeader(&header, 0, ::test_anonymous::kSomeProtocol_SomeMethod_Ordinal, ::test_anonymous::kSomeProtocol_SomeMethod_DynamicFlags);
}
::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>::TransactionalResponse() {
  ::fidl::InitTxnHeader(&header, 0, ::test_anonymous::kSomeProtocol_SomeMethod_Ordinal, ::test_anonymous::kSomeProtocol_SomeMethod_DynamicFlags);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  fidl::internal::WireCodingTraits<::test_anonymous::wire::SomeProtocolSomeMethodResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
}
template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  fidl::internal::WireCodingTraits<::test_anonymous::wire::SomeProtocolSomeMethodResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
}
template struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::WireCodingConstraintEmpty, false>;

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
                                                                                                                                                                                               ::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<fidl_message_header_t>() = value->header;
  WireCodingTraits<::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>, WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  WireCodingTraits<::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>, WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position + sizeof(fidl_message_header_t), recursion_depth);
}

template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_anonymous::SomeProtocol::SomeMethod>, ::fidl::internal::WireCodingConstraintEmpty, false>;

::fidl::WireResult<::test_anonymous::SomeProtocol::SomeMethod>
fidl::internal::WireSyncClientImpl<::test_anonymous::SomeProtocol>::SomeMethod(::test_anonymous::wire::UnionMember union_member, ::test_anonymous::wire::TableMember table_member) {
  ::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod> _request{union_member, table_member};
  return ::fidl::WireResult<::test_anonymous::SomeProtocol::SomeMethod>(
      ::fidl::UnownedClientEnd<::test_anonymous::SomeProtocol>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
}

::fidl::WireUnownedResult<::test_anonymous::SomeProtocol::SomeMethod>
fidl::internal::WireSyncBufferClientImpl<::test_anonymous::SomeProtocol>::SomeMethod(::test_anonymous::wire::UnionMember union_member, ::test_anonymous::wire::TableMember table_member) {
  ::fidl::internal::TransactionalRequest<::test_anonymous::SomeProtocol::SomeMethod> _request{union_member, table_member};
  return ::fidl::WireUnownedResult<::test_anonymous::SomeProtocol::SomeMethod>(
      ::fidl::UnownedClientEnd<::test_anonymous::SomeProtocol>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
}

#pragma clang diagnostic pop

#endif  // __Fuchsia__
