// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.arrays/cpp/wire_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_arrays::wire::StructSmallArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_arrays::wire::StructSmallArray* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (kIsMemcpyCompatible) {
    memcpy(position.As<void>(), value, sizeof(::test_arrays::wire::StructSmallArray));
  } else {
    internal::WireCodingTraits<::fidl::Array<uint32_t, 2>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(encoder, &value->a, position + 0, recursion_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_arrays::wire::StructSmallArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (!Base::are_members_memcpy_compatible) {
    internal::WireCodingTraits<::fidl::Array<uint32_t, 2>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + 0, recursion_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::StructSmallArray, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::StructSmallArray, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_arrays::wire::StructSmallArray>);
static_assert(offsetof(::test_arrays::wire::StructSmallArray, a) == 0);
static_assert(sizeof(::test_arrays::wire::StructSmallArray) == ::fidl::TypeTraits<::test_arrays::wire::StructSmallArray>::kPrimarySize);

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_arrays::wire::StructLargeArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_arrays::wire::StructLargeArray* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (kIsMemcpyCompatible) {
    memcpy(position.As<void>(), value, sizeof(::test_arrays::wire::StructLargeArray));
  } else {
    internal::WireCodingTraits<::fidl::Array<uint32_t, 100>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(encoder, &value->a, position + 0, recursion_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_arrays::wire::StructLargeArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (!Base::are_members_memcpy_compatible) {
    internal::WireCodingTraits<::fidl::Array<uint32_t, 100>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + 0, recursion_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::StructLargeArray, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::StructLargeArray, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_arrays::wire::StructLargeArray>);
static_assert(offsetof(::test_arrays::wire::StructLargeArray, a) == 0);
static_assert(sizeof(::test_arrays::wire::StructLargeArray) == ::fidl::TypeTraits<::test_arrays::wire::StructLargeArray>::kPrimarySize);

::test_arrays::wire::UnionSmallArray::UnionSmallArray() : ordinal_(::test_arrays::wire::UnionSmallArray::Ordinal::Invalid), envelope_{} {}
::test_arrays::wire::UnionSmallArray::Tag test_arrays::wire::UnionSmallArray::Which() const {
  ZX_ASSERT(!has_invalid_tag());
  return static_cast<::test_arrays::wire::UnionSmallArray::Tag>(ordinal_);
}

void ::test_arrays::wire::UnionSmallArray::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(UnionSmallArray) == sizeof(fidl_union_t));
  static_assert(offsetof(UnionSmallArray, ordinal_) == offsetof(fidl_union_t, tag));
  static_assert(offsetof(UnionSmallArray, envelope_) == offsetof(fidl_union_t, envelope));
}

bool test_arrays::wire::UnionSmallArray::has_invalid_tag() const { return ordinal_ == ::test_arrays::wire::UnionSmallArray::Ordinal::Invalid; }

bool test_arrays::wire::UnionSmallArray::is_a() const { return ordinal_ == ::test_arrays::wire::UnionSmallArray::Ordinal::kA; }
::test_arrays::wire::UnionSmallArray test_arrays::wire::UnionSmallArray::WithA(::fidl::ObjectView<::fidl::Array<uint32_t, 2>> val) {
  UnionSmallArray result;
  result.ordinal_ = ::test_arrays::wire::UnionSmallArray::Ordinal::kA;
  result.envelope_.As<::fidl::Array<uint32_t, 2>>().set_data(std::move(val));
  return result;
}

::fidl::Array<uint32_t, 2>& test_arrays::wire::UnionSmallArray::a() {
  ZX_ASSERT(ordinal_ == ::test_arrays::wire::UnionSmallArray::Ordinal::kA);
  return envelope_.As<::fidl::Array<uint32_t, 2>>().get_data();
}
const ::fidl::Array<uint32_t, 2>& test_arrays::wire::UnionSmallArray::a() const {
  ZX_ASSERT(ordinal_ == ::test_arrays::wire::UnionSmallArray::Ordinal::kA);
  return envelope_.As<::fidl::Array<uint32_t, 2>>().get_data();
}

static_assert(std::is_standard_layout_v<::test_arrays::wire::UnionSmallArray>);

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_arrays::wire::UnionSmallArray, Constraint, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_arrays::wire::UnionSmallArray* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

  if (unlikely(u->tag == 0)) {
    if constexpr (Constraint::is_optional) {
      *position.As<fidl_union_t>() = {};
      return;
    }
    encoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  *position.As<fidl_xunion_tag_t>() = u->tag;

  size_t encode_inline_size;
  switch (u->tag) {
    case 1:  // ::test_arrays::wire::UnionSmallArray::Tag::kA
      encode_inline_size = ::fidl::internal::WireCodingTraits<::fidl::Array<uint32_t, 2>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      encode_inline_size = 0;
      break;
  }
  ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
  switch (u->tag) {
    case 1:  // ::test_arrays::wire::UnionSmallArray::Tag::kA
      encode_fn = ::fidl::internal::MakeEncodeFn<::fidl::Array<uint32_t, 2>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      encode_fn = nullptr;
      break;
  }
  WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_arrays::wire::UnionSmallArray, Constraint, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_arrays::wire::UnionSmallArray::Tag tag = *position.As<::test_arrays::wire::UnionSmallArray::Tag>();
  if (unlikely(static_cast<uint64_t>(tag) == 0)) {
    if constexpr (!Constraint::is_optional) {
      decoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
      return;
    }
    if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
      decoder->SetError(::fidl::internal::kCodingErrorZeroTagButNonZeroEnvelope);
    }
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  size_t decode_inline_size;
  switch (tag) {
    case ::test_arrays::wire::UnionSmallArray::Tag::kA:
      decode_inline_size = ::fidl::internal::WireCodingTraits<::fidl::Array<uint32_t, 2>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      decode_inline_size = 0;
      break;
  }
  DecodeFn<IsRecursive> decode_fn;
  switch (tag) {
    case ::test_arrays::wire::UnionSmallArray::Tag::kA:
      decode_fn = ::fidl::internal::MakeDecodeFn<::fidl::Array<uint32_t, 2>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      decode_fn = nullptr;
      break;
  }
  ::fidl::internal::WireDecodeStrictEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionSmallArray, ::fidl::internal::WireCodingConstraintUnion<false>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionSmallArray, ::fidl::internal::WireCodingConstraintUnion<false>, false>;
template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionSmallArray, ::fidl::internal::WireCodingConstraintUnion<true>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionSmallArray, ::fidl::internal::WireCodingConstraintUnion<true>, false>;

::test_arrays::wire::UnionLargeArray::UnionLargeArray() : ordinal_(::test_arrays::wire::UnionLargeArray::Ordinal::Invalid), envelope_{} {}
::test_arrays::wire::UnionLargeArray::Tag test_arrays::wire::UnionLargeArray::Which() const {
  ZX_ASSERT(!has_invalid_tag());
  return static_cast<::test_arrays::wire::UnionLargeArray::Tag>(ordinal_);
}

void ::test_arrays::wire::UnionLargeArray::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(UnionLargeArray) == sizeof(fidl_union_t));
  static_assert(offsetof(UnionLargeArray, ordinal_) == offsetof(fidl_union_t, tag));
  static_assert(offsetof(UnionLargeArray, envelope_) == offsetof(fidl_union_t, envelope));
}

bool test_arrays::wire::UnionLargeArray::has_invalid_tag() const { return ordinal_ == ::test_arrays::wire::UnionLargeArray::Ordinal::Invalid; }

bool test_arrays::wire::UnionLargeArray::is_a() const { return ordinal_ == ::test_arrays::wire::UnionLargeArray::Ordinal::kA; }
::test_arrays::wire::UnionLargeArray test_arrays::wire::UnionLargeArray::WithA(::fidl::ObjectView<::fidl::Array<uint32_t, 100>> val) {
  UnionLargeArray result;
  result.ordinal_ = ::test_arrays::wire::UnionLargeArray::Ordinal::kA;
  result.envelope_.As<::fidl::Array<uint32_t, 100>>().set_data(std::move(val));
  return result;
}

::fidl::Array<uint32_t, 100>& test_arrays::wire::UnionLargeArray::a() {
  ZX_ASSERT(ordinal_ == ::test_arrays::wire::UnionLargeArray::Ordinal::kA);
  return envelope_.As<::fidl::Array<uint32_t, 100>>().get_data();
}
const ::fidl::Array<uint32_t, 100>& test_arrays::wire::UnionLargeArray::a() const {
  ZX_ASSERT(ordinal_ == ::test_arrays::wire::UnionLargeArray::Ordinal::kA);
  return envelope_.As<::fidl::Array<uint32_t, 100>>().get_data();
}

static_assert(std::is_standard_layout_v<::test_arrays::wire::UnionLargeArray>);

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_arrays::wire::UnionLargeArray, Constraint, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_arrays::wire::UnionLargeArray* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

  if (unlikely(u->tag == 0)) {
    if constexpr (Constraint::is_optional) {
      *position.As<fidl_union_t>() = {};
      return;
    }
    encoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  *position.As<fidl_xunion_tag_t>() = u->tag;

  size_t encode_inline_size;
  switch (u->tag) {
    case 1:  // ::test_arrays::wire::UnionLargeArray::Tag::kA
      encode_inline_size = ::fidl::internal::WireCodingTraits<::fidl::Array<uint32_t, 100>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      encode_inline_size = 0;
      break;
  }
  ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
  switch (u->tag) {
    case 1:  // ::test_arrays::wire::UnionLargeArray::Tag::kA
      encode_fn = ::fidl::internal::MakeEncodeFn<::fidl::Array<uint32_t, 100>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      encode_fn = nullptr;
      break;
  }
  WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_arrays::wire::UnionLargeArray, Constraint, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_arrays::wire::UnionLargeArray::Tag tag = *position.As<::test_arrays::wire::UnionLargeArray::Tag>();
  if (unlikely(static_cast<uint64_t>(tag) == 0)) {
    if constexpr (!Constraint::is_optional) {
      decoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
      return;
    }
    if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
      decoder->SetError(::fidl::internal::kCodingErrorZeroTagButNonZeroEnvelope);
    }
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  size_t decode_inline_size;
  switch (tag) {
    case ::test_arrays::wire::UnionLargeArray::Tag::kA:
      decode_inline_size = ::fidl::internal::WireCodingTraits<::fidl::Array<uint32_t, 100>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      decode_inline_size = 0;
      break;
  }
  DecodeFn<IsRecursive> decode_fn;
  switch (tag) {
    case ::test_arrays::wire::UnionLargeArray::Tag::kA:
      decode_fn = ::fidl::internal::MakeDecodeFn<::fidl::Array<uint32_t, 100>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      decode_fn = nullptr;
      break;
  }
  ::fidl::internal::WireDecodeStrictEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionLargeArray, ::fidl::internal::WireCodingConstraintUnion<false>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionLargeArray, ::fidl::internal::WireCodingConstraintUnion<false>, false>;
template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionLargeArray, ::fidl::internal::WireCodingConstraintUnion<true>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionLargeArray, ::fidl::internal::WireCodingConstraintUnion<true>, false>;

bool ::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
  if (!a_.has_data()) {
    max_ordinal = 1;
  }
  return max_ordinal;
}

::test_arrays::wire::TableSmallArray::TableSmallArray(::fidl::AnyArena& allocator)
    : frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>(allocator)) {}

::test_arrays::wire::TableSmallArray::TableSmallArray(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>&& frame)
    : frame_ptr_(std::move(frame)) {}

void test_arrays::wire::TableSmallArray::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>(allocator);
}
void test_arrays::wire::TableSmallArray::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_arrays::wire::TableSmallArray::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_arrays::wire::TableSmallArray::HasUnknownData() const {
  if (max_ordinal_ > 1) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

::fidl::Array<uint32_t, 2>& test_arrays::wire::TableSmallArray::a() const {
  ZX_ASSERT(has_a());
  return frame_ptr_->a_.get_data();
}

bool test_arrays::wire::TableSmallArray::has_a() const {
  return max_ordinal_ >= 1 && frame_ptr_->a_.has_data();
}

::test_arrays::wire::TableSmallArray& test_arrays::wire::TableSmallArray::clear_a() {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.clear_data();
  max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
  return *this;
}

::test_arrays::wire::TableSmallArray& test_arrays::wire::TableSmallArray::set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 2>> elem) {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.set_data(elem);
  max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
  return *this;
}

::test_arrays::wire::TableSmallArray& test_arrays::wire::TableSmallArray::set_a(std::nullptr_t) {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.set_data(nullptr);
  return *this;
}

::fidl::WireTableBuilder<::test_arrays::wire::TableSmallArray> test_arrays::wire::TableSmallArray::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_arrays::wire::TableSmallArray>(arena);
}
::fidl::WireTableExternalBuilder<::test_arrays::wire::TableSmallArray> test_arrays::wire::TableSmallArray::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableSmallArray>(std::move(frame));
}

template <typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>&& frame)
    : table_(std::move(frame)) {}

template <typename BuilderImpl>
::test_arrays::wire::TableSmallArray fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_arrays::wire::TableSmallArray t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
template <typename BuilderImpl>
bool fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, BuilderImpl>::has_a() const {
  return table_.has_a();
}

template <typename BuilderImpl>
void fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, BuilderImpl>::clear_a() {
  table_.clear_a();
}

template <typename BuilderImpl>
::fidl::Array<uint32_t, 2>& fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, BuilderImpl>::a() const {
  return table_.a();
}
template <typename BuilderImpl>
BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, BuilderImpl>::a(Wrapper_Ignore_Me_<::fidl::ObjectView<::fidl::Array<uint32_t, 2>>> elem) {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
  table_.frame_ptr_->a_.set_data(elem.value);
  table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
  return *static_cast<BuilderImpl*>(this);
}

template class fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, ::fidl::WireTableBuilder<::test_arrays::wire::TableSmallArray>>;
template class fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableSmallArray>>;

::fidl::WireTableBuilder<::test_arrays::wire::TableSmallArray>::WireTableBuilder(::fidl::AnyArena& arena)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>(arena)),
      arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_arrays::wire::TableSmallArray>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>* frame)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_arrays::wire::TableSmallArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_arrays::wire::TableSmallArray* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
      Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {
    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<::fidl::Array<uint32_t, 2>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<::fidl::Array<uint32_t, 2>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_arrays::wire::TableSmallArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {
    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<::fidl::Array<uint32_t, 2>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch (i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<::fidl::Array<uint32_t, 2>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::TableSmallArray, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::TableSmallArray, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_arrays::wire::TableSmallArray>);

bool ::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
  if (!a_.has_data()) {
    max_ordinal = 1;
  }
  return max_ordinal;
}

::test_arrays::wire::TableLargeArray::TableLargeArray(::fidl::AnyArena& allocator)
    : frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>(allocator)) {}

::test_arrays::wire::TableLargeArray::TableLargeArray(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>&& frame)
    : frame_ptr_(std::move(frame)) {}

void test_arrays::wire::TableLargeArray::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>(allocator);
}
void test_arrays::wire::TableLargeArray::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_arrays::wire::TableLargeArray::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_arrays::wire::TableLargeArray::HasUnknownData() const {
  if (max_ordinal_ > 1) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

::fidl::Array<uint32_t, 100>& test_arrays::wire::TableLargeArray::a() const {
  ZX_ASSERT(has_a());
  return frame_ptr_->a_.get_data();
}

bool test_arrays::wire::TableLargeArray::has_a() const {
  return max_ordinal_ >= 1 && frame_ptr_->a_.has_data();
}

::test_arrays::wire::TableLargeArray& test_arrays::wire::TableLargeArray::clear_a() {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.clear_data();
  max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
  return *this;
}

::test_arrays::wire::TableLargeArray& test_arrays::wire::TableLargeArray::set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 100>> elem) {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.set_data(elem);
  max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
  return *this;
}

::test_arrays::wire::TableLargeArray& test_arrays::wire::TableLargeArray::set_a(std::nullptr_t) {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.set_data(nullptr);
  return *this;
}

::fidl::WireTableBuilder<::test_arrays::wire::TableLargeArray> test_arrays::wire::TableLargeArray::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_arrays::wire::TableLargeArray>(arena);
}
::fidl::WireTableExternalBuilder<::test_arrays::wire::TableLargeArray> test_arrays::wire::TableLargeArray::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableLargeArray>(std::move(frame));
}

template <typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>&& frame)
    : table_(std::move(frame)) {}

template <typename BuilderImpl>
::test_arrays::wire::TableLargeArray fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_arrays::wire::TableLargeArray t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
template <typename BuilderImpl>
bool fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, BuilderImpl>::has_a() const {
  return table_.has_a();
}

template <typename BuilderImpl>
void fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, BuilderImpl>::clear_a() {
  table_.clear_a();
}

template <typename BuilderImpl>
::fidl::Array<uint32_t, 100>& fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, BuilderImpl>::a() const {
  return table_.a();
}
template <typename BuilderImpl>
BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, BuilderImpl>::a(Wrapper_Ignore_Me_<::fidl::ObjectView<::fidl::Array<uint32_t, 100>>> elem) {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ZX_DEBUG_ASSERT(elem.value.get() != nullptr);
  table_.frame_ptr_->a_.set_data(elem.value);
  table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
  return *static_cast<BuilderImpl*>(this);
}

template class fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, ::fidl::WireTableBuilder<::test_arrays::wire::TableLargeArray>>;
template class fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableLargeArray>>;

::fidl::WireTableBuilder<::test_arrays::wire::TableLargeArray>::WireTableBuilder(::fidl::AnyArena& arena)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>(arena)),
      arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_arrays::wire::TableLargeArray>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>* frame)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_arrays::wire::TableLargeArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_arrays::wire::TableLargeArray* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
      Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {
    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<::fidl::Array<uint32_t, 100>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<::fidl::Array<uint32_t, 100>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_arrays::wire::TableLargeArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {
    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<::fidl::Array<uint32_t, 100>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch (i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<::fidl::Array<uint32_t, 100>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::TableLargeArray, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::TableLargeArray, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_arrays::wire::TableLargeArray>);

#pragma clang diagnostic pop
