// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <lib/fidl/cpp/wire/array.h>
#include <lib/fidl/cpp/wire/envelope.h>
#include <lib/fidl/cpp/wire/internal/framework_err.h>
#include <lib/fidl/cpp/wire/message.h>
#include <lib/fidl/cpp/wire/message_storage.h>
#include <lib/fidl/cpp/wire/object_view.h>
#include <lib/fidl/cpp/wire/string_view.h>
#include <lib/fidl/cpp/wire/traits.h>
#include <lib/fidl/cpp/wire/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.versions/cpp/common_types.h>
#include <fidl/test.versions/cpp/markers.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_versions {

namespace wire {
using Bits = ::test_versions::Bits;

using Enum = ::test_versions::Enum;

struct Struct;

class Table;

class Union;

using Alias = ::fidl::StringView;

#ifdef __Fuchsia__

struct Struct {
  uint32_t x = {};

  void _CloseHandles();
};

}  // namespace wire
}  // namespace test_versions

template <>
class ::fidl::WireTableBuilder<::test_versions::wire::Table>;
template <>
class ::fidl::WireTableExternalBuilder<::test_versions::wire::Table>;

template <>
struct ::fidl::WireTableFrame<::test_versions::wire::Table> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;
  ::fidl::Envelope<uint32_t> x_;

  friend class ::test_versions::wire::Table;
  friend ::fidl::internal::WireTableBaseBuilder<::test_versions::wire::Table, ::fidl::WireTableBuilder<::test_versions::wire::Table>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_versions::wire::Table, ::fidl::WireTableExternalBuilder<::test_versions::wire::Table>>;
};

namespace test_versions {
namespace wire {

class Table {
 public:
  Table() = default;
  Table(const Table& other) noexcept = default;
  Table& operator=(const Table& other) noexcept = default;
  Table(Table&& other) noexcept = default;
  Table& operator=(Table&& other) noexcept = default;

  ~Table() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;
  void _CloseHandles();

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_versions::wire::Table> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_versions::wire::Table> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_versions::wire::Table>> frame);

  [[nodiscard]] uint32_t& x() const;
  [[nodiscard]] bool has_x() const;
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
 public:
#else   // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
 private:
#endif  // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  Table& set_x(uint32_t elem);

  Table& clear_x();

  explicit Table(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit Table(::fidl::ObjectView<::fidl::WireTableFrame<::test_versions::wire::Table>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_versions::wire::Table>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_versions::wire::Table, ::fidl::WireTableBuilder<::test_versions::wire::Table>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_versions::wire::Table, ::fidl::WireTableExternalBuilder<::test_versions::wire::Table>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_versions::wire::Table>> frame_ptr_;
};
}  // namespace wire
}  // namespace test_versions

template <typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_versions::wire::Table, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_versions::wire::Table Build();
  [[nodiscard]] bool has_x() const;

  // Clears the x field.
  //
  // This method should be used sparingly, such as only during tests, as it has
  // O(number_of_fields) complexity.
  void clear_x();

  // Getter for x.
  //

  [[nodiscard]] uint32_t& x() const;

  // Setter for x.
  //

  BuilderImpl& x(uint32_t elem);

 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_versions::wire::Table>>&& frame);

 private:
  ::test_versions::wire::Table table_;
};

template <>
class ::fidl::WireTableBuilder<::test_versions::wire::Table> final : public ::fidl::internal::WireTableBaseBuilder<::test_versions::wire::Table, ::fidl::WireTableBuilder<::test_versions::wire::Table>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_versions::wire::Table, ::fidl::WireTableBuilder<::test_versions::wire::Table>>;

 public:
 private:
  friend class ::test_versions::wire::Table;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;
};

template <>
class ::fidl::WireTableExternalBuilder<::test_versions::wire::Table> final : public ::fidl::internal::WireTableBaseBuilder<::test_versions::wire::Table, ::fidl::WireTableExternalBuilder<::test_versions::wire::Table>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_versions::wire::Table, ::fidl::WireTableExternalBuilder<::test_versions::wire::Table>>;

 private:
  friend class ::test_versions::wire::Table;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_versions::wire::Table>* frame);
};
namespace test_versions {
namespace wire {

class Union {
 public:
  Union();

  ~Union();
  Union(Union&& other);
  Union& operator=(Union&& other);

  enum class Tag : fidl_xunion_tag_t {
    kX = 1,  // 0x1
    _do_not_handle_this__write_a_default_case_instead = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };
  bool IsUnknown() const {
    return Which() == ::test_versions::wire::Union::Tag::_do_not_handle_this__write_a_default_case_instead;
  }

  bool has_invalid_tag() const;

  bool is_x() const;

  static Union WithX(uint32_t val);

  uint32_t& x();

  const uint32_t& x() const;

  ::test_versions::wire::Union::Tag Which() const;
  void _CloseHandles();

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kX = 1,  // 0x1
  };
  void _Move(Union&& other);

  static void SizeAndOffsetAssertionHelper();
  ::test_versions::wire::Union::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

#endif  // __Fuchsia__

constexpr uint32_t kConst = 0u;

constexpr bool kAddedAtNext = true;

constexpr bool kAddedAtHead = true;

}  // namespace wire
}  // namespace test_versions
namespace fidl {

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_versions::wire::Bits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = true;
  static void Encode(internal::WireEncoder* encoder, ::test_versions::wire::Bits* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_versions::wire::Enum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = true;

  static void Encode(internal::WireEncoder* encoder, ::test_versions::wire::Enum* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

#ifdef __Fuchsia__

template <>
struct IsResource<::test_versions::wire::Struct> : public std::true_type {};

template <>
struct TypeTraits<::test_versions::wire::Struct> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 4;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<::test_versions::wire::Struct> : public std::true_type {};
template <>
struct IsWire<::test_versions::wire::Struct> : public std::true_type {};
template <>
struct IsStruct<::test_versions::wire::Struct> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_versions::wire::Struct, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = 4;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<::test_versions::wire::Struct, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool kIsMemcpyCompatible = Base::kIsMemcpyCompatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_versions::wire::Struct* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct IsResource<::test_versions::wire::Table> : public std::true_type {};

template <>
struct TypeTraits<::test_versions::wire::Table> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_versions::wire::Table> : public std::true_type {};
template <>
struct IsWire<::test_versions::wire::Table> : public std::true_type {};
template <>
struct IsTable<::test_versions::wire::Table> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_versions::wire::Table, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_versions::wire::Table* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct IsResource<::test_versions::wire::Union> : public std::true_type {};

template <>
struct TypeTraits<::test_versions::wire::Union> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_versions::wire::Union> : public std::true_type {};
template <>
struct IsWire<::test_versions::wire::Union> : public std::true_type {};
template <>
struct IsUnion<::test_versions::wire::Union> : public std::true_type {};

template <typename Constraint, bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_versions::wire::Union, Constraint, IsRecursive> {
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_versions::wire::Union* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);

  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

// Top-level union.
template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_versions::wire::Union, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public ::fidl::internal::WireCodingTraits<::test_versions::wire::Union, ::fidl::internal::WireCodingConstraintUnion<false>, IsRecursive> {};

#endif  // __Fuchsia__

#pragma clang diagnostic pop

}  // namespace fidl
