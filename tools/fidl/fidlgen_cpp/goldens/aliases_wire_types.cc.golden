// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.aliases/cpp/wire_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_aliases::wire::ObjType, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_aliases::wire::ObjType* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  switch (*value) {
    case ::test_aliases::wire::ObjType::kNone:
    case ::test_aliases::wire::ObjType::kChannel:
      break;
    default:
      encoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
      return;
  }
  *position.As<::test_aliases::wire::ObjType>() = *value;
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_aliases::wire::ObjType, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  [[maybe_unused]] ::test_aliases::wire::ObjType value = *position.As<::test_aliases::wire::ObjType>();
  switch (value) {
    case ::test_aliases::wire::ObjType::kNone:
    case ::test_aliases::wire::ObjType::kChannel:
      break;
    default:
      decoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
      return;
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_aliases::wire::ObjType, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_aliases::wire::ObjType, ::fidl::internal::WireCodingConstraintEmpty, false>;

#ifdef __Fuchsia__

void ::test_aliases::wire::ExampleOfUseOfAliases::_CloseHandles() {
  field_of_channel.reset();
  field_of_client_end.reset();
  field_of_nullable_client_end.reset();
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_aliases::wire::ExampleOfUseOfAliases, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_aliases::wire::ExampleOfUseOfAliases* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (kIsMemcpyCompatible) {
    memcpy(position.As<void>(), value, sizeof(::test_aliases::wire::ExampleOfUseOfAliases));
  } else {
    internal::WireZeroPadding<uint64_t>(encoder, position + 0);
    internal::WireZeroPadding<uint64_t>(encoder, position + 80);
    internal::WireCodingTraits<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(encoder, &value->field_of_u32, position + 0, recursion_depth);
    internal::WireCodingTraits<::fidl::VectorView<::fidl::StringView>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintString<false>, false>, IsRecursive>::Encode(encoder, &value->field_of_vec_of_strings, position + 8, recursion_depth);
    internal::WireCodingTraits<::fidl::VectorView<::fidl::StringView>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintString<false>, false, 9>, IsRecursive>::Encode(encoder, &value->field_of_vec_of_strings_at_most_nine, position + 24, recursion_depth);
    internal::WireCodingTraits<::fidl::VectorView<::fidl::StringView>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintString<false>, false, 5>, IsRecursive>::Encode(encoder, &value->field_of_vec_of_strings_at_most_5, position + 40, recursion_depth);
    internal::WireCodingTraits<::fidl::VectorView<::test_someotherlibrary::wire::ReferenceMe>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 5>, IsRecursive>::Encode(encoder, &value->field_of_vec_of_ref_me_at_most_5, position + 56, recursion_depth);
    internal::WireCodingTraits<::zx::channel, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, 0x80000000, false>, IsRecursive>::Encode(encoder, &value->field_of_channel, position + 72, recursion_depth);
    internal::WireCodingTraits<::zx::channel, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, 0x80000000, false>, IsRecursive>::Encode(encoder, &value->field_of_client_end, position + 76, recursion_depth);
    internal::WireCodingTraits<::zx::channel, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, 0x80000000, true>, IsRecursive>::Encode(encoder, &value->field_of_nullable_client_end, position + 80, recursion_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_aliases::wire::ExampleOfUseOfAliases, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (!Base::are_members_memcpy_compatible) {
    internal::WireCodingTraits<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + 0, recursion_depth);
    internal::WireCodingTraits<::fidl::VectorView<::fidl::StringView>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintString<false>, false>, IsRecursive>::Decode(
        decoder, position + 8, recursion_depth);
    internal::WireCodingTraits<::fidl::VectorView<::fidl::StringView>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintString<false>, false, 9>, IsRecursive>::Decode(
        decoder, position + 24, recursion_depth);
    internal::WireCodingTraits<::fidl::VectorView<::fidl::StringView>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintString<false>, false, 5>, IsRecursive>::Decode(
        decoder, position + 40, recursion_depth);
    internal::WireCodingTraits<::fidl::VectorView<::test_someotherlibrary::wire::ReferenceMe>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false, 5>, IsRecursive>::Decode(
        decoder, position + 56, recursion_depth);
    internal::WireCodingTraits<::zx::channel, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, 0x80000000, false>, IsRecursive>::Decode(
        decoder, position + 72, recursion_depth);
    internal::WireCodingTraits<::zx::channel, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, 0x80000000, false>, IsRecursive>::Decode(
        decoder, position + 76, recursion_depth);
    internal::WireCodingTraits<::zx::channel, fidl::internal::WireCodingConstraintHandle<ZX_OBJ_TYPE_CHANNEL, 0x80000000, true>, IsRecursive>::Decode(
        decoder, position + 80, recursion_depth);
  }
  internal::WireCheckPadding<uint64_t>(decoder, position + 0, 0xffffffff00000000);
  internal::WireCheckPadding<uint64_t>(decoder, position + 80, 0xffffffff00000000);
}

template struct ::fidl::internal::WireCodingTraits<::test_aliases::wire::ExampleOfUseOfAliases, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_aliases::wire::ExampleOfUseOfAliases, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_aliases::wire::ExampleOfUseOfAliases>);
static_assert(offsetof(::test_aliases::wire::ExampleOfUseOfAliases, field_of_u32) == 0);
static_assert(offsetof(::test_aliases::wire::ExampleOfUseOfAliases, field_of_vec_of_strings) == 8);
static_assert(offsetof(::test_aliases::wire::ExampleOfUseOfAliases, field_of_vec_of_strings_at_most_nine) == 24);
static_assert(offsetof(::test_aliases::wire::ExampleOfUseOfAliases, field_of_vec_of_strings_at_most_5) == 40);
static_assert(offsetof(::test_aliases::wire::ExampleOfUseOfAliases, field_of_vec_of_ref_me_at_most_5) == 56);
static_assert(offsetof(::test_aliases::wire::ExampleOfUseOfAliases, field_of_channel) == 72);
static_assert(offsetof(::test_aliases::wire::ExampleOfUseOfAliases, field_of_client_end) == 76);
static_assert(offsetof(::test_aliases::wire::ExampleOfUseOfAliases, field_of_nullable_client_end) == 80);
static_assert(sizeof(::test_aliases::wire::ExampleOfUseOfAliases) == ::fidl::TypeTraits<::test_aliases::wire::ExampleOfUseOfAliases>::kPrimarySize);

#endif  // __Fuchsia__

#pragma clang diagnostic pop
