// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.nullable/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_nullable::StructWithNullableString::StructWithNullableString(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_nullable::StructWithNullableString::StructWithNullableString(::std::optional<::std::string> val) noexcept
    : storage_({.val = std::move(val)}) {}

::test_nullable::StructWithNullableString::StructWithNullableString(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : StructWithNullableString(Storage_{
                                                                                                                                      .val = {},
                                                                                                                                  }) {}
::test_nullable::StructWithNullableString::StructWithNullableString(const ::test_nullable::StructWithNullableString& other) noexcept : ::test_nullable::StructWithNullableString(other.CloneStorage_()) {}

::test_nullable::StructWithNullableString& test_nullable::StructWithNullableString::operator=(const ::test_nullable::StructWithNullableString& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_nullable::StructWithNullableString::operator==(const StructWithNullableString& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_nullable::StructWithNullableString, 16>::Equal(this, &other);
}

bool test_nullable::StructWithNullableString::operator!=(const StructWithNullableString& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_nullable::StructWithNullableString, 16>::Equal(this, &other);
}

::test_nullable::StructWithNullableString::Storage_ test_nullable::StructWithNullableString::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.val)};
}
const ::std::optional<::std::string>&
test_nullable::StructWithNullableString::val() const {
  return storage_.val;
}

::std::optional<::std::string>& ::test_nullable::StructWithNullableString::val() {
  return storage_.val;
}

::test_nullable::StructWithNullableString& ::test_nullable::StructWithNullableString::val(::std::optional<::std::string> value) {
  storage_.val = std::move(value);
  return *this;
}

::test_nullable::StructWithNullableVector::StructWithNullableVector(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_nullable::StructWithNullableVector::StructWithNullableVector(::std::optional<::std::vector<int32_t>> val) noexcept
    : storage_({.val = std::move(val)}) {}

::test_nullable::StructWithNullableVector::StructWithNullableVector(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : StructWithNullableVector(Storage_{
                                                                                                                                      .val = {},
                                                                                                                                  }) {}
::test_nullable::StructWithNullableVector::StructWithNullableVector(const ::test_nullable::StructWithNullableVector& other) noexcept : ::test_nullable::StructWithNullableVector(other.CloneStorage_()) {}

::test_nullable::StructWithNullableVector& test_nullable::StructWithNullableVector::operator=(const ::test_nullable::StructWithNullableVector& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_nullable::StructWithNullableVector::operator==(const StructWithNullableVector& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_nullable::StructWithNullableVector, 16>::Equal(this, &other);
}

bool test_nullable::StructWithNullableVector::operator!=(const StructWithNullableVector& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_nullable::StructWithNullableVector, 16>::Equal(this, &other);
}

::test_nullable::StructWithNullableVector::Storage_ test_nullable::StructWithNullableVector::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.val)};
}
const ::std::optional<::std::vector<int32_t>>&
test_nullable::StructWithNullableVector::val() const {
  return storage_.val;
}

::std::optional<::std::vector<int32_t>>& ::test_nullable::StructWithNullableVector::val() {
  return storage_.val;
}

::test_nullable::StructWithNullableVector& ::test_nullable::StructWithNullableVector::val(::std::optional<::std::vector<int32_t>> value) {
  storage_.val = std::move(value);
  return *this;
}
#ifdef __Fuchsia__

::test_nullable::StructWithNullableHandle::StructWithNullableHandle(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_nullable::StructWithNullableHandle::StructWithNullableHandle(::zx::vmo val) noexcept
    : storage_({.val = std::move(val)}) {}

::test_nullable::StructWithNullableHandle::StructWithNullableHandle(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : StructWithNullableHandle(Storage_{
                                                                                                                                      .val = {},
                                                                                                                                  }) {}
const ::zx::vmo&
test_nullable::StructWithNullableHandle::val() const {
  return storage_.val;
}

::zx::vmo& ::test_nullable::StructWithNullableHandle::val() {
  return storage_.val;
}

::test_nullable::StructWithNullableHandle& ::test_nullable::StructWithNullableHandle::val(::zx::vmo value) {
  storage_.val = std::move(value);
  return *this;
}

#endif  // __Fuchsia__

::test_nullable::SimpleProtocolAddRequest::SimpleProtocolAddRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_nullable::SimpleProtocolAddRequest::SimpleProtocolAddRequest(int32_t a, int32_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_nullable::SimpleProtocolAddRequest::SimpleProtocolAddRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : SimpleProtocolAddRequest(Storage_{
                                                                                                                                      .a = {},
                                                                                                                                      .b = {},
                                                                                                                                  }) {}
::test_nullable::SimpleProtocolAddRequest::SimpleProtocolAddRequest(const ::test_nullable::SimpleProtocolAddRequest& other) noexcept : ::test_nullable::SimpleProtocolAddRequest(other.CloneStorage_()) {}

::test_nullable::SimpleProtocolAddRequest& test_nullable::SimpleProtocolAddRequest::operator=(const ::test_nullable::SimpleProtocolAddRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_nullable::SimpleProtocolAddRequest::operator==(const SimpleProtocolAddRequest& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_nullable::SimpleProtocolAddRequest, 8>::Equal(this, &other);
}

bool test_nullable::SimpleProtocolAddRequest::operator!=(const SimpleProtocolAddRequest& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_nullable::SimpleProtocolAddRequest, 8>::Equal(this, &other);
}

::test_nullable::SimpleProtocolAddRequest::Storage_ test_nullable::SimpleProtocolAddRequest::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
int32_t
test_nullable::SimpleProtocolAddRequest::a() const {
  return storage_.a;
}

int32_t& ::test_nullable::SimpleProtocolAddRequest::a() {
  return storage_.a;
}

::test_nullable::SimpleProtocolAddRequest& ::test_nullable::SimpleProtocolAddRequest::a(int32_t value) {
  storage_.a = std::move(value);
  return *this;
}
int32_t
test_nullable::SimpleProtocolAddRequest::b() const {
  return storage_.b;
}

int32_t& ::test_nullable::SimpleProtocolAddRequest::b() {
  return storage_.b;
}

::test_nullable::SimpleProtocolAddRequest& ::test_nullable::SimpleProtocolAddRequest::b(int32_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_nullable::SimpleProtocolAddResponse::SimpleProtocolAddResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_nullable::SimpleProtocolAddResponse::SimpleProtocolAddResponse(int32_t sum) noexcept
    : storage_({.sum = std::move(sum)}) {}

::test_nullable::SimpleProtocolAddResponse::SimpleProtocolAddResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : SimpleProtocolAddResponse(Storage_{
                                                                                                                                        .sum = {},
                                                                                                                                    }) {}
::test_nullable::SimpleProtocolAddResponse::SimpleProtocolAddResponse(const ::test_nullable::SimpleProtocolAddResponse& other) noexcept : ::test_nullable::SimpleProtocolAddResponse(other.CloneStorage_()) {}

::test_nullable::SimpleProtocolAddResponse& test_nullable::SimpleProtocolAddResponse::operator=(const ::test_nullable::SimpleProtocolAddResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_nullable::SimpleProtocolAddResponse::operator==(const SimpleProtocolAddResponse& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_nullable::SimpleProtocolAddResponse, 4>::Equal(this, &other);
}

bool test_nullable::SimpleProtocolAddResponse::operator!=(const SimpleProtocolAddResponse& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_nullable::SimpleProtocolAddResponse, 4>::Equal(this, &other);
}

::test_nullable::SimpleProtocolAddResponse::Storage_ test_nullable::SimpleProtocolAddResponse::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.sum)};
}
int32_t
test_nullable::SimpleProtocolAddResponse::sum() const {
  return storage_.sum;
}

int32_t& ::test_nullable::SimpleProtocolAddResponse::sum() {
  return storage_.sum;
}

::test_nullable::SimpleProtocolAddResponse& ::test_nullable::SimpleProtocolAddResponse::sum(int32_t value) {
  storage_.sum = std::move(value);
  return *this;
}
#ifdef __Fuchsia__

::test_nullable::StructWithNullableProtocol::StructWithNullableProtocol(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_nullable::StructWithNullableProtocol::StructWithNullableProtocol(::fidl::ClientEnd<::test_nullable::SimpleProtocol> val) noexcept
    : storage_({.val = std::move(val)}) {}

::test_nullable::StructWithNullableProtocol::StructWithNullableProtocol(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : StructWithNullableProtocol(Storage_{
                                                                                                                                          .val = {},
                                                                                                                                      }) {}
const ::fidl::ClientEnd<::test_nullable::SimpleProtocol>&
test_nullable::StructWithNullableProtocol::val() const {
  return storage_.val;
}

::fidl::ClientEnd<::test_nullable::SimpleProtocol>& ::test_nullable::StructWithNullableProtocol::val() {
  return storage_.val;
}

::test_nullable::StructWithNullableProtocol& ::test_nullable::StructWithNullableProtocol::val(::fidl::ClientEnd<::test_nullable::SimpleProtocol> value) {
  storage_.val = std::move(value);
  return *this;
}

::test_nullable::StructWithNullableRequest::StructWithNullableRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_nullable::StructWithNullableRequest::StructWithNullableRequest(::fidl::ServerEnd<::test_nullable::SimpleProtocol> val) noexcept
    : storage_({.val = std::move(val)}) {}

::test_nullable::StructWithNullableRequest::StructWithNullableRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : StructWithNullableRequest(Storage_{
                                                                                                                                        .val = {},
                                                                                                                                    }) {}
const ::fidl::ServerEnd<::test_nullable::SimpleProtocol>&
test_nullable::StructWithNullableRequest::val() const {
  return storage_.val;
}

::fidl::ServerEnd<::test_nullable::SimpleProtocol>& ::test_nullable::StructWithNullableRequest::val() {
  return storage_.val;
}

::test_nullable::StructWithNullableRequest& ::test_nullable::StructWithNullableRequest::val(::fidl::ServerEnd<::test_nullable::SimpleProtocol> value) {
  storage_.val = std::move(value);
  return *this;
}

#endif  // __Fuchsia__

::test_nullable::Int32Wrapper::Int32Wrapper(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_nullable::Int32Wrapper::Int32Wrapper(int32_t val) noexcept
    : storage_({.val = std::move(val)}) {}

::test_nullable::Int32Wrapper::Int32Wrapper(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Int32Wrapper(Storage_{
                                                                                                              .val = {},
                                                                                                          }) {}
::test_nullable::Int32Wrapper::Int32Wrapper(const ::test_nullable::Int32Wrapper& other) noexcept : ::test_nullable::Int32Wrapper(other.CloneStorage_()) {}

::test_nullable::Int32Wrapper& test_nullable::Int32Wrapper::operator=(const ::test_nullable::Int32Wrapper& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_nullable::Int32Wrapper::operator==(const Int32Wrapper& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_nullable::Int32Wrapper, 4>::Equal(this, &other);
}

bool test_nullable::Int32Wrapper::operator!=(const Int32Wrapper& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_nullable::Int32Wrapper, 4>::Equal(this, &other);
}

::test_nullable::Int32Wrapper::Storage_ test_nullable::Int32Wrapper::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.val)};
}
int32_t
test_nullable::Int32Wrapper::val() const {
  return storage_.val;
}

int32_t& ::test_nullable::Int32Wrapper::val() {
  return storage_.val;
}

::test_nullable::Int32Wrapper& ::test_nullable::Int32Wrapper::val(int32_t value) {
  storage_.val = std::move(value);
  return *this;
}

::test_nullable::StructWithNullableStruct::StructWithNullableStruct(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_nullable::StructWithNullableStruct::StructWithNullableStruct(::fidl::Box<::test_nullable::Int32Wrapper> val) noexcept
    : storage_({.val = std::move(val)}) {}

::test_nullable::StructWithNullableStruct::StructWithNullableStruct(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : StructWithNullableStruct(Storage_{
                                                                                                                                      .val = {},
                                                                                                                                  }) {}
::test_nullable::StructWithNullableStruct::StructWithNullableStruct(const ::test_nullable::StructWithNullableStruct& other) noexcept : ::test_nullable::StructWithNullableStruct(other.CloneStorage_()) {}

::test_nullable::StructWithNullableStruct& test_nullable::StructWithNullableStruct::operator=(const ::test_nullable::StructWithNullableStruct& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_nullable::StructWithNullableStruct::operator==(const StructWithNullableStruct& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_nullable::StructWithNullableStruct, 8>::Equal(this, &other);
}

bool test_nullable::StructWithNullableStruct::operator!=(const StructWithNullableStruct& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_nullable::StructWithNullableStruct, 8>::Equal(this, &other);
}

::test_nullable::StructWithNullableStruct::Storage_ test_nullable::StructWithNullableStruct::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.val)};
}
const ::fidl::Box<::test_nullable::Int32Wrapper>&
test_nullable::StructWithNullableStruct::val() const {
  return storage_.val;
}

::fidl::Box<::test_nullable::Int32Wrapper>& ::test_nullable::StructWithNullableStruct::val() {
  return storage_.val;
}

::test_nullable::StructWithNullableStruct& ::test_nullable::StructWithNullableStruct::val(::fidl::Box<::test_nullable::Int32Wrapper> value) {
  storage_.val = std::move(value);
  return *this;
}

::test_nullable::StructWithNullableUnion::StructWithNullableUnion(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_nullable::StructWithNullableUnion::StructWithNullableUnion(::fidl::Box<::test_nullable::SimpleUnion> val) noexcept
    : storage_({.val = std::move(val)}) {}

::test_nullable::StructWithNullableUnion::StructWithNullableUnion(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : StructWithNullableUnion(Storage_{
                                                                                                                                    .val = {},
                                                                                                                                }) {}
::test_nullable::StructWithNullableUnion::StructWithNullableUnion(const ::test_nullable::StructWithNullableUnion& other) noexcept : ::test_nullable::StructWithNullableUnion(other.CloneStorage_()) {}

::test_nullable::StructWithNullableUnion& test_nullable::StructWithNullableUnion::operator=(const ::test_nullable::StructWithNullableUnion& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_nullable::StructWithNullableUnion::operator==(const StructWithNullableUnion& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_nullable::StructWithNullableUnion, 16>::Equal(this, &other);
}

bool test_nullable::StructWithNullableUnion::operator!=(const StructWithNullableUnion& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_nullable::StructWithNullableUnion, 16>::Equal(this, &other);
}

::test_nullable::StructWithNullableUnion::Storage_ test_nullable::StructWithNullableUnion::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.val)};
}
const ::fidl::Box<::test_nullable::SimpleUnion>&
test_nullable::StructWithNullableUnion::val() const {
  return storage_.val;
}

::fidl::Box<::test_nullable::SimpleUnion>& ::test_nullable::StructWithNullableUnion::val() {
  return storage_.val;
}

::test_nullable::StructWithNullableUnion& ::test_nullable::StructWithNullableUnion::val(::fidl::Box<::test_nullable::SimpleUnion> value) {
  storage_.val = std::move(value);
  return *this;
}

::test_nullable::SimpleUnion::SimpleUnion(SimpleUnion&& other) noexcept : SimpleUnion(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_nullable::SimpleUnion& ::test_nullable::SimpleUnion::operator=(SimpleUnion&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_nullable::SimpleUnion::SimpleUnion(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_nullable::SimpleUnion::SimpleUnion(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_nullable::SimpleUnion::Tag test_nullable::SimpleUnion::Which() const {
  return SimpleUnion::IndexToTag(storage_->index()).value();
}

size_t test_nullable::SimpleUnion::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_nullable::SimpleUnion::Tag tag) {
  switch (tag) {
    case ::test_nullable::SimpleUnion::Tag::kA:
      return 1;
    case ::test_nullable::SimpleUnion::Tag::kB:
      return 2;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_nullable::SimpleUnion::Tag> test_nullable::SimpleUnion::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_nullable::SimpleUnion::Tag::kA;
    case 2:
      return ::test_nullable::SimpleUnion::Tag::kB;
    default:
      return std::nullopt;
  }
}

::test_nullable::SimpleUnion::SimpleUnion(const SimpleUnion& other) noexcept : SimpleUnion(other.CloneStorage_()) {}

::test_nullable::SimpleUnion& test_nullable::SimpleUnion::operator=(const SimpleUnion& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_nullable::SimpleUnion::operator==(const SimpleUnion& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_nullable::SimpleUnion::operator!=(const SimpleUnion& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_nullable::SimpleUnion::Storage_> test_nullable::SimpleUnion::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage_>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_nullable::SimpleUnion test_nullable::SimpleUnion::WithA(int32_t val) {
  return SimpleUnion(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_nullable::SimpleUnion::Storage_> test_nullable::SimpleUnion::a() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_nullable::SimpleUnion::Storage_> test_nullable::SimpleUnion::a() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_nullable::SimpleUnion& test_nullable::SimpleUnion::a(int32_t value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}
::test_nullable::SimpleUnion test_nullable::SimpleUnion::WithB(float val) {
  return SimpleUnion(std::make_shared<Storage_>(
      std::in_place_index_t<2>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<2, ::test_nullable::SimpleUnion::Storage_> test_nullable::SimpleUnion::b() const {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<2, ::test_nullable::SimpleUnion::Storage_> test_nullable::SimpleUnion::b() {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::test_nullable::SimpleUnion& test_nullable::SimpleUnion::b(float value) {
  storage_->emplace<2>(std::move(value));
  return *this;
}

#pragma clang diagnostic pop
