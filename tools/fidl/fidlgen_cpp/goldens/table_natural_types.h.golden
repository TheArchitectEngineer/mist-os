// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.table/cpp/common_types.h>
#include <fidl/test.table/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_table {

class EmptyTable;

class SimpleTable;

class OlderSimpleTable;

class NewerSimpleTable;

class ReverseOrdinalTable;

class TableWithAttributes;

class ExtensionTable;

class SixtyFourOrdinalTable;

class EmptyTable {
 private:
  struct Storage_;

 public:
  EmptyTable(Storage_ storage) noexcept;
  EmptyTable() noexcept = default;
  EmptyTable(EmptyTable&&) noexcept = default;
  EmptyTable& operator=(EmptyTable&&) noexcept = default;
  EmptyTable(const EmptyTable& other) noexcept;
  EmptyTable& operator=(const EmptyTable& other) noexcept;
  bool operator==(const EmptyTable& other) const noexcept;
  bool operator!=(const EmptyTable& other) const noexcept;

  bool IsEmpty() const;

  EmptyTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_table::EmptyTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_table::EmptyTable>;
  static constexpr auto kMembers = std::make_tuple();
};

class SimpleTable {
 private:
  struct Storage_;

 public:
  SimpleTable(Storage_ storage) noexcept;
  SimpleTable() noexcept = default;
  SimpleTable(SimpleTable&&) noexcept = default;
  SimpleTable& operator=(SimpleTable&&) noexcept = default;
  SimpleTable(const SimpleTable& other) noexcept;
  SimpleTable& operator=(const SimpleTable& other) noexcept;
  bool operator==(const SimpleTable& other) const noexcept;
  bool operator!=(const SimpleTable& other) const noexcept;

  bool IsEmpty() const;

  const std::optional<int64_t>& x() const;
  ::std::optional<int64_t>& x();

  // Setter for x.
  //

  SimpleTable& x(std::optional<int64_t> value);

  const std::optional<int64_t>& y() const;
  ::std::optional<int64_t>& y();

  // Setter for y.
  //

  SimpleTable& y(std::optional<int64_t> value);

  SimpleTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::optional<int64_t> x;
    ::std::optional<int64_t> y;
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_table::SimpleTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_table::SimpleTable>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       1, &Storage_::x},
                                                   ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{5, &Storage_::y});
};

class OlderSimpleTable {
 private:
  struct Storage_;

 public:
  OlderSimpleTable(Storage_ storage) noexcept;
  OlderSimpleTable() noexcept = default;
  OlderSimpleTable(OlderSimpleTable&&) noexcept = default;
  OlderSimpleTable& operator=(OlderSimpleTable&&) noexcept = default;
  OlderSimpleTable(const OlderSimpleTable& other) noexcept;
  OlderSimpleTable& operator=(const OlderSimpleTable& other) noexcept;
  bool operator==(const OlderSimpleTable& other) const noexcept;
  bool operator!=(const OlderSimpleTable& other) const noexcept;

  bool IsEmpty() const;

  const std::optional<int64_t>& x() const;
  ::std::optional<int64_t>& x();

  // Setter for x.
  //

  OlderSimpleTable& x(std::optional<int64_t> value);

  OlderSimpleTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::optional<int64_t> x;
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_table::OlderSimpleTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_table::OlderSimpleTable>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{
      1, &Storage_::x});
};

class NewerSimpleTable {
 private:
  struct Storage_;

 public:
  NewerSimpleTable(Storage_ storage) noexcept;
  NewerSimpleTable() noexcept = default;
  NewerSimpleTable(NewerSimpleTable&&) noexcept = default;
  NewerSimpleTable& operator=(NewerSimpleTable&&) noexcept = default;
  NewerSimpleTable(const NewerSimpleTable& other) noexcept;
  NewerSimpleTable& operator=(const NewerSimpleTable& other) noexcept;
  bool operator==(const NewerSimpleTable& other) const noexcept;
  bool operator!=(const NewerSimpleTable& other) const noexcept;

  bool IsEmpty() const;

  const std::optional<int64_t>& x() const;
  ::std::optional<int64_t>& x();

  // Setter for x.
  //

  NewerSimpleTable& x(std::optional<int64_t> value);

  const std::optional<int64_t>& y() const;
  ::std::optional<int64_t>& y();

  // Setter for y.
  //

  NewerSimpleTable& y(std::optional<int64_t> value);

  const std::optional<int64_t>& z() const;
  ::std::optional<int64_t>& z();

  // Setter for z.
  //

  NewerSimpleTable& z(std::optional<int64_t> value);

  NewerSimpleTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::optional<int64_t> x;
    ::std::optional<int64_t> y;
    ::std::optional<int64_t> z;
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_table::NewerSimpleTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_table::NewerSimpleTable>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       1, &Storage_::x},
                                                   ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{5, &Storage_::y}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{6, &Storage_::z});
};

class ReverseOrdinalTable {
 private:
  struct Storage_;

 public:
  ReverseOrdinalTable(Storage_ storage) noexcept;
  ReverseOrdinalTable() noexcept = default;
  ReverseOrdinalTable(ReverseOrdinalTable&&) noexcept = default;
  ReverseOrdinalTable& operator=(ReverseOrdinalTable&&) noexcept = default;
  ReverseOrdinalTable(const ReverseOrdinalTable& other) noexcept;
  ReverseOrdinalTable& operator=(const ReverseOrdinalTable& other) noexcept;
  bool operator==(const ReverseOrdinalTable& other) const noexcept;
  bool operator!=(const ReverseOrdinalTable& other) const noexcept;

  bool IsEmpty() const;

  const std::optional<int64_t>& z() const;
  ::std::optional<int64_t>& z();

  // Setter for z.
  //

  ReverseOrdinalTable& z(std::optional<int64_t> value);

  const std::optional<int64_t>& y() const;
  ::std::optional<int64_t>& y();

  // Setter for y.
  //

  ReverseOrdinalTable& y(std::optional<int64_t> value);

  const std::optional<int64_t>& x() const;
  ::std::optional<int64_t>& x();

  // Setter for x.
  //

  ReverseOrdinalTable& x(std::optional<int64_t> value);

  ReverseOrdinalTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::optional<int64_t> z;
    ::std::optional<int64_t> y;
    ::std::optional<int64_t> x;
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_table::ReverseOrdinalTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_table::ReverseOrdinalTable>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       1, &Storage_::z},
                                                   ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{2, &Storage_::y}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{3, &Storage_::x});
};

class TableWithAttributes {
 private:
  struct Storage_;

 public:
  TableWithAttributes(Storage_ storage) noexcept;
  TableWithAttributes() noexcept = default;
  TableWithAttributes(TableWithAttributes&&) noexcept = default;
  TableWithAttributes& operator=(TableWithAttributes&&) noexcept = default;
  TableWithAttributes(const TableWithAttributes& other) noexcept;
  TableWithAttributes& operator=(const TableWithAttributes& other) noexcept;
  bool operator==(const TableWithAttributes& other) const noexcept;
  bool operator!=(const TableWithAttributes& other) const noexcept;

  bool IsEmpty() const;

  const std::optional<int64_t>& x() const;
  ::std::optional<int64_t>& x();

  // Setter for x.
  //

  TableWithAttributes& x(std::optional<int64_t> value);

  TableWithAttributes(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::optional<int64_t> x;
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_table::TableWithAttributes>;
  friend struct ::fidl::internal::MemberVisitor<::test_table::TableWithAttributes>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{
      1, &Storage_::x});
};

class ExtensionTable {
 private:
  struct Storage_;

 public:
  ExtensionTable(Storage_ storage) noexcept;
  ExtensionTable() noexcept = default;
  ExtensionTable(ExtensionTable&&) noexcept = default;
  ExtensionTable& operator=(ExtensionTable&&) noexcept = default;
  ExtensionTable(const ExtensionTable& other) noexcept;
  ExtensionTable& operator=(const ExtensionTable& other) noexcept;
  bool operator==(const ExtensionTable& other) const noexcept;
  bool operator!=(const ExtensionTable& other) const noexcept;

  bool IsEmpty() const;

  ExtensionTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_table::ExtensionTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_table::ExtensionTable>;
  static constexpr auto kMembers = std::make_tuple();
};

class SixtyFourOrdinalTable {
 private:
  struct Storage_;

 public:
  SixtyFourOrdinalTable(Storage_ storage) noexcept;
  SixtyFourOrdinalTable() noexcept = default;
  SixtyFourOrdinalTable(SixtyFourOrdinalTable&&) noexcept = default;
  SixtyFourOrdinalTable& operator=(SixtyFourOrdinalTable&&) noexcept = default;
  SixtyFourOrdinalTable(const SixtyFourOrdinalTable& other) noexcept;
  SixtyFourOrdinalTable& operator=(const SixtyFourOrdinalTable& other) noexcept;
  bool operator==(const SixtyFourOrdinalTable& other) const noexcept;
  bool operator!=(const SixtyFourOrdinalTable& other) const noexcept;

  bool IsEmpty() const;

  const std::optional<int64_t>& v1() const;
  ::std::optional<int64_t>& v1();

  // Setter for v1.
  //

  SixtyFourOrdinalTable& v1(std::optional<int64_t> value);

  const std::optional<int64_t>& v2() const;
  ::std::optional<int64_t>& v2();

  // Setter for v2.
  //

  SixtyFourOrdinalTable& v2(std::optional<int64_t> value);

  const std::optional<int64_t>& v3() const;
  ::std::optional<int64_t>& v3();

  // Setter for v3.
  //

  SixtyFourOrdinalTable& v3(std::optional<int64_t> value);

  const std::optional<int64_t>& v4() const;
  ::std::optional<int64_t>& v4();

  // Setter for v4.
  //

  SixtyFourOrdinalTable& v4(std::optional<int64_t> value);

  const std::optional<int64_t>& v5() const;
  ::std::optional<int64_t>& v5();

  // Setter for v5.
  //

  SixtyFourOrdinalTable& v5(std::optional<int64_t> value);

  const std::optional<int64_t>& v6() const;
  ::std::optional<int64_t>& v6();

  // Setter for v6.
  //

  SixtyFourOrdinalTable& v6(std::optional<int64_t> value);

  const std::optional<int64_t>& v7() const;
  ::std::optional<int64_t>& v7();

  // Setter for v7.
  //

  SixtyFourOrdinalTable& v7(std::optional<int64_t> value);

  const std::optional<int64_t>& v8() const;
  ::std::optional<int64_t>& v8();

  // Setter for v8.
  //

  SixtyFourOrdinalTable& v8(std::optional<int64_t> value);

  const std::optional<int64_t>& v9() const;
  ::std::optional<int64_t>& v9();

  // Setter for v9.
  //

  SixtyFourOrdinalTable& v9(std::optional<int64_t> value);

  const std::optional<int64_t>& v10() const;
  ::std::optional<int64_t>& v10();

  // Setter for v10.
  //

  SixtyFourOrdinalTable& v10(std::optional<int64_t> value);

  const std::optional<int64_t>& v11() const;
  ::std::optional<int64_t>& v11();

  // Setter for v11.
  //

  SixtyFourOrdinalTable& v11(std::optional<int64_t> value);

  const std::optional<int64_t>& v12() const;
  ::std::optional<int64_t>& v12();

  // Setter for v12.
  //

  SixtyFourOrdinalTable& v12(std::optional<int64_t> value);

  const std::optional<int64_t>& v13() const;
  ::std::optional<int64_t>& v13();

  // Setter for v13.
  //

  SixtyFourOrdinalTable& v13(std::optional<int64_t> value);

  const std::optional<int64_t>& v14() const;
  ::std::optional<int64_t>& v14();

  // Setter for v14.
  //

  SixtyFourOrdinalTable& v14(std::optional<int64_t> value);

  const std::optional<int64_t>& v15() const;
  ::std::optional<int64_t>& v15();

  // Setter for v15.
  //

  SixtyFourOrdinalTable& v15(std::optional<int64_t> value);

  const std::optional<int64_t>& v16() const;
  ::std::optional<int64_t>& v16();

  // Setter for v16.
  //

  SixtyFourOrdinalTable& v16(std::optional<int64_t> value);

  const std::optional<int64_t>& v17() const;
  ::std::optional<int64_t>& v17();

  // Setter for v17.
  //

  SixtyFourOrdinalTable& v17(std::optional<int64_t> value);

  const std::optional<int64_t>& v18() const;
  ::std::optional<int64_t>& v18();

  // Setter for v18.
  //

  SixtyFourOrdinalTable& v18(std::optional<int64_t> value);

  const std::optional<int64_t>& v19() const;
  ::std::optional<int64_t>& v19();

  // Setter for v19.
  //

  SixtyFourOrdinalTable& v19(std::optional<int64_t> value);

  const std::optional<int64_t>& v20() const;
  ::std::optional<int64_t>& v20();

  // Setter for v20.
  //

  SixtyFourOrdinalTable& v20(std::optional<int64_t> value);

  const std::optional<int64_t>& v21() const;
  ::std::optional<int64_t>& v21();

  // Setter for v21.
  //

  SixtyFourOrdinalTable& v21(std::optional<int64_t> value);

  const std::optional<int64_t>& v22() const;
  ::std::optional<int64_t>& v22();

  // Setter for v22.
  //

  SixtyFourOrdinalTable& v22(std::optional<int64_t> value);

  const std::optional<int64_t>& v23() const;
  ::std::optional<int64_t>& v23();

  // Setter for v23.
  //

  SixtyFourOrdinalTable& v23(std::optional<int64_t> value);

  const std::optional<int64_t>& v24() const;
  ::std::optional<int64_t>& v24();

  // Setter for v24.
  //

  SixtyFourOrdinalTable& v24(std::optional<int64_t> value);

  const std::optional<int64_t>& v25() const;
  ::std::optional<int64_t>& v25();

  // Setter for v25.
  //

  SixtyFourOrdinalTable& v25(std::optional<int64_t> value);

  const std::optional<int64_t>& v26() const;
  ::std::optional<int64_t>& v26();

  // Setter for v26.
  //

  SixtyFourOrdinalTable& v26(std::optional<int64_t> value);

  const std::optional<int64_t>& v27() const;
  ::std::optional<int64_t>& v27();

  // Setter for v27.
  //

  SixtyFourOrdinalTable& v27(std::optional<int64_t> value);

  const std::optional<int64_t>& v28() const;
  ::std::optional<int64_t>& v28();

  // Setter for v28.
  //

  SixtyFourOrdinalTable& v28(std::optional<int64_t> value);

  const std::optional<int64_t>& v29() const;
  ::std::optional<int64_t>& v29();

  // Setter for v29.
  //

  SixtyFourOrdinalTable& v29(std::optional<int64_t> value);

  const std::optional<int64_t>& v30() const;
  ::std::optional<int64_t>& v30();

  // Setter for v30.
  //

  SixtyFourOrdinalTable& v30(std::optional<int64_t> value);

  const std::optional<int64_t>& v31() const;
  ::std::optional<int64_t>& v31();

  // Setter for v31.
  //

  SixtyFourOrdinalTable& v31(std::optional<int64_t> value);

  const std::optional<int64_t>& v32() const;
  ::std::optional<int64_t>& v32();

  // Setter for v32.
  //

  SixtyFourOrdinalTable& v32(std::optional<int64_t> value);

  const std::optional<int64_t>& v33() const;
  ::std::optional<int64_t>& v33();

  // Setter for v33.
  //

  SixtyFourOrdinalTable& v33(std::optional<int64_t> value);

  const std::optional<int64_t>& v34() const;
  ::std::optional<int64_t>& v34();

  // Setter for v34.
  //

  SixtyFourOrdinalTable& v34(std::optional<int64_t> value);

  const std::optional<int64_t>& v35() const;
  ::std::optional<int64_t>& v35();

  // Setter for v35.
  //

  SixtyFourOrdinalTable& v35(std::optional<int64_t> value);

  const std::optional<int64_t>& v36() const;
  ::std::optional<int64_t>& v36();

  // Setter for v36.
  //

  SixtyFourOrdinalTable& v36(std::optional<int64_t> value);

  const std::optional<int64_t>& v37() const;
  ::std::optional<int64_t>& v37();

  // Setter for v37.
  //

  SixtyFourOrdinalTable& v37(std::optional<int64_t> value);

  const std::optional<int64_t>& v38() const;
  ::std::optional<int64_t>& v38();

  // Setter for v38.
  //

  SixtyFourOrdinalTable& v38(std::optional<int64_t> value);

  const std::optional<int64_t>& v39() const;
  ::std::optional<int64_t>& v39();

  // Setter for v39.
  //

  SixtyFourOrdinalTable& v39(std::optional<int64_t> value);

  const std::optional<int64_t>& v40() const;
  ::std::optional<int64_t>& v40();

  // Setter for v40.
  //

  SixtyFourOrdinalTable& v40(std::optional<int64_t> value);

  const std::optional<int64_t>& v41() const;
  ::std::optional<int64_t>& v41();

  // Setter for v41.
  //

  SixtyFourOrdinalTable& v41(std::optional<int64_t> value);

  const std::optional<int64_t>& v42() const;
  ::std::optional<int64_t>& v42();

  // Setter for v42.
  //

  SixtyFourOrdinalTable& v42(std::optional<int64_t> value);

  const std::optional<int64_t>& v43() const;
  ::std::optional<int64_t>& v43();

  // Setter for v43.
  //

  SixtyFourOrdinalTable& v43(std::optional<int64_t> value);

  const std::optional<int64_t>& v44() const;
  ::std::optional<int64_t>& v44();

  // Setter for v44.
  //

  SixtyFourOrdinalTable& v44(std::optional<int64_t> value);

  const std::optional<int64_t>& v45() const;
  ::std::optional<int64_t>& v45();

  // Setter for v45.
  //

  SixtyFourOrdinalTable& v45(std::optional<int64_t> value);

  const std::optional<int64_t>& v46() const;
  ::std::optional<int64_t>& v46();

  // Setter for v46.
  //

  SixtyFourOrdinalTable& v46(std::optional<int64_t> value);

  const std::optional<int64_t>& v47() const;
  ::std::optional<int64_t>& v47();

  // Setter for v47.
  //

  SixtyFourOrdinalTable& v47(std::optional<int64_t> value);

  const std::optional<int64_t>& v48() const;
  ::std::optional<int64_t>& v48();

  // Setter for v48.
  //

  SixtyFourOrdinalTable& v48(std::optional<int64_t> value);

  const std::optional<int64_t>& v49() const;
  ::std::optional<int64_t>& v49();

  // Setter for v49.
  //

  SixtyFourOrdinalTable& v49(std::optional<int64_t> value);

  const std::optional<int64_t>& v50() const;
  ::std::optional<int64_t>& v50();

  // Setter for v50.
  //

  SixtyFourOrdinalTable& v50(std::optional<int64_t> value);

  const std::optional<int64_t>& v51() const;
  ::std::optional<int64_t>& v51();

  // Setter for v51.
  //

  SixtyFourOrdinalTable& v51(std::optional<int64_t> value);

  const std::optional<int64_t>& v52() const;
  ::std::optional<int64_t>& v52();

  // Setter for v52.
  //

  SixtyFourOrdinalTable& v52(std::optional<int64_t> value);

  const std::optional<int64_t>& v53() const;
  ::std::optional<int64_t>& v53();

  // Setter for v53.
  //

  SixtyFourOrdinalTable& v53(std::optional<int64_t> value);

  const std::optional<int64_t>& v54() const;
  ::std::optional<int64_t>& v54();

  // Setter for v54.
  //

  SixtyFourOrdinalTable& v54(std::optional<int64_t> value);

  const std::optional<int64_t>& v55() const;
  ::std::optional<int64_t>& v55();

  // Setter for v55.
  //

  SixtyFourOrdinalTable& v55(std::optional<int64_t> value);

  const std::optional<int64_t>& v56() const;
  ::std::optional<int64_t>& v56();

  // Setter for v56.
  //

  SixtyFourOrdinalTable& v56(std::optional<int64_t> value);

  const std::optional<int64_t>& v57() const;
  ::std::optional<int64_t>& v57();

  // Setter for v57.
  //

  SixtyFourOrdinalTable& v57(std::optional<int64_t> value);

  const std::optional<int64_t>& v58() const;
  ::std::optional<int64_t>& v58();

  // Setter for v58.
  //

  SixtyFourOrdinalTable& v58(std::optional<int64_t> value);

  const std::optional<int64_t>& v59() const;
  ::std::optional<int64_t>& v59();

  // Setter for v59.
  //

  SixtyFourOrdinalTable& v59(std::optional<int64_t> value);

  const std::optional<int64_t>& v60() const;
  ::std::optional<int64_t>& v60();

  // Setter for v60.
  //

  SixtyFourOrdinalTable& v60(std::optional<int64_t> value);

  const std::optional<int64_t>& v61() const;
  ::std::optional<int64_t>& v61();

  // Setter for v61.
  //

  SixtyFourOrdinalTable& v61(std::optional<int64_t> value);

  const std::optional<int64_t>& v62() const;
  ::std::optional<int64_t>& v62();

  // Setter for v62.
  //

  SixtyFourOrdinalTable& v62(std::optional<int64_t> value);

  const std::optional<int64_t>& v63() const;
  ::std::optional<int64_t>& v63();

  // Setter for v63.
  //

  SixtyFourOrdinalTable& v63(std::optional<int64_t> value);

  const std::optional<::test_table::ExtensionTable>& v64() const;
  ::std::optional<::test_table::ExtensionTable>& v64();

  // Setter for v64.
  //

  SixtyFourOrdinalTable& v64(std::optional<::test_table::ExtensionTable> value);

  SixtyFourOrdinalTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::optional<int64_t> v1;
    ::std::optional<int64_t> v2;
    ::std::optional<int64_t> v3;
    ::std::optional<int64_t> v4;
    ::std::optional<int64_t> v5;
    ::std::optional<int64_t> v6;
    ::std::optional<int64_t> v7;
    ::std::optional<int64_t> v8;
    ::std::optional<int64_t> v9;
    ::std::optional<int64_t> v10;
    ::std::optional<int64_t> v11;
    ::std::optional<int64_t> v12;
    ::std::optional<int64_t> v13;
    ::std::optional<int64_t> v14;
    ::std::optional<int64_t> v15;
    ::std::optional<int64_t> v16;
    ::std::optional<int64_t> v17;
    ::std::optional<int64_t> v18;
    ::std::optional<int64_t> v19;
    ::std::optional<int64_t> v20;
    ::std::optional<int64_t> v21;
    ::std::optional<int64_t> v22;
    ::std::optional<int64_t> v23;
    ::std::optional<int64_t> v24;
    ::std::optional<int64_t> v25;
    ::std::optional<int64_t> v26;
    ::std::optional<int64_t> v27;
    ::std::optional<int64_t> v28;
    ::std::optional<int64_t> v29;
    ::std::optional<int64_t> v30;
    ::std::optional<int64_t> v31;
    ::std::optional<int64_t> v32;
    ::std::optional<int64_t> v33;
    ::std::optional<int64_t> v34;
    ::std::optional<int64_t> v35;
    ::std::optional<int64_t> v36;
    ::std::optional<int64_t> v37;
    ::std::optional<int64_t> v38;
    ::std::optional<int64_t> v39;
    ::std::optional<int64_t> v40;
    ::std::optional<int64_t> v41;
    ::std::optional<int64_t> v42;
    ::std::optional<int64_t> v43;
    ::std::optional<int64_t> v44;
    ::std::optional<int64_t> v45;
    ::std::optional<int64_t> v46;
    ::std::optional<int64_t> v47;
    ::std::optional<int64_t> v48;
    ::std::optional<int64_t> v49;
    ::std::optional<int64_t> v50;
    ::std::optional<int64_t> v51;
    ::std::optional<int64_t> v52;
    ::std::optional<int64_t> v53;
    ::std::optional<int64_t> v54;
    ::std::optional<int64_t> v55;
    ::std::optional<int64_t> v56;
    ::std::optional<int64_t> v57;
    ::std::optional<int64_t> v58;
    ::std::optional<int64_t> v59;
    ::std::optional<int64_t> v60;
    ::std::optional<int64_t> v61;
    ::std::optional<int64_t> v62;
    ::std::optional<int64_t> v63;
    ::std::optional<::test_table::ExtensionTable> v64;
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_table::SixtyFourOrdinalTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_table::SixtyFourOrdinalTable>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       1, &Storage_::v1},
                                                   ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{2, &Storage_::v2}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{3, &Storage_::v3}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{4, &Storage_::v4}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{5, &Storage_::v5}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{6, &Storage_::v6}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{7, &Storage_::v7}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{8, &Storage_::v8}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{9, &Storage_::v9}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{10, &Storage_::v10}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{11, &Storage_::v11}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{12, &Storage_::v12}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{13, &Storage_::v13}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{14, &Storage_::v14}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{15, &Storage_::v15}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{16, &Storage_::v16}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{17, &Storage_::v17}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{18, &Storage_::v18}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{19, &Storage_::v19}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{20, &Storage_::v20}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{21, &Storage_::v21}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{22, &Storage_::v22}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{23, &Storage_::v23}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{24, &Storage_::v24}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{25, &Storage_::v25}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{26, &Storage_::v26}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{27, &Storage_::v27}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{28, &Storage_::v28}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{29, &Storage_::v29}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{30, &Storage_::v30}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{31, &Storage_::v31}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{32, &Storage_::v32}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{33, &Storage_::v33}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{34, &Storage_::v34}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{35, &Storage_::v35}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{36, &Storage_::v36}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{37, &Storage_::v37}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{38, &Storage_::v38}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{39, &Storage_::v39}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{40, &Storage_::v40}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{41, &Storage_::v41}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{42, &Storage_::v42}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{43, &Storage_::v43}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{44, &Storage_::v44}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{45, &Storage_::v45}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{46, &Storage_::v46}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{47, &Storage_::v47}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{48, &Storage_::v48}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{49, &Storage_::v49}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{50, &Storage_::v50}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{51, &Storage_::v51}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{52, &Storage_::v52}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{53, &Storage_::v53}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{54, &Storage_::v54}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{55, &Storage_::v55}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{56, &Storage_::v56}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{57, &Storage_::v57}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{58, &Storage_::v58}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{59, &Storage_::v59}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{60, &Storage_::v60}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{61, &Storage_::v61}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{62, &Storage_::v62}, ::fidl::internal::NaturalTableMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{63, &Storage_::v63}, ::fidl::internal::NaturalTableMember<Storage_, ::test_table::ExtensionTable, fidl::internal::NaturalCodingConstraintEmpty>{64, &Storage_::v64});
};

}  // namespace test_table
namespace fidl {

template <>
struct IsFidlType<::test_table::EmptyTable> : public std::true_type {};

template <>
struct TypeTraits<::test_table::EmptyTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_table::EmptyTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::EmptyTable, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_table::EmptyTable> {};
template <>
struct IsFidlType<::test_table::SimpleTable> : public std::true_type {};

template <>
struct TypeTraits<::test_table::SimpleTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 56;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_table::SimpleTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::SimpleTable, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_table::SimpleTable> {};
template <>
struct IsFidlType<::test_table::OlderSimpleTable> : public std::true_type {};

template <>
struct TypeTraits<::test_table::OlderSimpleTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 16;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_table::OlderSimpleTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::OlderSimpleTable, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_table::OlderSimpleTable> {};
template <>
struct IsFidlType<::test_table::NewerSimpleTable> : public std::true_type {};

template <>
struct TypeTraits<::test_table::NewerSimpleTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 72;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_table::NewerSimpleTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::NewerSimpleTable, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_table::NewerSimpleTable> {};
template <>
struct IsFidlType<::test_table::ReverseOrdinalTable> : public std::true_type {};

template <>
struct TypeTraits<::test_table::ReverseOrdinalTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 48;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_table::ReverseOrdinalTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::ReverseOrdinalTable, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_table::ReverseOrdinalTable> {};
template <>
struct IsFidlType<::test_table::TableWithAttributes> : public std::true_type {};

template <>
struct TypeTraits<::test_table::TableWithAttributes> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 16;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_table::TableWithAttributes> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::TableWithAttributes, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_table::TableWithAttributes> {};
template <>
struct IsFidlType<::test_table::ExtensionTable> : public std::true_type {};

template <>
struct TypeTraits<::test_table::ExtensionTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_table::ExtensionTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::ExtensionTable, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_table::ExtensionTable> {};
template <>
struct IsFidlType<::test_table::SixtyFourOrdinalTable> : public std::true_type {};

template <>
struct TypeTraits<::test_table::SixtyFourOrdinalTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 3;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 1032;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_table::SixtyFourOrdinalTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::SixtyFourOrdinalTable, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_table::SixtyFourOrdinalTable> {};

#pragma clang diagnostic pop

}  // namespace fidl
