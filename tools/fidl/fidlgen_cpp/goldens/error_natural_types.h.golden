// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.error/cpp/common_types.h>
#include <fidl/test.error/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_error {

class ExampleFooRequest;

class ExampleFooResponse;

class ExampleFooResult;

class ExampleFooRequest {
 private:
  struct Storage_;

 public:
  ExampleFooRequest(Storage_ storage) noexcept;
  ExampleFooRequest(::std::string s) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |ExampleFooRequest| only if all of its members are default constructible.
  ExampleFooRequest() = default;
#pragma clang diagnostic pop

  ExampleFooRequest(ExampleFooRequest&&) noexcept = default;
  ExampleFooRequest& operator=(ExampleFooRequest&&) noexcept = default;
  ExampleFooRequest(const ExampleFooRequest& other) noexcept;
  ExampleFooRequest& operator=(const ExampleFooRequest& other) noexcept;

  bool operator==(const ExampleFooRequest& other) const noexcept;
  bool operator!=(const ExampleFooRequest& other) const noexcept;

  const ::std::string&
  s() const;

  ::std::string& s();

  // Setter for s.
  //

  ExampleFooRequest& s(::std::string value);

  ExampleFooRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::string s;
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_error::ExampleFooRequest, 16>;
  friend struct ::fidl::internal::MemberVisitor<::test_error::ExampleFooRequest>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, ::std::string, fidl::internal::NaturalCodingConstraintString<>>{
      &Storage_::s, 0});
  static constexpr auto kPadding = std::make_tuple();
};

class ExampleFooResponse {
 private:
  struct Storage_;

 public:
  ExampleFooResponse(Storage_ storage) noexcept;
  ExampleFooResponse(int64_t y) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |ExampleFooResponse| only if all of its members are default constructible.
  ExampleFooResponse() = default;
#pragma clang diagnostic pop

  ExampleFooResponse(ExampleFooResponse&&) noexcept = default;
  ExampleFooResponse& operator=(ExampleFooResponse&&) noexcept = default;
  ExampleFooResponse(const ExampleFooResponse& other) noexcept;
  ExampleFooResponse& operator=(const ExampleFooResponse& other) noexcept;

  bool operator==(const ExampleFooResponse& other) const noexcept;
  bool operator!=(const ExampleFooResponse& other) const noexcept;

  int64_t
  y() const;

  int64_t& y();

  // Setter for y.
  //

  ExampleFooResponse& y(int64_t value);

  ExampleFooResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    int64_t y = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_error::ExampleFooResponse, 8>;
  friend struct ::fidl::internal::MemberVisitor<::test_error::ExampleFooResponse>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, int64_t, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::y, 0});
  static constexpr auto kPadding = std::make_tuple();
};

class ExampleFooResult {
 private:
  using Storage_ =
      std::variant<
          std::monostate, ::test_error::ExampleFooResponse, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  ExampleFooResult(ExampleFooResult&& other) noexcept;
  ExampleFooResult& operator=(ExampleFooResult&& other) noexcept;
  ExampleFooResult(const ExampleFooResult& other) noexcept;
  ExampleFooResult& operator=(const ExampleFooResult& other) noexcept;
  bool operator==(const ExampleFooResult& other) const noexcept;
  bool operator!=(const ExampleFooResult& other) const noexcept;

  ::test_error::ExampleFooResult::Tag Which() const;
  static ExampleFooResult WithResponse(::test_error::ExampleFooResponse val);
  const ::fidl::internal::UnionMemberView<1, Storage_> response() const;
  ::fidl::internal::UnionMemberView<1, Storage_> response();

  // Sets the union to hold the response member.
  //

  ExampleFooResult& response(::test_error::ExampleFooResponse value);
  static ExampleFooResult WithErr(uint32_t val);
  const ::fidl::internal::UnionMemberView<2, Storage_> err() const;
  ::fidl::internal::UnionMemberView<2, Storage_> err();

  // Sets the union to hold the err member.
  //

  ExampleFooResult& err(uint32_t value);

  ExampleFooResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_error::ExampleFooResult>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit ExampleFooResult(std::shared_ptr<Storage_> storage);

  static size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_error::ExampleFooResult::Tag tag);
  static std::optional<::test_error::ExampleFooResult::Tag> IndexToTag(size_t index);
};

}  // namespace test_error
namespace fidl {

template <>
struct IsFidlType<::test_error::ExampleFooRequest> : public std::true_type {};

template <>
struct TypeTraits<::test_error::ExampleFooRequest> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 4294967295;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsStruct<::test_error::ExampleFooRequest> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_error::ExampleFooRequest, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_error::ExampleFooRequest, 16> {};
template <>
struct IsFidlType<::test_error::ExampleFooResponse> : public std::true_type {};

template <>
struct TypeTraits<::test_error::ExampleFooResponse> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 8;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_error::ExampleFooResponse> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_error::ExampleFooResponse, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_error::ExampleFooResponse, 8> {};

template <>
struct IsFidlType<::test_error::ExampleFooResult> : public std::true_type {};

template <>
struct TypeTraits<::test_error::ExampleFooResult> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_error::ExampleFooResult> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_error::ExampleFooResult, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_error::ExampleFooResult> {};

#pragma clang diagnostic pop

}  // namespace fidl
