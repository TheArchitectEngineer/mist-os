// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.inheritance/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_inheritance::SuperFooRequest::SuperFooRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_inheritance::SuperFooRequest::SuperFooRequest(::std::string s) noexcept
    : storage_({.s = std::move(s)}) {}

::test_inheritance::SuperFooRequest::SuperFooRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : SuperFooRequest(Storage_{
                                                                                                                       .s = {},
                                                                                                                   }) {}
::test_inheritance::SuperFooRequest::SuperFooRequest(const ::test_inheritance::SuperFooRequest& other) noexcept : ::test_inheritance::SuperFooRequest(other.CloneStorage_()) {}

::test_inheritance::SuperFooRequest& test_inheritance::SuperFooRequest::operator=(const ::test_inheritance::SuperFooRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_inheritance::SuperFooRequest::operator==(const SuperFooRequest& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_inheritance::SuperFooRequest, 16>::Equal(this, &other);
}

bool test_inheritance::SuperFooRequest::operator!=(const SuperFooRequest& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_inheritance::SuperFooRequest, 16>::Equal(this, &other);
}

::test_inheritance::SuperFooRequest::Storage_ test_inheritance::SuperFooRequest::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.s)};
}
const ::std::string&
test_inheritance::SuperFooRequest::s() const {
  return storage_.s;
}

::std::string& ::test_inheritance::SuperFooRequest::s() {
  return storage_.s;
}

::test_inheritance::SuperFooRequest& ::test_inheritance::SuperFooRequest::s(::std::string value) {
  storage_.s = std::move(value);
  return *this;
}

::test_inheritance::SuperFooResponse::SuperFooResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_inheritance::SuperFooResponse::SuperFooResponse(int64_t y) noexcept
    : storage_({.y = std::move(y)}) {}

::test_inheritance::SuperFooResponse::SuperFooResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : SuperFooResponse(Storage_{
                                                                                                                         .y = {},
                                                                                                                     }) {}
::test_inheritance::SuperFooResponse::SuperFooResponse(const ::test_inheritance::SuperFooResponse& other) noexcept : ::test_inheritance::SuperFooResponse(other.CloneStorage_()) {}

::test_inheritance::SuperFooResponse& test_inheritance::SuperFooResponse::operator=(const ::test_inheritance::SuperFooResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_inheritance::SuperFooResponse::operator==(const SuperFooResponse& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_inheritance::SuperFooResponse, 8>::Equal(this, &other);
}

bool test_inheritance::SuperFooResponse::operator!=(const SuperFooResponse& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_inheritance::SuperFooResponse, 8>::Equal(this, &other);
}

::test_inheritance::SuperFooResponse::Storage_ test_inheritance::SuperFooResponse::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.y)};
}
int64_t
test_inheritance::SuperFooResponse::y() const {
  return storage_.y;
}

int64_t& ::test_inheritance::SuperFooResponse::y() {
  return storage_.y;
}

::test_inheritance::SuperFooResponse& ::test_inheritance::SuperFooResponse::y(int64_t value) {
  storage_.y = std::move(value);
  return *this;
}

#pragma clang diagnostic pop
