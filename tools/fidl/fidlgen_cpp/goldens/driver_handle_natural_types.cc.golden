// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.driverhandle/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

#ifdef __Fuchsia__

::test_driverhandle::ClientEndWrapper::ClientEndWrapper(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_driverhandle::ClientEndWrapper::ClientEndWrapper(::fdf::ClientEnd<::test_driverhandle::DriverProtocol> value) noexcept
    : storage_({.value = std::move(value)}) {}

::test_driverhandle::ClientEndWrapper::ClientEndWrapper(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : ClientEndWrapper(Storage_{
                                                                                                                          .value = {},
                                                                                                                      }) {}
const ::fdf::ClientEnd<::test_driverhandle::DriverProtocol>&
test_driverhandle::ClientEndWrapper::value() const {
  return storage_.value;
}

::fdf::ClientEnd<::test_driverhandle::DriverProtocol>& ::test_driverhandle::ClientEndWrapper::value() {
  return storage_.value;
}

::test_driverhandle::ClientEndWrapper& ::test_driverhandle::ClientEndWrapper::value(::fdf::ClientEnd<::test_driverhandle::DriverProtocol> value) {
  storage_.value = std::move(value);
  return *this;
}

::test_driverhandle::ServerEndWrapper::ServerEndWrapper(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_driverhandle::ServerEndWrapper::ServerEndWrapper(::fdf::ServerEnd<::test_driverhandle::DriverProtocol> value) noexcept
    : storage_({.value = std::move(value)}) {}

::test_driverhandle::ServerEndWrapper::ServerEndWrapper(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : ServerEndWrapper(Storage_{
                                                                                                                          .value = {},
                                                                                                                      }) {}
const ::fdf::ServerEnd<::test_driverhandle::DriverProtocol>&
test_driverhandle::ServerEndWrapper::value() const {
  return storage_.value;
}

::fdf::ServerEnd<::test_driverhandle::DriverProtocol>& ::test_driverhandle::ServerEndWrapper::value() {
  return storage_.value;
}

::test_driverhandle::ServerEndWrapper& ::test_driverhandle::ServerEndWrapper::value(::fdf::ServerEnd<::test_driverhandle::DriverProtocol> value) {
  storage_.value = std::move(value);
  return *this;
}

::test_driverhandle::HandlesInProtocolSendHandlesRequest::HandlesInProtocolSendHandlesRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_driverhandle::HandlesInProtocolSendHandlesRequest::HandlesInProtocolSendHandlesRequest(::test_driverhandle::T t) noexcept
    : storage_({.t = std::move(t)}) {}

::test_driverhandle::HandlesInProtocolSendHandlesRequest::HandlesInProtocolSendHandlesRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : HandlesInProtocolSendHandlesRequest(Storage_{
                                                                                                                                                                .t = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                                            }) {}
const ::test_driverhandle::T&
test_driverhandle::HandlesInProtocolSendHandlesRequest::t() const {
  return storage_.t;
}

::test_driverhandle::T& ::test_driverhandle::HandlesInProtocolSendHandlesRequest::t() {
  return storage_.t;
}

::test_driverhandle::HandlesInProtocolSendHandlesRequest& ::test_driverhandle::HandlesInProtocolSendHandlesRequest::t(::test_driverhandle::T value) {
  storage_.t = std::move(value);
  return *this;
}

::test_driverhandle::T::T(::test_driverhandle::T::Storage_ storage) noexcept : storage_(std::move(storage)) {}

::test_driverhandle::T::T(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : T(Storage_{}) {}

bool test_driverhandle::T::IsEmpty() const {
  return !(storage_.zircon_handle.has_value() || storage_.fdf_handle.has_value());
}
const std::optional<::zx::event>& test_driverhandle::T::zircon_handle() const {
  return storage_.zircon_handle;
}

::std::optional<::zx::event>& test_driverhandle::T::zircon_handle() {
  return storage_.zircon_handle;
}

::test_driverhandle::T& test_driverhandle::T::zircon_handle(std::optional<::zx::event> value) {
  storage_.zircon_handle = std::move(value);
  return *this;
}
const std::optional<::fdf::ClientEnd<::test_driverhandle::DriverProtocol>>& test_driverhandle::T::fdf_handle() const {
  return storage_.fdf_handle;
}

::std::optional<::fdf::ClientEnd<::test_driverhandle::DriverProtocol>>& test_driverhandle::T::fdf_handle() {
  return storage_.fdf_handle;
}

::test_driverhandle::T& test_driverhandle::T::fdf_handle(std::optional<::fdf::ClientEnd<::test_driverhandle::DriverProtocol>> value) {
  storage_.fdf_handle = std::move(value);
  return *this;
}

#endif  // __Fuchsia__

#pragma clang diagnostic pop
