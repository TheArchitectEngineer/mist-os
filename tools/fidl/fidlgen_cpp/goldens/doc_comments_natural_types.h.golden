// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.doccomments/cpp/common_types.h>
#include <fidl/test.doccomments/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_doccomments {

class Struct;

class Table;

class StrictUnion;

class FlexibleUnion;

/// const comment #1
///
/// const comment #3
constexpr int32_t kC = 4u;

/// struct comment #1
///
/// struct comment #3
class Struct {
 private:
  struct Storage_;

 public:
  Struct(Storage_ storage) noexcept;
  Struct(int32_t field) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |Struct| only if all of its members are default constructible.
  Struct() = default;
#pragma clang diagnostic pop

  Struct(Struct&&) noexcept = default;
  Struct& operator=(Struct&&) noexcept = default;
  Struct(const Struct& other) noexcept;
  Struct& operator=(const Struct& other) noexcept;

  bool operator==(const Struct& other) const noexcept;
  bool operator!=(const Struct& other) const noexcept;

  /// struct member comment #1
  ///
  /// struct member comment #3
  int32_t
  field() const;

  /// struct member comment #1
  ///
  /// struct member comment #3
  int32_t& field();

  // Setter for field.
  //

  /// struct member comment #1
  ///
  /// struct member comment #3
  Struct& field(int32_t value);

  Struct(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    /// struct member comment #1
    ///
    /// struct member comment #3
    int32_t field = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_doccomments::Struct, 4>;
  friend struct ::fidl::internal::MemberVisitor<::test_doccomments::Struct>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, int32_t, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::field, 0});
  static constexpr auto kPadding = std::make_tuple();
};

/// strict union comment #1
///
/// strict union comment #3
class StrictUnion {
 private:
  using Storage_ =
      std::variant<
          std::monostate, int32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kField = 1,  // 0x1
  };

  StrictUnion(StrictUnion&& other) noexcept;
  StrictUnion& operator=(StrictUnion&& other) noexcept;
  StrictUnion(const StrictUnion& other) noexcept;
  StrictUnion& operator=(const StrictUnion& other) noexcept;
  bool operator==(const StrictUnion& other) const noexcept;
  bool operator!=(const StrictUnion& other) const noexcept;

  ::test_doccomments::StrictUnion::Tag Which() const;
  static StrictUnion WithField(int32_t val);
  const ::fidl::internal::UnionMemberView<1, Storage_> field() const;
  ::fidl::internal::UnionMemberView<1, Storage_> field();

  // Sets the union to hold the field member.
  //

  /// union member comment #1
  ///
  /// union member comment #3
  StrictUnion& field(int32_t value);

  StrictUnion(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_doccomments::StrictUnion>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit StrictUnion(std::shared_ptr<Storage_> storage);

  static size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_doccomments::StrictUnion::Tag tag);
  static std::optional<::test_doccomments::StrictUnion::Tag> IndexToTag(size_t index);
};

/// flexible union comment #1
///
/// flexible union comment #3
class FlexibleUnion {
 private:
  using Storage_ =
      std::variant<
          std::monostate, int32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kField = 1,  // 0x1
    _do_not_handle_this__write_a_default_case_instead = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  FlexibleUnion(FlexibleUnion&& other) noexcept;
  FlexibleUnion& operator=(FlexibleUnion&& other) noexcept;
  FlexibleUnion(const FlexibleUnion& other) noexcept;
  FlexibleUnion& operator=(const FlexibleUnion& other) noexcept;
  bool operator==(const FlexibleUnion& other) const noexcept;
  bool operator!=(const FlexibleUnion& other) const noexcept;
  bool IsUnknown() const;

  ::test_doccomments::FlexibleUnion::Tag Which() const;
  static FlexibleUnion WithField(int32_t val);
  const ::fidl::internal::UnionMemberView<1, Storage_> field() const;
  ::fidl::internal::UnionMemberView<1, Storage_> field();

  // Sets the union to hold the field member.
  //

  /// union member comment #1
  ///
  /// union member comment #3
  FlexibleUnion& field(int32_t value);

  FlexibleUnion(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_doccomments::FlexibleUnion>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit FlexibleUnion(std::shared_ptr<Storage_> storage);

  static size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_doccomments::FlexibleUnion::Tag tag);
  static std::optional<::test_doccomments::FlexibleUnion::Tag> IndexToTag(size_t index);
};

/// table comment #1
///
/// table comment #3
class Table {
 private:
  struct Storage_;

 public:
  Table(Storage_ storage) noexcept;
  Table() noexcept = default;
  Table(Table&&) noexcept = default;
  Table& operator=(Table&&) noexcept = default;
  Table(const Table& other) noexcept;
  Table& operator=(const Table& other) noexcept;
  bool operator==(const Table& other) const noexcept;
  bool operator!=(const Table& other) const noexcept;

  bool IsEmpty() const;

  /// table field comment #1
  ///
  /// table field comment #3
  const std::optional<int32_t>& field() const;
  /// table field comment #1
  ///
  /// table field comment #3
  ::std::optional<int32_t>& field();

  // Setter for field.
  //

  /// table field comment #1
  ///
  /// table field comment #3
  Table& field(std::optional<int32_t> value);

  Table(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    /// table field comment #1
    ///
    /// table field comment #3
    ::std::optional<int32_t> field;
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_doccomments::Table>;
  friend struct ::fidl::internal::MemberVisitor<::test_doccomments::Table>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, int32_t, fidl::internal::NaturalCodingConstraintEmpty>{
      1, &Storage_::field});
};

}  // namespace test_doccomments
namespace fidl {

template <>
struct IsFidlType<::test_doccomments::Struct> : public std::true_type {};

template <>
struct TypeTraits<::test_doccomments::Struct> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 4;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_doccomments::Struct> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_doccomments::Struct, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_doccomments::Struct, 4> {};

template <>
struct IsFidlType<::test_doccomments::Table> : public std::true_type {};

template <>
struct TypeTraits<::test_doccomments::Table> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_doccomments::Table> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_doccomments::Table, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_doccomments::Table> {};

template <>
struct IsFidlType<::test_doccomments::StrictUnion> : public std::true_type {};

template <>
struct TypeTraits<::test_doccomments::StrictUnion> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_doccomments::StrictUnion> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_doccomments::StrictUnion, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_doccomments::StrictUnion> {};
template <>
struct IsFidlType<::test_doccomments::FlexibleUnion> : public std::true_type {};

template <>
struct TypeTraits<::test_doccomments::FlexibleUnion> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_doccomments::FlexibleUnion> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_doccomments::FlexibleUnion, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_doccomments::FlexibleUnion> {};

template <>
struct internal::NaturalCodingTraits<::test_doccomments::MyStrictBits, ::fidl::internal::NaturalCodingConstraintEmpty> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::NaturalEncoder* encoder, ::test_doccomments::MyStrictBits* value, size_t offset, size_t recursion_depth);
  static void Decode(internal::NaturalDecoder* decoder, ::test_doccomments::MyStrictBits* value, size_t offset, size_t recursion_depth);
};
template <>
struct internal::NaturalCodingTraits<::test_doccomments::MyFlexibleBits, ::fidl::internal::NaturalCodingConstraintEmpty> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = true;

  static void Encode(internal::NaturalEncoder* encoder, ::test_doccomments::MyFlexibleBits* value, size_t offset, size_t recursion_depth);
  static void Decode(internal::NaturalDecoder* decoder, ::test_doccomments::MyFlexibleBits* value, size_t offset, size_t recursion_depth);
};

template <>
struct internal::NaturalCodingTraits<::test_doccomments::MyStrictEnum, ::fidl::internal::NaturalCodingConstraintEmpty> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::NaturalEncoder* encoder, ::test_doccomments::MyStrictEnum* value, size_t offset, size_t recursion_depth);
  static void Decode(internal::NaturalDecoder* decoder, ::test_doccomments::MyStrictEnum* value, size_t offset, size_t recursion_depth);
};
template <>
struct internal::NaturalCodingTraits<::test_doccomments::MyFlexibleEnum, ::fidl::internal::NaturalCodingConstraintEmpty> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = true;

  static void Encode(internal::NaturalEncoder* encoder, ::test_doccomments::MyFlexibleEnum* value, size_t offset, size_t recursion_depth);
  static void Decode(internal::NaturalDecoder* decoder, ::test_doccomments::MyFlexibleEnum* value, size_t offset, size_t recursion_depth);
};

#pragma clang diagnostic pop

}  // namespace fidl
