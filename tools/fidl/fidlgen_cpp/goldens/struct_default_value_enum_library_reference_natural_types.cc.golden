// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.structdefaultvalueenumlibraryreference/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_structdefaultvalueenumlibraryreference::Foo::Foo(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_structdefaultvalueenumlibraryreference::Foo::Foo(::test_dependent::MyEnum field) noexcept
    : storage_({.field = std::move(field)}) {}

::test_structdefaultvalueenumlibraryreference::Foo::Foo(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Foo(Storage_{
                                                                                                                          .field = ::test_dependent::MyEnum::kA,
                                                                                                                      }) {}
::test_structdefaultvalueenumlibraryreference::Foo::Foo(const ::test_structdefaultvalueenumlibraryreference::Foo& other) noexcept : ::test_structdefaultvalueenumlibraryreference::Foo(other.CloneStorage_()) {}

::test_structdefaultvalueenumlibraryreference::Foo& test_structdefaultvalueenumlibraryreference::Foo::operator=(const ::test_structdefaultvalueenumlibraryreference::Foo& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_structdefaultvalueenumlibraryreference::Foo::operator==(const Foo& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_structdefaultvalueenumlibraryreference::Foo, 4>::Equal(this, &other);
}

bool test_structdefaultvalueenumlibraryreference::Foo::operator!=(const Foo& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_structdefaultvalueenumlibraryreference::Foo, 4>::Equal(this, &other);
}

::test_structdefaultvalueenumlibraryreference::Foo::Storage_ test_structdefaultvalueenumlibraryreference::Foo::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.field)};
}
::test_dependent::MyEnum
test_structdefaultvalueenumlibraryreference::Foo::field() const {
  return storage_.field;
}

::test_dependent::MyEnum& ::test_structdefaultvalueenumlibraryreference::Foo::field() {
  return storage_.field;
}

::test_structdefaultvalueenumlibraryreference::Foo& ::test_structdefaultvalueenumlibraryreference::Foo::field(::test_dependent::MyEnum value) {
  storage_.field = std::move(value);
  return *this;
}

#pragma clang diagnostic pop
