// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.handles/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

#ifdef __Fuchsia__

::test_handles::Handles::Handles(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_handles::Handles::Handles(::zx::handle plain_handle, ::zx::bti bti_handle, ::zx::channel channel_handle, ::zx::clock clock_handle, ::zx::debuglog debuglog_handle, ::zx::event event_handle, ::zx::eventpair eventpair_handle, ::zx::exception exception_handle, ::zx::fifo fifo_handle, ::zx::guest guest_handle, ::zx::interrupt interrupt_handle, ::zx::iob iob_handle, ::zx::iommu iommu_handle, ::zx::job job_handle, ::zx::msi msi_handle, ::zx::pager pager_handle, ::zx::pmt pmt_handle, ::zx::port port_handle, ::zx::process process_handle, ::zx::profile profile_handle, ::zx::resource resource_handle, ::zx::socket socket_handle, ::zx::stream stream_handle, ::zx::suspend_token suspendtoken_handle, ::zx::thread thread_handle, ::zx::timer timer_handle, ::zx::vcpu vcpu_handle, ::zx::vmar vmar_handle, ::zx::vmo vmo_handle, ::zx::vmo rights_handle, ::zx::handle aliased_plain_handle_field, ::zx::vmo aliased_subtype_handle_field, ::zx::vmo aliased_rights_handle_field, ::fidl::ClientEnd<::test_handles::SomeProtocol> some_protocol, ::fidl::ServerEnd<::test_handles::SomeProtocol> request_some_protocol) noexcept
    : storage_({.plain_handle = std::move(plain_handle),
                .bti_handle = std::move(bti_handle),
                .channel_handle = std::move(channel_handle),
                .clock_handle = std::move(clock_handle),
                .debuglog_handle = std::move(debuglog_handle),
                .event_handle = std::move(event_handle),
                .eventpair_handle = std::move(eventpair_handle),
                .exception_handle = std::move(exception_handle),
                .fifo_handle = std::move(fifo_handle),
                .guest_handle = std::move(guest_handle),
                .interrupt_handle = std::move(interrupt_handle),
                .iob_handle = std::move(iob_handle),
                .iommu_handle = std::move(iommu_handle),
                .job_handle = std::move(job_handle),
                .msi_handle = std::move(msi_handle),
                .pager_handle = std::move(pager_handle),
                .pmt_handle = std::move(pmt_handle),
                .port_handle = std::move(port_handle),
                .process_handle = std::move(process_handle),
                .profile_handle = std::move(profile_handle),
                .resource_handle = std::move(resource_handle),
                .socket_handle = std::move(socket_handle),
                .stream_handle = std::move(stream_handle),
                .suspendtoken_handle = std::move(suspendtoken_handle),
                .thread_handle = std::move(thread_handle),
                .timer_handle = std::move(timer_handle),
                .vcpu_handle = std::move(vcpu_handle),
                .vmar_handle = std::move(vmar_handle),
                .vmo_handle = std::move(vmo_handle),
                .rights_handle = std::move(rights_handle),
                .aliased_plain_handle_field = std::move(aliased_plain_handle_field),
                .aliased_subtype_handle_field = std::move(aliased_subtype_handle_field),
                .aliased_rights_handle_field = std::move(aliased_rights_handle_field),
                .some_protocol = std::move(some_protocol),
                .request_some_protocol = std::move(request_some_protocol)}) {}

::test_handles::Handles::Handles(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Handles(Storage_{
                                                                                                   .plain_handle = {},
                                                                                                   .bti_handle = {},
                                                                                                   .channel_handle = {},
                                                                                                   .clock_handle = {},
                                                                                                   .debuglog_handle = {},
                                                                                                   .event_handle = {},
                                                                                                   .eventpair_handle = {},
                                                                                                   .exception_handle = {},
                                                                                                   .fifo_handle = {},
                                                                                                   .guest_handle = {},
                                                                                                   .interrupt_handle = {},
                                                                                                   .iob_handle = {},
                                                                                                   .iommu_handle = {},
                                                                                                   .job_handle = {},
                                                                                                   .msi_handle = {},
                                                                                                   .pager_handle = {},
                                                                                                   .pmt_handle = {},
                                                                                                   .port_handle = {},
                                                                                                   .process_handle = {},
                                                                                                   .profile_handle = {},
                                                                                                   .resource_handle = {},
                                                                                                   .socket_handle = {},
                                                                                                   .stream_handle = {},
                                                                                                   .suspendtoken_handle = {},
                                                                                                   .thread_handle = {},
                                                                                                   .timer_handle = {},
                                                                                                   .vcpu_handle = {},
                                                                                                   .vmar_handle = {},
                                                                                                   .vmo_handle = {},
                                                                                                   .rights_handle = {},
                                                                                                   .aliased_plain_handle_field = {},
                                                                                                   .aliased_subtype_handle_field = {},
                                                                                                   .aliased_rights_handle_field = {},
                                                                                                   .some_protocol = {},
                                                                                                   .request_some_protocol = {},
                                                                                               }) {}
const ::zx::handle&
test_handles::Handles::plain_handle() const {
  return storage_.plain_handle;
}

::zx::handle& ::test_handles::Handles::plain_handle() {
  return storage_.plain_handle;
}

::test_handles::Handles& ::test_handles::Handles::plain_handle(::zx::handle value) {
  storage_.plain_handle = std::move(value);
  return *this;
}
const ::zx::bti&
test_handles::Handles::bti_handle() const {
  return storage_.bti_handle;
}

::zx::bti& ::test_handles::Handles::bti_handle() {
  return storage_.bti_handle;
}

::test_handles::Handles& ::test_handles::Handles::bti_handle(::zx::bti value) {
  storage_.bti_handle = std::move(value);
  return *this;
}
const ::zx::channel&
test_handles::Handles::channel_handle() const {
  return storage_.channel_handle;
}

::zx::channel& ::test_handles::Handles::channel_handle() {
  return storage_.channel_handle;
}

::test_handles::Handles& ::test_handles::Handles::channel_handle(::zx::channel value) {
  storage_.channel_handle = std::move(value);
  return *this;
}
const ::zx::clock&
test_handles::Handles::clock_handle() const {
  return storage_.clock_handle;
}

::zx::clock& ::test_handles::Handles::clock_handle() {
  return storage_.clock_handle;
}

::test_handles::Handles& ::test_handles::Handles::clock_handle(::zx::clock value) {
  storage_.clock_handle = std::move(value);
  return *this;
}
const ::zx::debuglog&
test_handles::Handles::debuglog_handle() const {
  return storage_.debuglog_handle;
}

::zx::debuglog& ::test_handles::Handles::debuglog_handle() {
  return storage_.debuglog_handle;
}

::test_handles::Handles& ::test_handles::Handles::debuglog_handle(::zx::debuglog value) {
  storage_.debuglog_handle = std::move(value);
  return *this;
}
const ::zx::event&
test_handles::Handles::event_handle() const {
  return storage_.event_handle;
}

::zx::event& ::test_handles::Handles::event_handle() {
  return storage_.event_handle;
}

::test_handles::Handles& ::test_handles::Handles::event_handle(::zx::event value) {
  storage_.event_handle = std::move(value);
  return *this;
}
const ::zx::eventpair&
test_handles::Handles::eventpair_handle() const {
  return storage_.eventpair_handle;
}

::zx::eventpair& ::test_handles::Handles::eventpair_handle() {
  return storage_.eventpair_handle;
}

::test_handles::Handles& ::test_handles::Handles::eventpair_handle(::zx::eventpair value) {
  storage_.eventpair_handle = std::move(value);
  return *this;
}
const ::zx::exception&
test_handles::Handles::exception_handle() const {
  return storage_.exception_handle;
}

::zx::exception& ::test_handles::Handles::exception_handle() {
  return storage_.exception_handle;
}

::test_handles::Handles& ::test_handles::Handles::exception_handle(::zx::exception value) {
  storage_.exception_handle = std::move(value);
  return *this;
}
const ::zx::fifo&
test_handles::Handles::fifo_handle() const {
  return storage_.fifo_handle;
}

::zx::fifo& ::test_handles::Handles::fifo_handle() {
  return storage_.fifo_handle;
}

::test_handles::Handles& ::test_handles::Handles::fifo_handle(::zx::fifo value) {
  storage_.fifo_handle = std::move(value);
  return *this;
}
const ::zx::guest&
test_handles::Handles::guest_handle() const {
  return storage_.guest_handle;
}

::zx::guest& ::test_handles::Handles::guest_handle() {
  return storage_.guest_handle;
}

::test_handles::Handles& ::test_handles::Handles::guest_handle(::zx::guest value) {
  storage_.guest_handle = std::move(value);
  return *this;
}
const ::zx::interrupt&
test_handles::Handles::interrupt_handle() const {
  return storage_.interrupt_handle;
}

::zx::interrupt& ::test_handles::Handles::interrupt_handle() {
  return storage_.interrupt_handle;
}

::test_handles::Handles& ::test_handles::Handles::interrupt_handle(::zx::interrupt value) {
  storage_.interrupt_handle = std::move(value);
  return *this;
}
const ::zx::iob&
test_handles::Handles::iob_handle() const {
  return storage_.iob_handle;
}

::zx::iob& ::test_handles::Handles::iob_handle() {
  return storage_.iob_handle;
}

::test_handles::Handles& ::test_handles::Handles::iob_handle(::zx::iob value) {
  storage_.iob_handle = std::move(value);
  return *this;
}
const ::zx::iommu&
test_handles::Handles::iommu_handle() const {
  return storage_.iommu_handle;
}

::zx::iommu& ::test_handles::Handles::iommu_handle() {
  return storage_.iommu_handle;
}

::test_handles::Handles& ::test_handles::Handles::iommu_handle(::zx::iommu value) {
  storage_.iommu_handle = std::move(value);
  return *this;
}
const ::zx::job&
test_handles::Handles::job_handle() const {
  return storage_.job_handle;
}

::zx::job& ::test_handles::Handles::job_handle() {
  return storage_.job_handle;
}

::test_handles::Handles& ::test_handles::Handles::job_handle(::zx::job value) {
  storage_.job_handle = std::move(value);
  return *this;
}
const ::zx::msi&
test_handles::Handles::msi_handle() const {
  return storage_.msi_handle;
}

::zx::msi& ::test_handles::Handles::msi_handle() {
  return storage_.msi_handle;
}

::test_handles::Handles& ::test_handles::Handles::msi_handle(::zx::msi value) {
  storage_.msi_handle = std::move(value);
  return *this;
}
const ::zx::pager&
test_handles::Handles::pager_handle() const {
  return storage_.pager_handle;
}

::zx::pager& ::test_handles::Handles::pager_handle() {
  return storage_.pager_handle;
}

::test_handles::Handles& ::test_handles::Handles::pager_handle(::zx::pager value) {
  storage_.pager_handle = std::move(value);
  return *this;
}
const ::zx::pmt&
test_handles::Handles::pmt_handle() const {
  return storage_.pmt_handle;
}

::zx::pmt& ::test_handles::Handles::pmt_handle() {
  return storage_.pmt_handle;
}

::test_handles::Handles& ::test_handles::Handles::pmt_handle(::zx::pmt value) {
  storage_.pmt_handle = std::move(value);
  return *this;
}
const ::zx::port&
test_handles::Handles::port_handle() const {
  return storage_.port_handle;
}

::zx::port& ::test_handles::Handles::port_handle() {
  return storage_.port_handle;
}

::test_handles::Handles& ::test_handles::Handles::port_handle(::zx::port value) {
  storage_.port_handle = std::move(value);
  return *this;
}
const ::zx::process&
test_handles::Handles::process_handle() const {
  return storage_.process_handle;
}

::zx::process& ::test_handles::Handles::process_handle() {
  return storage_.process_handle;
}

::test_handles::Handles& ::test_handles::Handles::process_handle(::zx::process value) {
  storage_.process_handle = std::move(value);
  return *this;
}
const ::zx::profile&
test_handles::Handles::profile_handle() const {
  return storage_.profile_handle;
}

::zx::profile& ::test_handles::Handles::profile_handle() {
  return storage_.profile_handle;
}

::test_handles::Handles& ::test_handles::Handles::profile_handle(::zx::profile value) {
  storage_.profile_handle = std::move(value);
  return *this;
}
const ::zx::resource&
test_handles::Handles::resource_handle() const {
  return storage_.resource_handle;
}

::zx::resource& ::test_handles::Handles::resource_handle() {
  return storage_.resource_handle;
}

::test_handles::Handles& ::test_handles::Handles::resource_handle(::zx::resource value) {
  storage_.resource_handle = std::move(value);
  return *this;
}
const ::zx::socket&
test_handles::Handles::socket_handle() const {
  return storage_.socket_handle;
}

::zx::socket& ::test_handles::Handles::socket_handle() {
  return storage_.socket_handle;
}

::test_handles::Handles& ::test_handles::Handles::socket_handle(::zx::socket value) {
  storage_.socket_handle = std::move(value);
  return *this;
}
const ::zx::stream&
test_handles::Handles::stream_handle() const {
  return storage_.stream_handle;
}

::zx::stream& ::test_handles::Handles::stream_handle() {
  return storage_.stream_handle;
}

::test_handles::Handles& ::test_handles::Handles::stream_handle(::zx::stream value) {
  storage_.stream_handle = std::move(value);
  return *this;
}
const ::zx::suspend_token&
test_handles::Handles::suspendtoken_handle() const {
  return storage_.suspendtoken_handle;
}

::zx::suspend_token& ::test_handles::Handles::suspendtoken_handle() {
  return storage_.suspendtoken_handle;
}

::test_handles::Handles& ::test_handles::Handles::suspendtoken_handle(::zx::suspend_token value) {
  storage_.suspendtoken_handle = std::move(value);
  return *this;
}
const ::zx::thread&
test_handles::Handles::thread_handle() const {
  return storage_.thread_handle;
}

::zx::thread& ::test_handles::Handles::thread_handle() {
  return storage_.thread_handle;
}

::test_handles::Handles& ::test_handles::Handles::thread_handle(::zx::thread value) {
  storage_.thread_handle = std::move(value);
  return *this;
}
const ::zx::timer&
test_handles::Handles::timer_handle() const {
  return storage_.timer_handle;
}

::zx::timer& ::test_handles::Handles::timer_handle() {
  return storage_.timer_handle;
}

::test_handles::Handles& ::test_handles::Handles::timer_handle(::zx::timer value) {
  storage_.timer_handle = std::move(value);
  return *this;
}
const ::zx::vcpu&
test_handles::Handles::vcpu_handle() const {
  return storage_.vcpu_handle;
}

::zx::vcpu& ::test_handles::Handles::vcpu_handle() {
  return storage_.vcpu_handle;
}

::test_handles::Handles& ::test_handles::Handles::vcpu_handle(::zx::vcpu value) {
  storage_.vcpu_handle = std::move(value);
  return *this;
}
const ::zx::vmar&
test_handles::Handles::vmar_handle() const {
  return storage_.vmar_handle;
}

::zx::vmar& ::test_handles::Handles::vmar_handle() {
  return storage_.vmar_handle;
}

::test_handles::Handles& ::test_handles::Handles::vmar_handle(::zx::vmar value) {
  storage_.vmar_handle = std::move(value);
  return *this;
}
const ::zx::vmo&
test_handles::Handles::vmo_handle() const {
  return storage_.vmo_handle;
}

::zx::vmo& ::test_handles::Handles::vmo_handle() {
  return storage_.vmo_handle;
}

::test_handles::Handles& ::test_handles::Handles::vmo_handle(::zx::vmo value) {
  storage_.vmo_handle = std::move(value);
  return *this;
}
const ::zx::vmo&
test_handles::Handles::rights_handle() const {
  return storage_.rights_handle;
}

::zx::vmo& ::test_handles::Handles::rights_handle() {
  return storage_.rights_handle;
}

::test_handles::Handles& ::test_handles::Handles::rights_handle(::zx::vmo value) {
  storage_.rights_handle = std::move(value);
  return *this;
}
const ::zx::handle&
test_handles::Handles::aliased_plain_handle_field() const {
  return storage_.aliased_plain_handle_field;
}

::zx::handle& ::test_handles::Handles::aliased_plain_handle_field() {
  return storage_.aliased_plain_handle_field;
}

::test_handles::Handles& ::test_handles::Handles::aliased_plain_handle_field(::zx::handle value) {
  storage_.aliased_plain_handle_field = std::move(value);
  return *this;
}
const ::zx::vmo&
test_handles::Handles::aliased_subtype_handle_field() const {
  return storage_.aliased_subtype_handle_field;
}

::zx::vmo& ::test_handles::Handles::aliased_subtype_handle_field() {
  return storage_.aliased_subtype_handle_field;
}

::test_handles::Handles& ::test_handles::Handles::aliased_subtype_handle_field(::zx::vmo value) {
  storage_.aliased_subtype_handle_field = std::move(value);
  return *this;
}
const ::zx::vmo&
test_handles::Handles::aliased_rights_handle_field() const {
  return storage_.aliased_rights_handle_field;
}

::zx::vmo& ::test_handles::Handles::aliased_rights_handle_field() {
  return storage_.aliased_rights_handle_field;
}

::test_handles::Handles& ::test_handles::Handles::aliased_rights_handle_field(::zx::vmo value) {
  storage_.aliased_rights_handle_field = std::move(value);
  return *this;
}
const ::fidl::ClientEnd<::test_handles::SomeProtocol>&
test_handles::Handles::some_protocol() const {
  return storage_.some_protocol;
}

::fidl::ClientEnd<::test_handles::SomeProtocol>& ::test_handles::Handles::some_protocol() {
  return storage_.some_protocol;
}

::test_handles::Handles& ::test_handles::Handles::some_protocol(::fidl::ClientEnd<::test_handles::SomeProtocol> value) {
  storage_.some_protocol = std::move(value);
  return *this;
}
const ::fidl::ServerEnd<::test_handles::SomeProtocol>&
test_handles::Handles::request_some_protocol() const {
  return storage_.request_some_protocol;
}

::fidl::ServerEnd<::test_handles::SomeProtocol>& ::test_handles::Handles::request_some_protocol() {
  return storage_.request_some_protocol;
}

::test_handles::Handles& ::test_handles::Handles::request_some_protocol(::fidl::ServerEnd<::test_handles::SomeProtocol> value) {
  storage_.request_some_protocol = std::move(value);
  return *this;
}

::test_handles::FdfHandles::FdfHandles(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_handles::FdfHandles::FdfHandles(::fdf::Channel fdf_channel_handle, ::fdf::ClientEnd<::test_handles::DriverProtocol> client_end_driver, ::fdf::ServerEnd<::test_handles::DriverProtocol> server_end_driver) noexcept
    : storage_({.fdf_channel_handle = std::move(fdf_channel_handle),
                .client_end_driver = std::move(client_end_driver),
                .server_end_driver = std::move(server_end_driver)}) {}

::test_handles::FdfHandles::FdfHandles(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : FdfHandles(Storage_{
                                                                                                         .fdf_channel_handle = {},
                                                                                                         .client_end_driver = {},
                                                                                                         .server_end_driver = {},
                                                                                                     }) {}
const ::fdf::Channel&
test_handles::FdfHandles::fdf_channel_handle() const {
  return storage_.fdf_channel_handle;
}

::fdf::Channel& ::test_handles::FdfHandles::fdf_channel_handle() {
  return storage_.fdf_channel_handle;
}

::test_handles::FdfHandles& ::test_handles::FdfHandles::fdf_channel_handle(::fdf::Channel value) {
  storage_.fdf_channel_handle = std::move(value);
  return *this;
}
const ::fdf::ClientEnd<::test_handles::DriverProtocol>&
test_handles::FdfHandles::client_end_driver() const {
  return storage_.client_end_driver;
}

::fdf::ClientEnd<::test_handles::DriverProtocol>& ::test_handles::FdfHandles::client_end_driver() {
  return storage_.client_end_driver;
}

::test_handles::FdfHandles& ::test_handles::FdfHandles::client_end_driver(::fdf::ClientEnd<::test_handles::DriverProtocol> value) {
  storage_.client_end_driver = std::move(value);
  return *this;
}
const ::fdf::ServerEnd<::test_handles::DriverProtocol>&
test_handles::FdfHandles::server_end_driver() const {
  return storage_.server_end_driver;
}

::fdf::ServerEnd<::test_handles::DriverProtocol>& ::test_handles::FdfHandles::server_end_driver() {
  return storage_.server_end_driver;
}

::test_handles::FdfHandles& ::test_handles::FdfHandles::server_end_driver(::fdf::ServerEnd<::test_handles::DriverProtocol> value) {
  storage_.server_end_driver = std::move(value);
  return *this;
}

#endif  // __Fuchsia__

#pragma clang diagnostic pop
