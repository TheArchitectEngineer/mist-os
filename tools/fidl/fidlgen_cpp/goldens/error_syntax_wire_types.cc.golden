// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.errorsyntax/cpp/wire_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailRequest, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailRequest* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (kIsMemcpyCompatible) {
    memcpy(position.As<void>(), value, sizeof(::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailRequest));
  } else {
    internal::WireCodingTraits<::fidl::StringView, fidl::internal::WireCodingConstraintString<false>, IsRecursive>::Encode(encoder, &value->s, position + 0, recursion_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailRequest, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (!Base::are_members_memcpy_compatible) {
    internal::WireCodingTraits<::fidl::StringView, fidl::internal::WireCodingConstraintString<false>, IsRecursive>::Decode(
        decoder, position + 0, recursion_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailRequest, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailRequest, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailRequest>);
static_assert(offsetof(::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailRequest, s) == 0);
static_assert(sizeof(::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailRequest) == ::fidl::TypeTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailRequest>::kPrimarySize);

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (kIsMemcpyCompatible) {
    memcpy(position.As<void>(), value, sizeof(::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse));
  } else {
    internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(encoder, &value->value, position + 0, recursion_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (!Base::are_members_memcpy_compatible) {
    internal::WireCodingTraits<int64_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + 0, recursion_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse>);
static_assert(offsetof(::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse, value) == 0);
static_assert(sizeof(::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse) == ::fidl::TypeTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse>::kPrimarySize);

::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::ExampleUseOfErrorSyntaxCallWhichMayFailResult() : ordinal_(::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Ordinal::Invalid), envelope_{} {}
::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Which() const {
  ZX_ASSERT(!has_invalid_tag());
  return static_cast<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag>(ordinal_);
}

void ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(ExampleUseOfErrorSyntaxCallWhichMayFailResult) == sizeof(fidl_union_t));
  static_assert(offsetof(ExampleUseOfErrorSyntaxCallWhichMayFailResult, ordinal_) == offsetof(fidl_union_t, tag));
  static_assert(offsetof(ExampleUseOfErrorSyntaxCallWhichMayFailResult, envelope_) == offsetof(fidl_union_t, envelope));
}

bool test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::has_invalid_tag() const { return ordinal_ == ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Ordinal::Invalid; }

bool test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::is_response() const { return ordinal_ == ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Ordinal::kResponse; }
::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::WithResponse(::fidl::ObjectView<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse> val) {
  ExampleUseOfErrorSyntaxCallWhichMayFailResult result;
  result.ordinal_ = ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Ordinal::kResponse;
  result.envelope_.As<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse>().set_data(std::move(val));
  return result;
}

::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse& test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::response() {
  ZX_ASSERT(ordinal_ == ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Ordinal::kResponse);
  return envelope_.As<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse>().get_data();
}
const ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse& test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::response() const {
  ZX_ASSERT(ordinal_ == ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Ordinal::kResponse);
  return envelope_.As<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse>().get_data();
}

bool test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::is_err() const { return ordinal_ == ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Ordinal::kErr; }
::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::WithErr(uint32_t val) {
  ExampleUseOfErrorSyntaxCallWhichMayFailResult result;
  result.ordinal_ = ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Ordinal::kErr;
  result.envelope_.As<uint32_t>().set_data(std::move(val));
  return result;
}

uint32_t& test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::err() {
  ZX_ASSERT(ordinal_ == ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Ordinal::kErr);
  return envelope_.As<uint32_t>().get_data();
}
const uint32_t& test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::err() const {
  ZX_ASSERT(ordinal_ == ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Ordinal::kErr);
  return envelope_.As<uint32_t>().get_data();
}

static_assert(std::is_standard_layout_v<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult>);

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult, Constraint, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

  if (unlikely(u->tag == 0)) {
    if constexpr (Constraint::is_optional) {
      *position.As<fidl_union_t>() = {};
      return;
    }
    encoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  *position.As<fidl_xunion_tag_t>() = u->tag;

  size_t encode_inline_size;
  switch (u->tag) {
    case 1:  // ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag::kResponse
      encode_inline_size = ::fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    case 2:  // ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag::kErr
      encode_inline_size = ::fidl::internal::WireCodingTraits<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      encode_inline_size = 0;
      break;
  }
  ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
  switch (u->tag) {
    case 1:  // ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag::kResponse
      encode_fn = ::fidl::internal::MakeEncodeFn<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    case 2:  // ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag::kErr
      encode_fn = ::fidl::internal::MakeEncodeFn<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      encode_fn = nullptr;
      break;
  }
  WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult, Constraint, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag tag = *position.As<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag>();
  if (unlikely(static_cast<uint64_t>(tag) == 0)) {
    if constexpr (!Constraint::is_optional) {
      decoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
      return;
    }
    if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
      decoder->SetError(::fidl::internal::kCodingErrorZeroTagButNonZeroEnvelope);
    }
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  size_t decode_inline_size;
  switch (tag) {
    case ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag::kResponse:
      decode_inline_size = ::fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    case ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag::kErr:
      decode_inline_size = ::fidl::internal::WireCodingTraits<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      decode_inline_size = 0;
      break;
  }
  DecodeFn<IsRecursive> decode_fn;
  switch (tag) {
    case ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag::kResponse:
      decode_fn = ::fidl::internal::MakeDecodeFn<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    case ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag::kErr:
      decode_fn = ::fidl::internal::MakeDecodeFn<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      decode_fn = nullptr;
      break;
  }
  ::fidl::internal::WireDecodeStrictEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template struct ::fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult, ::fidl::internal::WireCodingConstraintUnion<false>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult, ::fidl::internal::WireCodingConstraintUnion<false>, false>;
template struct ::fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult, ::fidl::internal::WireCodingConstraintUnion<true>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult, ::fidl::internal::WireCodingConstraintUnion<true>, false>;

#pragma clang diagnostic pop
