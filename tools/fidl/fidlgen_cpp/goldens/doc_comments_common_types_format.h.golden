// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.doccomments/cpp/common_types.h>

#if defined(__cpp_lib_format) && __cplusplus >= 202002L && defined(__Fuchsia__)
#include <format>

template <>
struct std::formatter<::test_doccomments::MyStrictBits> {
  constexpr auto parse(auto& ctx) { return ctx.begin(); }
  auto format(const ::test_doccomments::MyStrictBits& value, std::format_context& ctx) const {
    auto out = ctx.out();
    out = std::format_to(out, "test_doccomments::MyStrictBits(");
    bool first = true;
    if (value & ::test_doccomments::MyStrictBits::kMyFirstBit) {
      if (!first) *out++ = '|';
      first = false;
      out = std::format_to(out, "kMyFirstBit");
    }
    if (value & ::test_doccomments::MyStrictBits::kMyOtherBit) {
      if (!first) *out++ = '|';
      first = false;
      out = std::format_to(out, "kMyOtherBit");
    }
    *out++ = ')';
    return out;
  }
};
template <>
struct std::formatter<::test_doccomments::MyFlexibleBits> {
  constexpr auto parse(auto& ctx) { return ctx.begin(); }
  auto format(const ::test_doccomments::MyFlexibleBits& value, std::format_context& ctx) const {
    auto out = ctx.out();
    out = std::format_to(out, "test_doccomments::MyFlexibleBits(");
    bool first = true;
    if (value & ::test_doccomments::MyFlexibleBits::kMyFirstBit) {
      if (!first) *out++ = '|';
      first = false;
      out = std::format_to(out, "kMyFirstBit");
    }
    if (value & ::test_doccomments::MyFlexibleBits::kMyOtherBit) {
      if (!first) *out++ = '|';
      first = false;
      out = std::format_to(out, "kMyOtherBit");
    }
    if (value.has_unknown_bits()) {
      if (!first) *out++ = '|';
      out = std::format_to(out, "{}", static_cast<uint32_t>(value.unknown_bits()));
    }
    *out++ = ')';
    return out;
  }
};
template <>
struct std::formatter<::test_doccomments::MyStrictEnum> {
  constexpr auto parse(auto& ctx) { return ctx.begin(); }
  auto format(const ::test_doccomments::MyStrictEnum& value, std::format_context& ctx) const {
    std::string_view output;
    switch (value) {
      case ::test_doccomments::MyStrictEnum::kFoo:
        output = "kFoo";
        break;
      case ::test_doccomments::MyStrictEnum::kBar:
        output = "kBar";
        break;
      default:
        output = "UNKNOWN";
    }
    return std::format_to(ctx.out(), "test_doccomments::MyStrictEnum::{}", output);
  }
};
template <>
struct std::formatter<::test_doccomments::MyFlexibleEnum> {
  constexpr auto parse(auto& ctx) { return ctx.begin(); }
  auto format(const ::test_doccomments::MyFlexibleEnum& value, std::format_context& ctx) const {
    std::string_view output;
    switch (value) {
      case ::test_doccomments::MyFlexibleEnum::kFoo:
        output = "kFoo";
        break;
      case ::test_doccomments::MyFlexibleEnum::kBar:
        output = "kBar";
        break;
      default:
        output = "UNKNOWN";
    }
    return std::format_to(ctx.out(), "test_doccomments::MyFlexibleEnum::{}", output);
  }
};

#endif
