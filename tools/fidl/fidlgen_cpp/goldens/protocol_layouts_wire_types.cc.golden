// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.protocollayouts/cpp/wire_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_protocollayouts::wire::LocalUnionPayload::LocalUnionPayload() : ordinal_(::test_protocollayouts::wire::LocalUnionPayload::Ordinal::Invalid), envelope_{} {}
auto ::test_protocollayouts::wire::LocalUnionPayload::Which() const -> ::test_protocollayouts::wire::LocalUnionPayload::Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case ::test_protocollayouts::wire::LocalUnionPayload::Ordinal::kB:
      return static_cast<::test_protocollayouts::wire::LocalUnionPayload::Tag>(ordinal_);
    default:
      return ::test_protocollayouts::wire::LocalUnionPayload::Tag::_do_not_handle_this__write_a_default_case_instead;
  }
}

void ::test_protocollayouts::wire::LocalUnionPayload::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(LocalUnionPayload) == sizeof(fidl_union_t));
  static_assert(offsetof(LocalUnionPayload, ordinal_) == offsetof(fidl_union_t, tag));
  static_assert(offsetof(LocalUnionPayload, envelope_) == offsetof(fidl_union_t, envelope));
}

bool test_protocollayouts::wire::LocalUnionPayload::has_invalid_tag() const { return ordinal_ == ::test_protocollayouts::wire::LocalUnionPayload::Ordinal::Invalid; }

bool test_protocollayouts::wire::LocalUnionPayload::is_b() const { return ordinal_ == ::test_protocollayouts::wire::LocalUnionPayload::Ordinal::kB; }
::test_protocollayouts::wire::LocalUnionPayload test_protocollayouts::wire::LocalUnionPayload::WithB(bool val) {
  LocalUnionPayload result;
  result.ordinal_ = ::test_protocollayouts::wire::LocalUnionPayload::Ordinal::kB;
  result.envelope_.As<bool>().set_data(std::move(val));
  return result;
}

bool& test_protocollayouts::wire::LocalUnionPayload::b() {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::LocalUnionPayload::Ordinal::kB);
  return envelope_.As<bool>().get_data();
}
const bool& test_protocollayouts::wire::LocalUnionPayload::b() const {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::LocalUnionPayload::Ordinal::kB);
  return envelope_.As<bool>().get_data();
}

static_assert(std::is_standard_layout_v<::test_protocollayouts::wire::LocalUnionPayload>);

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::LocalUnionPayload, Constraint, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_protocollayouts::wire::LocalUnionPayload* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

  if (unlikely(u->tag == 0)) {
    if constexpr (Constraint::is_optional) {
      *position.As<fidl_union_t>() = {};
      return;
    }
    encoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  *position.As<fidl_xunion_tag_t>() = u->tag;

  size_t encode_inline_size;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::LocalUnionPayload::Tag::kB
      encode_inline_size = ::fidl::internal::WireCodingTraits<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      encode_inline_size = 0;
      break;
  }
  ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::LocalUnionPayload::Tag::kB
      encode_fn = ::fidl::internal::MakeEncodeFn<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      encode_fn = nullptr;
      break;
  }
  WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::LocalUnionPayload, Constraint, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_protocollayouts::wire::LocalUnionPayload::Tag tag = *position.As<::test_protocollayouts::wire::LocalUnionPayload::Tag>();
  if (unlikely(static_cast<uint64_t>(tag) == 0)) {
    if constexpr (!Constraint::is_optional) {
      decoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
      return;
    }
    if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
      decoder->SetError(::fidl::internal::kCodingErrorZeroTagButNonZeroEnvelope);
    }
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  size_t decode_inline_size;
  switch (tag) {
    case ::test_protocollayouts::wire::LocalUnionPayload::Tag::kB:
      decode_inline_size = ::fidl::internal::WireCodingTraits<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      decode_inline_size = 0;
      break;
  }
  DecodeFn<IsRecursive> decode_fn;
  switch (tag) {
    case ::test_protocollayouts::wire::LocalUnionPayload::Tag::kB:
      decode_fn = ::fidl::internal::MakeDecodeFn<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      decode_fn = nullptr;
      break;
  }
  ::fidl::internal::WireDecodeFlexibleEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::LocalUnionPayload, ::fidl::internal::WireCodingConstraintUnion<false>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::LocalUnionPayload, ::fidl::internal::WireCodingConstraintUnion<false>, false>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::LocalUnionPayload, ::fidl::internal::WireCodingConstraintUnion<true>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::LocalUnionPayload, ::fidl::internal::WireCodingConstraintUnion<true>, false>;

::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::MainProtocolTwoWayImportWithErrorResult() : ordinal_(::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Ordinal::Invalid), envelope_{} {}
::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Tag test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Which() const {
  ZX_ASSERT(!has_invalid_tag());
  return static_cast<::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Tag>(ordinal_);
}

void ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(MainProtocolTwoWayImportWithErrorResult) == sizeof(fidl_union_t));
  static_assert(offsetof(MainProtocolTwoWayImportWithErrorResult, ordinal_) == offsetof(fidl_union_t, tag));
  static_assert(offsetof(MainProtocolTwoWayImportWithErrorResult, envelope_) == offsetof(fidl_union_t, envelope));
}

bool test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::has_invalid_tag() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Ordinal::Invalid; }

bool test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::is_response() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Ordinal::kResponse; }
::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::WithResponse(::fidl::ObjectView<::test_protocollayouts_imported::wire::ImportUnionPayload> val) {
  MainProtocolTwoWayImportWithErrorResult result;
  result.ordinal_ = ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Ordinal::kResponse;
  result.envelope_.As<::test_protocollayouts_imported::wire::ImportUnionPayload>().set_data(std::move(val));
  return result;
}

::test_protocollayouts_imported::wire::ImportUnionPayload& test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::response() {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Ordinal::kResponse);
  return envelope_.As<::test_protocollayouts_imported::wire::ImportUnionPayload>().get_data();
}
const ::test_protocollayouts_imported::wire::ImportUnionPayload& test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::response() const {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Ordinal::kResponse);
  return envelope_.As<::test_protocollayouts_imported::wire::ImportUnionPayload>().get_data();
}

bool test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::is_err() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Ordinal::kErr; }
::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::WithErr(uint32_t val) {
  MainProtocolTwoWayImportWithErrorResult result;
  result.ordinal_ = ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Ordinal::kErr;
  result.envelope_.As<uint32_t>().set_data(std::move(val));
  return result;
}

uint32_t& test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::err() {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Ordinal::kErr);
  return envelope_.As<uint32_t>().get_data();
}
const uint32_t& test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::err() const {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Ordinal::kErr);
  return envelope_.As<uint32_t>().get_data();
}

static_assert(std::is_standard_layout_v<::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult>);

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult, Constraint, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

  if (unlikely(u->tag == 0)) {
    if constexpr (Constraint::is_optional) {
      *position.As<fidl_union_t>() = {};
      return;
    }
    encoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  *position.As<fidl_xunion_tag_t>() = u->tag;

  size_t encode_inline_size;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Tag::kResponse
      encode_inline_size = ::fidl::internal::WireCodingTraits<::test_protocollayouts_imported::wire::ImportUnionPayload, fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>::kInlineSize;
      break;
    case 2:  // ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Tag::kErr
      encode_inline_size = ::fidl::internal::WireCodingTraits<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      encode_inline_size = 0;
      break;
  }
  ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Tag::kResponse
      encode_fn = ::fidl::internal::MakeEncodeFn<::test_protocollayouts_imported::wire::ImportUnionPayload, fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>();
      break;
    case 2:  // ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Tag::kErr
      encode_fn = ::fidl::internal::MakeEncodeFn<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      encode_fn = nullptr;
      break;
  }
  WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult, Constraint, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Tag tag = *position.As<::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Tag>();
  if (unlikely(static_cast<uint64_t>(tag) == 0)) {
    if constexpr (!Constraint::is_optional) {
      decoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
      return;
    }
    if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
      decoder->SetError(::fidl::internal::kCodingErrorZeroTagButNonZeroEnvelope);
    }
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  size_t decode_inline_size;
  switch (tag) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Tag::kResponse:
      decode_inline_size = ::fidl::internal::WireCodingTraits<::test_protocollayouts_imported::wire::ImportUnionPayload, fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>::kInlineSize;
      break;
    case ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Tag::kErr:
      decode_inline_size = ::fidl::internal::WireCodingTraits<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      decode_inline_size = 0;
      break;
  }
  DecodeFn<IsRecursive> decode_fn;
  switch (tag) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Tag::kResponse:
      decode_fn = ::fidl::internal::MakeDecodeFn<::test_protocollayouts_imported::wire::ImportUnionPayload, fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>();
      break;
    case ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::Tag::kErr:
      decode_fn = ::fidl::internal::MakeDecodeFn<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      decode_fn = nullptr;
      break;
  }
  ::fidl::internal::WireDecodeStrictEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult, ::fidl::internal::WireCodingConstraintUnion<false>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult, ::fidl::internal::WireCodingConstraintUnion<false>, false>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult, ::fidl::internal::WireCodingConstraintUnion<true>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult, ::fidl::internal::WireCodingConstraintUnion<true>, false>;

::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::MainProtocolTwoWayLocalWithErrorResult() : ordinal_(::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Ordinal::Invalid), envelope_{} {}
::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Tag test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Which() const {
  ZX_ASSERT(!has_invalid_tag());
  return static_cast<::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Tag>(ordinal_);
}

void ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(MainProtocolTwoWayLocalWithErrorResult) == sizeof(fidl_union_t));
  static_assert(offsetof(MainProtocolTwoWayLocalWithErrorResult, ordinal_) == offsetof(fidl_union_t, tag));
  static_assert(offsetof(MainProtocolTwoWayLocalWithErrorResult, envelope_) == offsetof(fidl_union_t, envelope));
}

bool test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::has_invalid_tag() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Ordinal::Invalid; }

bool test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::is_response() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Ordinal::kResponse; }
::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::WithResponse(::fidl::ObjectView<::test_protocollayouts::wire::LocalUnionPayload> val) {
  MainProtocolTwoWayLocalWithErrorResult result;
  result.ordinal_ = ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Ordinal::kResponse;
  result.envelope_.As<::test_protocollayouts::wire::LocalUnionPayload>().set_data(std::move(val));
  return result;
}

::test_protocollayouts::wire::LocalUnionPayload& test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::response() {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Ordinal::kResponse);
  return envelope_.As<::test_protocollayouts::wire::LocalUnionPayload>().get_data();
}
const ::test_protocollayouts::wire::LocalUnionPayload& test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::response() const {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Ordinal::kResponse);
  return envelope_.As<::test_protocollayouts::wire::LocalUnionPayload>().get_data();
}

bool test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::is_err() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Ordinal::kErr; }
::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::WithErr(uint32_t val) {
  MainProtocolTwoWayLocalWithErrorResult result;
  result.ordinal_ = ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Ordinal::kErr;
  result.envelope_.As<uint32_t>().set_data(std::move(val));
  return result;
}

uint32_t& test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::err() {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Ordinal::kErr);
  return envelope_.As<uint32_t>().get_data();
}
const uint32_t& test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::err() const {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Ordinal::kErr);
  return envelope_.As<uint32_t>().get_data();
}

static_assert(std::is_standard_layout_v<::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult>);

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult, Constraint, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

  if (unlikely(u->tag == 0)) {
    if constexpr (Constraint::is_optional) {
      *position.As<fidl_union_t>() = {};
      return;
    }
    encoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  *position.As<fidl_xunion_tag_t>() = u->tag;

  size_t encode_inline_size;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Tag::kResponse
      encode_inline_size = ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::LocalUnionPayload, fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>::kInlineSize;
      break;
    case 2:  // ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Tag::kErr
      encode_inline_size = ::fidl::internal::WireCodingTraits<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      encode_inline_size = 0;
      break;
  }
  ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Tag::kResponse
      encode_fn = ::fidl::internal::MakeEncodeFn<::test_protocollayouts::wire::LocalUnionPayload, fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>();
      break;
    case 2:  // ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Tag::kErr
      encode_fn = ::fidl::internal::MakeEncodeFn<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      encode_fn = nullptr;
      break;
  }
  WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult, Constraint, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Tag tag = *position.As<::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Tag>();
  if (unlikely(static_cast<uint64_t>(tag) == 0)) {
    if constexpr (!Constraint::is_optional) {
      decoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
      return;
    }
    if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
      decoder->SetError(::fidl::internal::kCodingErrorZeroTagButNonZeroEnvelope);
    }
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  size_t decode_inline_size;
  switch (tag) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Tag::kResponse:
      decode_inline_size = ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::LocalUnionPayload, fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>::kInlineSize;
      break;
    case ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Tag::kErr:
      decode_inline_size = ::fidl::internal::WireCodingTraits<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      decode_inline_size = 0;
      break;
  }
  DecodeFn<IsRecursive> decode_fn;
  switch (tag) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Tag::kResponse:
      decode_fn = ::fidl::internal::MakeDecodeFn<::test_protocollayouts::wire::LocalUnionPayload, fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>();
      break;
    case ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::Tag::kErr:
      decode_fn = ::fidl::internal::MakeDecodeFn<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      decode_fn = nullptr;
      break;
  }
  ::fidl::internal::WireDecodeStrictEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult, ::fidl::internal::WireCodingConstraintUnion<false>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult, ::fidl::internal::WireCodingConstraintUnion<false>, false>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult, ::fidl::internal::WireCodingConstraintUnion<true>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult, ::fidl::internal::WireCodingConstraintUnion<true>, false>;

::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::MainProtocolTwoWayAnonRequest() : ordinal_(::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Ordinal::Invalid), envelope_{} {}
auto ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Which() const -> ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Ordinal::kB:
      return static_cast<::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Tag>(ordinal_);
    default:
      return ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Tag::_do_not_handle_this__write_a_default_case_instead;
  }
}

void ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(MainProtocolTwoWayAnonRequest) == sizeof(fidl_union_t));
  static_assert(offsetof(MainProtocolTwoWayAnonRequest, ordinal_) == offsetof(fidl_union_t, tag));
  static_assert(offsetof(MainProtocolTwoWayAnonRequest, envelope_) == offsetof(fidl_union_t, envelope));
}

bool test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::has_invalid_tag() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Ordinal::Invalid; }

bool test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::is_b() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Ordinal::kB; }
::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::WithB(bool val) {
  MainProtocolTwoWayAnonRequest result;
  result.ordinal_ = ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Ordinal::kB;
  result.envelope_.As<bool>().set_data(std::move(val));
  return result;
}

bool& test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::b() {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Ordinal::kB);
  return envelope_.As<bool>().get_data();
}
const bool& test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::b() const {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Ordinal::kB);
  return envelope_.As<bool>().get_data();
}

static_assert(std::is_standard_layout_v<::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest>);

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest, Constraint, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

  if (unlikely(u->tag == 0)) {
    if constexpr (Constraint::is_optional) {
      *position.As<fidl_union_t>() = {};
      return;
    }
    encoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  *position.As<fidl_xunion_tag_t>() = u->tag;

  size_t encode_inline_size;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Tag::kB
      encode_inline_size = ::fidl::internal::WireCodingTraits<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      encode_inline_size = 0;
      break;
  }
  ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Tag::kB
      encode_fn = ::fidl::internal::MakeEncodeFn<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      encode_fn = nullptr;
      break;
  }
  WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest, Constraint, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Tag tag = *position.As<::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Tag>();
  if (unlikely(static_cast<uint64_t>(tag) == 0)) {
    if constexpr (!Constraint::is_optional) {
      decoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
      return;
    }
    if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
      decoder->SetError(::fidl::internal::kCodingErrorZeroTagButNonZeroEnvelope);
    }
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  size_t decode_inline_size;
  switch (tag) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Tag::kB:
      decode_inline_size = ::fidl::internal::WireCodingTraits<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      decode_inline_size = 0;
      break;
  }
  DecodeFn<IsRecursive> decode_fn;
  switch (tag) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Tag::kB:
      decode_fn = ::fidl::internal::MakeDecodeFn<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      decode_fn = nullptr;
      break;
  }
  ::fidl::internal::WireDecodeFlexibleEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest, ::fidl::internal::WireCodingConstraintUnion<false>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest, ::fidl::internal::WireCodingConstraintUnion<false>, false>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest, ::fidl::internal::WireCodingConstraintUnion<true>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest, ::fidl::internal::WireCodingConstraintUnion<true>, false>;

::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::MainProtocolTwoWayAnonWithErrorResponse() : ordinal_(::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Ordinal::Invalid), envelope_{} {}
auto ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Which() const -> ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Ordinal::kB:
      return static_cast<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Tag>(ordinal_);
    default:
      return ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Tag::_do_not_handle_this__write_a_default_case_instead;
  }
}

void ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(MainProtocolTwoWayAnonWithErrorResponse) == sizeof(fidl_union_t));
  static_assert(offsetof(MainProtocolTwoWayAnonWithErrorResponse, ordinal_) == offsetof(fidl_union_t, tag));
  static_assert(offsetof(MainProtocolTwoWayAnonWithErrorResponse, envelope_) == offsetof(fidl_union_t, envelope));
}

bool test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::has_invalid_tag() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Ordinal::Invalid; }

bool test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::is_b() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Ordinal::kB; }
::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::WithB(bool val) {
  MainProtocolTwoWayAnonWithErrorResponse result;
  result.ordinal_ = ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Ordinal::kB;
  result.envelope_.As<bool>().set_data(std::move(val));
  return result;
}

bool& test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::b() {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Ordinal::kB);
  return envelope_.As<bool>().get_data();
}
const bool& test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::b() const {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Ordinal::kB);
  return envelope_.As<bool>().get_data();
}

static_assert(std::is_standard_layout_v<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse>);

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse, Constraint, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

  if (unlikely(u->tag == 0)) {
    if constexpr (Constraint::is_optional) {
      *position.As<fidl_union_t>() = {};
      return;
    }
    encoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  *position.As<fidl_xunion_tag_t>() = u->tag;

  size_t encode_inline_size;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Tag::kB
      encode_inline_size = ::fidl::internal::WireCodingTraits<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      encode_inline_size = 0;
      break;
  }
  ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Tag::kB
      encode_fn = ::fidl::internal::MakeEncodeFn<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      encode_fn = nullptr;
      break;
  }
  WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse, Constraint, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Tag tag = *position.As<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Tag>();
  if (unlikely(static_cast<uint64_t>(tag) == 0)) {
    if constexpr (!Constraint::is_optional) {
      decoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
      return;
    }
    if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
      decoder->SetError(::fidl::internal::kCodingErrorZeroTagButNonZeroEnvelope);
    }
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  size_t decode_inline_size;
  switch (tag) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Tag::kB:
      decode_inline_size = ::fidl::internal::WireCodingTraits<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      decode_inline_size = 0;
      break;
  }
  DecodeFn<IsRecursive> decode_fn;
  switch (tag) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::Tag::kB:
      decode_fn = ::fidl::internal::MakeDecodeFn<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      decode_fn = nullptr;
      break;
  }
  ::fidl::internal::WireDecodeFlexibleEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse, ::fidl::internal::WireCodingConstraintUnion<false>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse, ::fidl::internal::WireCodingConstraintUnion<false>, false>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse, ::fidl::internal::WireCodingConstraintUnion<true>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse, ::fidl::internal::WireCodingConstraintUnion<true>, false>;

::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::MainProtocolTwoWayAnonWithErrorResult() : ordinal_(::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Ordinal::Invalid), envelope_{} {}
::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Tag test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Which() const {
  ZX_ASSERT(!has_invalid_tag());
  return static_cast<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Tag>(ordinal_);
}

void ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(MainProtocolTwoWayAnonWithErrorResult) == sizeof(fidl_union_t));
  static_assert(offsetof(MainProtocolTwoWayAnonWithErrorResult, ordinal_) == offsetof(fidl_union_t, tag));
  static_assert(offsetof(MainProtocolTwoWayAnonWithErrorResult, envelope_) == offsetof(fidl_union_t, envelope));
}

bool test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::has_invalid_tag() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Ordinal::Invalid; }

bool test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::is_response() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Ordinal::kResponse; }
::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::WithResponse(::fidl::ObjectView<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse> val) {
  MainProtocolTwoWayAnonWithErrorResult result;
  result.ordinal_ = ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Ordinal::kResponse;
  result.envelope_.As<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse>().set_data(std::move(val));
  return result;
}

::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse& test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::response() {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Ordinal::kResponse);
  return envelope_.As<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse>().get_data();
}
const ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse& test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::response() const {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Ordinal::kResponse);
  return envelope_.As<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse>().get_data();
}

bool test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::is_err() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Ordinal::kErr; }
::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::WithErr(uint32_t val) {
  MainProtocolTwoWayAnonWithErrorResult result;
  result.ordinal_ = ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Ordinal::kErr;
  result.envelope_.As<uint32_t>().set_data(std::move(val));
  return result;
}

uint32_t& test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::err() {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Ordinal::kErr);
  return envelope_.As<uint32_t>().get_data();
}
const uint32_t& test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::err() const {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Ordinal::kErr);
  return envelope_.As<uint32_t>().get_data();
}

static_assert(std::is_standard_layout_v<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult>);

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult, Constraint, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

  if (unlikely(u->tag == 0)) {
    if constexpr (Constraint::is_optional) {
      *position.As<fidl_union_t>() = {};
      return;
    }
    encoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  *position.As<fidl_xunion_tag_t>() = u->tag;

  size_t encode_inline_size;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Tag::kResponse
      encode_inline_size = ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse, fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>::kInlineSize;
      break;
    case 2:  // ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Tag::kErr
      encode_inline_size = ::fidl::internal::WireCodingTraits<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      encode_inline_size = 0;
      break;
  }
  ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Tag::kResponse
      encode_fn = ::fidl::internal::MakeEncodeFn<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse, fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>();
      break;
    case 2:  // ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Tag::kErr
      encode_fn = ::fidl::internal::MakeEncodeFn<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      encode_fn = nullptr;
      break;
  }
  WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult, Constraint, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Tag tag = *position.As<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Tag>();
  if (unlikely(static_cast<uint64_t>(tag) == 0)) {
    if constexpr (!Constraint::is_optional) {
      decoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
      return;
    }
    if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
      decoder->SetError(::fidl::internal::kCodingErrorZeroTagButNonZeroEnvelope);
    }
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  size_t decode_inline_size;
  switch (tag) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Tag::kResponse:
      decode_inline_size = ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse, fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>::kInlineSize;
      break;
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Tag::kErr:
      decode_inline_size = ::fidl::internal::WireCodingTraits<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      decode_inline_size = 0;
      break;
  }
  DecodeFn<IsRecursive> decode_fn;
  switch (tag) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Tag::kResponse:
      decode_fn = ::fidl::internal::MakeDecodeFn<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse, fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>();
      break;
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::Tag::kErr:
      decode_fn = ::fidl::internal::MakeDecodeFn<uint32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      decode_fn = nullptr;
      break;
  }
  ::fidl::internal::WireDecodeStrictEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult, ::fidl::internal::WireCodingConstraintUnion<false>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult, ::fidl::internal::WireCodingConstraintUnion<false>, false>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult, ::fidl::internal::WireCodingConstraintUnion<true>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult, ::fidl::internal::WireCodingConstraintUnion<true>, false>;

::test_protocollayouts::wire::MainProtocolOnAnonRequest::MainProtocolOnAnonRequest() : ordinal_(::test_protocollayouts::wire::MainProtocolOnAnonRequest::Ordinal::Invalid), envelope_{} {}
auto ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Which() const -> ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Ordinal::kB:
      return static_cast<::test_protocollayouts::wire::MainProtocolOnAnonRequest::Tag>(ordinal_);
    default:
      return ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Tag::_do_not_handle_this__write_a_default_case_instead;
  }
}

void ::test_protocollayouts::wire::MainProtocolOnAnonRequest::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(MainProtocolOnAnonRequest) == sizeof(fidl_union_t));
  static_assert(offsetof(MainProtocolOnAnonRequest, ordinal_) == offsetof(fidl_union_t, tag));
  static_assert(offsetof(MainProtocolOnAnonRequest, envelope_) == offsetof(fidl_union_t, envelope));
}

bool test_protocollayouts::wire::MainProtocolOnAnonRequest::has_invalid_tag() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Ordinal::Invalid; }

bool test_protocollayouts::wire::MainProtocolOnAnonRequest::is_b() const { return ordinal_ == ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Ordinal::kB; }
::test_protocollayouts::wire::MainProtocolOnAnonRequest test_protocollayouts::wire::MainProtocolOnAnonRequest::WithB(bool val) {
  MainProtocolOnAnonRequest result;
  result.ordinal_ = ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Ordinal::kB;
  result.envelope_.As<bool>().set_data(std::move(val));
  return result;
}

bool& test_protocollayouts::wire::MainProtocolOnAnonRequest::b() {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Ordinal::kB);
  return envelope_.As<bool>().get_data();
}
const bool& test_protocollayouts::wire::MainProtocolOnAnonRequest::b() const {
  ZX_ASSERT(ordinal_ == ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Ordinal::kB);
  return envelope_.As<bool>().get_data();
}

static_assert(std::is_standard_layout_v<::test_protocollayouts::wire::MainProtocolOnAnonRequest>);

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolOnAnonRequest, Constraint, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_protocollayouts::wire::MainProtocolOnAnonRequest* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

  if (unlikely(u->tag == 0)) {
    if constexpr (Constraint::is_optional) {
      *position.As<fidl_union_t>() = {};
      return;
    }
    encoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  *position.As<fidl_xunion_tag_t>() = u->tag;

  size_t encode_inline_size;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Tag::kB
      encode_inline_size = ::fidl::internal::WireCodingTraits<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      encode_inline_size = 0;
      break;
  }
  ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
  switch (u->tag) {
    case 1:  // ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Tag::kB
      encode_fn = ::fidl::internal::MakeEncodeFn<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      encode_fn = nullptr;
      break;
  }
  WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolOnAnonRequest, Constraint, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Tag tag = *position.As<::test_protocollayouts::wire::MainProtocolOnAnonRequest::Tag>();
  if (unlikely(static_cast<uint64_t>(tag) == 0)) {
    if constexpr (!Constraint::is_optional) {
      decoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
      return;
    }
    if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
      decoder->SetError(::fidl::internal::kCodingErrorZeroTagButNonZeroEnvelope);
    }
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  size_t decode_inline_size;
  switch (tag) {
    case ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Tag::kB:
      decode_inline_size = ::fidl::internal::WireCodingTraits<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      decode_inline_size = 0;
      break;
  }
  DecodeFn<IsRecursive> decode_fn;
  switch (tag) {
    case ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Tag::kB:
      decode_fn = ::fidl::internal::MakeDecodeFn<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      decode_fn = nullptr;
      break;
  }
  ::fidl::internal::WireDecodeFlexibleEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolOnAnonRequest, ::fidl::internal::WireCodingConstraintUnion<false>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolOnAnonRequest, ::fidl::internal::WireCodingConstraintUnion<false>, false>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolOnAnonRequest, ::fidl::internal::WireCodingConstraintUnion<true>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolOnAnonRequest, ::fidl::internal::WireCodingConstraintUnion<true>, false>;

bool ::fidl::WireTableFrame<::test_protocollayouts::wire::LocalTablePayload>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_protocollayouts::wire::LocalTablePayload>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
  if (!a_.has_data()) {
    max_ordinal = 1;
  }
  return max_ordinal;
}

::test_protocollayouts::wire::LocalTablePayload::LocalTablePayload(::fidl::AnyArena& allocator)
    : frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::LocalTablePayload>>(allocator)) {}

::test_protocollayouts::wire::LocalTablePayload::LocalTablePayload(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::LocalTablePayload>>&& frame)
    : frame_ptr_(std::move(frame)) {}

void test_protocollayouts::wire::LocalTablePayload::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::LocalTablePayload>>(allocator);
}
void test_protocollayouts::wire::LocalTablePayload::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::LocalTablePayload>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_protocollayouts::wire::LocalTablePayload::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_protocollayouts::wire::LocalTablePayload::HasUnknownData() const {
  if (max_ordinal_ > 1) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

uint16_t& test_protocollayouts::wire::LocalTablePayload::a() const {
  ZX_ASSERT(has_a());
  return frame_ptr_->a_.get_data();
}

bool test_protocollayouts::wire::LocalTablePayload::has_a() const {
  return max_ordinal_ >= 1 && frame_ptr_->a_.has_data();
}

::test_protocollayouts::wire::LocalTablePayload& test_protocollayouts::wire::LocalTablePayload::clear_a() {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.clear_data();
  max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
  return *this;
}

::test_protocollayouts::wire::LocalTablePayload& test_protocollayouts::wire::LocalTablePayload::set_a(uint16_t elem) {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.set_data(std::move(elem));
  max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
  return *this;
}

::fidl::WireTableBuilder<::test_protocollayouts::wire::LocalTablePayload> test_protocollayouts::wire::LocalTablePayload::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_protocollayouts::wire::LocalTablePayload>(arena);
}
::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::LocalTablePayload> test_protocollayouts::wire::LocalTablePayload::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::LocalTablePayload>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::LocalTablePayload>(std::move(frame));
}

template <typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::LocalTablePayload, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::LocalTablePayload>>&& frame)
    : table_(std::move(frame)) {}

template <typename BuilderImpl>
::test_protocollayouts::wire::LocalTablePayload fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::LocalTablePayload, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_protocollayouts::wire::LocalTablePayload t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
template <typename BuilderImpl>
bool fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::LocalTablePayload, BuilderImpl>::has_a() const {
  return table_.has_a();
}

template <typename BuilderImpl>
void fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::LocalTablePayload, BuilderImpl>::clear_a() {
  table_.clear_a();
}

template <typename BuilderImpl>
uint16_t& fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::LocalTablePayload, BuilderImpl>::a() const {
  return table_.a();
}
template <typename BuilderImpl>
BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::LocalTablePayload, BuilderImpl>::a(uint16_t elem) {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  table_.frame_ptr_->a_.set_data(std::move(elem));
  table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
  return *static_cast<BuilderImpl*>(this);
}

template class fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::LocalTablePayload, ::fidl::WireTableBuilder<::test_protocollayouts::wire::LocalTablePayload>>;
template class fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::LocalTablePayload, ::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::LocalTablePayload>>;

::fidl::WireTableBuilder<::test_protocollayouts::wire::LocalTablePayload>::WireTableBuilder(::fidl::AnyArena& arena)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::LocalTablePayload>>(arena)),
      arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::LocalTablePayload>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_protocollayouts::wire::LocalTablePayload>* frame)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::LocalTablePayload>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::LocalTablePayload, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_protocollayouts::wire::LocalTablePayload* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
      Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {
    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::LocalTablePayload, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {
    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch (i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::LocalTablePayload, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::LocalTablePayload, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_protocollayouts::wire::LocalTablePayload>);

bool ::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
  if (!a_.has_data()) {
    max_ordinal = 1;
  }
  return max_ordinal;
}

::test_protocollayouts::wire::MainProtocolOneWayAnonRequest::MainProtocolOneWayAnonRequest(::fidl::AnyArena& allocator)
    : frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>>(allocator)) {}

::test_protocollayouts::wire::MainProtocolOneWayAnonRequest::MainProtocolOneWayAnonRequest(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>>&& frame)
    : frame_ptr_(std::move(frame)) {}

void test_protocollayouts::wire::MainProtocolOneWayAnonRequest::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>>(allocator);
}
void test_protocollayouts::wire::MainProtocolOneWayAnonRequest::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_protocollayouts::wire::MainProtocolOneWayAnonRequest::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_protocollayouts::wire::MainProtocolOneWayAnonRequest::HasUnknownData() const {
  if (max_ordinal_ > 1) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

uint16_t& test_protocollayouts::wire::MainProtocolOneWayAnonRequest::a() const {
  ZX_ASSERT(has_a());
  return frame_ptr_->a_.get_data();
}

bool test_protocollayouts::wire::MainProtocolOneWayAnonRequest::has_a() const {
  return max_ordinal_ >= 1 && frame_ptr_->a_.has_data();
}

::test_protocollayouts::wire::MainProtocolOneWayAnonRequest& test_protocollayouts::wire::MainProtocolOneWayAnonRequest::clear_a() {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.clear_data();
  max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
  return *this;
}

::test_protocollayouts::wire::MainProtocolOneWayAnonRequest& test_protocollayouts::wire::MainProtocolOneWayAnonRequest::set_a(uint16_t elem) {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.set_data(std::move(elem));
  max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
  return *this;
}

::fidl::WireTableBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest> test_protocollayouts::wire::MainProtocolOneWayAnonRequest::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>(arena);
}
::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest> test_protocollayouts::wire::MainProtocolOneWayAnonRequest::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>(std::move(frame));
}

template <typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>>&& frame)
    : table_(std::move(frame)) {}

template <typename BuilderImpl>
::test_protocollayouts::wire::MainProtocolOneWayAnonRequest fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_protocollayouts::wire::MainProtocolOneWayAnonRequest t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
template <typename BuilderImpl>
bool fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest, BuilderImpl>::has_a() const {
  return table_.has_a();
}

template <typename BuilderImpl>
void fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest, BuilderImpl>::clear_a() {
  table_.clear_a();
}

template <typename BuilderImpl>
uint16_t& fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest, BuilderImpl>::a() const {
  return table_.a();
}
template <typename BuilderImpl>
BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest, BuilderImpl>::a(uint16_t elem) {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  table_.frame_ptr_->a_.set_data(std::move(elem));
  table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
  return *static_cast<BuilderImpl*>(this);
}

template class fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest, ::fidl::WireTableBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>>;
template class fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest, ::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>>;

::fidl::WireTableBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>::WireTableBuilder(::fidl::AnyArena& arena)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>>(arena)),
      arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>* frame)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_protocollayouts::wire::MainProtocolOneWayAnonRequest* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
      Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {
    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {
    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch (i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_protocollayouts::wire::MainProtocolOneWayAnonRequest>);

bool ::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
  if (!a_.has_data()) {
    max_ordinal = 1;
  }
  return max_ordinal;
}

::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse::MainProtocolTwoWayAnonResponse(::fidl::AnyArena& allocator)
    : frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>>(allocator)) {}

::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse::MainProtocolTwoWayAnonResponse(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>>&& frame)
    : frame_ptr_(std::move(frame)) {}

void test_protocollayouts::wire::MainProtocolTwoWayAnonResponse::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>>(allocator);
}
void test_protocollayouts::wire::MainProtocolTwoWayAnonResponse::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse::HasUnknownData() const {
  if (max_ordinal_ > 1) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

uint16_t& test_protocollayouts::wire::MainProtocolTwoWayAnonResponse::a() const {
  ZX_ASSERT(has_a());
  return frame_ptr_->a_.get_data();
}

bool test_protocollayouts::wire::MainProtocolTwoWayAnonResponse::has_a() const {
  return max_ordinal_ >= 1 && frame_ptr_->a_.has_data();
}

::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse& test_protocollayouts::wire::MainProtocolTwoWayAnonResponse::clear_a() {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.clear_data();
  max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
  return *this;
}

::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse& test_protocollayouts::wire::MainProtocolTwoWayAnonResponse::set_a(uint16_t elem) {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.set_data(std::move(elem));
  max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
  return *this;
}

::fidl::WireTableBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse> test_protocollayouts::wire::MainProtocolTwoWayAnonResponse::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>(arena);
}
::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse> test_protocollayouts::wire::MainProtocolTwoWayAnonResponse::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>(std::move(frame));
}

template <typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>>&& frame)
    : table_(std::move(frame)) {}

template <typename BuilderImpl>
::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
template <typename BuilderImpl>
bool fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse, BuilderImpl>::has_a() const {
  return table_.has_a();
}

template <typename BuilderImpl>
void fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse, BuilderImpl>::clear_a() {
  table_.clear_a();
}

template <typename BuilderImpl>
uint16_t& fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse, BuilderImpl>::a() const {
  return table_.a();
}
template <typename BuilderImpl>
BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse, BuilderImpl>::a(uint16_t elem) {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  table_.frame_ptr_->a_.set_data(std::move(elem));
  table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
  return *static_cast<BuilderImpl*>(this);
}

template class fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse, ::fidl::WireTableBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>>;
template class fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse, ::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>>;

::fidl::WireTableBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>::WireTableBuilder(::fidl::AnyArena& arena)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>>(arena)),
      arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>* frame)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
      Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {
    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {
    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch (i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse>);

bool ::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
  if (!a_.has_data()) {
    max_ordinal = 1;
  }
  return max_ordinal;
}

::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest::MainProtocolTwoWayAnonWithErrorRequest(::fidl::AnyArena& allocator)
    : frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>>(allocator)) {}

::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest::MainProtocolTwoWayAnonWithErrorRequest(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>>&& frame)
    : frame_ptr_(std::move(frame)) {}

void test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>>(allocator);
}
void test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest::HasUnknownData() const {
  if (max_ordinal_ > 1) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

uint16_t& test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest::a() const {
  ZX_ASSERT(has_a());
  return frame_ptr_->a_.get_data();
}

bool test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest::has_a() const {
  return max_ordinal_ >= 1 && frame_ptr_->a_.has_data();
}

::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest& test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest::clear_a() {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.clear_data();
  max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
  return *this;
}

::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest& test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest::set_a(uint16_t elem) {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->a_.set_data(std::move(elem));
  max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
  return *this;
}

::fidl::WireTableBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest> test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>(arena);
}
::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest> test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>(std::move(frame));
}

template <typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>>&& frame)
    : table_(std::move(frame)) {}

template <typename BuilderImpl>
::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
template <typename BuilderImpl>
bool fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest, BuilderImpl>::has_a() const {
  return table_.has_a();
}

template <typename BuilderImpl>
void fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest, BuilderImpl>::clear_a() {
  table_.clear_a();
}

template <typename BuilderImpl>
uint16_t& fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest, BuilderImpl>::a() const {
  return table_.a();
}
template <typename BuilderImpl>
BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest, BuilderImpl>::a(uint16_t elem) {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  table_.frame_ptr_->a_.set_data(std::move(elem));
  table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
  return *static_cast<BuilderImpl*>(this);
}

template class fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest, ::fidl::WireTableBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>>;
template class fidl::internal::WireTableBaseBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest, ::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>>;

::fidl::WireTableBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>::WireTableBuilder(::fidl::AnyArena& arena)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>>(arena)),
      arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>* frame)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
      Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {
    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {
    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch (i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<uint16_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest>);

#pragma clang diagnostic pop
