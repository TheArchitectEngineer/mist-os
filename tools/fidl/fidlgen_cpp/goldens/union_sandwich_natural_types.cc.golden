// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.unionsandwich/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_unionsandwich::SandwichUnionSize8Alignment4::SandwichUnionSize8Alignment4(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_unionsandwich::SandwichUnionSize8Alignment4::SandwichUnionSize8Alignment4(uint32_t before, ::test_unionsandwich::UnionSize8Alignment4 union_, uint32_t after) noexcept
    : storage_({.before = std::move(before),
                .union_ = std::move(union_),
                .after = std::move(after)}) {}

::test_unionsandwich::SandwichUnionSize8Alignment4::SandwichUnionSize8Alignment4(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : SandwichUnionSize8Alignment4(Storage_{
                                                                                                                                                   .before = {},
                                                                                                                                                   .union_ = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                                   .after = {},
                                                                                                                                               }) {}
::test_unionsandwich::SandwichUnionSize8Alignment4::SandwichUnionSize8Alignment4(const ::test_unionsandwich::SandwichUnionSize8Alignment4& other) noexcept : ::test_unionsandwich::SandwichUnionSize8Alignment4(other.CloneStorage_()) {}

::test_unionsandwich::SandwichUnionSize8Alignment4& test_unionsandwich::SandwichUnionSize8Alignment4::operator=(const ::test_unionsandwich::SandwichUnionSize8Alignment4& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_unionsandwich::SandwichUnionSize8Alignment4::operator==(const SandwichUnionSize8Alignment4& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_unionsandwich::SandwichUnionSize8Alignment4, 32>::Equal(this, &other);
}

bool test_unionsandwich::SandwichUnionSize8Alignment4::operator!=(const SandwichUnionSize8Alignment4& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_unionsandwich::SandwichUnionSize8Alignment4, 32>::Equal(this, &other);
}

::test_unionsandwich::SandwichUnionSize8Alignment4::Storage_ test_unionsandwich::SandwichUnionSize8Alignment4::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.before),
      ::fidl::internal::NaturalClone(storage_.union_),
      ::fidl::internal::NaturalClone(storage_.after)};
}
uint32_t
test_unionsandwich::SandwichUnionSize8Alignment4::before() const {
  return storage_.before;
}

uint32_t& ::test_unionsandwich::SandwichUnionSize8Alignment4::before() {
  return storage_.before;
}

::test_unionsandwich::SandwichUnionSize8Alignment4& ::test_unionsandwich::SandwichUnionSize8Alignment4::before(uint32_t value) {
  storage_.before = std::move(value);
  return *this;
}
const ::test_unionsandwich::UnionSize8Alignment4&
test_unionsandwich::SandwichUnionSize8Alignment4::union_() const {
  return storage_.union_;
}

::test_unionsandwich::UnionSize8Alignment4& ::test_unionsandwich::SandwichUnionSize8Alignment4::union_() {
  return storage_.union_;
}

::test_unionsandwich::SandwichUnionSize8Alignment4& ::test_unionsandwich::SandwichUnionSize8Alignment4::union_(::test_unionsandwich::UnionSize8Alignment4 value) {
  storage_.union_ = std::move(value);
  return *this;
}
uint32_t
test_unionsandwich::SandwichUnionSize8Alignment4::after() const {
  return storage_.after;
}

uint32_t& ::test_unionsandwich::SandwichUnionSize8Alignment4::after() {
  return storage_.after;
}

::test_unionsandwich::SandwichUnionSize8Alignment4& ::test_unionsandwich::SandwichUnionSize8Alignment4::after(uint32_t value) {
  storage_.after = std::move(value);
  return *this;
}

::test_unionsandwich::SandwichUnionSize12Alignment4::SandwichUnionSize12Alignment4(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_unionsandwich::SandwichUnionSize12Alignment4::SandwichUnionSize12Alignment4(uint32_t before, ::test_unionsandwich::UnionSize12Alignment4 union_, int32_t after) noexcept
    : storage_({.before = std::move(before),
                .union_ = std::move(union_),
                .after = std::move(after)}) {}

::test_unionsandwich::SandwichUnionSize12Alignment4::SandwichUnionSize12Alignment4(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : SandwichUnionSize12Alignment4(Storage_{
                                                                                                                                                     .before = {},
                                                                                                                                                     .union_ = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                                     .after = {},
                                                                                                                                                 }) {}
::test_unionsandwich::SandwichUnionSize12Alignment4::SandwichUnionSize12Alignment4(const ::test_unionsandwich::SandwichUnionSize12Alignment4& other) noexcept : ::test_unionsandwich::SandwichUnionSize12Alignment4(other.CloneStorage_()) {}

::test_unionsandwich::SandwichUnionSize12Alignment4& test_unionsandwich::SandwichUnionSize12Alignment4::operator=(const ::test_unionsandwich::SandwichUnionSize12Alignment4& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_unionsandwich::SandwichUnionSize12Alignment4::operator==(const SandwichUnionSize12Alignment4& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_unionsandwich::SandwichUnionSize12Alignment4, 32>::Equal(this, &other);
}

bool test_unionsandwich::SandwichUnionSize12Alignment4::operator!=(const SandwichUnionSize12Alignment4& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_unionsandwich::SandwichUnionSize12Alignment4, 32>::Equal(this, &other);
}

::test_unionsandwich::SandwichUnionSize12Alignment4::Storage_ test_unionsandwich::SandwichUnionSize12Alignment4::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.before),
      ::fidl::internal::NaturalClone(storage_.union_),
      ::fidl::internal::NaturalClone(storage_.after)};
}
uint32_t
test_unionsandwich::SandwichUnionSize12Alignment4::before() const {
  return storage_.before;
}

uint32_t& ::test_unionsandwich::SandwichUnionSize12Alignment4::before() {
  return storage_.before;
}

::test_unionsandwich::SandwichUnionSize12Alignment4& ::test_unionsandwich::SandwichUnionSize12Alignment4::before(uint32_t value) {
  storage_.before = std::move(value);
  return *this;
}
const ::test_unionsandwich::UnionSize12Alignment4&
test_unionsandwich::SandwichUnionSize12Alignment4::union_() const {
  return storage_.union_;
}

::test_unionsandwich::UnionSize12Alignment4& ::test_unionsandwich::SandwichUnionSize12Alignment4::union_() {
  return storage_.union_;
}

::test_unionsandwich::SandwichUnionSize12Alignment4& ::test_unionsandwich::SandwichUnionSize12Alignment4::union_(::test_unionsandwich::UnionSize12Alignment4 value) {
  storage_.union_ = std::move(value);
  return *this;
}
int32_t
test_unionsandwich::SandwichUnionSize12Alignment4::after() const {
  return storage_.after;
}

int32_t& ::test_unionsandwich::SandwichUnionSize12Alignment4::after() {
  return storage_.after;
}

::test_unionsandwich::SandwichUnionSize12Alignment4& ::test_unionsandwich::SandwichUnionSize12Alignment4::after(int32_t value) {
  storage_.after = std::move(value);
  return *this;
}

::test_unionsandwich::StructSize16Alignment8::StructSize16Alignment8(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_unionsandwich::StructSize16Alignment8::StructSize16Alignment8(uint64_t f1, uint64_t f2) noexcept
    : storage_({.f1 = std::move(f1),
                .f2 = std::move(f2)}) {}

::test_unionsandwich::StructSize16Alignment8::StructSize16Alignment8(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : StructSize16Alignment8(Storage_{
                                                                                                                                       .f1 = {},
                                                                                                                                       .f2 = {},
                                                                                                                                   }) {}
::test_unionsandwich::StructSize16Alignment8::StructSize16Alignment8(const ::test_unionsandwich::StructSize16Alignment8& other) noexcept : ::test_unionsandwich::StructSize16Alignment8(other.CloneStorage_()) {}

::test_unionsandwich::StructSize16Alignment8& test_unionsandwich::StructSize16Alignment8::operator=(const ::test_unionsandwich::StructSize16Alignment8& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_unionsandwich::StructSize16Alignment8::operator==(const StructSize16Alignment8& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_unionsandwich::StructSize16Alignment8, 16>::Equal(this, &other);
}

bool test_unionsandwich::StructSize16Alignment8::operator!=(const StructSize16Alignment8& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_unionsandwich::StructSize16Alignment8, 16>::Equal(this, &other);
}

::test_unionsandwich::StructSize16Alignment8::Storage_ test_unionsandwich::StructSize16Alignment8::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.f1),
      ::fidl::internal::NaturalClone(storage_.f2)};
}
uint64_t
test_unionsandwich::StructSize16Alignment8::f1() const {
  return storage_.f1;
}

uint64_t& ::test_unionsandwich::StructSize16Alignment8::f1() {
  return storage_.f1;
}

::test_unionsandwich::StructSize16Alignment8& ::test_unionsandwich::StructSize16Alignment8::f1(uint64_t value) {
  storage_.f1 = std::move(value);
  return *this;
}
uint64_t
test_unionsandwich::StructSize16Alignment8::f2() const {
  return storage_.f2;
}

uint64_t& ::test_unionsandwich::StructSize16Alignment8::f2() {
  return storage_.f2;
}

::test_unionsandwich::StructSize16Alignment8& ::test_unionsandwich::StructSize16Alignment8::f2(uint64_t value) {
  storage_.f2 = std::move(value);
  return *this;
}

::test_unionsandwich::SandwichUnionSize24Alignment8::SandwichUnionSize24Alignment8(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_unionsandwich::SandwichUnionSize24Alignment8::SandwichUnionSize24Alignment8(uint32_t before, ::test_unionsandwich::UnionSize24Alignment8 union_, uint32_t after) noexcept
    : storage_({.before = std::move(before),
                .union_ = std::move(union_),
                .after = std::move(after)}) {}

::test_unionsandwich::SandwichUnionSize24Alignment8::SandwichUnionSize24Alignment8(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : SandwichUnionSize24Alignment8(Storage_{
                                                                                                                                                     .before = {},
                                                                                                                                                     .union_ = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                                     .after = {},
                                                                                                                                                 }) {}
::test_unionsandwich::SandwichUnionSize24Alignment8::SandwichUnionSize24Alignment8(const ::test_unionsandwich::SandwichUnionSize24Alignment8& other) noexcept : ::test_unionsandwich::SandwichUnionSize24Alignment8(other.CloneStorage_()) {}

::test_unionsandwich::SandwichUnionSize24Alignment8& test_unionsandwich::SandwichUnionSize24Alignment8::operator=(const ::test_unionsandwich::SandwichUnionSize24Alignment8& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_unionsandwich::SandwichUnionSize24Alignment8::operator==(const SandwichUnionSize24Alignment8& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_unionsandwich::SandwichUnionSize24Alignment8, 32>::Equal(this, &other);
}

bool test_unionsandwich::SandwichUnionSize24Alignment8::operator!=(const SandwichUnionSize24Alignment8& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_unionsandwich::SandwichUnionSize24Alignment8, 32>::Equal(this, &other);
}

::test_unionsandwich::SandwichUnionSize24Alignment8::Storage_ test_unionsandwich::SandwichUnionSize24Alignment8::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.before),
      ::fidl::internal::NaturalClone(storage_.union_),
      ::fidl::internal::NaturalClone(storage_.after)};
}
uint32_t
test_unionsandwich::SandwichUnionSize24Alignment8::before() const {
  return storage_.before;
}

uint32_t& ::test_unionsandwich::SandwichUnionSize24Alignment8::before() {
  return storage_.before;
}

::test_unionsandwich::SandwichUnionSize24Alignment8& ::test_unionsandwich::SandwichUnionSize24Alignment8::before(uint32_t value) {
  storage_.before = std::move(value);
  return *this;
}
const ::test_unionsandwich::UnionSize24Alignment8&
test_unionsandwich::SandwichUnionSize24Alignment8::union_() const {
  return storage_.union_;
}

::test_unionsandwich::UnionSize24Alignment8& ::test_unionsandwich::SandwichUnionSize24Alignment8::union_() {
  return storage_.union_;
}

::test_unionsandwich::SandwichUnionSize24Alignment8& ::test_unionsandwich::SandwichUnionSize24Alignment8::union_(::test_unionsandwich::UnionSize24Alignment8 value) {
  storage_.union_ = std::move(value);
  return *this;
}
uint32_t
test_unionsandwich::SandwichUnionSize24Alignment8::after() const {
  return storage_.after;
}

uint32_t& ::test_unionsandwich::SandwichUnionSize24Alignment8::after() {
  return storage_.after;
}

::test_unionsandwich::SandwichUnionSize24Alignment8& ::test_unionsandwich::SandwichUnionSize24Alignment8::after(uint32_t value) {
  storage_.after = std::move(value);
  return *this;
}

::test_unionsandwich::SandwichUnionSize36Alignment4::SandwichUnionSize36Alignment4(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_unionsandwich::SandwichUnionSize36Alignment4::SandwichUnionSize36Alignment4(uint32_t before, ::test_unionsandwich::UnionSize36Alignment4 union_, uint32_t after) noexcept
    : storage_({.before = std::move(before),
                .union_ = std::move(union_),
                .after = std::move(after)}) {}

::test_unionsandwich::SandwichUnionSize36Alignment4::SandwichUnionSize36Alignment4(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : SandwichUnionSize36Alignment4(Storage_{
                                                                                                                                                     .before = {},
                                                                                                                                                     .union_ = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                                     .after = {},
                                                                                                                                                 }) {}
::test_unionsandwich::SandwichUnionSize36Alignment4::SandwichUnionSize36Alignment4(const ::test_unionsandwich::SandwichUnionSize36Alignment4& other) noexcept : ::test_unionsandwich::SandwichUnionSize36Alignment4(other.CloneStorage_()) {}

::test_unionsandwich::SandwichUnionSize36Alignment4& test_unionsandwich::SandwichUnionSize36Alignment4::operator=(const ::test_unionsandwich::SandwichUnionSize36Alignment4& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_unionsandwich::SandwichUnionSize36Alignment4::operator==(const SandwichUnionSize36Alignment4& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_unionsandwich::SandwichUnionSize36Alignment4, 32>::Equal(this, &other);
}

bool test_unionsandwich::SandwichUnionSize36Alignment4::operator!=(const SandwichUnionSize36Alignment4& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_unionsandwich::SandwichUnionSize36Alignment4, 32>::Equal(this, &other);
}

::test_unionsandwich::SandwichUnionSize36Alignment4::Storage_ test_unionsandwich::SandwichUnionSize36Alignment4::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.before),
      ::fidl::internal::NaturalClone(storage_.union_),
      ::fidl::internal::NaturalClone(storage_.after)};
}
uint32_t
test_unionsandwich::SandwichUnionSize36Alignment4::before() const {
  return storage_.before;
}

uint32_t& ::test_unionsandwich::SandwichUnionSize36Alignment4::before() {
  return storage_.before;
}

::test_unionsandwich::SandwichUnionSize36Alignment4& ::test_unionsandwich::SandwichUnionSize36Alignment4::before(uint32_t value) {
  storage_.before = std::move(value);
  return *this;
}
const ::test_unionsandwich::UnionSize36Alignment4&
test_unionsandwich::SandwichUnionSize36Alignment4::union_() const {
  return storage_.union_;
}

::test_unionsandwich::UnionSize36Alignment4& ::test_unionsandwich::SandwichUnionSize36Alignment4::union_() {
  return storage_.union_;
}

::test_unionsandwich::SandwichUnionSize36Alignment4& ::test_unionsandwich::SandwichUnionSize36Alignment4::union_(::test_unionsandwich::UnionSize36Alignment4 value) {
  storage_.union_ = std::move(value);
  return *this;
}
uint32_t
test_unionsandwich::SandwichUnionSize36Alignment4::after() const {
  return storage_.after;
}

uint32_t& ::test_unionsandwich::SandwichUnionSize36Alignment4::after() {
  return storage_.after;
}

::test_unionsandwich::SandwichUnionSize36Alignment4& ::test_unionsandwich::SandwichUnionSize36Alignment4::after(uint32_t value) {
  storage_.after = std::move(value);
  return *this;
}

::test_unionsandwich::UnionSize8Alignment4::UnionSize8Alignment4(UnionSize8Alignment4&& other) noexcept : UnionSize8Alignment4(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_unionsandwich::UnionSize8Alignment4& ::test_unionsandwich::UnionSize8Alignment4::operator=(UnionSize8Alignment4&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_unionsandwich::UnionSize8Alignment4::UnionSize8Alignment4(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_unionsandwich::UnionSize8Alignment4::UnionSize8Alignment4(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_unionsandwich::UnionSize8Alignment4::Tag test_unionsandwich::UnionSize8Alignment4::Which() const {
  return UnionSize8Alignment4::IndexToTag(storage_->index()).value();
}

size_t test_unionsandwich::UnionSize8Alignment4::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_unionsandwich::UnionSize8Alignment4::Tag tag) {
  switch (tag) {
    case ::test_unionsandwich::UnionSize8Alignment4::Tag::kVariant:
      return 1;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_unionsandwich::UnionSize8Alignment4::Tag> test_unionsandwich::UnionSize8Alignment4::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_unionsandwich::UnionSize8Alignment4::Tag::kVariant;
    default:
      return std::nullopt;
  }
}

::test_unionsandwich::UnionSize8Alignment4::UnionSize8Alignment4(const UnionSize8Alignment4& other) noexcept : UnionSize8Alignment4(other.CloneStorage_()) {}

::test_unionsandwich::UnionSize8Alignment4& test_unionsandwich::UnionSize8Alignment4::operator=(const UnionSize8Alignment4& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_unionsandwich::UnionSize8Alignment4::operator==(const UnionSize8Alignment4& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_unionsandwich::UnionSize8Alignment4::operator!=(const UnionSize8Alignment4& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_unionsandwich::UnionSize8Alignment4::Storage_> test_unionsandwich::UnionSize8Alignment4::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_unionsandwich::UnionSize8Alignment4 test_unionsandwich::UnionSize8Alignment4::WithVariant(uint32_t val) {
  return UnionSize8Alignment4(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_unionsandwich::UnionSize8Alignment4::Storage_> test_unionsandwich::UnionSize8Alignment4::variant() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_unionsandwich::UnionSize8Alignment4::Storage_> test_unionsandwich::UnionSize8Alignment4::variant() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_unionsandwich::UnionSize8Alignment4& test_unionsandwich::UnionSize8Alignment4::variant(uint32_t value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}

::test_unionsandwich::UnionSize12Alignment4::UnionSize12Alignment4(UnionSize12Alignment4&& other) noexcept : UnionSize12Alignment4(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_unionsandwich::UnionSize12Alignment4& ::test_unionsandwich::UnionSize12Alignment4::operator=(UnionSize12Alignment4&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_unionsandwich::UnionSize12Alignment4::UnionSize12Alignment4(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_unionsandwich::UnionSize12Alignment4::UnionSize12Alignment4(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_unionsandwich::UnionSize12Alignment4::Tag test_unionsandwich::UnionSize12Alignment4::Which() const {
  return UnionSize12Alignment4::IndexToTag(storage_->index()).value();
}

size_t test_unionsandwich::UnionSize12Alignment4::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_unionsandwich::UnionSize12Alignment4::Tag tag) {
  switch (tag) {
    case ::test_unionsandwich::UnionSize12Alignment4::Tag::kVariant:
      return 1;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_unionsandwich::UnionSize12Alignment4::Tag> test_unionsandwich::UnionSize12Alignment4::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_unionsandwich::UnionSize12Alignment4::Tag::kVariant;
    default:
      return std::nullopt;
  }
}

::test_unionsandwich::UnionSize12Alignment4::UnionSize12Alignment4(const UnionSize12Alignment4& other) noexcept : UnionSize12Alignment4(other.CloneStorage_()) {}

::test_unionsandwich::UnionSize12Alignment4& test_unionsandwich::UnionSize12Alignment4::operator=(const UnionSize12Alignment4& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_unionsandwich::UnionSize12Alignment4::operator==(const UnionSize12Alignment4& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_unionsandwich::UnionSize12Alignment4::operator!=(const UnionSize12Alignment4& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_unionsandwich::UnionSize12Alignment4::Storage_> test_unionsandwich::UnionSize12Alignment4::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_unionsandwich::UnionSize12Alignment4 test_unionsandwich::UnionSize12Alignment4::WithVariant(::std::array<uint8_t, 6> val) {
  return UnionSize12Alignment4(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_unionsandwich::UnionSize12Alignment4::Storage_> test_unionsandwich::UnionSize12Alignment4::variant() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_unionsandwich::UnionSize12Alignment4::Storage_> test_unionsandwich::UnionSize12Alignment4::variant() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_unionsandwich::UnionSize12Alignment4& test_unionsandwich::UnionSize12Alignment4::variant(::std::array<uint8_t, 6> value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}

::test_unionsandwich::UnionSize24Alignment8::UnionSize24Alignment8(UnionSize24Alignment8&& other) noexcept : UnionSize24Alignment8(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_unionsandwich::UnionSize24Alignment8& ::test_unionsandwich::UnionSize24Alignment8::operator=(UnionSize24Alignment8&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_unionsandwich::UnionSize24Alignment8::UnionSize24Alignment8(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_unionsandwich::UnionSize24Alignment8::UnionSize24Alignment8(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_unionsandwich::UnionSize24Alignment8::Tag test_unionsandwich::UnionSize24Alignment8::Which() const {
  return UnionSize24Alignment8::IndexToTag(storage_->index()).value();
}

size_t test_unionsandwich::UnionSize24Alignment8::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_unionsandwich::UnionSize24Alignment8::Tag tag) {
  switch (tag) {
    case ::test_unionsandwich::UnionSize24Alignment8::Tag::kVariant:
      return 1;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_unionsandwich::UnionSize24Alignment8::Tag> test_unionsandwich::UnionSize24Alignment8::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_unionsandwich::UnionSize24Alignment8::Tag::kVariant;
    default:
      return std::nullopt;
  }
}

::test_unionsandwich::UnionSize24Alignment8::UnionSize24Alignment8(const UnionSize24Alignment8& other) noexcept : UnionSize24Alignment8(other.CloneStorage_()) {}

::test_unionsandwich::UnionSize24Alignment8& test_unionsandwich::UnionSize24Alignment8::operator=(const UnionSize24Alignment8& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_unionsandwich::UnionSize24Alignment8::operator==(const UnionSize24Alignment8& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_unionsandwich::UnionSize24Alignment8::operator!=(const UnionSize24Alignment8& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_unionsandwich::UnionSize24Alignment8::Storage_> test_unionsandwich::UnionSize24Alignment8::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_unionsandwich::UnionSize24Alignment8 test_unionsandwich::UnionSize24Alignment8::WithVariant(::test_unionsandwich::StructSize16Alignment8 val) {
  return UnionSize24Alignment8(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_unionsandwich::UnionSize24Alignment8::Storage_> test_unionsandwich::UnionSize24Alignment8::variant() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_unionsandwich::UnionSize24Alignment8::Storage_> test_unionsandwich::UnionSize24Alignment8::variant() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_unionsandwich::UnionSize24Alignment8& test_unionsandwich::UnionSize24Alignment8::variant(::test_unionsandwich::StructSize16Alignment8 value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}

::test_unionsandwich::UnionSize36Alignment4::UnionSize36Alignment4(UnionSize36Alignment4&& other) noexcept : UnionSize36Alignment4(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_unionsandwich::UnionSize36Alignment4& ::test_unionsandwich::UnionSize36Alignment4::operator=(UnionSize36Alignment4&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_unionsandwich::UnionSize36Alignment4::UnionSize36Alignment4(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_unionsandwich::UnionSize36Alignment4::UnionSize36Alignment4(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_unionsandwich::UnionSize36Alignment4::Tag test_unionsandwich::UnionSize36Alignment4::Which() const {
  return UnionSize36Alignment4::IndexToTag(storage_->index()).value();
}

size_t test_unionsandwich::UnionSize36Alignment4::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_unionsandwich::UnionSize36Alignment4::Tag tag) {
  switch (tag) {
    case ::test_unionsandwich::UnionSize36Alignment4::Tag::kVariant:
      return 1;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_unionsandwich::UnionSize36Alignment4::Tag> test_unionsandwich::UnionSize36Alignment4::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_unionsandwich::UnionSize36Alignment4::Tag::kVariant;
    default:
      return std::nullopt;
  }
}

::test_unionsandwich::UnionSize36Alignment4::UnionSize36Alignment4(const UnionSize36Alignment4& other) noexcept : UnionSize36Alignment4(other.CloneStorage_()) {}

::test_unionsandwich::UnionSize36Alignment4& test_unionsandwich::UnionSize36Alignment4::operator=(const UnionSize36Alignment4& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_unionsandwich::UnionSize36Alignment4::operator==(const UnionSize36Alignment4& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_unionsandwich::UnionSize36Alignment4::operator!=(const UnionSize36Alignment4& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_unionsandwich::UnionSize36Alignment4::Storage_> test_unionsandwich::UnionSize36Alignment4::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_unionsandwich::UnionSize36Alignment4 test_unionsandwich::UnionSize36Alignment4::WithVariant(::std::array<uint8_t, 32> val) {
  return UnionSize36Alignment4(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_unionsandwich::UnionSize36Alignment4::Storage_> test_unionsandwich::UnionSize36Alignment4::variant() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_unionsandwich::UnionSize36Alignment4::Storage_> test_unionsandwich::UnionSize36Alignment4::variant() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_unionsandwich::UnionSize36Alignment4& test_unionsandwich::UnionSize36Alignment4::variant(::std::array<uint8_t, 32> value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}

#pragma clang diagnostic pop
