// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.vectors/cpp/wire_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_vectors::wire::ExampleUseOfVectors, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_vectors::wire::ExampleUseOfVectors* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (kIsMemcpyCompatible) {
    memcpy(position.As<void>(), value, sizeof(::test_vectors::wire::ExampleUseOfVectors));
  } else {
    internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false>, IsRecursive>::Encode(encoder, &value->vector_of_uint8, position + 0, recursion_depth);
    internal::WireCodingTraits<::fidl::VectorView<::fidl::VectorView<bool>>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false>, false>, IsRecursive>::Encode(encoder, &value->vector_of_vector_of_bool, position + 16, recursion_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_vectors::wire::ExampleUseOfVectors, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (!Base::are_members_memcpy_compatible) {
    internal::WireCodingTraits<::fidl::VectorView<uint8_t>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false>, IsRecursive>::Decode(
        decoder, position + 0, recursion_depth);
    internal::WireCodingTraits<::fidl::VectorView<::fidl::VectorView<bool>>, fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintVector<fidl::internal::WireCodingConstraintEmpty, false>, false>, IsRecursive>::Decode(
        decoder, position + 16, recursion_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_vectors::wire::ExampleUseOfVectors, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_vectors::wire::ExampleUseOfVectors, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_vectors::wire::ExampleUseOfVectors>);
static_assert(offsetof(::test_vectors::wire::ExampleUseOfVectors, vector_of_uint8) == 0);
static_assert(offsetof(::test_vectors::wire::ExampleUseOfVectors, vector_of_vector_of_bool) == 16);
static_assert(sizeof(::test_vectors::wire::ExampleUseOfVectors) == ::fidl::TypeTraits<::test_vectors::wire::ExampleUseOfVectors>::kPrimarySize);

#pragma clang diagnostic pop
