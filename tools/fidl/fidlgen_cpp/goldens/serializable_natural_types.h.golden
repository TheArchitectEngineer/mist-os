// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.serializable/cpp/common_types.h>
#include <fidl/test.serializable/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_serializable {

class SerializableStruct;

class SerializableTable;

class SerializableUnion;

class SerializableStruct {
 private:
  struct Storage_;

 public:
  static constexpr char kSerializableName[] = "test.serializable.SerializableStruct";
  SerializableStruct(Storage_ storage) noexcept;
  SerializableStruct(uint8_t __reserved) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |SerializableStruct| only if all of its members are default constructible.
  SerializableStruct() = default;
#pragma clang diagnostic pop

  SerializableStruct(SerializableStruct&&) noexcept = default;
  SerializableStruct& operator=(SerializableStruct&&) noexcept = default;
  SerializableStruct(const SerializableStruct& other) noexcept;
  SerializableStruct& operator=(const SerializableStruct& other) noexcept;

  bool operator==(const SerializableStruct& other) const noexcept;
  bool operator!=(const SerializableStruct& other) const noexcept;

  uint8_t
  __reserved() const;

  uint8_t& __reserved();

  // Setter for __reserved.
  //

  SerializableStruct& __reserved(uint8_t value);

  SerializableStruct(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    uint8_t __reserved = 0u;
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_serializable::SerializableStruct, 1>;
  friend struct ::fidl::internal::MemberVisitor<::test_serializable::SerializableStruct>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint8_t, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::__reserved, 0});
  static constexpr auto kPadding = std::make_tuple();
};

class SerializableTable {
 private:
  struct Storage_;

 public:
  static constexpr char kSerializableName[] = "test.serializable.SerializableTable";
  SerializableTable(Storage_ storage) noexcept;
  SerializableTable() noexcept = default;
  SerializableTable(SerializableTable&&) noexcept = default;
  SerializableTable& operator=(SerializableTable&&) noexcept = default;
  SerializableTable(const SerializableTable& other) noexcept;
  SerializableTable& operator=(const SerializableTable& other) noexcept;
  bool operator==(const SerializableTable& other) const noexcept;
  bool operator!=(const SerializableTable& other) const noexcept;

  bool IsEmpty() const;

  SerializableTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_serializable::SerializableTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_serializable::SerializableTable>;
  static constexpr auto kMembers = std::make_tuple();
};

class SerializableUnion {
 private:
  using Storage_ =
      std::variant<
          std::monostate, bool>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kUnused = 1,  // 0x1
  };
  static constexpr char kSerializableName[] = "test.serializable.SerializableUnion";

  SerializableUnion(SerializableUnion&& other) noexcept;
  SerializableUnion& operator=(SerializableUnion&& other) noexcept;
  SerializableUnion(const SerializableUnion& other) noexcept;
  SerializableUnion& operator=(const SerializableUnion& other) noexcept;
  bool operator==(const SerializableUnion& other) const noexcept;
  bool operator!=(const SerializableUnion& other) const noexcept;

  ::test_serializable::SerializableUnion::Tag Which() const;
  static SerializableUnion WithUnused(bool val);
  const ::fidl::internal::UnionMemberView<1, Storage_> unused() const;
  ::fidl::internal::UnionMemberView<1, Storage_> unused();

  // Sets the union to hold the unused member.
  //

  SerializableUnion& unused(bool value);

  SerializableUnion(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_serializable::SerializableUnion>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit SerializableUnion(std::shared_ptr<Storage_> storage);

  static size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_serializable::SerializableUnion::Tag tag);
  static std::optional<::test_serializable::SerializableUnion::Tag> IndexToTag(size_t index);
};

}  // namespace test_serializable
namespace fidl {

template <>
struct IsFidlType<::test_serializable::SerializableStruct> : public std::true_type {};

template <>
struct TypeTraits<::test_serializable::SerializableStruct> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 1;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_serializable::SerializableStruct> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_serializable::SerializableStruct, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalEmptyStructCodingTraits<::test_serializable::SerializableStruct> {};

template <>
struct IsFidlType<::test_serializable::SerializableTable> : public std::true_type {};

template <>
struct TypeTraits<::test_serializable::SerializableTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_serializable::SerializableTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_serializable::SerializableTable, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_serializable::SerializableTable> {};

template <>
struct IsFidlType<::test_serializable::SerializableUnion> : public std::true_type {};

template <>
struct TypeTraits<::test_serializable::SerializableUnion> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_serializable::SerializableUnion> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_serializable::SerializableUnion, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_serializable::SerializableUnion> {};

#pragma clang diagnostic pop

}  // namespace fidl
