// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.time/cpp/common_types.h>
#include <fidl/test.time/cpp/markers.h>
#include <lib/fidl/cpp/wire/array.h>
#include <lib/fidl/cpp/wire/envelope.h>
#include <lib/fidl/cpp/wire/internal/framework_err.h>
#include <lib/fidl/cpp/wire/message.h>
#include <lib/fidl/cpp/wire/message_storage.h>
#include <lib/fidl/cpp/wire/object_view.h>
#include <lib/fidl/cpp/wire/string_view.h>
#include <lib/fidl/cpp/wire/traits.h>
#include <lib/fidl/cpp/wire/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_time {

namespace wire {

struct AllInstants;

class ComplexInstants;

}  // namespace wire
}  // namespace test_time

template <>
class ::fidl::WireTableBuilder<::test_time::wire::ComplexInstants>;
template <>
class ::fidl::WireTableExternalBuilder<::test_time::wire::ComplexInstants>;

template <>
struct ::fidl::WireTableFrame<::test_time::wire::ComplexInstants> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;
  ::fidl::Envelope<::fidl::Array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>> monotonic_;
  ::fidl::Envelope<::fidl::VectorView<::fidl::basic_time<ZX_CLOCK_BOOT>>> boot_;
  ::fidl::Envelope<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>> monotonic_ticks_;
  ::fidl::Envelope<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>> boot_ticks_;

  friend class ::test_time::wire::ComplexInstants;
  friend ::fidl::internal::WireTableBaseBuilder<::test_time::wire::ComplexInstants, ::fidl::WireTableBuilder<::test_time::wire::ComplexInstants>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_time::wire::ComplexInstants, ::fidl::WireTableExternalBuilder<::test_time::wire::ComplexInstants>>;
};

namespace test_time {
namespace wire {

class ComplexInstants {
 public:
  ComplexInstants() = default;
  ComplexInstants(const ComplexInstants& other) noexcept = default;
  ComplexInstants& operator=(const ComplexInstants& other) noexcept = default;
  ComplexInstants(ComplexInstants&& other) noexcept = default;
  ComplexInstants& operator=(ComplexInstants&& other) noexcept = default;

  ~ComplexInstants() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_time::wire::ComplexInstants> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_time::wire::ComplexInstants> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_time::wire::ComplexInstants>> frame);

  [[nodiscard]] ::fidl::Array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>& monotonic() const;
  [[nodiscard]] bool has_monotonic() const;

  [[nodiscard]] ::fidl::VectorView<::fidl::basic_time<ZX_CLOCK_BOOT>>& boot() const;
  [[nodiscard]] bool has_boot() const;

  [[nodiscard]] ::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>& monotonic_ticks() const;
  [[nodiscard]] bool has_monotonic_ticks() const;

  [[nodiscard]] ::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>& boot_ticks() const;
  [[nodiscard]] bool has_boot_ticks() const;
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
 public:
#else   // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
 private:
#endif  // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  ComplexInstants& set_monotonic(::fidl::ObjectView<::fidl::Array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>> elem);
  ComplexInstants& set_monotonic(std::nullptr_t);
  template <typename... Args>
  ComplexInstants& set_monotonic(::fidl::AnyArena& allocator, Args&&... args) {
    return set_monotonic(
        ::fidl::ObjectView<::fidl::Array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>>(allocator, std::forward<Args>(args)...));
  }

  ComplexInstants& clear_monotonic();
  ComplexInstants& set_boot(::fidl::ObjectView<::fidl::VectorView<::fidl::basic_time<ZX_CLOCK_BOOT>>> elem);
  ComplexInstants& set_boot(std::nullptr_t);
  template <typename... Args>
  ComplexInstants& set_boot(::fidl::AnyArena& allocator, Args&&... args) {
    return set_boot(
        ::fidl::ObjectView<::fidl::VectorView<::fidl::basic_time<ZX_CLOCK_BOOT>>>(allocator, std::forward<Args>(args)...));
  }

  ComplexInstants& clear_boot();
  ComplexInstants& set_monotonic_ticks(::fidl::ObjectView<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>> elem);
  ComplexInstants& set_monotonic_ticks(std::nullptr_t);
  template <typename... Args>
  ComplexInstants& set_monotonic_ticks(::fidl::AnyArena& allocator, Args&&... args) {
    return set_monotonic_ticks(
        ::fidl::ObjectView<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>>(allocator, std::forward<Args>(args)...));
  }

  ComplexInstants& clear_monotonic_ticks();
  ComplexInstants& set_boot_ticks(::fidl::ObjectView<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>> elem);
  ComplexInstants& set_boot_ticks(std::nullptr_t);
  template <typename... Args>
  ComplexInstants& set_boot_ticks(::fidl::AnyArena& allocator, Args&&... args) {
    return set_boot_ticks(
        ::fidl::ObjectView<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>>(allocator, std::forward<Args>(args)...));
  }

  ComplexInstants& clear_boot_ticks();

  explicit ComplexInstants(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit ComplexInstants(::fidl::ObjectView<::fidl::WireTableFrame<::test_time::wire::ComplexInstants>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_time::wire::ComplexInstants>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_time::wire::ComplexInstants, ::fidl::WireTableBuilder<::test_time::wire::ComplexInstants>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_time::wire::ComplexInstants, ::fidl::WireTableExternalBuilder<::test_time::wire::ComplexInstants>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_time::wire::ComplexInstants>> frame_ptr_;
};
}  // namespace wire
}  // namespace test_time

template <typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_time::wire::ComplexInstants, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_time::wire::ComplexInstants Build();
  [[nodiscard]] bool has_monotonic() const;

  // Clears the monotonic field.
  //
  // This method should be used sparingly, such as only during tests, as it has
  // O(number_of_fields) complexity.
  void clear_monotonic();

  // Getter for monotonic.
  //

  [[nodiscard]] ::fidl::Array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>& monotonic() const;

  // Setter for monotonic.
  //

  BuilderImpl& monotonic(Wrapper_Ignore_Me_<::fidl::ObjectView<::fidl::Array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>>> elem);
  [[nodiscard]] bool has_boot() const;

  // Clears the boot field.
  //
  // This method should be used sparingly, such as only during tests, as it has
  // O(number_of_fields) complexity.
  void clear_boot();

  // Getter for boot.
  //

  [[nodiscard]] ::fidl::VectorView<::fidl::basic_time<ZX_CLOCK_BOOT>>& boot() const;

  // Setter for boot.
  //

  BuilderImpl& boot(Wrapper_Ignore_Me_<::fidl::ObjectView<::fidl::VectorView<::fidl::basic_time<ZX_CLOCK_BOOT>>>> elem);
  [[nodiscard]] bool has_monotonic_ticks() const;

  // Clears the monotonic_ticks field.
  //
  // This method should be used sparingly, such as only during tests, as it has
  // O(number_of_fields) complexity.
  void clear_monotonic_ticks();

  // Getter for monotonic_ticks.
  //

  [[nodiscard]] ::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>& monotonic_ticks() const;

  // Setter for monotonic_ticks.
  //

  BuilderImpl& monotonic_ticks(Wrapper_Ignore_Me_<::fidl::ObjectView<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>>> elem);
  [[nodiscard]] bool has_boot_ticks() const;

  // Clears the boot_ticks field.
  //
  // This method should be used sparingly, such as only during tests, as it has
  // O(number_of_fields) complexity.
  void clear_boot_ticks();

  // Getter for boot_ticks.
  //

  [[nodiscard]] ::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>& boot_ticks() const;

  // Setter for boot_ticks.
  //

  BuilderImpl& boot_ticks(Wrapper_Ignore_Me_<::fidl::ObjectView<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>>> elem);

 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_time::wire::ComplexInstants>>&& frame);

 private:
  ::test_time::wire::ComplexInstants table_;
};

template <>
class ::fidl::WireTableBuilder<::test_time::wire::ComplexInstants> final : public ::fidl::internal::WireTableBaseBuilder<::test_time::wire::ComplexInstants, ::fidl::WireTableBuilder<::test_time::wire::ComplexInstants>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_time::wire::ComplexInstants, ::fidl::WireTableBuilder<::test_time::wire::ComplexInstants>>;

 public:
  using Base::monotonic;

  template <
      typename First = ::fidl::Array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>,
      typename... Args,
      std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<::fidl::Array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>>>, int> = 0>
  ::fidl::WireTableBuilder<::test_time::wire::ComplexInstants>& monotonic(First&& first, Args&&... args_) {
    fidl::ObjectView<::fidl::Array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
    monotonic(Base::Wrapper_Ignore_Me_<fidl::ObjectView<::fidl::Array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>>>(view_));
    return *this;
  }
  using Base::boot;

  template <
      typename First = ::fidl::VectorView<::fidl::basic_time<ZX_CLOCK_BOOT>>,
      typename... Args,
      std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<::fidl::VectorView<::fidl::basic_time<ZX_CLOCK_BOOT>>>>, int> = 0>
  ::fidl::WireTableBuilder<::test_time::wire::ComplexInstants>& boot(First&& first, Args&&... args_) {
    fidl::ObjectView<::fidl::VectorView<::fidl::basic_time<ZX_CLOCK_BOOT>>> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
    boot(Base::Wrapper_Ignore_Me_<fidl::ObjectView<::fidl::VectorView<::fidl::basic_time<ZX_CLOCK_BOOT>>>>(view_));
    return *this;
  }
  using Base::monotonic_ticks;

  template <
      typename First = ::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>,
      typename... Args,
      std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>>>, int> = 0>
  ::fidl::WireTableBuilder<::test_time::wire::ComplexInstants>& monotonic_ticks(First&& first, Args&&... args_) {
    fidl::ObjectView<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
    monotonic_ticks(Base::Wrapper_Ignore_Me_<fidl::ObjectView<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>>>(view_));
    return *this;
  }
  using Base::boot_ticks;

  template <
      typename First = ::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>,
      typename... Args,
      std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>>>, int> = 0>
  ::fidl::WireTableBuilder<::test_time::wire::ComplexInstants>& boot_ticks(First&& first, Args&&... args_) {
    fidl::ObjectView<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
    boot_ticks(Base::Wrapper_Ignore_Me_<fidl::ObjectView<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>>>(view_));
    return *this;
  }

 private:
  friend class ::test_time::wire::ComplexInstants;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;
};

template <>
class ::fidl::WireTableExternalBuilder<::test_time::wire::ComplexInstants> final : public ::fidl::internal::WireTableBaseBuilder<::test_time::wire::ComplexInstants, ::fidl::WireTableExternalBuilder<::test_time::wire::ComplexInstants>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_time::wire::ComplexInstants, ::fidl::WireTableExternalBuilder<::test_time::wire::ComplexInstants>>;

 private:
  friend class ::test_time::wire::ComplexInstants;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_time::wire::ComplexInstants>* frame);
};
namespace test_time {
namespace wire {

struct AllInstants {
  ::fidl::basic_time<ZX_CLOCK_MONOTONIC> monotonic = {};

  ::fidl::basic_time<ZX_CLOCK_BOOT> boot = {};

  ::fidl::basic_ticks<ZX_CLOCK_MONOTONIC> monotonic_ticks = {};

  ::fidl::basic_ticks<ZX_CLOCK_BOOT> boot_ticks = {};
};

}  // namespace wire
}  // namespace test_time
namespace fidl {

template <>
struct TypeTraits<::test_time::wire::AllInstants> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 32;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<::test_time::wire::AllInstants> : public std::true_type {};
template <>
struct IsWire<::test_time::wire::AllInstants> : public std::true_type {};
template <>
struct IsStruct<::test_time::wire::AllInstants> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_time::wire::AllInstants, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = 32;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>(), ::fidl::internal::WireStructMemberCodingInfo<::fidl::basic_time<ZX_CLOCK_BOOT>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>(), ::fidl::internal::WireStructMemberCodingInfo<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>(), ::fidl::internal::WireStructMemberCodingInfo<::fidl::basic_ticks<ZX_CLOCK_BOOT>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<::test_time::wire::AllInstants, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool kIsMemcpyCompatible = Base::kIsMemcpyCompatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_time::wire::AllInstants* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_time::wire::ComplexInstants> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 3;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 4294967295;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_time::wire::ComplexInstants> : public std::true_type {};
template <>
struct IsWire<::test_time::wire::ComplexInstants> : public std::true_type {};
template <>
struct IsTable<::test_time::wire::ComplexInstants> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_time::wire::ComplexInstants, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_time::wire::ComplexInstants* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

#pragma clang diagnostic pop

}  // namespace fidl
