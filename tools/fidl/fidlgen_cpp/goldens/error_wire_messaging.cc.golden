// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json
#ifdef __Fuchsia__

#include <fidl/test.error/cpp/wire_messaging.h>

#include <memory>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_error {

[[maybe_unused]]
constexpr uint64_t kExample_foo_Ordinal = 1107623248440401476lu;

[[maybe_unused]]
constexpr ::fidl::MessageDynamicFlags kExample_foo_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_error::Example::Foo>) == ::fidl::TypeTraits<::fidl::internal::TransactionalRequest<::test_error::Example::Foo>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_error::Example::Foo>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_error::Example::Foo>, body) == sizeof(fidl_message_header_t));

static_assert(sizeof(::test_error::wire::ExampleFooRequest) == ::fidl::TypeTraits<::test_error::wire::ExampleFooRequest>::kPrimarySize);
static_assert(offsetof(::test_error::wire::ExampleFooRequest, s) == 0);
static_assert(sizeof(::fidl::WireResponse<::test_error::Example::Foo>) == ::fidl::TypeTraits<::fidl::WireResponse<::test_error::Example::Foo>>::kPrimarySize);
static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_error::Example::Foo>) == ::fidl::TypeTraits<::fidl::internal::TransactionalResponse<::test_error::Example::Foo>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_error::Example::Foo>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_error::Example::Foo>, body) == sizeof(fidl_message_header_t));
}  // namespace test_error

::fidl::WireResult<::test_error::Example::Foo>::WireResult(
    ::fidl::UnownedClientEnd<::test_error::Example> client,
    ::fidl::internal::TransactionalRequest<::test_error::Example::Foo>* request) {
  __UNINITIALIZED
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_error::Example::Foo>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_error::Example::Foo>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_error::Example::Foo>(
      outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{}));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}

::fidl::WireResult<::test_error::Example::Foo>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_error::Example::Foo>(result) {}

::fidl::WireUnownedResult<::test_error::Example::Foo>::WireUnownedResult(::fidl::UnownedClientEnd<::test_error::Example> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_error::Example::Foo>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_error::Example::Foo>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::internal::TransactionalRequest<::test_error::Example::Foo>, ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_error::Example::Foo>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_error::Example::Foo>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_error::Example::Foo>(
      outgoing.Call(
          client_end.handle(),
          handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
::fidl::WireUnownedResult<::test_error::Example::Foo>::WireUnownedResult(::fidl::WireResponse<::test_error::Example::Foo>* response)
    : ::fidl::BaseWireResult<::test_error::Example::Foo>(fidl::Status::Ok()), decoded_(response) {
  ExtractValueFromDecoded(decoded_.pointer());
}

::fidl::WireUnownedResult<::test_error::Example::Foo>::WireUnownedResult(
    ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_error::Example::Foo>>>&& decoded,
    ::fidl::internal::MessageStorageViewBase* storage_view) : ::fidl::BaseWireResult<::test_error::Example::Foo>(::fidl::internal::StatusFromResult(decoded)) {
  if (decoded.is_ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}

::fidl::WireUnownedResult<::test_error::Example::Foo>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_error::Example::Foo>(result) {}

::fidl::internal::WireThenable<::test_error::Example::Foo> fidl::internal::WireWeakAsyncClientImpl<::test_error::Example>::Foo(::fidl::StringView s) {
  ::fidl::internal::TransactionalRequest<::test_error::Example::Foo> _request{s};
  return ::fidl::internal::WireThenable<::test_error::Example::Foo>{
      _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
}
::fidl::internal::WireBufferThenable<::test_error::Example::Foo> fidl::internal::WireWeakAsyncBufferClientImpl<::test_error::Example>::Foo(::fidl::StringView s) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_error::Example::Foo>();
  ::fidl::internal::TransactionalRequest<::test_error::Example::Foo> _request{s};
  return ::fidl::internal::WireBufferThenable<::test_error::Example::Foo>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}

::fidl::WireResult<::test_error::Example::Foo>
fidl::internal::WireWeakSyncClientImpl<::test_error::Example>::Foo(::fidl::StringView s) {
  return _client_base()->MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::internal::TransactionalRequest<::test_error::Example::Foo> _request{s};
        return ::fidl::WireResult<::test_error::Example::Foo>(::fidl::UnownedClientEnd<::test_error::Example>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
      });
}

::fidl::internal::WireEventDispatcher<::test_error::Example>::WireEventDispatcher(::fidl::internal::WireEventHandlerInterface<::test_error::Example>* event_handler)
    : IncomingEventDispatcher(event_handler) {}

::fidl::Status fidl::WireSyncEventHandler<::test_error::Example>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_error::Example> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_error::Example> event_storage;
  fidl::internal::WireEventDispatcher<::test_error::Example> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<::test_error::Example>::entries_[] = {
    {
        ::test_error::kExample_foo_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_error::wire::ExampleFooRequest>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_error::Example::Foo>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_error::Example>*>(interface)->Foo(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<::test_error::Example>::entries_end_ =
    &entries_[1];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<::test_error::Example>::TryDispatch(
    ::fidl::WireServer<::test_error::Example>* impl, ::fidl::IncomingHeaderAndMessage& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, storage_view, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_error::Example>::Dispatch(::fidl::WireServer<::test_error::Example>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_,
                             &unknown_method_handler_entry_);
}

void fidl::WireServer<::test_error::Example>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::WireServerDispatcher<::test_error::Example>::Dispatch(this, std::move(msg), storage_view, txn);
}

fidl::WireServer<::test_error::Example>::Handler fidl::WireServer<::test_error::Example>::bind_handler(async_dispatcher_t* dispatcher) {
  return [impl = this, dispatcher = dispatcher](::fidl::ServerEnd<::test_error::Example> request) {
    (void)::fidl::BindServer(dispatcher, std::move(request), impl);
  };
}

void fidl::internal::WireCompleterImpl<::test_error::Example::Foo>::Reply(::fit::result<uint32_t, ::test_error::wire::ExampleFooResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_error::wire::ExampleFooResult::WithResponse(::fidl::ObjectView<::test_error::wire::ExampleFooResponse>::FromExternal(result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void fidl::internal::WireCompleterImpl<::test_error::Example::Foo>::MakeReply(::test_error::wire::ExampleFooResult ExampleFooResult) {
  ::fidl::internal::TransactionalResponse<::test_error::Example::Foo> _response{ExampleFooResult};
  __UNINITIALIZED
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_error::Example::Foo>, ::fidl::internal::ChannelTransport>
      _response_message{
          ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}
void fidl::internal::WireCompleterImpl<::test_error::Example::Foo>::ReplySuccess(int64_t y) {
  ::test_error::wire::ExampleFooResponse _response = ::test_error::wire::ExampleFooResponse{
      .y = std::move(y),
  };
  return MakeReply(::test_error::wire::ExampleFooResult::WithResponse(::fidl::ObjectView<::test_error::wire::ExampleFooResponse>::FromExternal(&_response)));
}

void fidl::internal::WireCompleterImpl<::test_error::Example::Foo>::ReplyError(uint32_t error) {
  return MakeReply(::test_error::wire::ExampleFooResult::WithErr(std::move(error)));
}

void fidl::internal::WireBufferCompleterImpl<::test_error::Example::Foo>::Reply(::fit::result<uint32_t, ::test_error::wire::ExampleFooResponse*> result) {
  if (result.is_ok()) {
    return MakeReply(::test_error::wire::ExampleFooResult::WithResponse(::fidl::ObjectView<::test_error::wire::ExampleFooResponse>::FromExternal(result.value())));
  }
  return ReplyError(std::move(result.error_value()));
}

void fidl::internal::WireBufferCompleterImpl<::test_error::Example::Foo>::MakeReply(::test_error::wire::ExampleFooResult ExampleFooResult) {
  ::fidl::internal::TransactionalResponse<::test_error::Example::Foo> _response{ExampleFooResult};
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_error::Example::Foo>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_error::Example::Foo>, ::fidl::internal::ChannelTransport>
      _response_message(
          _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

fidl::internal::WireCompleterBase<::test_error::Example::Foo>::WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
    : CompleterBase(transaction, owned, expects_reply),
      WireCompleterImpl(this) {}
fidl::internal::WireCompleterBase<::test_error::Example::Foo>::WireCompleterBase(WireCompleterBase&& other) noexcept
    : CompleterBase(std::move(other)), WireCompleterImpl(this) {}

::fidl::internal::WireCompleterBase<::test_error::Example::Foo>& fidl::internal::WireCompleterBase<::test_error::Example::Foo>::operator=(WireCompleterBase&& other) noexcept {
  CompleterBase::operator=(std::move(other));
  WireCompleterImpl::_set_core(this);
  return *this;
}
void fidl::internal::WireBufferCompleterImpl<::test_error::Example::Foo>::ReplySuccess(int64_t y) {
  ::test_error::wire::ExampleFooResponse _response = ::test_error::wire::ExampleFooResponse{
      .y = std::move(y),
  };
  return MakeReply(::test_error::wire::ExampleFooResult::WithResponse(::fidl::ObjectView<::test_error::wire::ExampleFooResponse>::FromExternal(&_response)));
}

void fidl::internal::WireBufferCompleterImpl<::test_error::Example::Foo>::ReplyError(uint32_t error) {
  return MakeReply(::test_error::wire::ExampleFooResult::WithErr(std::move(error)));
}

::fidl::internal::TransactionalRequest<::test_error::Example::Foo>::TransactionalRequest() {
  ::fidl::InitTxnHeader(&header, 0, ::test_error::kExample_foo_Ordinal, ::test_error::kExample_foo_DynamicFlags);
}

::fidl::internal::TransactionalRequest<::test_error::Example::Foo>::TransactionalRequest(::fidl::StringView s)
    : body(::test_error::wire::ExampleFooRequest{s}) {
  ::fidl::InitTxnHeader(&header, 0, ::test_error::kExample_foo_Ordinal, ::test_error::kExample_foo_DynamicFlags);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_error::Example::Foo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
                                                                                                                                                                              ::fidl::internal::TransactionalRequest<::test_error::Example::Foo>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<fidl_message_header_t>() = value->header;
  WireCodingTraits<::test_error::wire::ExampleFooRequest, WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_error::Example::Foo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  WireCodingTraits<::test_error::wire::ExampleFooRequest, WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position + sizeof(fidl_message_header_t), recursion_depth);
}

template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_error::Example::Foo>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_error::Example::Foo>, ::fidl::internal::WireCodingConstraintEmpty, false>;

::fidl::WireResponse<::test_error::Example::Foo>::WireResponse(::test_error::wire::ExampleFooResult ExampleFooResult) : ::test_error::wire::ExampleFooResult(ExampleFooResult) {}

::fidl::internal::TransactionalResponse<::test_error::Example::Foo>::TransactionalResponse(::test_error::wire::ExampleFooResult ExampleFooResult)
    : body(::fidl::WireResponse<::test_error::Example::Foo>(ExampleFooResult)) {
  ::fidl::InitTxnHeader(&header, 0, ::test_error::kExample_foo_Ordinal, ::test_error::kExample_foo_DynamicFlags);
}
::fidl::internal::TransactionalResponse<::test_error::Example::Foo>::TransactionalResponse() {
  ::fidl::InitTxnHeader(&header, 0, ::test_error::kExample_foo_Ordinal, ::test_error::kExample_foo_DynamicFlags);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_error::Example::Foo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_error::Example::Foo>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  fidl::internal::WireCodingTraits<::test_error::wire::ExampleFooResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
}
template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_error::Example::Foo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  fidl::internal::WireCodingTraits<::test_error::wire::ExampleFooResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
}
template struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_error::Example::Foo>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_error::Example::Foo>, ::fidl::internal::WireCodingConstraintEmpty, false>;

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_error::Example::Foo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
                                                                                                                                                                               ::fidl::internal::TransactionalResponse<::test_error::Example::Foo>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<fidl_message_header_t>() = value->header;
  WireCodingTraits<::fidl::WireResponse<::test_error::Example::Foo>, WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_error::Example::Foo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  WireCodingTraits<::fidl::WireResponse<::test_error::Example::Foo>, WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position + sizeof(fidl_message_header_t), recursion_depth);
}

template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_error::Example::Foo>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_error::Example::Foo>, ::fidl::internal::WireCodingConstraintEmpty, false>;

::fidl::WireResult<::test_error::Example::Foo>
fidl::internal::WireSyncClientImpl<::test_error::Example>::Foo(::fidl::StringView s) {
  ::fidl::internal::TransactionalRequest<::test_error::Example::Foo> _request{s};
  return ::fidl::WireResult<::test_error::Example::Foo>(
      ::fidl::UnownedClientEnd<::test_error::Example>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
}

::fidl::WireUnownedResult<::test_error::Example::Foo>
fidl::internal::WireSyncBufferClientImpl<::test_error::Example>::Foo(::fidl::StringView s) {
  ::fidl::internal::TransactionalRequest<::test_error::Example::Foo> _request{s};
  return ::fidl::WireUnownedResult<::test_error::Example::Foo>(
      ::fidl::UnownedClientEnd<::test_error::Example>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
}

#pragma clang diagnostic pop

#endif  // __Fuchsia__
