// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json
#ifdef __Fuchsia__

#include <fidl/test.protocolrequest/cpp/wire_messaging.h>

#include <memory>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::fidl::internal::WireEventDispatcher<::test_protocolrequest::Child>::WireEventDispatcher(::fidl::internal::WireEventHandlerInterface<::test_protocolrequest::Child>* event_handler)
    : IncomingEventDispatcher(event_handler) {}

::fidl::Status fidl::WireSyncEventHandler<::test_protocolrequest::Child>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_protocolrequest::Child> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_protocolrequest::Child> event_storage;
  fidl::internal::WireEventDispatcher<::test_protocolrequest::Child> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<::test_protocolrequest::Child>::entries_[] = {};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<::test_protocolrequest::Child>::entries_end_ =
    &entries_[0];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<::test_protocolrequest::Child>::TryDispatch(
    ::fidl::WireServer<::test_protocolrequest::Child>* impl, ::fidl::IncomingHeaderAndMessage& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, storage_view, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_protocolrequest::Child>::Dispatch(::fidl::WireServer<::test_protocolrequest::Child>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                   internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_,
                             &unknown_method_handler_entry_);
}

void fidl::WireServer<::test_protocolrequest::Child>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::WireServerDispatcher<::test_protocolrequest::Child>::Dispatch(this, std::move(msg), storage_view, txn);
}

fidl::WireServer<::test_protocolrequest::Child>::Handler fidl::WireServer<::test_protocolrequest::Child>::bind_handler(async_dispatcher_t* dispatcher) {
  return [impl = this, dispatcher = dispatcher](::fidl::ServerEnd<::test_protocolrequest::Child> request) {
    (void)::fidl::BindServer(dispatcher, std::move(request), impl);
  };
}

namespace test_protocolrequest {

[[maybe_unused]]
constexpr uint64_t kParent_GetChild_Ordinal = 881818649151440699lu;

[[maybe_unused]]
constexpr ::fidl::MessageDynamicFlags kParent_GetChild_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
static_assert(sizeof(::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>) == ::fidl::TypeTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>>::kPrimarySize);
static_assert(offsetof(::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>, c) == 0);
static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>) == ::fidl::TypeTraits<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>, body) == sizeof(fidl_message_header_t));

[[maybe_unused]]
constexpr uint64_t kParent_GetChildRequest_Ordinal = 1096855814967598201lu;

[[maybe_unused]]
constexpr ::fidl::MessageDynamicFlags kParent_GetChildRequest_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
static_assert(sizeof(::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>) == ::fidl::TypeTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>>::kPrimarySize);
static_assert(offsetof(::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>, r) == 0);
static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>) == ::fidl::TypeTraits<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>, body) == sizeof(fidl_message_header_t));

[[maybe_unused]]
constexpr uint64_t kParent_TakeChild_Ordinal = 4470101341872267920lu;

[[maybe_unused]]
constexpr ::fidl::MessageDynamicFlags kParent_TakeChild_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>) == ::fidl::TypeTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>, body) == sizeof(fidl_message_header_t));

static_assert(sizeof(::test_protocolrequest::wire::ParentTakeChildRequest) == ::fidl::TypeTraits<::test_protocolrequest::wire::ParentTakeChildRequest>::kPrimarySize);
static_assert(offsetof(::test_protocolrequest::wire::ParentTakeChildRequest, c) == 0);

[[maybe_unused]]
constexpr uint64_t kParent_TakeChildRequest_Ordinal = 2333981071306416007lu;

[[maybe_unused]]
constexpr ::fidl::MessageDynamicFlags kParent_TakeChildRequest_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>) == ::fidl::TypeTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>, body) == sizeof(fidl_message_header_t));

static_assert(sizeof(::test_protocolrequest::wire::ParentTakeChildRequestRequest) == ::fidl::TypeTraits<::test_protocolrequest::wire::ParentTakeChildRequestRequest>::kPrimarySize);
static_assert(offsetof(::test_protocolrequest::wire::ParentTakeChildRequestRequest, r) == 0);
}  // namespace test_protocolrequest

::fidl::WireResult<::test_protocolrequest::Parent::GetChild>::WireResult(
    ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client,
    ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild>* request) {
  __UNINITIALIZED
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_protocolrequest::Parent::GetChild>(
      outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{}));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}

::fidl::WireResult<::test_protocolrequest::Parent::GetChild>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_protocolrequest::Parent::GetChild>(result) {}

::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChild>::WireUnownedResult(::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_protocolrequest::Parent::GetChild>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild>, ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_protocolrequest::Parent::GetChild>(
      outgoing.Call(
          client_end.handle(),
          handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChild>::WireUnownedResult(::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>* response)
    : ::fidl::BaseWireResult<::test_protocolrequest::Parent::GetChild>(fidl::Status::Ok()), decoded_(response) {
  ExtractValueFromDecoded(decoded_.pointer());
}

::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChild>::WireUnownedResult(
    ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>>>&& decoded,
    ::fidl::internal::MessageStorageViewBase* storage_view) : ::fidl::BaseWireResult<::test_protocolrequest::Parent::GetChild>(::fidl::internal::StatusFromResult(decoded)) {
  if (decoded.is_ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}

::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChild>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_protocolrequest::Parent::GetChild>(result) {}

::fidl::WireResult<::test_protocolrequest::Parent::GetChildRequest>::WireResult(
    ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client,
    ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest>* request) {
  __UNINITIALIZED
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>(
      outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{}));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}

::fidl::WireResult<::test_protocolrequest::Parent::GetChildRequest>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_protocolrequest::Parent::GetChildRequest>(result) {}

::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChildRequest>::WireUnownedResult(::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_protocolrequest::Parent::GetChildRequest>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>(
      outgoing.Call(
          client_end.handle(),
          handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChildRequest>::WireUnownedResult(::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>* response)
    : ::fidl::BaseWireResult<::test_protocolrequest::Parent::GetChildRequest>(fidl::Status::Ok()), decoded_(response) {
  ExtractValueFromDecoded(decoded_.pointer());
}

::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChildRequest>::WireUnownedResult(
    ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>>>&& decoded,
    ::fidl::internal::MessageStorageViewBase* storage_view) : ::fidl::BaseWireResult<::test_protocolrequest::Parent::GetChildRequest>(::fidl::internal::StatusFromResult(decoded)) {
  if (decoded.is_ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}

::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChildRequest>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_protocolrequest::Parent::GetChildRequest>(result) {}

::fidl::WireResult<::test_protocolrequest::Parent::TakeChild>::WireResult(
    ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client,
    ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>* request) {
  __UNINITIALIZED
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.handle());
  SetStatus(outgoing);
}

::fidl::WireResult<::test_protocolrequest::Parent::TakeChild>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_protocolrequest::Parent::TakeChild>(result) {}

::fidl::WireUnownedResult<::test_protocolrequest::Parent::TakeChild>::WireUnownedResult(::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_protocolrequest::Parent::TakeChild>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.handle());
  SetStatus(outgoing);
}
::fidl::WireUnownedResult<::test_protocolrequest::Parent::TakeChild>::WireUnownedResult(
    ::fit::result<::fidl::Error>&& decoded,
    ::fidl::internal::MessageStorageViewBase* storage_view) : ::fidl::BaseWireResult<::test_protocolrequest::Parent::TakeChild>(::fidl::internal::StatusFromResult(decoded)) {}

::fidl::WireUnownedResult<::test_protocolrequest::Parent::TakeChild>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_protocolrequest::Parent::TakeChild>(result) {}

::fidl::WireResult<::test_protocolrequest::Parent::TakeChildRequest>::WireResult(
    ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client,
    ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>* request) {
  __UNINITIALIZED
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.handle());
  SetStatus(outgoing);
}

::fidl::WireResult<::test_protocolrequest::Parent::TakeChildRequest>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_protocolrequest::Parent::TakeChildRequest>(result) {}

::fidl::WireUnownedResult<::test_protocolrequest::Parent::TakeChildRequest>::WireUnownedResult(::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_protocolrequest::Parent::TakeChildRequest>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.handle());
  SetStatus(outgoing);
}
::fidl::WireUnownedResult<::test_protocolrequest::Parent::TakeChildRequest>::WireUnownedResult(
    ::fit::result<::fidl::Error>&& decoded,
    ::fidl::internal::MessageStorageViewBase* storage_view) : ::fidl::BaseWireResult<::test_protocolrequest::Parent::TakeChildRequest>(::fidl::internal::StatusFromResult(decoded)) {}

::fidl::WireUnownedResult<::test_protocolrequest::Parent::TakeChildRequest>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_protocolrequest::Parent::TakeChildRequest>(result) {}

::fidl::OneWayStatus fidl::internal::WireWeakOnewayClientImpl<::test_protocolrequest::Parent>::TakeChild(::fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
  __UNINITIALIZED
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild> _request_object{std::move(c)};
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>, ::fidl::internal::ChannelTransport> _request_message(
      ::fidl::internal::AllowUnownedInputRef{}, &_request_object);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayClientImpl<::test_protocolrequest::Parent>::TakeChildRequest(::fidl::ServerEnd<::test_protocolrequest::Child>&& r) {
  __UNINITIALIZED
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest> _request_object{std::move(r)};
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>, ::fidl::internal::ChannelTransport> _request_message(
      ::fidl::internal::AllowUnownedInputRef{}, &_request_object);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}

::fidl::internal::WireThenable<::test_protocolrequest::Parent::GetChild> fidl::internal::WireWeakAsyncClientImpl<::test_protocolrequest::Parent>::GetChild() {
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild> _request{};
  return ::fidl::internal::WireThenable<::test_protocolrequest::Parent::GetChild>{
      _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
}

::fidl::internal::WireThenable<::test_protocolrequest::Parent::GetChildRequest> fidl::internal::WireWeakAsyncClientImpl<::test_protocolrequest::Parent>::GetChildRequest() {
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest> _request{};
  return ::fidl::internal::WireThenable<::test_protocolrequest::Parent::GetChildRequest>{
      _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayBufferClientImpl<::test_protocolrequest::Parent>::TakeChild(::fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_protocolrequest::Parent::TakeChild>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    return ::fidl::OneWayStatus{_allocation.error_value()};
  }

  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild> _request{std::move(c)};
  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>> _request_message(
      _allocation->data, _buffer_size, &_request);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::OneWayStatus fidl::internal::WireWeakOnewayBufferClientImpl<::test_protocolrequest::Parent>::TakeChildRequest(::fidl::ServerEnd<::test_protocolrequest::Child>&& r) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_protocolrequest::Parent::TakeChildRequest>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    return ::fidl::OneWayStatus{_allocation.error_value()};
  }

  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest> _request{std::move(r)};
  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>> _request_message(
      _allocation->data, _buffer_size, &_request);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::internal::WireBufferThenable<::test_protocolrequest::Parent::GetChild> fidl::internal::WireWeakAsyncBufferClientImpl<::test_protocolrequest::Parent>::GetChild() {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_protocolrequest::Parent::GetChild>();
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild> _request{};
  return ::fidl::internal::WireBufferThenable<::test_protocolrequest::Parent::GetChild>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}
::fidl::internal::WireBufferThenable<::test_protocolrequest::Parent::GetChildRequest> fidl::internal::WireWeakAsyncBufferClientImpl<::test_protocolrequest::Parent>::GetChildRequest() {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_protocolrequest::Parent::GetChildRequest>();
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest> _request{};
  return ::fidl::internal::WireBufferThenable<::test_protocolrequest::Parent::GetChildRequest>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}

::fidl::WireResult<::test_protocolrequest::Parent::GetChild>
fidl::internal::WireWeakSyncClientImpl<::test_protocolrequest::Parent>::GetChild() {
  return _client_base()->MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild> _request{};
        return ::fidl::WireResult<::test_protocolrequest::Parent::GetChild>(::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
      });
}

::fidl::WireResult<::test_protocolrequest::Parent::GetChildRequest>
fidl::internal::WireWeakSyncClientImpl<::test_protocolrequest::Parent>::GetChildRequest() {
  return _client_base()->MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest> _request{};
        return ::fidl::WireResult<::test_protocolrequest::Parent::GetChildRequest>(::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
      });
}

::fidl::internal::WireEventDispatcher<::test_protocolrequest::Parent>::WireEventDispatcher(::fidl::internal::WireEventHandlerInterface<::test_protocolrequest::Parent>* event_handler)
    : IncomingEventDispatcher(event_handler) {}

::fidl::Status fidl::WireSyncEventHandler<::test_protocolrequest::Parent>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_protocolrequest::Parent> event_storage;
  fidl::internal::WireEventDispatcher<::test_protocolrequest::Parent> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<::test_protocolrequest::Parent>::entries_[] = {
    {
        ::test_protocolrequest::kParent_GetChild_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessageWithoutBody(
              msg, metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_protocolrequest::Parent::GetChild>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_protocolrequest::Parent>*>(interface)->GetChild(
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocolrequest::kParent_GetChildRequest_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessageWithoutBody(
              msg, metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_protocolrequest::Parent::GetChildRequest>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_protocolrequest::Parent>*>(interface)->GetChildRequest(
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocolrequest::kParent_TakeChild_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_protocolrequest::wire::ParentTakeChildRequest>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_protocolrequest::Parent::TakeChild>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_protocolrequest::Parent>*>(interface)->TakeChild(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_protocolrequest::kParent_TakeChildRequest_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::StandaloneInplaceDecode<::test_protocolrequest::wire::ParentTakeChildRequestRequest>(
              std::move(msg), metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_protocolrequest::Parent::TakeChildRequest>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_protocolrequest::Parent>*>(interface)->TakeChildRequest(
              decoded.value().pointer(),
              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<::test_protocolrequest::Parent>::entries_end_ =
    &entries_[4];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<::test_protocolrequest::Parent>::TryDispatch(
    ::fidl::WireServer<::test_protocolrequest::Parent>* impl, ::fidl::IncomingHeaderAndMessage& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, storage_view, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_protocolrequest::Parent>::Dispatch(::fidl::WireServer<::test_protocolrequest::Parent>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_,
                             &unknown_method_handler_entry_);
}

void fidl::WireServer<::test_protocolrequest::Parent>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::WireServerDispatcher<::test_protocolrequest::Parent>::Dispatch(this, std::move(msg), storage_view, txn);
}

fidl::WireServer<::test_protocolrequest::Parent>::Handler fidl::WireServer<::test_protocolrequest::Parent>::bind_handler(async_dispatcher_t* dispatcher) {
  return [impl = this, dispatcher = dispatcher](::fidl::ServerEnd<::test_protocolrequest::Parent> request) {
    (void)::fidl::BindServer(dispatcher, std::move(request), impl);
  };
}

void fidl::internal::WireCompleterImpl<::test_protocolrequest::Parent::GetChild>::Reply(::fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
  return MakeReply(std::move(c));
}

void fidl::internal::WireCompleterImpl<::test_protocolrequest::Parent::GetChild>::MakeReply(::fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
  ::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild> _response{std::move(c)};
  __UNINITIALIZED
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::ChannelTransport>
      _response_message{
          ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

void fidl::internal::WireBufferCompleterImpl<::test_protocolrequest::Parent::GetChild>::Reply(::fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
  return MakeReply(std::move(c));
}

void fidl::internal::WireBufferCompleterImpl<::test_protocolrequest::Parent::GetChild>::MakeReply(::fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
  ::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild> _response{std::move(c)};
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_protocolrequest::Parent::GetChild>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::ChannelTransport>
      _response_message(
          _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

fidl::internal::WireCompleterBase<::test_protocolrequest::Parent::GetChild>::WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
    : CompleterBase(transaction, owned, expects_reply),
      WireCompleterImpl(this) {}
fidl::internal::WireCompleterBase<::test_protocolrequest::Parent::GetChild>::WireCompleterBase(WireCompleterBase&& other) noexcept
    : CompleterBase(std::move(other)), WireCompleterImpl(this) {}

::fidl::internal::WireCompleterBase<::test_protocolrequest::Parent::GetChild>& fidl::internal::WireCompleterBase<::test_protocolrequest::Parent::GetChild>::operator=(WireCompleterBase&& other) noexcept {
  CompleterBase::operator=(std::move(other));
  WireCompleterImpl::_set_core(this);
  return *this;
}

void fidl::internal::WireCompleterImpl<::test_protocolrequest::Parent::GetChildRequest>::Reply(::fidl::ServerEnd<::test_protocolrequest::Child>&& r) {
  return MakeReply(std::move(r));
}

void fidl::internal::WireCompleterImpl<::test_protocolrequest::Parent::GetChildRequest>::MakeReply(::fidl::ServerEnd<::test_protocolrequest::Child>&& r) {
  ::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest> _response{std::move(r)};
  __UNINITIALIZED
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::ChannelTransport>
      _response_message{
          ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

void fidl::internal::WireBufferCompleterImpl<::test_protocolrequest::Parent::GetChildRequest>::Reply(::fidl::ServerEnd<::test_protocolrequest::Child>&& r) {
  return MakeReply(std::move(r));
}

void fidl::internal::WireBufferCompleterImpl<::test_protocolrequest::Parent::GetChildRequest>::MakeReply(::fidl::ServerEnd<::test_protocolrequest::Child>&& r) {
  ::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest> _response{std::move(r)};
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_protocolrequest::Parent::GetChildRequest>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::ChannelTransport>
      _response_message(
          _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

fidl::internal::WireCompleterBase<::test_protocolrequest::Parent::GetChildRequest>::WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
    : CompleterBase(transaction, owned, expects_reply),
      WireCompleterImpl(this) {}
fidl::internal::WireCompleterBase<::test_protocolrequest::Parent::GetChildRequest>::WireCompleterBase(WireCompleterBase&& other) noexcept
    : CompleterBase(std::move(other)), WireCompleterImpl(this) {}

::fidl::internal::WireCompleterBase<::test_protocolrequest::Parent::GetChildRequest>& fidl::internal::WireCompleterBase<::test_protocolrequest::Parent::GetChildRequest>::operator=(WireCompleterBase&& other) noexcept {
  CompleterBase::operator=(std::move(other));
  WireCompleterImpl::_set_core(this);
  return *this;
}

::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild>::TransactionalRequest() {
  ::fidl::InitTxnHeader(&header, 0, ::test_protocolrequest::kParent_GetChild_Ordinal, ::test_protocolrequest::kParent_GetChild_DynamicFlags);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
                                                                                                                                                                                            ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<fidl_message_header_t>() = value->header;
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
}

template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::WireCodingConstraintEmpty, false>;

::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>::WireResponse(::test_protocolrequest::wire::ParentGetChildResponse base) : ::test_protocolrequest::wire::ParentGetChildResponse(std::move(base)) {}
::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>::WireResponse(::fidl::ClientEnd<::test_protocolrequest::Child>&& c) : ::test_protocolrequest::wire::ParentGetChildResponse{.c = std::move(c)} {}

::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>::TransactionalResponse(::fidl::ClientEnd<::test_protocolrequest::Child>&& c)
    : body(::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>(std::move(c))) {
  ::fidl::InitTxnHeader(&header, 0, ::test_protocolrequest::kParent_GetChild_Ordinal, ::test_protocolrequest::kParent_GetChild_DynamicFlags);
}
::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>::TransactionalResponse() {
  ::fidl::InitTxnHeader(&header, 0, ::test_protocolrequest::kParent_GetChild_Ordinal, ::test_protocolrequest::kParent_GetChild_DynamicFlags);
}
void ::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>::_CloseHandles() {
  body._CloseHandles();
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  fidl::internal::WireCodingTraits<::test_protocolrequest::wire::ParentGetChildResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
}
template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  fidl::internal::WireCodingTraits<::test_protocolrequest::wire::ParentGetChildResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
}
template struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::WireCodingConstraintEmpty, false>;

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
                                                                                                                                                                                             ::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<fidl_message_header_t>() = value->header;
  WireCodingTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>, WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  WireCodingTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>, WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position + sizeof(fidl_message_header_t), recursion_depth);
}

template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChild>, ::fidl::internal::WireCodingConstraintEmpty, false>;

::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest>::TransactionalRequest() {
  ::fidl::InitTxnHeader(&header, 0, ::test_protocolrequest::kParent_GetChildRequest_Ordinal, ::test_protocolrequest::kParent_GetChildRequest_DynamicFlags);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
                                                                                                                                                                                                   ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<fidl_message_header_t>() = value->header;
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
}

template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, false>;

::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>::WireResponse(::test_protocolrequest::wire::ParentGetChildRequestResponse base) : ::test_protocolrequest::wire::ParentGetChildRequestResponse(std::move(base)) {}
::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>::WireResponse(::fidl::ServerEnd<::test_protocolrequest::Child>&& r) : ::test_protocolrequest::wire::ParentGetChildRequestResponse{.r = std::move(r)} {}

::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>::TransactionalResponse(::fidl::ServerEnd<::test_protocolrequest::Child>&& r)
    : body(::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>(std::move(r))) {
  ::fidl::InitTxnHeader(&header, 0, ::test_protocolrequest::kParent_GetChildRequest_Ordinal, ::test_protocolrequest::kParent_GetChildRequest_DynamicFlags);
}
::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>::TransactionalResponse() {
  ::fidl::InitTxnHeader(&header, 0, ::test_protocolrequest::kParent_GetChildRequest_Ordinal, ::test_protocolrequest::kParent_GetChildRequest_DynamicFlags);
}
void ::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>::_CloseHandles() {
  body._CloseHandles();
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  fidl::internal::WireCodingTraits<::test_protocolrequest::wire::ParentGetChildRequestResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
}
template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  fidl::internal::WireCodingTraits<::test_protocolrequest::wire::ParentGetChildRequestResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
}
template struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, false>;

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
                                                                                                                                                                                                    ::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<fidl_message_header_t>() = value->header;
  WireCodingTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>, WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  WireCodingTraits<::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>, WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position + sizeof(fidl_message_header_t), recursion_depth);
}

template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_protocolrequest::Parent::GetChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, false>;

::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>::TransactionalRequest() {
  ::fidl::InitTxnHeader(&header, 0, ::test_protocolrequest::kParent_TakeChild_Ordinal, ::test_protocolrequest::kParent_TakeChild_DynamicFlags);
}

::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>::TransactionalRequest(::fidl::ClientEnd<::test_protocolrequest::Child>&& c)
    : body(::test_protocolrequest::wire::ParentTakeChildRequest{std::move(c)}) {
  ::fidl::InitTxnHeader(&header, 0, ::test_protocolrequest::kParent_TakeChild_Ordinal, ::test_protocolrequest::kParent_TakeChild_DynamicFlags);
}
void ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>::_CloseHandles() {
  body._CloseHandles();
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
                                                                                                                                                                                             ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<fidl_message_header_t>() = value->header;
  WireCodingTraits<::test_protocolrequest::wire::ParentTakeChildRequest, WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  WireCodingTraits<::test_protocolrequest::wire::ParentTakeChildRequest, WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position + sizeof(fidl_message_header_t), recursion_depth);
}

template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild>, ::fidl::internal::WireCodingConstraintEmpty, false>;

::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>::TransactionalRequest() {
  ::fidl::InitTxnHeader(&header, 0, ::test_protocolrequest::kParent_TakeChildRequest_Ordinal, ::test_protocolrequest::kParent_TakeChildRequest_DynamicFlags);
}

::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>::TransactionalRequest(::fidl::ServerEnd<::test_protocolrequest::Child>&& r)
    : body(::test_protocolrequest::wire::ParentTakeChildRequestRequest{std::move(r)}) {
  ::fidl::InitTxnHeader(&header, 0, ::test_protocolrequest::kParent_TakeChildRequest_Ordinal, ::test_protocolrequest::kParent_TakeChildRequest_DynamicFlags);
}
void ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>::_CloseHandles() {
  body._CloseHandles();
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
                                                                                                                                                                                                    ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<fidl_message_header_t>() = value->header;
  WireCodingTraits<::test_protocolrequest::wire::ParentTakeChildRequestRequest, WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  WireCodingTraits<::test_protocolrequest::wire::ParentTakeChildRequestRequest, WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position + sizeof(fidl_message_header_t), recursion_depth);
}

template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest>, ::fidl::internal::WireCodingConstraintEmpty, false>;

::fidl::WireResult<::test_protocolrequest::Parent::GetChild>
fidl::internal::WireSyncClientImpl<::test_protocolrequest::Parent>::GetChild() {
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild> _request{};
  return ::fidl::WireResult<::test_protocolrequest::Parent::GetChild>(
      ::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
}

::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChild>
fidl::internal::WireSyncBufferClientImpl<::test_protocolrequest::Parent>::GetChild() {
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChild> _request{};
  return ::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChild>(
      ::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
}
::fidl::WireResult<::test_protocolrequest::Parent::GetChildRequest>
fidl::internal::WireSyncClientImpl<::test_protocolrequest::Parent>::GetChildRequest() {
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest> _request{};
  return ::fidl::WireResult<::test_protocolrequest::Parent::GetChildRequest>(
      ::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
}

::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChildRequest>
fidl::internal::WireSyncBufferClientImpl<::test_protocolrequest::Parent>::GetChildRequest() {
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::GetChildRequest> _request{};
  return ::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChildRequest>(
      ::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
}
::fidl::OneWayStatus
fidl::internal::WireSyncClientImpl<::test_protocolrequest::Parent>::TakeChild(::fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild> _request{std::move(c)};
  return ::fidl::WireResult<::test_protocolrequest::Parent::TakeChild>(
      ::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
}

::fidl::OneWayStatus
fidl::internal::WireSyncBufferClientImpl<::test_protocolrequest::Parent>::TakeChild(::fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChild> _request{std::move(c)};
  return ::fidl::WireUnownedResult<::test_protocolrequest::Parent::TakeChild>(
      ::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
}
::fidl::OneWayStatus
fidl::internal::WireSyncClientImpl<::test_protocolrequest::Parent>::TakeChildRequest(::fidl::ServerEnd<::test_protocolrequest::Child>&& r) {
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest> _request{std::move(r)};
  return ::fidl::WireResult<::test_protocolrequest::Parent::TakeChildRequest>(
      ::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
}

::fidl::OneWayStatus
fidl::internal::WireSyncBufferClientImpl<::test_protocolrequest::Parent>::TakeChildRequest(::fidl::ServerEnd<::test_protocolrequest::Child>&& r) {
  ::fidl::internal::TransactionalRequest<::test_protocolrequest::Parent::TakeChildRequest> _request{std::move(r)};
  return ::fidl::WireUnownedResult<::test_protocolrequest::Parent::TakeChildRequest>(
      ::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
}

#pragma clang diagnostic pop

#endif  // __Fuchsia__
