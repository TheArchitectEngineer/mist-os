// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.time/cpp/common_types.h>
#include <fidl/test.time/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_time {

class AllInstants;

class ComplexInstants;

class AllInstants {
 private:
  struct Storage_;

 public:
  AllInstants(Storage_ storage) noexcept;
  AllInstants(::fidl::basic_time<ZX_CLOCK_MONOTONIC> monotonic, ::fidl::basic_time<ZX_CLOCK_BOOT> boot, ::fidl::basic_ticks<ZX_CLOCK_MONOTONIC> monotonic_ticks, ::fidl::basic_ticks<ZX_CLOCK_BOOT> boot_ticks) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |AllInstants| only if all of its members are default constructible.
  AllInstants() = default;
#pragma clang diagnostic pop

  AllInstants(AllInstants&&) noexcept = default;
  AllInstants& operator=(AllInstants&&) noexcept = default;
  AllInstants(const AllInstants& other) noexcept;
  AllInstants& operator=(const AllInstants& other) noexcept;

  bool operator==(const AllInstants& other) const noexcept;
  bool operator!=(const AllInstants& other) const noexcept;

  ::fidl::basic_time<ZX_CLOCK_MONOTONIC>
  monotonic() const;

  ::fidl::basic_time<ZX_CLOCK_MONOTONIC>& monotonic();

  // Setter for monotonic.
  //

  AllInstants& monotonic(::fidl::basic_time<ZX_CLOCK_MONOTONIC> value);

  ::fidl::basic_time<ZX_CLOCK_BOOT>
  boot() const;

  ::fidl::basic_time<ZX_CLOCK_BOOT>& boot();

  // Setter for boot.
  //

  AllInstants& boot(::fidl::basic_time<ZX_CLOCK_BOOT> value);

  ::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>
  monotonic_ticks() const;

  ::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>& monotonic_ticks();

  // Setter for monotonic_ticks.
  //

  AllInstants& monotonic_ticks(::fidl::basic_ticks<ZX_CLOCK_MONOTONIC> value);

  ::fidl::basic_ticks<ZX_CLOCK_BOOT>
  boot_ticks() const;

  ::fidl::basic_ticks<ZX_CLOCK_BOOT>& boot_ticks();

  // Setter for boot_ticks.
  //

  AllInstants& boot_ticks(::fidl::basic_ticks<ZX_CLOCK_BOOT> value);

  AllInstants(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::fidl::basic_time<ZX_CLOCK_MONOTONIC> monotonic = {};
    ::fidl::basic_time<ZX_CLOCK_BOOT> boot = {};
    ::fidl::basic_ticks<ZX_CLOCK_MONOTONIC> monotonic_ticks = {};
    ::fidl::basic_ticks<ZX_CLOCK_BOOT> boot_ticks = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_time::AllInstants, 32>;
  friend struct ::fidl::internal::MemberVisitor<::test_time::AllInstants>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, ::fidl::basic_time<ZX_CLOCK_MONOTONIC>, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       &Storage_::monotonic, 0},
                                                   ::fidl::internal::NaturalStructMember<Storage_, ::fidl::basic_time<ZX_CLOCK_BOOT>, fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::boot, 8}, ::fidl::internal::NaturalStructMember<Storage_, ::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::monotonic_ticks, 16}, ::fidl::internal::NaturalStructMember<Storage_, ::fidl::basic_ticks<ZX_CLOCK_BOOT>, fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::boot_ticks, 24});
  static constexpr auto kPadding = std::make_tuple();
};

class ComplexInstants {
 private:
  struct Storage_;

 public:
  ComplexInstants(Storage_ storage) noexcept;
  ComplexInstants() noexcept = default;
  ComplexInstants(ComplexInstants&&) noexcept = default;
  ComplexInstants& operator=(ComplexInstants&&) noexcept = default;
  ComplexInstants(const ComplexInstants& other) noexcept;
  ComplexInstants& operator=(const ComplexInstants& other) noexcept;
  bool operator==(const ComplexInstants& other) const noexcept;
  bool operator!=(const ComplexInstants& other) const noexcept;

  bool IsEmpty() const;

  const std::optional<::std::array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>>& monotonic() const;
  ::std::optional<::std::array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>>& monotonic();

  // Setter for monotonic.
  //

  ComplexInstants& monotonic(std::optional<::std::array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>> value);

  const std::optional<::std::vector<::fidl::basic_time<ZX_CLOCK_BOOT>>>& boot() const;
  ::std::optional<::std::vector<::fidl::basic_time<ZX_CLOCK_BOOT>>>& boot();

  // Setter for boot.
  //

  ComplexInstants& boot(std::optional<::std::vector<::fidl::basic_time<ZX_CLOCK_BOOT>>> value);

  const std::optional<::std::array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>>& monotonic_ticks() const;
  ::std::optional<::std::array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>>& monotonic_ticks();

  // Setter for monotonic_ticks.
  //

  ComplexInstants& monotonic_ticks(std::optional<::std::array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>> value);

  const std::optional<::std::array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>>& boot_ticks() const;
  ::std::optional<::std::array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>>& boot_ticks();

  // Setter for boot_ticks.
  //

  ComplexInstants& boot_ticks(std::optional<::std::array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>> value);

  ComplexInstants(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::optional<::std::array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>> monotonic;
    ::std::optional<::std::vector<::fidl::basic_time<ZX_CLOCK_BOOT>>> boot;
    ::std::optional<::std::array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>> monotonic_ticks;
    ::std::optional<::std::array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>> boot_ticks;
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_time::ComplexInstants>;
  friend struct ::fidl::internal::MemberVisitor<::test_time::ComplexInstants>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, ::std::array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>, fidl::internal::NaturalCodingConstraintEmpty>{
                                                       1, &Storage_::monotonic},
                                                   ::fidl::internal::NaturalTableMember<Storage_, ::std::vector<::fidl::basic_time<ZX_CLOCK_BOOT>>, fidl::internal::NaturalCodingConstraintVector<fidl::internal::NaturalCodingConstraintEmpty>>{2, &Storage_::boot}, ::fidl::internal::NaturalTableMember<Storage_, ::std::array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>, fidl::internal::NaturalCodingConstraintEmpty>{3, &Storage_::monotonic_ticks}, ::fidl::internal::NaturalTableMember<Storage_, ::std::array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>, fidl::internal::NaturalCodingConstraintEmpty>{4, &Storage_::boot_ticks});
};

}  // namespace test_time
namespace fidl {

template <>
struct IsFidlType<::test_time::AllInstants> : public std::true_type {};

template <>
struct TypeTraits<::test_time::AllInstants> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 32;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_time::AllInstants> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_time::AllInstants, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_time::AllInstants, 32> {};

template <>
struct IsFidlType<::test_time::ComplexInstants> : public std::true_type {};

template <>
struct TypeTraits<::test_time::ComplexInstants> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 3;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 4294967295;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_time::ComplexInstants> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_time::ComplexInstants, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_time::ComplexInstants> {};

#pragma clang diagnostic pop

}  // namespace fidl
