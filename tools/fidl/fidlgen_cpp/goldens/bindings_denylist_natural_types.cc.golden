// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.bindingsdenylist/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest::DenyEachBindingOnlyDenyDartRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest::DenyEachBindingOnlyDenyDartRequest(bool a) noexcept
    : storage_({.a = std::move(a)}) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest::DenyEachBindingOnlyDenyDartRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : DenyEachBindingOnlyDenyDartRequest(Storage_{
                                                                                                                                                                  .a = {},
                                                                                                                                                              }) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest::DenyEachBindingOnlyDenyDartRequest(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest& other) noexcept : ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest& test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest::operator=(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest::operator==(const DenyEachBindingOnlyDenyDartRequest& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest, 1>::Equal(this, &other);
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest::operator!=(const DenyEachBindingOnlyDenyDartRequest& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest, 1>::Equal(this, &other);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest::Storage_ test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a)};
}
bool test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest::a() const {
  return storage_.a;
}

bool& ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest::a() {
  return storage_.a;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest& ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest::a(bool value) {
  storage_.a = std::move(value);
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse::DenyEachBindingOnlyDenyDartResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse::DenyEachBindingOnlyDenyDartResponse(int32_t b) noexcept
    : storage_({.b = std::move(b)}) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse::DenyEachBindingOnlyDenyDartResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : DenyEachBindingOnlyDenyDartResponse(Storage_{
                                                                                                                                                                    .b = {},
                                                                                                                                                                }) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse::DenyEachBindingOnlyDenyDartResponse(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse& other) noexcept : ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse& test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse::operator=(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse::operator==(const DenyEachBindingOnlyDenyDartResponse& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse, 4>::Equal(this, &other);
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse::operator!=(const DenyEachBindingOnlyDenyDartResponse& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse, 4>::Equal(this, &other);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse::Storage_ test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.b)};
}
int32_t
test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse::b() const {
  return storage_.b;
}

int32_t& ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse::b() {
  return storage_.b;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse& ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse::b(int32_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest::DenyEachBindingOnlyDenyGoRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest::DenyEachBindingOnlyDenyGoRequest(bool a) noexcept
    : storage_({.a = std::move(a)}) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest::DenyEachBindingOnlyDenyGoRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : DenyEachBindingOnlyDenyGoRequest(Storage_{
                                                                                                                                                              .a = {},
                                                                                                                                                          }) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest::DenyEachBindingOnlyDenyGoRequest(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest& other) noexcept : ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest& test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest::operator=(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest::operator==(const DenyEachBindingOnlyDenyGoRequest& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest, 1>::Equal(this, &other);
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest::operator!=(const DenyEachBindingOnlyDenyGoRequest& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest, 1>::Equal(this, &other);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest::Storage_ test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a)};
}
bool test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest::a() const {
  return storage_.a;
}

bool& ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest::a() {
  return storage_.a;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest& ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest::a(bool value) {
  storage_.a = std::move(value);
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse::DenyEachBindingOnlyDenyGoResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse::DenyEachBindingOnlyDenyGoResponse(int32_t b) noexcept
    : storage_({.b = std::move(b)}) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse::DenyEachBindingOnlyDenyGoResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : DenyEachBindingOnlyDenyGoResponse(Storage_{
                                                                                                                                                                .b = {},
                                                                                                                                                            }) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse::DenyEachBindingOnlyDenyGoResponse(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse& other) noexcept : ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse& test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse::operator=(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse::operator==(const DenyEachBindingOnlyDenyGoResponse& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse, 4>::Equal(this, &other);
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse::operator!=(const DenyEachBindingOnlyDenyGoResponse& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse, 4>::Equal(this, &other);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse::Storage_ test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.b)};
}
int32_t
test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse::b() const {
  return storage_.b;
}

int32_t& ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse::b() {
  return storage_.b;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse& ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse::b(int32_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest::DenyEachBindingOnlyDenyPythonRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest::DenyEachBindingOnlyDenyPythonRequest(bool a) noexcept
    : storage_({.a = std::move(a)}) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest::DenyEachBindingOnlyDenyPythonRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : DenyEachBindingOnlyDenyPythonRequest(Storage_{
                                                                                                                                                                      .a = {},
                                                                                                                                                                  }) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest::DenyEachBindingOnlyDenyPythonRequest(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest& other) noexcept : ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest& test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest::operator=(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest::operator==(const DenyEachBindingOnlyDenyPythonRequest& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest, 1>::Equal(this, &other);
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest::operator!=(const DenyEachBindingOnlyDenyPythonRequest& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest, 1>::Equal(this, &other);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest::Storage_ test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a)};
}
bool test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest::a() const {
  return storage_.a;
}

bool& ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest::a() {
  return storage_.a;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest& ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonRequest::a(bool value) {
  storage_.a = std::move(value);
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse::DenyEachBindingOnlyDenyPythonResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse::DenyEachBindingOnlyDenyPythonResponse(int32_t b) noexcept
    : storage_({.b = std::move(b)}) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse::DenyEachBindingOnlyDenyPythonResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : DenyEachBindingOnlyDenyPythonResponse(Storage_{
                                                                                                                                                                        .b = {},
                                                                                                                                                                    }) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse::DenyEachBindingOnlyDenyPythonResponse(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse& other) noexcept : ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse& test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse::operator=(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse::operator==(const DenyEachBindingOnlyDenyPythonResponse& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse, 4>::Equal(this, &other);
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse::operator!=(const DenyEachBindingOnlyDenyPythonResponse& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse, 4>::Equal(this, &other);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse::Storage_ test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.b)};
}
int32_t
test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse::b() const {
  return storage_.b;
}

int32_t& ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse::b() {
  return storage_.b;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse& ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse::b(int32_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest::DenyEachBindingOnlyDenyRustRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest::DenyEachBindingOnlyDenyRustRequest(bool a) noexcept
    : storage_({.a = std::move(a)}) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest::DenyEachBindingOnlyDenyRustRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : DenyEachBindingOnlyDenyRustRequest(Storage_{
                                                                                                                                                                  .a = {},
                                                                                                                                                              }) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest::DenyEachBindingOnlyDenyRustRequest(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest& other) noexcept : ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest& test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest::operator=(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest::operator==(const DenyEachBindingOnlyDenyRustRequest& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest, 1>::Equal(this, &other);
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest::operator!=(const DenyEachBindingOnlyDenyRustRequest& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest, 1>::Equal(this, &other);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest::Storage_ test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a)};
}
bool test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest::a() const {
  return storage_.a;
}

bool& ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest::a() {
  return storage_.a;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest& ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest::a(bool value) {
  storage_.a = std::move(value);
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse::DenyEachBindingOnlyDenyRustResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse::DenyEachBindingOnlyDenyRustResponse(int32_t b) noexcept
    : storage_({.b = std::move(b)}) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse::DenyEachBindingOnlyDenyRustResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : DenyEachBindingOnlyDenyRustResponse(Storage_{
                                                                                                                                                                    .b = {},
                                                                                                                                                                }) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse::DenyEachBindingOnlyDenyRustResponse(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse& other) noexcept : ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse& test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse::operator=(const ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse::operator==(const DenyEachBindingOnlyDenyRustResponse& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse, 4>::Equal(this, &other);
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse::operator!=(const DenyEachBindingOnlyDenyRustResponse& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse, 4>::Equal(this, &other);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse::Storage_ test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.b)};
}
int32_t
test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse::b() const {
  return storage_.b;
}

int32_t& ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse::b() {
  return storage_.b;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse& ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse::b(int32_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest::DenyEachBindingOnlyDenySyzkallerRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest::DenyEachBindingOnlyDenySyzkallerRequest(bool a) noexcept
    : storage_({.a = std::move(a)}) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest::DenyEachBindingOnlyDenySyzkallerRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : DenyEachBindingOnlyDenySyzkallerRequest(Storage_{
                                                                                                                                                                            .a = {},
                                                                                                                                                                        }) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest::DenyEachBindingOnlyDenySyzkallerRequest(const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest& other) noexcept : ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest& test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest::operator=(const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest::operator==(const DenyEachBindingOnlyDenySyzkallerRequest& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest, 1>::Equal(this, &other);
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest::operator!=(const DenyEachBindingOnlyDenySyzkallerRequest& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest, 1>::Equal(this, &other);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest::Storage_ test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a)};
}
bool test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest::a() const {
  return storage_.a;
}

bool& ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest::a() {
  return storage_.a;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest& ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest::a(bool value) {
  storage_.a = std::move(value);
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse::DenyEachBindingOnlyDenySyzkallerResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse::DenyEachBindingOnlyDenySyzkallerResponse(int32_t b) noexcept
    : storage_({.b = std::move(b)}) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse::DenyEachBindingOnlyDenySyzkallerResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : DenyEachBindingOnlyDenySyzkallerResponse(Storage_{
                                                                                                                                                                              .b = {},
                                                                                                                                                                          }) {}
::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse::DenyEachBindingOnlyDenySyzkallerResponse(const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse& other) noexcept : ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse& test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse::operator=(const ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse::operator==(const DenyEachBindingOnlyDenySyzkallerResponse& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse, 4>::Equal(this, &other);
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse::operator!=(const DenyEachBindingOnlyDenySyzkallerResponse& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse, 4>::Equal(this, &other);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse::Storage_ test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.b)};
}
int32_t
test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse::b() const {
  return storage_.b;
}

int32_t& ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse::b() {
  return storage_.b;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse& ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse::b(int32_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary::MemberOnlyAppearsInImportingLibrary(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary::MemberOnlyAppearsInImportingLibrary(bool a) noexcept
    : storage_({.a = std::move(a)}) {}

::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary::MemberOnlyAppearsInImportingLibrary(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : MemberOnlyAppearsInImportingLibrary(Storage_{
                                                                                                                                                                    .a = {},
                                                                                                                                                                }) {}
::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary::MemberOnlyAppearsInImportingLibrary(const ::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary& other) noexcept : ::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary(other.CloneStorage_()) {}

::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary& test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary::operator=(const ::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary::operator==(const MemberOnlyAppearsInImportingLibrary& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary, 1>::Equal(this, &other);
}

bool test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary::operator!=(const MemberOnlyAppearsInImportingLibrary& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary, 1>::Equal(this, &other);
}

::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary::Storage_ test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a)};
}
bool test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary::a() const {
  return storage_.a;
}

bool& ::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary::a() {
  return storage_.a;
}

::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary& ::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary::a(bool value) {
  storage_.a = std::move(value);
  return *this;
}

::test_bindingsdenylist::OnlyAppearsInImportingLibrary::OnlyAppearsInImportingLibrary(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_bindingsdenylist::OnlyAppearsInImportingLibrary::OnlyAppearsInImportingLibrary(::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary member_only_appears_in_importing_library) noexcept
    : storage_({.member_only_appears_in_importing_library = std::move(member_only_appears_in_importing_library)}) {}

::test_bindingsdenylist::OnlyAppearsInImportingLibrary::OnlyAppearsInImportingLibrary(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : OnlyAppearsInImportingLibrary(Storage_{
                                                                                                                                                        .member_only_appears_in_importing_library = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                                    }) {}
::test_bindingsdenylist::OnlyAppearsInImportingLibrary::OnlyAppearsInImportingLibrary(const ::test_bindingsdenylist::OnlyAppearsInImportingLibrary& other) noexcept : ::test_bindingsdenylist::OnlyAppearsInImportingLibrary(other.CloneStorage_()) {}

::test_bindingsdenylist::OnlyAppearsInImportingLibrary& test_bindingsdenylist::OnlyAppearsInImportingLibrary::operator=(const ::test_bindingsdenylist::OnlyAppearsInImportingLibrary& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_bindingsdenylist::OnlyAppearsInImportingLibrary::operator==(const OnlyAppearsInImportingLibrary& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::OnlyAppearsInImportingLibrary, 1>::Equal(this, &other);
}

bool test_bindingsdenylist::OnlyAppearsInImportingLibrary::operator!=(const OnlyAppearsInImportingLibrary& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_bindingsdenylist::OnlyAppearsInImportingLibrary, 1>::Equal(this, &other);
}

::test_bindingsdenylist::OnlyAppearsInImportingLibrary::Storage_ test_bindingsdenylist::OnlyAppearsInImportingLibrary::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.member_only_appears_in_importing_library)};
}
const ::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary&
test_bindingsdenylist::OnlyAppearsInImportingLibrary::member_only_appears_in_importing_library() const {
  return storage_.member_only_appears_in_importing_library;
}

::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary& ::test_bindingsdenylist::OnlyAppearsInImportingLibrary::member_only_appears_in_importing_library() {
  return storage_.member_only_appears_in_importing_library;
}

::test_bindingsdenylist::OnlyAppearsInImportingLibrary& ::test_bindingsdenylist::OnlyAppearsInImportingLibrary::member_only_appears_in_importing_library(::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary value) {
  storage_.member_only_appears_in_importing_library = std::move(value);
  return *this;
}

::test_bindingsdenylist::OnlyLlcpp::OnlyLlcpp(OnlyLlcpp&& other) noexcept : OnlyLlcpp(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_bindingsdenylist::OnlyLlcpp& ::test_bindingsdenylist::OnlyLlcpp::operator=(OnlyLlcpp&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_bindingsdenylist::OnlyLlcpp::OnlyLlcpp(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_bindingsdenylist::OnlyLlcpp::OnlyLlcpp(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_bindingsdenylist::OnlyLlcpp::Tag test_bindingsdenylist::OnlyLlcpp::Which() const {
  return OnlyLlcpp::IndexToTag(storage_->index()).value();
}

size_t test_bindingsdenylist::OnlyLlcpp::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_bindingsdenylist::OnlyLlcpp::Tag tag) {
  switch (tag) {
    case ::test_bindingsdenylist::OnlyLlcpp::Tag::kX:
      return 1;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_bindingsdenylist::OnlyLlcpp::Tag> test_bindingsdenylist::OnlyLlcpp::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_bindingsdenylist::OnlyLlcpp::Tag::kX;
    default:
      return std::nullopt;
  }
}

::test_bindingsdenylist::OnlyLlcpp::OnlyLlcpp(const OnlyLlcpp& other) noexcept : OnlyLlcpp(other.CloneStorage_()) {}

::test_bindingsdenylist::OnlyLlcpp& test_bindingsdenylist::OnlyLlcpp::operator=(const OnlyLlcpp& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_bindingsdenylist::OnlyLlcpp::operator==(const OnlyLlcpp& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_bindingsdenylist::OnlyLlcpp::operator!=(const OnlyLlcpp& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_bindingsdenylist::OnlyLlcpp::Storage_> test_bindingsdenylist::OnlyLlcpp::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_bindingsdenylist::OnlyLlcpp test_bindingsdenylist::OnlyLlcpp::WithX(uint32_t val) {
  return OnlyLlcpp(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_bindingsdenylist::OnlyLlcpp::Storage_> test_bindingsdenylist::OnlyLlcpp::x() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_bindingsdenylist::OnlyLlcpp::Storage_> test_bindingsdenylist::OnlyLlcpp::x() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_bindingsdenylist::OnlyLlcpp& test_bindingsdenylist::OnlyLlcpp::x(uint32_t value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::DenyEachBindingOnlyDenyDartResult(DenyEachBindingOnlyDenyDartResult&& other) noexcept : DenyEachBindingOnlyDenyDartResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult& ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::operator=(DenyEachBindingOnlyDenyDartResult&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::DenyEachBindingOnlyDenyDartResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::DenyEachBindingOnlyDenyDartResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::Tag test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::Which() const {
  return DenyEachBindingOnlyDenyDartResult::IndexToTag(storage_->index()).value();
}

size_t test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::Tag tag) {
  switch (tag) {
    case ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::Tag::kResponse:
      return 1;
    case ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::Tag::kErr:
      return 2;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::Tag> test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::Tag::kResponse;
    case 2:
      return ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::Tag::kErr;
    default:
      return std::nullopt;
  }
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::DenyEachBindingOnlyDenyDartResult(const DenyEachBindingOnlyDenyDartResult& other) noexcept : DenyEachBindingOnlyDenyDartResult(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult& test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::operator=(const DenyEachBindingOnlyDenyDartResult& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::operator==(const DenyEachBindingOnlyDenyDartResult& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::operator!=(const DenyEachBindingOnlyDenyDartResult& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage_>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::WithResponse(::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse val) {
  return DenyEachBindingOnlyDenyDartResult(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::response() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::response() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult& test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::response(::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}
::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::WithErr(uint32_t val) {
  return DenyEachBindingOnlyDenyDartResult(std::make_shared<Storage_>(
      std::in_place_index_t<2>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<2, ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::err() const {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<2, ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::err() {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult& test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult::err(uint32_t value) {
  storage_->emplace<2>(std::move(value));
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::DenyEachBindingOnlyDenyGoResult(DenyEachBindingOnlyDenyGoResult&& other) noexcept : DenyEachBindingOnlyDenyGoResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult& ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::operator=(DenyEachBindingOnlyDenyGoResult&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::DenyEachBindingOnlyDenyGoResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::DenyEachBindingOnlyDenyGoResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::Tag test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::Which() const {
  return DenyEachBindingOnlyDenyGoResult::IndexToTag(storage_->index()).value();
}

size_t test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::Tag tag) {
  switch (tag) {
    case ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::Tag::kResponse:
      return 1;
    case ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::Tag::kErr:
      return 2;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::Tag> test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::Tag::kResponse;
    case 2:
      return ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::Tag::kErr;
    default:
      return std::nullopt;
  }
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::DenyEachBindingOnlyDenyGoResult(const DenyEachBindingOnlyDenyGoResult& other) noexcept : DenyEachBindingOnlyDenyGoResult(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult& test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::operator=(const DenyEachBindingOnlyDenyGoResult& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::operator==(const DenyEachBindingOnlyDenyGoResult& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::operator!=(const DenyEachBindingOnlyDenyGoResult& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage_>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::WithResponse(::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse val) {
  return DenyEachBindingOnlyDenyGoResult(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::response() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::response() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult& test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::response(::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}
::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::WithErr(uint32_t val) {
  return DenyEachBindingOnlyDenyGoResult(std::make_shared<Storage_>(
      std::in_place_index_t<2>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<2, ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::err() const {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<2, ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::err() {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult& test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult::err(uint32_t value) {
  storage_->emplace<2>(std::move(value));
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::DenyEachBindingOnlyDenyPythonResult(DenyEachBindingOnlyDenyPythonResult&& other) noexcept : DenyEachBindingOnlyDenyPythonResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult& ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::operator=(DenyEachBindingOnlyDenyPythonResult&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::DenyEachBindingOnlyDenyPythonResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::DenyEachBindingOnlyDenyPythonResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::Tag test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::Which() const {
  return DenyEachBindingOnlyDenyPythonResult::IndexToTag(storage_->index()).value();
}

size_t test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::Tag tag) {
  switch (tag) {
    case ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::Tag::kResponse:
      return 1;
    case ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::Tag::kErr:
      return 2;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::Tag> test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::Tag::kResponse;
    case 2:
      return ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::Tag::kErr;
    default:
      return std::nullopt;
  }
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::DenyEachBindingOnlyDenyPythonResult(const DenyEachBindingOnlyDenyPythonResult& other) noexcept : DenyEachBindingOnlyDenyPythonResult(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult& test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::operator=(const DenyEachBindingOnlyDenyPythonResult& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::operator==(const DenyEachBindingOnlyDenyPythonResult& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::operator!=(const DenyEachBindingOnlyDenyPythonResult& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage_>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::WithResponse(::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse val) {
  return DenyEachBindingOnlyDenyPythonResult(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::response() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::response() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult& test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::response(::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResponse value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}
::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::WithErr(uint32_t val) {
  return DenyEachBindingOnlyDenyPythonResult(std::make_shared<Storage_>(
      std::in_place_index_t<2>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<2, ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::err() const {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<2, ::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::err() {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult& test_bindingsdenylist::DenyEachBindingOnlyDenyPythonResult::err(uint32_t value) {
  storage_->emplace<2>(std::move(value));
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::DenyEachBindingOnlyDenyRustResult(DenyEachBindingOnlyDenyRustResult&& other) noexcept : DenyEachBindingOnlyDenyRustResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult& ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::operator=(DenyEachBindingOnlyDenyRustResult&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::DenyEachBindingOnlyDenyRustResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::DenyEachBindingOnlyDenyRustResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::Tag test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::Which() const {
  return DenyEachBindingOnlyDenyRustResult::IndexToTag(storage_->index()).value();
}

size_t test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::Tag tag) {
  switch (tag) {
    case ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::Tag::kResponse:
      return 1;
    case ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::Tag::kErr:
      return 2;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::Tag> test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::Tag::kResponse;
    case 2:
      return ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::Tag::kErr;
    default:
      return std::nullopt;
  }
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::DenyEachBindingOnlyDenyRustResult(const DenyEachBindingOnlyDenyRustResult& other) noexcept : DenyEachBindingOnlyDenyRustResult(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult& test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::operator=(const DenyEachBindingOnlyDenyRustResult& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::operator==(const DenyEachBindingOnlyDenyRustResult& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::operator!=(const DenyEachBindingOnlyDenyRustResult& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage_>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::WithResponse(::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse val) {
  return DenyEachBindingOnlyDenyRustResult(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::response() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::response() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult& test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::response(::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}
::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::WithErr(uint32_t val) {
  return DenyEachBindingOnlyDenyRustResult(std::make_shared<Storage_>(
      std::in_place_index_t<2>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<2, ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::err() const {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<2, ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::err() {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult& test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult::err(uint32_t value) {
  storage_->emplace<2>(std::move(value));
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::DenyEachBindingOnlyDenySyzkallerResult(DenyEachBindingOnlyDenySyzkallerResult&& other) noexcept : DenyEachBindingOnlyDenySyzkallerResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult& ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::operator=(DenyEachBindingOnlyDenySyzkallerResult&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::DenyEachBindingOnlyDenySyzkallerResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::DenyEachBindingOnlyDenySyzkallerResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::Tag test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::Which() const {
  return DenyEachBindingOnlyDenySyzkallerResult::IndexToTag(storage_->index()).value();
}

size_t test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::Tag tag) {
  switch (tag) {
    case ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::Tag::kResponse:
      return 1;
    case ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::Tag::kErr:
      return 2;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::Tag> test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::Tag::kResponse;
    case 2:
      return ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::Tag::kErr;
    default:
      return std::nullopt;
  }
}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::DenyEachBindingOnlyDenySyzkallerResult(const DenyEachBindingOnlyDenySyzkallerResult& other) noexcept : DenyEachBindingOnlyDenySyzkallerResult(other.CloneStorage_()) {}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult& test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::operator=(const DenyEachBindingOnlyDenySyzkallerResult& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::operator==(const DenyEachBindingOnlyDenySyzkallerResult& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::operator!=(const DenyEachBindingOnlyDenySyzkallerResult& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage_>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::WithResponse(::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse val) {
  return DenyEachBindingOnlyDenySyzkallerResult(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::response() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::response() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult& test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::response(::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}
::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::WithErr(uint32_t val) {
  return DenyEachBindingOnlyDenySyzkallerResult(std::make_shared<Storage_>(
      std::in_place_index_t<2>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<2, ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::err() const {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<2, ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::Storage_> test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::err() {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult& test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult::err(uint32_t value) {
  storage_->emplace<2>(std::move(value));
  return *this;
}

#pragma clang diagnostic pop
