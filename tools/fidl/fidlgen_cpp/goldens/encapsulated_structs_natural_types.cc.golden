// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.encapsulatedstructs/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_encapsulatedstructs::Int8Int32::Int8Int32(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_encapsulatedstructs::Int8Int32::Int8Int32(int8_t a, int32_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_encapsulatedstructs::Int8Int32::Int8Int32(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Int8Int32(Storage_{
                                                                                                                   .a = {},
                                                                                                                   .b = {},
                                                                                                               }) {}
::test_encapsulatedstructs::Int8Int32::Int8Int32(const ::test_encapsulatedstructs::Int8Int32& other) noexcept : ::test_encapsulatedstructs::Int8Int32(other.CloneStorage_()) {}

::test_encapsulatedstructs::Int8Int32& test_encapsulatedstructs::Int8Int32::operator=(const ::test_encapsulatedstructs::Int8Int32& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_encapsulatedstructs::Int8Int32::operator==(const Int8Int32& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_encapsulatedstructs::Int8Int32, 8>::Equal(this, &other);
}

bool test_encapsulatedstructs::Int8Int32::operator!=(const Int8Int32& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_encapsulatedstructs::Int8Int32, 8>::Equal(this, &other);
}

::test_encapsulatedstructs::Int8Int32::Storage_ test_encapsulatedstructs::Int8Int32::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
int8_t
test_encapsulatedstructs::Int8Int32::a() const {
  return storage_.a;
}

int8_t& ::test_encapsulatedstructs::Int8Int32::a() {
  return storage_.a;
}

::test_encapsulatedstructs::Int8Int32& ::test_encapsulatedstructs::Int8Int32::a(int8_t value) {
  storage_.a = std::move(value);
  return *this;
}
int32_t
test_encapsulatedstructs::Int8Int32::b() const {
  return storage_.b;
}

int32_t& ::test_encapsulatedstructs::Int8Int32::b() {
  return storage_.b;
}

::test_encapsulatedstructs::Int8Int32& ::test_encapsulatedstructs::Int8Int32::b(int32_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_encapsulatedstructs::Int16Int8::Int16Int8(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_encapsulatedstructs::Int16Int8::Int16Int8(int16_t a, int8_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_encapsulatedstructs::Int16Int8::Int16Int8(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Int16Int8(Storage_{
                                                                                                                   .a = {},
                                                                                                                   .b = {},
                                                                                                               }) {}
::test_encapsulatedstructs::Int16Int8::Int16Int8(const ::test_encapsulatedstructs::Int16Int8& other) noexcept : ::test_encapsulatedstructs::Int16Int8(other.CloneStorage_()) {}

::test_encapsulatedstructs::Int16Int8& test_encapsulatedstructs::Int16Int8::operator=(const ::test_encapsulatedstructs::Int16Int8& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_encapsulatedstructs::Int16Int8::operator==(const Int16Int8& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_encapsulatedstructs::Int16Int8, 4>::Equal(this, &other);
}

bool test_encapsulatedstructs::Int16Int8::operator!=(const Int16Int8& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_encapsulatedstructs::Int16Int8, 4>::Equal(this, &other);
}

::test_encapsulatedstructs::Int16Int8::Storage_ test_encapsulatedstructs::Int16Int8::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
int16_t
test_encapsulatedstructs::Int16Int8::a() const {
  return storage_.a;
}

int16_t& ::test_encapsulatedstructs::Int16Int8::a() {
  return storage_.a;
}

::test_encapsulatedstructs::Int16Int8& ::test_encapsulatedstructs::Int16Int8::a(int16_t value) {
  storage_.a = std::move(value);
  return *this;
}
int8_t
test_encapsulatedstructs::Int16Int8::b() const {
  return storage_.b;
}

int8_t& ::test_encapsulatedstructs::Int16Int8::b() {
  return storage_.b;
}

::test_encapsulatedstructs::Int16Int8& ::test_encapsulatedstructs::Int16Int8::b(int8_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_encapsulatedstructs::ArrayInt16Int8::ArrayInt16Int8(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_encapsulatedstructs::ArrayInt16Int8::ArrayInt16Int8(::std::array<::test_encapsulatedstructs::Int16Int8, 3> arr) noexcept
    : storage_({.arr = std::move(arr)}) {}

::test_encapsulatedstructs::ArrayInt16Int8::ArrayInt16Int8(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : ArrayInt16Int8(Storage_{
                                                                                                                             .arr = ::fidl::internal::DefaultConstructPossiblyInvalidObject<::std::array<::test_encapsulatedstructs::Int16Int8, 3>>::Make(),
                                                                                                                         }) {}
::test_encapsulatedstructs::ArrayInt16Int8::ArrayInt16Int8(const ::test_encapsulatedstructs::ArrayInt16Int8& other) noexcept : ::test_encapsulatedstructs::ArrayInt16Int8(other.CloneStorage_()) {}

::test_encapsulatedstructs::ArrayInt16Int8& test_encapsulatedstructs::ArrayInt16Int8::operator=(const ::test_encapsulatedstructs::ArrayInt16Int8& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_encapsulatedstructs::ArrayInt16Int8::operator==(const ArrayInt16Int8& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_encapsulatedstructs::ArrayInt16Int8, 12>::Equal(this, &other);
}

bool test_encapsulatedstructs::ArrayInt16Int8::operator!=(const ArrayInt16Int8& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_encapsulatedstructs::ArrayInt16Int8, 12>::Equal(this, &other);
}

::test_encapsulatedstructs::ArrayInt16Int8::Storage_ test_encapsulatedstructs::ArrayInt16Int8::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.arr)};
}
const ::std::array<::test_encapsulatedstructs::Int16Int8, 3>&
test_encapsulatedstructs::ArrayInt16Int8::arr() const {
  return storage_.arr;
}

::std::array<::test_encapsulatedstructs::Int16Int8, 3>& ::test_encapsulatedstructs::ArrayInt16Int8::arr() {
  return storage_.arr;
}

::test_encapsulatedstructs::ArrayInt16Int8& ::test_encapsulatedstructs::ArrayInt16Int8::arr(::std::array<::test_encapsulatedstructs::Int16Int8, 3> value) {
  storage_.arr = std::move(value);
  return *this;
}

::test_encapsulatedstructs::StructPaddingTestStruct::StructPaddingTestStruct(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_encapsulatedstructs::StructPaddingTestStruct::StructPaddingTestStruct(::test_encapsulatedstructs::Int16Int8 trailing, ::test_encapsulatedstructs::Int8Int32 inner, ::test_encapsulatedstructs::ArrayInt16Int8 array) noexcept
    : storage_({.trailing = std::move(trailing),
                .inner = std::move(inner),
                .array = std::move(array)}) {}

::test_encapsulatedstructs::StructPaddingTestStruct::StructPaddingTestStruct(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : StructPaddingTestStruct(Storage_{
                                                                                                                                               .trailing = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                               .inner = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                               .array = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                                           }) {}
::test_encapsulatedstructs::StructPaddingTestStruct::StructPaddingTestStruct(const ::test_encapsulatedstructs::StructPaddingTestStruct& other) noexcept : ::test_encapsulatedstructs::StructPaddingTestStruct(other.CloneStorage_()) {}

::test_encapsulatedstructs::StructPaddingTestStruct& test_encapsulatedstructs::StructPaddingTestStruct::operator=(const ::test_encapsulatedstructs::StructPaddingTestStruct& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_encapsulatedstructs::StructPaddingTestStruct::operator==(const StructPaddingTestStruct& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_encapsulatedstructs::StructPaddingTestStruct, 24>::Equal(this, &other);
}

bool test_encapsulatedstructs::StructPaddingTestStruct::operator!=(const StructPaddingTestStruct& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_encapsulatedstructs::StructPaddingTestStruct, 24>::Equal(this, &other);
}

::test_encapsulatedstructs::StructPaddingTestStruct::Storage_ test_encapsulatedstructs::StructPaddingTestStruct::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.trailing),
      ::fidl::internal::NaturalClone(storage_.inner),
      ::fidl::internal::NaturalClone(storage_.array)};
}
const ::test_encapsulatedstructs::Int16Int8&
test_encapsulatedstructs::StructPaddingTestStruct::trailing() const {
  return storage_.trailing;
}

::test_encapsulatedstructs::Int16Int8& ::test_encapsulatedstructs::StructPaddingTestStruct::trailing() {
  return storage_.trailing;
}

::test_encapsulatedstructs::StructPaddingTestStruct& ::test_encapsulatedstructs::StructPaddingTestStruct::trailing(::test_encapsulatedstructs::Int16Int8 value) {
  storage_.trailing = std::move(value);
  return *this;
}
const ::test_encapsulatedstructs::Int8Int32&
test_encapsulatedstructs::StructPaddingTestStruct::inner() const {
  return storage_.inner;
}

::test_encapsulatedstructs::Int8Int32& ::test_encapsulatedstructs::StructPaddingTestStruct::inner() {
  return storage_.inner;
}

::test_encapsulatedstructs::StructPaddingTestStruct& ::test_encapsulatedstructs::StructPaddingTestStruct::inner(::test_encapsulatedstructs::Int8Int32 value) {
  storage_.inner = std::move(value);
  return *this;
}
const ::test_encapsulatedstructs::ArrayInt16Int8&
test_encapsulatedstructs::StructPaddingTestStruct::array() const {
  return storage_.array;
}

::test_encapsulatedstructs::ArrayInt16Int8& ::test_encapsulatedstructs::StructPaddingTestStruct::array() {
  return storage_.array;
}

::test_encapsulatedstructs::StructPaddingTestStruct& ::test_encapsulatedstructs::StructPaddingTestStruct::array(::test_encapsulatedstructs::ArrayInt16Int8 value) {
  storage_.array = std::move(value);
  return *this;
}
#ifdef __Fuchsia__

::test_encapsulatedstructs::NonInlineStructTestStruct::NonInlineStructTestStruct(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_encapsulatedstructs::NonInlineStructTestStruct::NonInlineStructTestStruct(::fidl::Box<::test_encapsulatedstructs::Int16Int8> element, ::zx::handle h) noexcept
    : storage_({.element = std::move(element),
                .h = std::move(h)}) {}

::test_encapsulatedstructs::NonInlineStructTestStruct::NonInlineStructTestStruct(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : NonInlineStructTestStruct(Storage_{
                                                                                                                                                   .element = {},
                                                                                                                                                   .h = {},
                                                                                                                                               }) {}
const ::fidl::Box<::test_encapsulatedstructs::Int16Int8>&
test_encapsulatedstructs::NonInlineStructTestStruct::element() const {
  return storage_.element;
}

::fidl::Box<::test_encapsulatedstructs::Int16Int8>& ::test_encapsulatedstructs::NonInlineStructTestStruct::element() {
  return storage_.element;
}

::test_encapsulatedstructs::NonInlineStructTestStruct& ::test_encapsulatedstructs::NonInlineStructTestStruct::element(::fidl::Box<::test_encapsulatedstructs::Int16Int8> value) {
  storage_.element = std::move(value);
  return *this;
}
const ::zx::handle&
test_encapsulatedstructs::NonInlineStructTestStruct::h() const {
  return storage_.h;
}

::zx::handle& ::test_encapsulatedstructs::NonInlineStructTestStruct::h() {
  return storage_.h;
}

::test_encapsulatedstructs::NonInlineStructTestStruct& ::test_encapsulatedstructs::NonInlineStructTestStruct::h(::zx::handle value) {
  storage_.h = std::move(value);
  return *this;
}

::test_encapsulatedstructs::TopLevelStruct::TopLevelStruct(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_encapsulatedstructs::TopLevelStruct::TopLevelStruct(::test_encapsulatedstructs::StructPaddingTestStruct a, ::test_encapsulatedstructs::NonInlineStructTestStruct b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_encapsulatedstructs::TopLevelStruct::TopLevelStruct(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : TopLevelStruct(Storage_{
                                                                                                                             .a = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                             .b = ::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{},
                                                                                                                         }) {}
const ::test_encapsulatedstructs::StructPaddingTestStruct&
test_encapsulatedstructs::TopLevelStruct::a() const {
  return storage_.a;
}

::test_encapsulatedstructs::StructPaddingTestStruct& ::test_encapsulatedstructs::TopLevelStruct::a() {
  return storage_.a;
}

::test_encapsulatedstructs::TopLevelStruct& ::test_encapsulatedstructs::TopLevelStruct::a(::test_encapsulatedstructs::StructPaddingTestStruct value) {
  storage_.a = std::move(value);
  return *this;
}
const ::test_encapsulatedstructs::NonInlineStructTestStruct&
test_encapsulatedstructs::TopLevelStruct::b() const {
  return storage_.b;
}

::test_encapsulatedstructs::NonInlineStructTestStruct& ::test_encapsulatedstructs::TopLevelStruct::b() {
  return storage_.b;
}

::test_encapsulatedstructs::TopLevelStruct& ::test_encapsulatedstructs::TopLevelStruct::b(::test_encapsulatedstructs::NonInlineStructTestStruct value) {
  storage_.b = std::move(value);
  return *this;
}

#endif  // __Fuchsia__

#pragma clang diagnostic pop
