// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.arrays/cpp/common_types.h>
#include <fidl/test.arrays/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_arrays {

class StructSmallArray;

class StructLargeArray;

class TableSmallArray;

class TableLargeArray;

class UnionSmallArray;

class UnionLargeArray;

class StructSmallArray {
 private:
  struct Storage_;

 public:
  StructSmallArray(Storage_ storage) noexcept;
  StructSmallArray(::std::array<uint32_t, 2> a) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |StructSmallArray| only if all of its members are default constructible.
  StructSmallArray() = default;
#pragma clang diagnostic pop

  StructSmallArray(StructSmallArray&&) noexcept = default;
  StructSmallArray& operator=(StructSmallArray&&) noexcept = default;
  StructSmallArray(const StructSmallArray& other) noexcept;
  StructSmallArray& operator=(const StructSmallArray& other) noexcept;

  bool operator==(const StructSmallArray& other) const noexcept;
  bool operator!=(const StructSmallArray& other) const noexcept;

  const ::std::array<uint32_t, 2>&
  a() const;

  ::std::array<uint32_t, 2>& a();

  // Setter for a.
  //

  StructSmallArray& a(::std::array<uint32_t, 2> value);

  StructSmallArray(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::array<uint32_t, 2> a = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_arrays::StructSmallArray, 8>;
  friend struct ::fidl::internal::MemberVisitor<::test_arrays::StructSmallArray>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, ::std::array<uint32_t, 2>, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::a, 0});
  static constexpr auto kPadding = std::make_tuple();
};

class StructLargeArray {
 private:
  struct Storage_;

 public:
  StructLargeArray(Storage_ storage) noexcept;
  StructLargeArray(::std::array<uint32_t, 100> a) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |StructLargeArray| only if all of its members are default constructible.
  StructLargeArray() = default;
#pragma clang diagnostic pop

  StructLargeArray(StructLargeArray&&) noexcept = default;
  StructLargeArray& operator=(StructLargeArray&&) noexcept = default;
  StructLargeArray(const StructLargeArray& other) noexcept;
  StructLargeArray& operator=(const StructLargeArray& other) noexcept;

  bool operator==(const StructLargeArray& other) const noexcept;
  bool operator!=(const StructLargeArray& other) const noexcept;

  const ::std::array<uint32_t, 100>&
  a() const;

  ::std::array<uint32_t, 100>& a();

  // Setter for a.
  //

  StructLargeArray& a(::std::array<uint32_t, 100> value);

  StructLargeArray(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::array<uint32_t, 100> a = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_arrays::StructLargeArray, 400>;
  friend struct ::fidl::internal::MemberVisitor<::test_arrays::StructLargeArray>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, ::std::array<uint32_t, 100>, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::a, 0});
  static constexpr auto kPadding = std::make_tuple();
};

class TableSmallArray {
 private:
  struct Storage_;

 public:
  TableSmallArray(Storage_ storage) noexcept;
  TableSmallArray() noexcept = default;
  TableSmallArray(TableSmallArray&&) noexcept = default;
  TableSmallArray& operator=(TableSmallArray&&) noexcept = default;
  TableSmallArray(const TableSmallArray& other) noexcept;
  TableSmallArray& operator=(const TableSmallArray& other) noexcept;
  bool operator==(const TableSmallArray& other) const noexcept;
  bool operator!=(const TableSmallArray& other) const noexcept;

  bool IsEmpty() const;

  const std::optional<::std::array<uint32_t, 2>>& a() const;
  ::std::optional<::std::array<uint32_t, 2>>& a();

  // Setter for a.
  //

  TableSmallArray& a(std::optional<::std::array<uint32_t, 2>> value);

  TableSmallArray(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::optional<::std::array<uint32_t, 2>> a;
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_arrays::TableSmallArray>;
  friend struct ::fidl::internal::MemberVisitor<::test_arrays::TableSmallArray>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, ::std::array<uint32_t, 2>, fidl::internal::NaturalCodingConstraintEmpty>{
      1, &Storage_::a});
};

class TableLargeArray {
 private:
  struct Storage_;

 public:
  TableLargeArray(Storage_ storage) noexcept;
  TableLargeArray() noexcept = default;
  TableLargeArray(TableLargeArray&&) noexcept = default;
  TableLargeArray& operator=(TableLargeArray&&) noexcept = default;
  TableLargeArray(const TableLargeArray& other) noexcept;
  TableLargeArray& operator=(const TableLargeArray& other) noexcept;
  bool operator==(const TableLargeArray& other) const noexcept;
  bool operator!=(const TableLargeArray& other) const noexcept;

  bool IsEmpty() const;

  const std::optional<::std::array<uint32_t, 100>>& a() const;
  ::std::optional<::std::array<uint32_t, 100>>& a();

  // Setter for a.
  //

  TableLargeArray& a(std::optional<::std::array<uint32_t, 100>> value);

  TableLargeArray(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::optional<::std::array<uint32_t, 100>> a;
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_arrays::TableLargeArray>;
  friend struct ::fidl::internal::MemberVisitor<::test_arrays::TableLargeArray>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, ::std::array<uint32_t, 100>, fidl::internal::NaturalCodingConstraintEmpty>{
      1, &Storage_::a});
};

class UnionSmallArray {
 private:
  using Storage_ =
      std::variant<
          std::monostate, ::std::array<uint32_t, 2>>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kA = 1,  // 0x1
  };

  UnionSmallArray(UnionSmallArray&& other) noexcept;
  UnionSmallArray& operator=(UnionSmallArray&& other) noexcept;
  UnionSmallArray(const UnionSmallArray& other) noexcept;
  UnionSmallArray& operator=(const UnionSmallArray& other) noexcept;
  bool operator==(const UnionSmallArray& other) const noexcept;
  bool operator!=(const UnionSmallArray& other) const noexcept;

  ::test_arrays::UnionSmallArray::Tag Which() const;
  static UnionSmallArray WithA(::std::array<uint32_t, 2> val);
  const ::fidl::internal::UnionMemberView<1, Storage_> a() const;
  ::fidl::internal::UnionMemberView<1, Storage_> a();

  // Sets the union to hold the a member.
  //

  UnionSmallArray& a(::std::array<uint32_t, 2> value);

  UnionSmallArray(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_arrays::UnionSmallArray>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit UnionSmallArray(std::shared_ptr<Storage_> storage);

  static size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_arrays::UnionSmallArray::Tag tag);
  static std::optional<::test_arrays::UnionSmallArray::Tag> IndexToTag(size_t index);
};

class UnionLargeArray {
 private:
  using Storage_ =
      std::variant<
          std::monostate, ::std::array<uint32_t, 100>>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kA = 1,  // 0x1
  };

  UnionLargeArray(UnionLargeArray&& other) noexcept;
  UnionLargeArray& operator=(UnionLargeArray&& other) noexcept;
  UnionLargeArray(const UnionLargeArray& other) noexcept;
  UnionLargeArray& operator=(const UnionLargeArray& other) noexcept;
  bool operator==(const UnionLargeArray& other) const noexcept;
  bool operator!=(const UnionLargeArray& other) const noexcept;

  ::test_arrays::UnionLargeArray::Tag Which() const;
  static UnionLargeArray WithA(::std::array<uint32_t, 100> val);
  const ::fidl::internal::UnionMemberView<1, Storage_> a() const;
  ::fidl::internal::UnionMemberView<1, Storage_> a();

  // Sets the union to hold the a member.
  //

  UnionLargeArray& a(::std::array<uint32_t, 100> value);

  UnionLargeArray(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_arrays::UnionLargeArray>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit UnionLargeArray(std::shared_ptr<Storage_> storage);

  static size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_arrays::UnionLargeArray::Tag tag);
  static std::optional<::test_arrays::UnionLargeArray::Tag> IndexToTag(size_t index);
};

}  // namespace test_arrays
namespace fidl {

template <>
struct IsFidlType<::test_arrays::StructSmallArray> : public std::true_type {};

template <>
struct TypeTraits<::test_arrays::StructSmallArray> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 8;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_arrays::StructSmallArray> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_arrays::StructSmallArray, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_arrays::StructSmallArray, 8> {};
template <>
struct IsFidlType<::test_arrays::StructLargeArray> : public std::true_type {};

template <>
struct TypeTraits<::test_arrays::StructLargeArray> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 400;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_arrays::StructLargeArray> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_arrays::StructLargeArray, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_arrays::StructLargeArray, 400> {};

template <>
struct IsFidlType<::test_arrays::TableSmallArray> : public std::true_type {};

template <>
struct TypeTraits<::test_arrays::TableSmallArray> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 16;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_arrays::TableSmallArray> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_arrays::TableSmallArray, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_arrays::TableSmallArray> {};
template <>
struct IsFidlType<::test_arrays::TableLargeArray> : public std::true_type {};

template <>
struct TypeTraits<::test_arrays::TableLargeArray> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 408;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_arrays::TableLargeArray> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_arrays::TableLargeArray, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_arrays::TableLargeArray> {};

template <>
struct IsFidlType<::test_arrays::UnionSmallArray> : public std::true_type {};

template <>
struct TypeTraits<::test_arrays::UnionSmallArray> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_arrays::UnionSmallArray> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_arrays::UnionSmallArray, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_arrays::UnionSmallArray> {};
template <>
struct IsFidlType<::test_arrays::UnionLargeArray> : public std::true_type {};

template <>
struct TypeTraits<::test_arrays::UnionLargeArray> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 400;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_arrays::UnionLargeArray> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_arrays::UnionLargeArray, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_arrays::UnionLargeArray> {};

#pragma clang diagnostic pop

}  // namespace fidl
