// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.service/cpp/natural_ostream.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

#ifdef __Fuchsia__

std::ostream& fidl::ostream::Formatter<::fidl::ClientEnd<::test_service::FirstProtocol>>::Format(std::ostream& os, const ::fidl::ClientEnd<::test_service::FirstProtocol>& value) {
  return os << "ClientEnd<" << "test_service::FirstProtocol" << ">(" << value.channel().get() << ")";
}

std::ostream& fidl::ostream::Formatter<::fidl::ServerEnd<::test_service::FirstProtocol>>::Format(std::ostream& os, const ::fidl::ServerEnd<::test_service::FirstProtocol>& value) {
  return os << "ServerEnd<" << "test_service::FirstProtocol" << ">(" << value.channel().get() << ")";
}

std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_service::FirstProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_service::FirstProtocol>>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_service::FirstProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_service::FirstProtocol>>::Format(os, value);
}
std::ostream& fidl::ostream::Formatter<::fidl::ClientEnd<::test_service::SecondProtocol>>::Format(std::ostream& os, const ::fidl::ClientEnd<::test_service::SecondProtocol>& value) {
  return os << "ClientEnd<" << "test_service::SecondProtocol" << ">(" << value.channel().get() << ")";
}

std::ostream& fidl::ostream::Formatter<::fidl::ServerEnd<::test_service::SecondProtocol>>::Format(std::ostream& os, const ::fidl::ServerEnd<::test_service::SecondProtocol>& value) {
  return os << "ServerEnd<" << "test_service::SecondProtocol" << ">(" << value.channel().get() << ")";
}

std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_service::SecondProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_service::SecondProtocol>>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_service::SecondProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_service::SecondProtocol>>::Format(os, value);
}

#endif  // __Fuchsia__

#pragma clang diagnostic pop
