// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.serializable/cpp/wire_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableStruct, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_serializable::wire::SerializableStruct* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (kIsMemcpyCompatible) {
    memcpy(position.As<void>(), value, sizeof(::test_serializable::wire::SerializableStruct));
  } else {
    internal::WireCodingTraits<uint8_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(encoder, &value->__reserved, position + 0, recursion_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableStruct, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (!Base::are_members_memcpy_compatible) {
    internal::WireCodingTraits<uint8_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + 0, recursion_depth);
  }
  if (*position.As<uint8_t>() != 0) {
    decoder->SetError(kCodingErrorInvalidPaddingBytes);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableStruct, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableStruct, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_serializable::wire::SerializableStruct>);
static_assert(offsetof(::test_serializable::wire::SerializableStruct, __reserved) == 0);
static_assert(sizeof(::test_serializable::wire::SerializableStruct) == ::fidl::TypeTraits<::test_serializable::wire::SerializableStruct>::kPrimarySize);

::test_serializable::wire::SerializableUnion::SerializableUnion() : ordinal_(::test_serializable::wire::SerializableUnion::Ordinal::Invalid), envelope_{} {}
::test_serializable::wire::SerializableUnion::Tag test_serializable::wire::SerializableUnion::Which() const {
  ZX_ASSERT(!has_invalid_tag());
  return static_cast<::test_serializable::wire::SerializableUnion::Tag>(ordinal_);
}

void ::test_serializable::wire::SerializableUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(SerializableUnion) == sizeof(fidl_union_t));
  static_assert(offsetof(SerializableUnion, ordinal_) == offsetof(fidl_union_t, tag));
  static_assert(offsetof(SerializableUnion, envelope_) == offsetof(fidl_union_t, envelope));
}

bool test_serializable::wire::SerializableUnion::has_invalid_tag() const { return ordinal_ == ::test_serializable::wire::SerializableUnion::Ordinal::Invalid; }

bool test_serializable::wire::SerializableUnion::is_unused() const { return ordinal_ == ::test_serializable::wire::SerializableUnion::Ordinal::kUnused; }
::test_serializable::wire::SerializableUnion test_serializable::wire::SerializableUnion::WithUnused(bool val) {
  SerializableUnion result;
  result.ordinal_ = ::test_serializable::wire::SerializableUnion::Ordinal::kUnused;
  result.envelope_.As<bool>().set_data(std::move(val));
  return result;
}

bool& test_serializable::wire::SerializableUnion::unused() {
  ZX_ASSERT(ordinal_ == ::test_serializable::wire::SerializableUnion::Ordinal::kUnused);
  return envelope_.As<bool>().get_data();
}
const bool& test_serializable::wire::SerializableUnion::unused() const {
  ZX_ASSERT(ordinal_ == ::test_serializable::wire::SerializableUnion::Ordinal::kUnused);
  return envelope_.As<bool>().get_data();
}

static_assert(std::is_standard_layout_v<::test_serializable::wire::SerializableUnion>);

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableUnion, Constraint, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_serializable::wire::SerializableUnion* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

  if (unlikely(u->tag == 0)) {
    if constexpr (Constraint::is_optional) {
      *position.As<fidl_union_t>() = {};
      return;
    }
    encoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  *position.As<fidl_xunion_tag_t>() = u->tag;

  size_t encode_inline_size;
  switch (u->tag) {
    case 1:  // ::test_serializable::wire::SerializableUnion::Tag::kUnused
      encode_inline_size = ::fidl::internal::WireCodingTraits<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      encode_inline_size = 0;
      break;
  }
  ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
  switch (u->tag) {
    case 1:  // ::test_serializable::wire::SerializableUnion::Tag::kUnused
      encode_fn = ::fidl::internal::MakeEncodeFn<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      encode_fn = nullptr;
      break;
  }
  WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableUnion, Constraint, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_serializable::wire::SerializableUnion::Tag tag = *position.As<::test_serializable::wire::SerializableUnion::Tag>();
  if (unlikely(static_cast<uint64_t>(tag) == 0)) {
    if constexpr (!Constraint::is_optional) {
      decoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
      return;
    }
    if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
      decoder->SetError(::fidl::internal::kCodingErrorZeroTagButNonZeroEnvelope);
    }
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  size_t decode_inline_size;
  switch (tag) {
    case ::test_serializable::wire::SerializableUnion::Tag::kUnused:
      decode_inline_size = ::fidl::internal::WireCodingTraits<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      decode_inline_size = 0;
      break;
  }
  DecodeFn<IsRecursive> decode_fn;
  switch (tag) {
    case ::test_serializable::wire::SerializableUnion::Tag::kUnused:
      decode_fn = ::fidl::internal::MakeDecodeFn<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      decode_fn = nullptr;
      break;
  }
  ::fidl::internal::WireDecodeStrictEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableUnion, ::fidl::internal::WireCodingConstraintUnion<false>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableUnion, ::fidl::internal::WireCodingConstraintUnion<false>, false>;
template struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableUnion, ::fidl::internal::WireCodingConstraintUnion<true>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableUnion, ::fidl::internal::WireCodingConstraintUnion<true>, false>;

bool ::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_serializable::wire::SerializableTable>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
  return max_ordinal;
}

::test_serializable::wire::SerializableTable::SerializableTable(::fidl::AnyArena& allocator)
    : frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>(allocator)) {}

::test_serializable::wire::SerializableTable::SerializableTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>&& frame)
    : frame_ptr_(std::move(frame)) {}

void test_serializable::wire::SerializableTable::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>(allocator);
}
void test_serializable::wire::SerializableTable::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_serializable::wire::SerializableTable::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_serializable::wire::SerializableTable::HasUnknownData() const {
  if (max_ordinal_ > 0) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable> test_serializable::wire::SerializableTable::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>(arena);
}
::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable> test_serializable::wire::SerializableTable::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>(std::move(frame));
}

template <typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>&& frame)
    : table_(std::move(frame)) {}

template <typename BuilderImpl>
::test_serializable::wire::SerializableTable fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_serializable::wire::SerializableTable t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}

template class fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>>;
template class fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>>;

::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>::WireTableBuilder(::fidl::AnyArena& arena)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>(arena)),
      arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>* frame)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_serializable::wire::SerializableTable* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
      Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {
    size_t encode_inline_size = 0;
    switch (i) {
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {
    size_t decode_inline_size = 0;
    switch (i) {
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch (i) {
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableTable, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableTable, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_serializable::wire::SerializableTable>);

#pragma clang diagnostic pop
