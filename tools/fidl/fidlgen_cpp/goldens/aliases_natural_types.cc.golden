// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.aliases/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

void fidl::internal::NaturalCodingTraits<::test_aliases::ObjType, ::fidl::internal::NaturalCodingConstraintEmpty>::Encode(
    fidl::internal::NaturalEncoder* encoder, ::test_aliases::ObjType* value, size_t offset, size_t recursion_depth) {
  switch (*value) {
    case ::test_aliases::ObjType::kNone:
    case ::test_aliases::ObjType::kChannel:
      break;
    default:
      encoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
      return;
  }
  *encoder->template GetPtr<::test_aliases::ObjType>(offset) = *value;
}

void fidl::internal::NaturalCodingTraits<::test_aliases::ObjType, ::fidl::internal::NaturalCodingConstraintEmpty>::Decode(
    fidl::internal::NaturalDecoder* decoder, ::test_aliases::ObjType* value, size_t offset, size_t recursion_depth) {
  *value = *decoder->template GetPtr<::test_aliases::ObjType>(offset);
  switch (*value) {
    case ::test_aliases::ObjType::kNone:
    case ::test_aliases::ObjType::kChannel:
      break;
    default:
      decoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
      return;
  }
}

#ifdef __Fuchsia__

::test_aliases::ExampleOfUseOfAliases::ExampleOfUseOfAliases(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_aliases::ExampleOfUseOfAliases::ExampleOfUseOfAliases(uint32_t field_of_u32, ::std::vector<::std::string> field_of_vec_of_strings, ::std::vector<::std::string> field_of_vec_of_strings_at_most_nine, ::std::vector<::std::string> field_of_vec_of_strings_at_most_5, ::std::vector<::test_someotherlibrary::ReferenceMe> field_of_vec_of_ref_me_at_most_5, ::zx::channel field_of_channel, ::zx::channel field_of_client_end, ::zx::channel field_of_nullable_client_end) noexcept
    : storage_({.field_of_u32 = std::move(field_of_u32),
                .field_of_vec_of_strings = std::move(field_of_vec_of_strings),
                .field_of_vec_of_strings_at_most_nine = std::move(field_of_vec_of_strings_at_most_nine),
                .field_of_vec_of_strings_at_most_5 = std::move(field_of_vec_of_strings_at_most_5),
                .field_of_vec_of_ref_me_at_most_5 = std::move(field_of_vec_of_ref_me_at_most_5),
                .field_of_channel = std::move(field_of_channel),
                .field_of_client_end = std::move(field_of_client_end),
                .field_of_nullable_client_end = std::move(field_of_nullable_client_end)}) {}

::test_aliases::ExampleOfUseOfAliases::ExampleOfUseOfAliases(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : ExampleOfUseOfAliases(Storage_{
                                                                                                                               .field_of_u32 = {},
                                                                                                                               .field_of_vec_of_strings = {},
                                                                                                                               .field_of_vec_of_strings_at_most_nine = {},
                                                                                                                               .field_of_vec_of_strings_at_most_5 = {},
                                                                                                                               .field_of_vec_of_ref_me_at_most_5 = {},
                                                                                                                               .field_of_channel = {},
                                                                                                                               .field_of_client_end = {},
                                                                                                                               .field_of_nullable_client_end = {},
                                                                                                                           }) {}
uint32_t
test_aliases::ExampleOfUseOfAliases::field_of_u32() const {
  return storage_.field_of_u32;
}

uint32_t& ::test_aliases::ExampleOfUseOfAliases::field_of_u32() {
  return storage_.field_of_u32;
}

::test_aliases::ExampleOfUseOfAliases& ::test_aliases::ExampleOfUseOfAliases::field_of_u32(uint32_t value) {
  storage_.field_of_u32 = std::move(value);
  return *this;
}
const ::std::vector<::std::string>&
test_aliases::ExampleOfUseOfAliases::field_of_vec_of_strings() const {
  return storage_.field_of_vec_of_strings;
}

::std::vector<::std::string>& ::test_aliases::ExampleOfUseOfAliases::field_of_vec_of_strings() {
  return storage_.field_of_vec_of_strings;
}

::test_aliases::ExampleOfUseOfAliases& ::test_aliases::ExampleOfUseOfAliases::field_of_vec_of_strings(::std::vector<::std::string> value) {
  storage_.field_of_vec_of_strings = std::move(value);
  return *this;
}
const ::std::vector<::std::string>&
test_aliases::ExampleOfUseOfAliases::field_of_vec_of_strings_at_most_nine() const {
  return storage_.field_of_vec_of_strings_at_most_nine;
}

::std::vector<::std::string>& ::test_aliases::ExampleOfUseOfAliases::field_of_vec_of_strings_at_most_nine() {
  return storage_.field_of_vec_of_strings_at_most_nine;
}

::test_aliases::ExampleOfUseOfAliases& ::test_aliases::ExampleOfUseOfAliases::field_of_vec_of_strings_at_most_nine(::std::vector<::std::string> value) {
  storage_.field_of_vec_of_strings_at_most_nine = std::move(value);
  return *this;
}
const ::std::vector<::std::string>&
test_aliases::ExampleOfUseOfAliases::field_of_vec_of_strings_at_most_5() const {
  return storage_.field_of_vec_of_strings_at_most_5;
}

::std::vector<::std::string>& ::test_aliases::ExampleOfUseOfAliases::field_of_vec_of_strings_at_most_5() {
  return storage_.field_of_vec_of_strings_at_most_5;
}

::test_aliases::ExampleOfUseOfAliases& ::test_aliases::ExampleOfUseOfAliases::field_of_vec_of_strings_at_most_5(::std::vector<::std::string> value) {
  storage_.field_of_vec_of_strings_at_most_5 = std::move(value);
  return *this;
}
const ::std::vector<::test_someotherlibrary::ReferenceMe>&
test_aliases::ExampleOfUseOfAliases::field_of_vec_of_ref_me_at_most_5() const {
  return storage_.field_of_vec_of_ref_me_at_most_5;
}

::std::vector<::test_someotherlibrary::ReferenceMe>& ::test_aliases::ExampleOfUseOfAliases::field_of_vec_of_ref_me_at_most_5() {
  return storage_.field_of_vec_of_ref_me_at_most_5;
}

::test_aliases::ExampleOfUseOfAliases& ::test_aliases::ExampleOfUseOfAliases::field_of_vec_of_ref_me_at_most_5(::std::vector<::test_someotherlibrary::ReferenceMe> value) {
  storage_.field_of_vec_of_ref_me_at_most_5 = std::move(value);
  return *this;
}
const ::zx::channel&
test_aliases::ExampleOfUseOfAliases::field_of_channel() const {
  return storage_.field_of_channel;
}

::zx::channel& ::test_aliases::ExampleOfUseOfAliases::field_of_channel() {
  return storage_.field_of_channel;
}

::test_aliases::ExampleOfUseOfAliases& ::test_aliases::ExampleOfUseOfAliases::field_of_channel(::zx::channel value) {
  storage_.field_of_channel = std::move(value);
  return *this;
}
const ::zx::channel&
test_aliases::ExampleOfUseOfAliases::field_of_client_end() const {
  return storage_.field_of_client_end;
}

::zx::channel& ::test_aliases::ExampleOfUseOfAliases::field_of_client_end() {
  return storage_.field_of_client_end;
}

::test_aliases::ExampleOfUseOfAliases& ::test_aliases::ExampleOfUseOfAliases::field_of_client_end(::zx::channel value) {
  storage_.field_of_client_end = std::move(value);
  return *this;
}
const ::zx::channel&
test_aliases::ExampleOfUseOfAliases::field_of_nullable_client_end() const {
  return storage_.field_of_nullable_client_end;
}

::zx::channel& ::test_aliases::ExampleOfUseOfAliases::field_of_nullable_client_end() {
  return storage_.field_of_nullable_client_end;
}

::test_aliases::ExampleOfUseOfAliases& ::test_aliases::ExampleOfUseOfAliases::field_of_nullable_client_end(::zx::channel value) {
  storage_.field_of_nullable_client_end = std::move(value);
  return *this;
}

#endif  // __Fuchsia__

#pragma clang diagnostic pop
