// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json
#ifdef __Fuchsia__

#include <fidl/test.foreigntypeinresponseusedthroughcompose/cpp/wire_messaging.h>

#include <memory>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_foreigntypeinresponseusedthroughcompose {

[[maybe_unused]]
constexpr uint64_t kTop_GetFoo_Ordinal = 4619180266423108403lu;

[[maybe_unused]]
constexpr ::fidl::MessageDynamicFlags kTop_GetFoo_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
static_assert(sizeof(::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>) == ::fidl::TypeTraits<::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>::kPrimarySize);
static_assert(offsetof(::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, foo) == 0);
static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>) == ::fidl::TypeTraits<::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, body) == sizeof(fidl_message_header_t));
}  // namespace test_foreigntypeinresponseusedthroughcompose

::fidl::WireResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::WireResult(
    ::fidl::UnownedClientEnd<::test_foreigntypeinresponseusedthroughcompose::Top> client,
    ::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>* request) {
  __UNINITIALIZED
  ::fidl::internal::OwnedEncodedMessage<::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::ChannelTransport> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(
      outgoing.Call(client.handle(), handle_storage.view(bytes_.view()), fidl::CallOptions{}));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}

::fidl::WireResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::WireResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(result) {}

::fidl::WireUnownedResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::WireUnownedResult(::fidl::UnownedClientEnd<::test_foreigntypeinresponseusedthroughcompose::Top> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> allocation = allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    SetStatus(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::internal::UnownedEncodedMessage<::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>> request_message(
      request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  ::fidl::internal::IncomingMessageHandleStorage<::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>> handle_storage;
  ::fit::result decoded = ::fidl::internal::InplaceDecodeTransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(
      outgoing.Call(
          client_end.handle(),
          handle_storage.view(fidl::BufferSpan(response_bytes, response_byte_capacity))));
  SetStatus(::fidl::internal::StatusFromResult(decoded));
  if (ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}
::fidl::WireUnownedResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::WireUnownedResult(::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>* response)
    : ::fidl::BaseWireResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(fidl::Status::Ok()), decoded_(response) {
  ExtractValueFromDecoded(decoded_.pointer());
}

::fidl::WireUnownedResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::WireUnownedResult(
    ::fit::result<::fidl::Error, ::fidl::DecodedValue<::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>>&& decoded,
    ::fidl::internal::MessageStorageViewBase* storage_view) : ::fidl::BaseWireResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(::fidl::internal::StatusFromResult(decoded)) {
  if (decoded.is_ok()) {
    decoded_ = std::move(decoded.value());
    ExtractValueFromDecoded(decoded_.pointer());
  }
}

::fidl::WireUnownedResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::WireUnownedResult(const ::fidl::Status& result) : ::fidl::BaseWireResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(result) {}

::fidl::internal::WireThenable<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo> fidl::internal::WireWeakAsyncClientImpl<::test_foreigntypeinresponseusedthroughcompose::Top>::GetFoo() {
  ::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo> _request{};
  return ::fidl::internal::WireThenable<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>{
      _client_base(), ::fidl::WriteOptions{}, ::fidl::internal::AllowUnownedInputRef{}, &_request};
}
::fidl::internal::WireBufferThenable<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo> fidl::internal::WireWeakAsyncBufferClientImpl<::test_foreigntypeinresponseusedthroughcompose::Top>::GetFoo() {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>();
  ::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo> _request{};
  return ::fidl::internal::WireBufferThenable<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>{
      _client_base(), ::fidl::WriteOptions{}, _allocator(), _buffer_size, &_request};
}

::fidl::WireResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
fidl::internal::WireWeakSyncClientImpl<::test_foreigntypeinresponseusedthroughcompose::Top>::GetFoo() {
  return _client_base()->MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo> _request{};
        return ::fidl::WireResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(::fidl::UnownedClientEnd<::test_foreigntypeinresponseusedthroughcompose::Top>(_transport->get<::fidl::internal::ChannelTransport>()), &_request);
      });
}

::fidl::internal::WireEventDispatcher<::test_foreigntypeinresponseusedthroughcompose::Top>::WireEventDispatcher(::fidl::internal::WireEventHandlerInterface<::test_foreigntypeinresponseusedthroughcompose::Top>* event_handler)
    : IncomingEventDispatcher(event_handler) {}

::fidl::Status fidl::WireSyncEventHandler<::test_foreigntypeinresponseusedthroughcompose::Top>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_foreigntypeinresponseusedthroughcompose::Top> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_foreigntypeinresponseusedthroughcompose::Top> event_storage;
  fidl::internal::WireEventDispatcher<::test_foreigntypeinresponseusedthroughcompose::Top> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<::test_foreigntypeinresponseusedthroughcompose::Top>::entries_[] = {
    {
        ::test_foreigntypeinresponseusedthroughcompose::kTop_GetFoo_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessageWithoutBody(
              msg, metadata);
          if (unlikely(!decoded.is_ok())) {
            return decoded.error_value();
          }
          ::fidl::internal::WireCompleter<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_foreigntypeinresponseusedthroughcompose::Top>*>(interface)->GetFoo(
              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<::test_foreigntypeinresponseusedthroughcompose::Top>::entries_end_ =
    &entries_[1];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<::test_foreigntypeinresponseusedthroughcompose::Top>::TryDispatch(
    ::fidl::WireServer<::test_foreigntypeinresponseusedthroughcompose::Top>* impl, ::fidl::IncomingHeaderAndMessage& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, storage_view, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_foreigntypeinresponseusedthroughcompose::Top>::Dispatch(::fidl::WireServer<::test_foreigntypeinresponseusedthroughcompose::Top>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                                         internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_,
                             &unknown_method_handler_entry_);
}

void fidl::WireServer<::test_foreigntypeinresponseusedthroughcompose::Top>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::WireServerDispatcher<::test_foreigntypeinresponseusedthroughcompose::Top>::Dispatch(this, std::move(msg), storage_view, txn);
}

fidl::WireServer<::test_foreigntypeinresponseusedthroughcompose::Top>::Handler fidl::WireServer<::test_foreigntypeinresponseusedthroughcompose::Top>::bind_handler(async_dispatcher_t* dispatcher) {
  return [impl = this, dispatcher = dispatcher](::fidl::ServerEnd<::test_foreigntypeinresponseusedthroughcompose::Top> request) {
    (void)::fidl::BindServer(dispatcher, std::move(request), impl);
  };
}

void fidl::internal::WireCompleterImpl<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::Reply(const ::test_bottom::wire::Foo& foo) {
  return MakeReply(foo);
}

void fidl::internal::WireCompleterImpl<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::MakeReply(const ::test_bottom::wire::Foo& foo) {
  ::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo> _response{foo};
  __UNINITIALIZED
  ::fidl::internal::OwnedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::ChannelTransport>
      _response_message{
          ::fidl::internal::AllowUnownedInputRef{}, &_response};
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

void fidl::internal::WireBufferCompleterImpl<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::Reply(const ::test_bottom::wire::Foo& foo) {
  return MakeReply(foo);
}

void fidl::internal::WireBufferCompleterImpl<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::MakeReply(const ::test_bottom::wire::Foo& foo) {
  ::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo> _response{foo};
  constexpr uint32_t _buffer_size = ::fidl::ServerReplyBufferSizeInChannel<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>();
  ::fit::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    return _core()->SendReply(&_failure, ::fidl::internal::OutgoingTransportContext());
  }
  ::fidl::internal::UnownedEncodedMessage<
      ::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::ChannelTransport>
      _response_message(
          _allocation->data, _buffer_size, &_response);
  return _core()->SendReply(&_response_message.GetOutgoingMessage(),
                            ::fidl::internal::OutgoingTransportContext());
}

fidl::internal::WireCompleterBase<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
    : CompleterBase(transaction, owned, expects_reply),
      WireCompleterImpl(this) {}
fidl::internal::WireCompleterBase<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::WireCompleterBase(WireCompleterBase&& other) noexcept
    : CompleterBase(std::move(other)), WireCompleterImpl(this) {}

::fidl::internal::WireCompleterBase<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>& fidl::internal::WireCompleterBase<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::operator=(WireCompleterBase&& other) noexcept {
  CompleterBase::operator=(std::move(other));
  WireCompleterImpl::_set_core(this);
  return *this;
}

::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::TransactionalRequest() {
  ::fidl::InitTxnHeader(&header, 0, ::test_foreigntypeinresponseusedthroughcompose::kTop_GetFoo_Ordinal, ::test_foreigntypeinresponseusedthroughcompose::kTop_GetFoo_DynamicFlags);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
                                                                                                                                                                                                               ::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<fidl_message_header_t>() = value->header;
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
}

template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, false>;

::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::WireResponse(::test_middle::wire::MiddleGetFooResponse base) : ::test_middle::wire::MiddleGetFooResponse(std::move(base)) {}
::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::WireResponse(const ::test_bottom::wire::Foo& foo) : ::test_middle::wire::MiddleGetFooResponse{.foo = std::move(foo)} {}

::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::TransactionalResponse(const ::test_bottom::wire::Foo& foo)
    : body(::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(foo)) {
  ::fidl::InitTxnHeader(&header, 0, ::test_foreigntypeinresponseusedthroughcompose::kTop_GetFoo_Ordinal, ::test_foreigntypeinresponseusedthroughcompose::kTop_GetFoo_DynamicFlags);
}
::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>::TransactionalResponse() {
  ::fidl::InitTxnHeader(&header, 0, ::test_foreigntypeinresponseusedthroughcompose::kTop_GetFoo_Ordinal, ::test_foreigntypeinresponseusedthroughcompose::kTop_GetFoo_DynamicFlags);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    internal::WireEncoder* encoder, ::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  fidl::internal::WireCodingTraits<::test_middle::wire::MiddleGetFooResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
}
template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  fidl::internal::WireCodingTraits<::test_middle::wire::MiddleGetFooResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
}
template struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, false>;

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(internal::WireEncoder* encoder,
                                                                                                                                                                                                                ::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<fidl_message_header_t>() = value->header;
  WireCodingTraits<::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
}

template <bool IsRecursive>
void ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  WireCodingTraits<::fidl::WireResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position + sizeof(fidl_message_header_t), recursion_depth);
}

template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>, ::fidl::internal::WireCodingConstraintEmpty, false>;

::fidl::WireResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
fidl::internal::WireSyncClientImpl<::test_foreigntypeinresponseusedthroughcompose::Top>::GetFoo() {
  ::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo> _request{};
  return ::fidl::WireResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(
      ::fidl::UnownedClientEnd<::test_foreigntypeinresponseusedthroughcompose::Top>(_transport().get<::fidl::internal::ChannelTransport>()), &_request);
}

::fidl::WireUnownedResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
fidl::internal::WireSyncBufferClientImpl<::test_foreigntypeinresponseusedthroughcompose::Top>::GetFoo() {
  ::fidl::internal::TransactionalRequest<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo> _request{};
  return ::fidl::WireUnownedResult<::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(
      ::fidl::UnownedClientEnd<::test_foreigntypeinresponseusedthroughcompose::Top>(_transport().get<::fidl::internal::ChannelTransport>()), _allocator(), &_request);
}

#pragma clang diagnostic pop

#endif  // __Fuchsia__
