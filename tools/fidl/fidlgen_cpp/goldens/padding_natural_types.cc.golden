// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.padding/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_padding::Padding1ByteEnd::Padding1ByteEnd(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding1ByteEnd::Padding1ByteEnd(uint16_t a, uint8_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_padding::Padding1ByteEnd::Padding1ByteEnd(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding1ByteEnd(Storage_{
                                                                                                                   .a = {},
                                                                                                                   .b = {},
                                                                                                               }) {}
::test_padding::Padding1ByteEnd::Padding1ByteEnd(const ::test_padding::Padding1ByteEnd& other) noexcept : ::test_padding::Padding1ByteEnd(other.CloneStorage_()) {}

::test_padding::Padding1ByteEnd& test_padding::Padding1ByteEnd::operator=(const ::test_padding::Padding1ByteEnd& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding1ByteEnd::operator==(const Padding1ByteEnd& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding1ByteEnd, 4>::Equal(this, &other);
}

bool test_padding::Padding1ByteEnd::operator!=(const Padding1ByteEnd& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding1ByteEnd, 4>::Equal(this, &other);
}

::test_padding::Padding1ByteEnd::Storage_ test_padding::Padding1ByteEnd::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
uint16_t
test_padding::Padding1ByteEnd::a() const {
  return storage_.a;
}

uint16_t& ::test_padding::Padding1ByteEnd::a() {
  return storage_.a;
}

::test_padding::Padding1ByteEnd& ::test_padding::Padding1ByteEnd::a(uint16_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint8_t
test_padding::Padding1ByteEnd::b() const {
  return storage_.b;
}

uint8_t& ::test_padding::Padding1ByteEnd::b() {
  return storage_.b;
}

::test_padding::Padding1ByteEnd& ::test_padding::Padding1ByteEnd::b(uint8_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_padding::Padding2ByteEnd::Padding2ByteEnd(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding2ByteEnd::Padding2ByteEnd(uint32_t a, uint16_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_padding::Padding2ByteEnd::Padding2ByteEnd(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding2ByteEnd(Storage_{
                                                                                                                   .a = {},
                                                                                                                   .b = {},
                                                                                                               }) {}
::test_padding::Padding2ByteEnd::Padding2ByteEnd(const ::test_padding::Padding2ByteEnd& other) noexcept : ::test_padding::Padding2ByteEnd(other.CloneStorage_()) {}

::test_padding::Padding2ByteEnd& test_padding::Padding2ByteEnd::operator=(const ::test_padding::Padding2ByteEnd& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding2ByteEnd::operator==(const Padding2ByteEnd& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding2ByteEnd, 8>::Equal(this, &other);
}

bool test_padding::Padding2ByteEnd::operator!=(const Padding2ByteEnd& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding2ByteEnd, 8>::Equal(this, &other);
}

::test_padding::Padding2ByteEnd::Storage_ test_padding::Padding2ByteEnd::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
uint32_t
test_padding::Padding2ByteEnd::a() const {
  return storage_.a;
}

uint32_t& ::test_padding::Padding2ByteEnd::a() {
  return storage_.a;
}

::test_padding::Padding2ByteEnd& ::test_padding::Padding2ByteEnd::a(uint32_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint16_t
test_padding::Padding2ByteEnd::b() const {
  return storage_.b;
}

uint16_t& ::test_padding::Padding2ByteEnd::b() {
  return storage_.b;
}

::test_padding::Padding2ByteEnd& ::test_padding::Padding2ByteEnd::b(uint16_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_padding::Padding3ByteEnd::Padding3ByteEnd(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding3ByteEnd::Padding3ByteEnd(uint32_t a, uint8_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_padding::Padding3ByteEnd::Padding3ByteEnd(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding3ByteEnd(Storage_{
                                                                                                                   .a = {},
                                                                                                                   .b = {},
                                                                                                               }) {}
::test_padding::Padding3ByteEnd::Padding3ByteEnd(const ::test_padding::Padding3ByteEnd& other) noexcept : ::test_padding::Padding3ByteEnd(other.CloneStorage_()) {}

::test_padding::Padding3ByteEnd& test_padding::Padding3ByteEnd::operator=(const ::test_padding::Padding3ByteEnd& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding3ByteEnd::operator==(const Padding3ByteEnd& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding3ByteEnd, 8>::Equal(this, &other);
}

bool test_padding::Padding3ByteEnd::operator!=(const Padding3ByteEnd& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding3ByteEnd, 8>::Equal(this, &other);
}

::test_padding::Padding3ByteEnd::Storage_ test_padding::Padding3ByteEnd::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
uint32_t
test_padding::Padding3ByteEnd::a() const {
  return storage_.a;
}

uint32_t& ::test_padding::Padding3ByteEnd::a() {
  return storage_.a;
}

::test_padding::Padding3ByteEnd& ::test_padding::Padding3ByteEnd::a(uint32_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint8_t
test_padding::Padding3ByteEnd::b() const {
  return storage_.b;
}

uint8_t& ::test_padding::Padding3ByteEnd::b() {
  return storage_.b;
}

::test_padding::Padding3ByteEnd& ::test_padding::Padding3ByteEnd::b(uint8_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_padding::Padding4ByteEnd::Padding4ByteEnd(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding4ByteEnd::Padding4ByteEnd(uint64_t a, uint32_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_padding::Padding4ByteEnd::Padding4ByteEnd(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding4ByteEnd(Storage_{
                                                                                                                   .a = {},
                                                                                                                   .b = {},
                                                                                                               }) {}
::test_padding::Padding4ByteEnd::Padding4ByteEnd(const ::test_padding::Padding4ByteEnd& other) noexcept : ::test_padding::Padding4ByteEnd(other.CloneStorage_()) {}

::test_padding::Padding4ByteEnd& test_padding::Padding4ByteEnd::operator=(const ::test_padding::Padding4ByteEnd& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding4ByteEnd::operator==(const Padding4ByteEnd& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding4ByteEnd, 16>::Equal(this, &other);
}

bool test_padding::Padding4ByteEnd::operator!=(const Padding4ByteEnd& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding4ByteEnd, 16>::Equal(this, &other);
}

::test_padding::Padding4ByteEnd::Storage_ test_padding::Padding4ByteEnd::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
uint64_t
test_padding::Padding4ByteEnd::a() const {
  return storage_.a;
}

uint64_t& ::test_padding::Padding4ByteEnd::a() {
  return storage_.a;
}

::test_padding::Padding4ByteEnd& ::test_padding::Padding4ByteEnd::a(uint64_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint32_t
test_padding::Padding4ByteEnd::b() const {
  return storage_.b;
}

uint32_t& ::test_padding::Padding4ByteEnd::b() {
  return storage_.b;
}

::test_padding::Padding4ByteEnd& ::test_padding::Padding4ByteEnd::b(uint32_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_padding::Padding5ByteEnd::Padding5ByteEnd(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding5ByteEnd::Padding5ByteEnd(uint64_t a, uint16_t b, uint8_t c) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b),
                .c = std::move(c)}) {}

::test_padding::Padding5ByteEnd::Padding5ByteEnd(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding5ByteEnd(Storage_{
                                                                                                                   .a = {},
                                                                                                                   .b = {},
                                                                                                                   .c = {},
                                                                                                               }) {}
::test_padding::Padding5ByteEnd::Padding5ByteEnd(const ::test_padding::Padding5ByteEnd& other) noexcept : ::test_padding::Padding5ByteEnd(other.CloneStorage_()) {}

::test_padding::Padding5ByteEnd& test_padding::Padding5ByteEnd::operator=(const ::test_padding::Padding5ByteEnd& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding5ByteEnd::operator==(const Padding5ByteEnd& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding5ByteEnd, 16>::Equal(this, &other);
}

bool test_padding::Padding5ByteEnd::operator!=(const Padding5ByteEnd& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding5ByteEnd, 16>::Equal(this, &other);
}

::test_padding::Padding5ByteEnd::Storage_ test_padding::Padding5ByteEnd::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b),
      ::fidl::internal::NaturalClone(storage_.c)};
}
uint64_t
test_padding::Padding5ByteEnd::a() const {
  return storage_.a;
}

uint64_t& ::test_padding::Padding5ByteEnd::a() {
  return storage_.a;
}

::test_padding::Padding5ByteEnd& ::test_padding::Padding5ByteEnd::a(uint64_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint16_t
test_padding::Padding5ByteEnd::b() const {
  return storage_.b;
}

uint16_t& ::test_padding::Padding5ByteEnd::b() {
  return storage_.b;
}

::test_padding::Padding5ByteEnd& ::test_padding::Padding5ByteEnd::b(uint16_t value) {
  storage_.b = std::move(value);
  return *this;
}
uint8_t
test_padding::Padding5ByteEnd::c() const {
  return storage_.c;
}

uint8_t& ::test_padding::Padding5ByteEnd::c() {
  return storage_.c;
}

::test_padding::Padding5ByteEnd& ::test_padding::Padding5ByteEnd::c(uint8_t value) {
  storage_.c = std::move(value);
  return *this;
}

::test_padding::Padding6ByteEnd::Padding6ByteEnd(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding6ByteEnd::Padding6ByteEnd(uint64_t a, uint16_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_padding::Padding6ByteEnd::Padding6ByteEnd(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding6ByteEnd(Storage_{
                                                                                                                   .a = {},
                                                                                                                   .b = {},
                                                                                                               }) {}
::test_padding::Padding6ByteEnd::Padding6ByteEnd(const ::test_padding::Padding6ByteEnd& other) noexcept : ::test_padding::Padding6ByteEnd(other.CloneStorage_()) {}

::test_padding::Padding6ByteEnd& test_padding::Padding6ByteEnd::operator=(const ::test_padding::Padding6ByteEnd& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding6ByteEnd::operator==(const Padding6ByteEnd& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding6ByteEnd, 16>::Equal(this, &other);
}

bool test_padding::Padding6ByteEnd::operator!=(const Padding6ByteEnd& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding6ByteEnd, 16>::Equal(this, &other);
}

::test_padding::Padding6ByteEnd::Storage_ test_padding::Padding6ByteEnd::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
uint64_t
test_padding::Padding6ByteEnd::a() const {
  return storage_.a;
}

uint64_t& ::test_padding::Padding6ByteEnd::a() {
  return storage_.a;
}

::test_padding::Padding6ByteEnd& ::test_padding::Padding6ByteEnd::a(uint64_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint16_t
test_padding::Padding6ByteEnd::b() const {
  return storage_.b;
}

uint16_t& ::test_padding::Padding6ByteEnd::b() {
  return storage_.b;
}

::test_padding::Padding6ByteEnd& ::test_padding::Padding6ByteEnd::b(uint16_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_padding::Padding7ByteEnd::Padding7ByteEnd(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding7ByteEnd::Padding7ByteEnd(uint64_t a, uint8_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_padding::Padding7ByteEnd::Padding7ByteEnd(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding7ByteEnd(Storage_{
                                                                                                                   .a = {},
                                                                                                                   .b = {},
                                                                                                               }) {}
::test_padding::Padding7ByteEnd::Padding7ByteEnd(const ::test_padding::Padding7ByteEnd& other) noexcept : ::test_padding::Padding7ByteEnd(other.CloneStorage_()) {}

::test_padding::Padding7ByteEnd& test_padding::Padding7ByteEnd::operator=(const ::test_padding::Padding7ByteEnd& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding7ByteEnd::operator==(const Padding7ByteEnd& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding7ByteEnd, 16>::Equal(this, &other);
}

bool test_padding::Padding7ByteEnd::operator!=(const Padding7ByteEnd& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding7ByteEnd, 16>::Equal(this, &other);
}

::test_padding::Padding7ByteEnd::Storage_ test_padding::Padding7ByteEnd::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
uint64_t
test_padding::Padding7ByteEnd::a() const {
  return storage_.a;
}

uint64_t& ::test_padding::Padding7ByteEnd::a() {
  return storage_.a;
}

::test_padding::Padding7ByteEnd& ::test_padding::Padding7ByteEnd::a(uint64_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint8_t
test_padding::Padding7ByteEnd::b() const {
  return storage_.b;
}

uint8_t& ::test_padding::Padding7ByteEnd::b() {
  return storage_.b;
}

::test_padding::Padding7ByteEnd& ::test_padding::Padding7ByteEnd::b(uint8_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_padding::Padding1ByteMiddle::Padding1ByteMiddle(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding1ByteMiddle::Padding1ByteMiddle(uint8_t a, uint16_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_padding::Padding1ByteMiddle::Padding1ByteMiddle(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding1ByteMiddle(Storage_{
                                                                                                                         .a = {},
                                                                                                                         .b = {},
                                                                                                                     }) {}
::test_padding::Padding1ByteMiddle::Padding1ByteMiddle(const ::test_padding::Padding1ByteMiddle& other) noexcept : ::test_padding::Padding1ByteMiddle(other.CloneStorage_()) {}

::test_padding::Padding1ByteMiddle& test_padding::Padding1ByteMiddle::operator=(const ::test_padding::Padding1ByteMiddle& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding1ByteMiddle::operator==(const Padding1ByteMiddle& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding1ByteMiddle, 4>::Equal(this, &other);
}

bool test_padding::Padding1ByteMiddle::operator!=(const Padding1ByteMiddle& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding1ByteMiddle, 4>::Equal(this, &other);
}

::test_padding::Padding1ByteMiddle::Storage_ test_padding::Padding1ByteMiddle::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
uint8_t
test_padding::Padding1ByteMiddle::a() const {
  return storage_.a;
}

uint8_t& ::test_padding::Padding1ByteMiddle::a() {
  return storage_.a;
}

::test_padding::Padding1ByteMiddle& ::test_padding::Padding1ByteMiddle::a(uint8_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint16_t
test_padding::Padding1ByteMiddle::b() const {
  return storage_.b;
}

uint16_t& ::test_padding::Padding1ByteMiddle::b() {
  return storage_.b;
}

::test_padding::Padding1ByteMiddle& ::test_padding::Padding1ByteMiddle::b(uint16_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_padding::Padding2ByteMiddle::Padding2ByteMiddle(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding2ByteMiddle::Padding2ByteMiddle(uint16_t a, uint32_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_padding::Padding2ByteMiddle::Padding2ByteMiddle(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding2ByteMiddle(Storage_{
                                                                                                                         .a = {},
                                                                                                                         .b = {},
                                                                                                                     }) {}
::test_padding::Padding2ByteMiddle::Padding2ByteMiddle(const ::test_padding::Padding2ByteMiddle& other) noexcept : ::test_padding::Padding2ByteMiddle(other.CloneStorage_()) {}

::test_padding::Padding2ByteMiddle& test_padding::Padding2ByteMiddle::operator=(const ::test_padding::Padding2ByteMiddle& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding2ByteMiddle::operator==(const Padding2ByteMiddle& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding2ByteMiddle, 8>::Equal(this, &other);
}

bool test_padding::Padding2ByteMiddle::operator!=(const Padding2ByteMiddle& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding2ByteMiddle, 8>::Equal(this, &other);
}

::test_padding::Padding2ByteMiddle::Storage_ test_padding::Padding2ByteMiddle::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
uint16_t
test_padding::Padding2ByteMiddle::a() const {
  return storage_.a;
}

uint16_t& ::test_padding::Padding2ByteMiddle::a() {
  return storage_.a;
}

::test_padding::Padding2ByteMiddle& ::test_padding::Padding2ByteMiddle::a(uint16_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint32_t
test_padding::Padding2ByteMiddle::b() const {
  return storage_.b;
}

uint32_t& ::test_padding::Padding2ByteMiddle::b() {
  return storage_.b;
}

::test_padding::Padding2ByteMiddle& ::test_padding::Padding2ByteMiddle::b(uint32_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_padding::Padding3ByteMiddle::Padding3ByteMiddle(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding3ByteMiddle::Padding3ByteMiddle(uint8_t a, uint32_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_padding::Padding3ByteMiddle::Padding3ByteMiddle(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding3ByteMiddle(Storage_{
                                                                                                                         .a = {},
                                                                                                                         .b = {},
                                                                                                                     }) {}
::test_padding::Padding3ByteMiddle::Padding3ByteMiddle(const ::test_padding::Padding3ByteMiddle& other) noexcept : ::test_padding::Padding3ByteMiddle(other.CloneStorage_()) {}

::test_padding::Padding3ByteMiddle& test_padding::Padding3ByteMiddle::operator=(const ::test_padding::Padding3ByteMiddle& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding3ByteMiddle::operator==(const Padding3ByteMiddle& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding3ByteMiddle, 8>::Equal(this, &other);
}

bool test_padding::Padding3ByteMiddle::operator!=(const Padding3ByteMiddle& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding3ByteMiddle, 8>::Equal(this, &other);
}

::test_padding::Padding3ByteMiddle::Storage_ test_padding::Padding3ByteMiddle::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
uint8_t
test_padding::Padding3ByteMiddle::a() const {
  return storage_.a;
}

uint8_t& ::test_padding::Padding3ByteMiddle::a() {
  return storage_.a;
}

::test_padding::Padding3ByteMiddle& ::test_padding::Padding3ByteMiddle::a(uint8_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint32_t
test_padding::Padding3ByteMiddle::b() const {
  return storage_.b;
}

uint32_t& ::test_padding::Padding3ByteMiddle::b() {
  return storage_.b;
}

::test_padding::Padding3ByteMiddle& ::test_padding::Padding3ByteMiddle::b(uint32_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_padding::Padding4ByteMiddle::Padding4ByteMiddle(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding4ByteMiddle::Padding4ByteMiddle(uint32_t a, uint64_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_padding::Padding4ByteMiddle::Padding4ByteMiddle(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding4ByteMiddle(Storage_{
                                                                                                                         .a = {},
                                                                                                                         .b = {},
                                                                                                                     }) {}
::test_padding::Padding4ByteMiddle::Padding4ByteMiddle(const ::test_padding::Padding4ByteMiddle& other) noexcept : ::test_padding::Padding4ByteMiddle(other.CloneStorage_()) {}

::test_padding::Padding4ByteMiddle& test_padding::Padding4ByteMiddle::operator=(const ::test_padding::Padding4ByteMiddle& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding4ByteMiddle::operator==(const Padding4ByteMiddle& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding4ByteMiddle, 16>::Equal(this, &other);
}

bool test_padding::Padding4ByteMiddle::operator!=(const Padding4ByteMiddle& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding4ByteMiddle, 16>::Equal(this, &other);
}

::test_padding::Padding4ByteMiddle::Storage_ test_padding::Padding4ByteMiddle::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
uint32_t
test_padding::Padding4ByteMiddle::a() const {
  return storage_.a;
}

uint32_t& ::test_padding::Padding4ByteMiddle::a() {
  return storage_.a;
}

::test_padding::Padding4ByteMiddle& ::test_padding::Padding4ByteMiddle::a(uint32_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint64_t
test_padding::Padding4ByteMiddle::b() const {
  return storage_.b;
}

uint64_t& ::test_padding::Padding4ByteMiddle::b() {
  return storage_.b;
}

::test_padding::Padding4ByteMiddle& ::test_padding::Padding4ByteMiddle::b(uint64_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_padding::Padding5ByteMiddle::Padding5ByteMiddle(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding5ByteMiddle::Padding5ByteMiddle(uint16_t a, uint8_t b, uint64_t c) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b),
                .c = std::move(c)}) {}

::test_padding::Padding5ByteMiddle::Padding5ByteMiddle(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding5ByteMiddle(Storage_{
                                                                                                                         .a = {},
                                                                                                                         .b = {},
                                                                                                                         .c = {},
                                                                                                                     }) {}
::test_padding::Padding5ByteMiddle::Padding5ByteMiddle(const ::test_padding::Padding5ByteMiddle& other) noexcept : ::test_padding::Padding5ByteMiddle(other.CloneStorage_()) {}

::test_padding::Padding5ByteMiddle& test_padding::Padding5ByteMiddle::operator=(const ::test_padding::Padding5ByteMiddle& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding5ByteMiddle::operator==(const Padding5ByteMiddle& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding5ByteMiddle, 16>::Equal(this, &other);
}

bool test_padding::Padding5ByteMiddle::operator!=(const Padding5ByteMiddle& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding5ByteMiddle, 16>::Equal(this, &other);
}

::test_padding::Padding5ByteMiddle::Storage_ test_padding::Padding5ByteMiddle::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b),
      ::fidl::internal::NaturalClone(storage_.c)};
}
uint16_t
test_padding::Padding5ByteMiddle::a() const {
  return storage_.a;
}

uint16_t& ::test_padding::Padding5ByteMiddle::a() {
  return storage_.a;
}

::test_padding::Padding5ByteMiddle& ::test_padding::Padding5ByteMiddle::a(uint16_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint8_t
test_padding::Padding5ByteMiddle::b() const {
  return storage_.b;
}

uint8_t& ::test_padding::Padding5ByteMiddle::b() {
  return storage_.b;
}

::test_padding::Padding5ByteMiddle& ::test_padding::Padding5ByteMiddle::b(uint8_t value) {
  storage_.b = std::move(value);
  return *this;
}
uint64_t
test_padding::Padding5ByteMiddle::c() const {
  return storage_.c;
}

uint64_t& ::test_padding::Padding5ByteMiddle::c() {
  return storage_.c;
}

::test_padding::Padding5ByteMiddle& ::test_padding::Padding5ByteMiddle::c(uint64_t value) {
  storage_.c = std::move(value);
  return *this;
}

::test_padding::Padding6ByteMiddle::Padding6ByteMiddle(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding6ByteMiddle::Padding6ByteMiddle(uint16_t a, uint64_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_padding::Padding6ByteMiddle::Padding6ByteMiddle(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding6ByteMiddle(Storage_{
                                                                                                                         .a = {},
                                                                                                                         .b = {},
                                                                                                                     }) {}
::test_padding::Padding6ByteMiddle::Padding6ByteMiddle(const ::test_padding::Padding6ByteMiddle& other) noexcept : ::test_padding::Padding6ByteMiddle(other.CloneStorage_()) {}

::test_padding::Padding6ByteMiddle& test_padding::Padding6ByteMiddle::operator=(const ::test_padding::Padding6ByteMiddle& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding6ByteMiddle::operator==(const Padding6ByteMiddle& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding6ByteMiddle, 16>::Equal(this, &other);
}

bool test_padding::Padding6ByteMiddle::operator!=(const Padding6ByteMiddle& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding6ByteMiddle, 16>::Equal(this, &other);
}

::test_padding::Padding6ByteMiddle::Storage_ test_padding::Padding6ByteMiddle::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
uint16_t
test_padding::Padding6ByteMiddle::a() const {
  return storage_.a;
}

uint16_t& ::test_padding::Padding6ByteMiddle::a() {
  return storage_.a;
}

::test_padding::Padding6ByteMiddle& ::test_padding::Padding6ByteMiddle::a(uint16_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint64_t
test_padding::Padding6ByteMiddle::b() const {
  return storage_.b;
}

uint64_t& ::test_padding::Padding6ByteMiddle::b() {
  return storage_.b;
}

::test_padding::Padding6ByteMiddle& ::test_padding::Padding6ByteMiddle::b(uint64_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_padding::Padding7ByteMiddle::Padding7ByteMiddle(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding7ByteMiddle::Padding7ByteMiddle(uint8_t a, uint64_t b) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b)}) {}

::test_padding::Padding7ByteMiddle::Padding7ByteMiddle(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding7ByteMiddle(Storage_{
                                                                                                                         .a = {},
                                                                                                                         .b = {},
                                                                                                                     }) {}
::test_padding::Padding7ByteMiddle::Padding7ByteMiddle(const ::test_padding::Padding7ByteMiddle& other) noexcept : ::test_padding::Padding7ByteMiddle(other.CloneStorage_()) {}

::test_padding::Padding7ByteMiddle& test_padding::Padding7ByteMiddle::operator=(const ::test_padding::Padding7ByteMiddle& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding7ByteMiddle::operator==(const Padding7ByteMiddle& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding7ByteMiddle, 16>::Equal(this, &other);
}

bool test_padding::Padding7ByteMiddle::operator!=(const Padding7ByteMiddle& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding7ByteMiddle, 16>::Equal(this, &other);
}

::test_padding::Padding7ByteMiddle::Storage_ test_padding::Padding7ByteMiddle::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b)};
}
uint8_t
test_padding::Padding7ByteMiddle::a() const {
  return storage_.a;
}

uint8_t& ::test_padding::Padding7ByteMiddle::a() {
  return storage_.a;
}

::test_padding::Padding7ByteMiddle& ::test_padding::Padding7ByteMiddle::a(uint8_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint64_t
test_padding::Padding7ByteMiddle::b() const {
  return storage_.b;
}

uint64_t& ::test_padding::Padding7ByteMiddle::b() {
  return storage_.b;
}

::test_padding::Padding7ByteMiddle& ::test_padding::Padding7ByteMiddle::b(uint64_t value) {
  storage_.b = std::move(value);
  return *this;
}

::test_padding::Padding4ByteAlignmentLength12::Padding4ByteAlignmentLength12(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding4ByteAlignmentLength12::Padding4ByteAlignmentLength12(uint32_t a, uint8_t b, uint16_t c, uint16_t d) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b),
                .c = std::move(c),
                .d = std::move(d)}) {}

::test_padding::Padding4ByteAlignmentLength12::Padding4ByteAlignmentLength12(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding4ByteAlignmentLength12(Storage_{
                                                                                                                                               .a = {},
                                                                                                                                               .b = {},
                                                                                                                                               .c = {},
                                                                                                                                               .d = {},
                                                                                                                                           }) {}
::test_padding::Padding4ByteAlignmentLength12::Padding4ByteAlignmentLength12(const ::test_padding::Padding4ByteAlignmentLength12& other) noexcept : ::test_padding::Padding4ByteAlignmentLength12(other.CloneStorage_()) {}

::test_padding::Padding4ByteAlignmentLength12& test_padding::Padding4ByteAlignmentLength12::operator=(const ::test_padding::Padding4ByteAlignmentLength12& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding4ByteAlignmentLength12::operator==(const Padding4ByteAlignmentLength12& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding4ByteAlignmentLength12, 12>::Equal(this, &other);
}

bool test_padding::Padding4ByteAlignmentLength12::operator!=(const Padding4ByteAlignmentLength12& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding4ByteAlignmentLength12, 12>::Equal(this, &other);
}

::test_padding::Padding4ByteAlignmentLength12::Storage_ test_padding::Padding4ByteAlignmentLength12::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b),
      ::fidl::internal::NaturalClone(storage_.c),
      ::fidl::internal::NaturalClone(storage_.d)};
}
uint32_t
test_padding::Padding4ByteAlignmentLength12::a() const {
  return storage_.a;
}

uint32_t& ::test_padding::Padding4ByteAlignmentLength12::a() {
  return storage_.a;
}

::test_padding::Padding4ByteAlignmentLength12& ::test_padding::Padding4ByteAlignmentLength12::a(uint32_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint8_t
test_padding::Padding4ByteAlignmentLength12::b() const {
  return storage_.b;
}

uint8_t& ::test_padding::Padding4ByteAlignmentLength12::b() {
  return storage_.b;
}

::test_padding::Padding4ByteAlignmentLength12& ::test_padding::Padding4ByteAlignmentLength12::b(uint8_t value) {
  storage_.b = std::move(value);
  return *this;
}
uint16_t
test_padding::Padding4ByteAlignmentLength12::c() const {
  return storage_.c;
}

uint16_t& ::test_padding::Padding4ByteAlignmentLength12::c() {
  return storage_.c;
}

::test_padding::Padding4ByteAlignmentLength12& ::test_padding::Padding4ByteAlignmentLength12::c(uint16_t value) {
  storage_.c = std::move(value);
  return *this;
}
uint16_t
test_padding::Padding4ByteAlignmentLength12::d() const {
  return storage_.d;
}

uint16_t& ::test_padding::Padding4ByteAlignmentLength12::d() {
  return storage_.d;
}

::test_padding::Padding4ByteAlignmentLength12& ::test_padding::Padding4ByteAlignmentLength12::d(uint16_t value) {
  storage_.d = std::move(value);
  return *this;
}

::test_padding::Padding2ByteAlignmentLength6::Padding2ByteAlignmentLength6(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_padding::Padding2ByteAlignmentLength6::Padding2ByteAlignmentLength6(uint8_t a, uint16_t b, uint8_t c) noexcept
    : storage_({.a = std::move(a),
                .b = std::move(b),
                .c = std::move(c)}) {}

::test_padding::Padding2ByteAlignmentLength6::Padding2ByteAlignmentLength6(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Padding2ByteAlignmentLength6(Storage_{
                                                                                                                                             .a = {},
                                                                                                                                             .b = {},
                                                                                                                                             .c = {},
                                                                                                                                         }) {}
::test_padding::Padding2ByteAlignmentLength6::Padding2ByteAlignmentLength6(const ::test_padding::Padding2ByteAlignmentLength6& other) noexcept : ::test_padding::Padding2ByteAlignmentLength6(other.CloneStorage_()) {}

::test_padding::Padding2ByteAlignmentLength6& test_padding::Padding2ByteAlignmentLength6::operator=(const ::test_padding::Padding2ByteAlignmentLength6& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_padding::Padding2ByteAlignmentLength6::operator==(const Padding2ByteAlignmentLength6& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding2ByteAlignmentLength6, 6>::Equal(this, &other);
}

bool test_padding::Padding2ByteAlignmentLength6::operator!=(const Padding2ByteAlignmentLength6& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_padding::Padding2ByteAlignmentLength6, 6>::Equal(this, &other);
}

::test_padding::Padding2ByteAlignmentLength6::Storage_ test_padding::Padding2ByteAlignmentLength6::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.a),
      ::fidl::internal::NaturalClone(storage_.b),
      ::fidl::internal::NaturalClone(storage_.c)};
}
uint8_t
test_padding::Padding2ByteAlignmentLength6::a() const {
  return storage_.a;
}

uint8_t& ::test_padding::Padding2ByteAlignmentLength6::a() {
  return storage_.a;
}

::test_padding::Padding2ByteAlignmentLength6& ::test_padding::Padding2ByteAlignmentLength6::a(uint8_t value) {
  storage_.a = std::move(value);
  return *this;
}
uint16_t
test_padding::Padding2ByteAlignmentLength6::b() const {
  return storage_.b;
}

uint16_t& ::test_padding::Padding2ByteAlignmentLength6::b() {
  return storage_.b;
}

::test_padding::Padding2ByteAlignmentLength6& ::test_padding::Padding2ByteAlignmentLength6::b(uint16_t value) {
  storage_.b = std::move(value);
  return *this;
}
uint8_t
test_padding::Padding2ByteAlignmentLength6::c() const {
  return storage_.c;
}

uint8_t& ::test_padding::Padding2ByteAlignmentLength6::c() {
  return storage_.c;
}

::test_padding::Padding2ByteAlignmentLength6& ::test_padding::Padding2ByteAlignmentLength6::c(uint8_t value) {
  storage_.c = std::move(value);
  return *this;
}

#pragma clang diagnostic pop
