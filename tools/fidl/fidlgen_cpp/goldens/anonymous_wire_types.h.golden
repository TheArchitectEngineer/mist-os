// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <lib/fidl/cpp/wire/array.h>
#include <lib/fidl/cpp/wire/envelope.h>
#include <lib/fidl/cpp/wire/internal/framework_err.h>
#include <lib/fidl/cpp/wire/message.h>
#include <lib/fidl/cpp/wire/message_storage.h>
#include <lib/fidl/cpp/wire/object_view.h>
#include <lib/fidl/cpp/wire/string_view.h>
#include <lib/fidl/cpp/wire/traits.h>
#include <lib/fidl/cpp/wire/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.anonymous/cpp/common_types.h>
#include <fidl/test.anonymous/cpp/markers.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_anonymous {

namespace wire {
using Flags = ::test_anonymous::Flags;

using BitsMember = ::test_anonymous::BitsMember;

using Op = ::test_anonymous::Op;

using SomeProtocolSomeMethodError = ::test_anonymous::SomeProtocolSomeMethodError;

struct OverrideTest;

struct TableData;

struct SomeProtocolSomeMethodRequest;

struct SomeProtocolSomeMethodResponse;

class FunctionApplication;

class TableMember;

class Expression;

class UnionMember;

class SomeProtocolSomeMethodResult;

struct TableData {
  uint8_t data = {};
};

struct SomeProtocolSomeMethodResponse {
  using BitsMember = test_anonymous::wire::BitsMember;

  ::test_anonymous::wire::BitsMember bits_member = {};
};
}  // namespace wire
}  // namespace test_anonymous

template <>
class ::fidl::WireTableBuilder<::test_anonymous::wire::FunctionApplication>;
template <>
class ::fidl::WireTableExternalBuilder<::test_anonymous::wire::FunctionApplication>;

template <>
struct ::fidl::WireTableFrame<::test_anonymous::wire::FunctionApplication> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;
  ::fidl::Envelope<::fidl::StringView> func_;
  [[maybe_unused]] ::fidl::UntypedEnvelope reserved_1_;
  ::fidl::Envelope<::fidl::VectorView<::fidl::WireOptional<::test_anonymous::wire::Expression>>> args_;
  ::fidl::Envelope<::test_anonymous::wire::Flags> flags_;

  friend class ::test_anonymous::wire::FunctionApplication;
  friend ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::FunctionApplication, ::fidl::WireTableBuilder<::test_anonymous::wire::FunctionApplication>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::FunctionApplication, ::fidl::WireTableExternalBuilder<::test_anonymous::wire::FunctionApplication>>;
};

namespace test_anonymous {
namespace wire {

class FunctionApplication {
 public:
  using Flags = test_anonymous::wire::Flags;
  FunctionApplication() = default;
  FunctionApplication(const FunctionApplication& other) noexcept = default;
  FunctionApplication& operator=(const FunctionApplication& other) noexcept = default;
  FunctionApplication(FunctionApplication&& other) noexcept = default;
  FunctionApplication& operator=(FunctionApplication&& other) noexcept = default;

  ~FunctionApplication() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_anonymous::wire::FunctionApplication> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_anonymous::wire::FunctionApplication> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_anonymous::wire::FunctionApplication>> frame);

  [[nodiscard]] ::fidl::StringView& func() const;
  [[nodiscard]] bool has_func() const;

  [[nodiscard]] ::fidl::VectorView<::fidl::WireOptional<::test_anonymous::wire::Expression>>& args() const;
  [[nodiscard]] bool has_args() const;

  [[nodiscard]] ::test_anonymous::wire::Flags& flags() const;
  [[nodiscard]] bool has_flags() const;
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
 public:
#else   // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
 private:
#endif  // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  FunctionApplication& set_func(::fidl::ObjectView<::fidl::StringView> elem);
  FunctionApplication& set_func(std::nullptr_t);
  template <typename... Args>
  FunctionApplication& set_func(::fidl::AnyArena& allocator, Args&&... args) {
    return set_func(
        ::fidl::ObjectView<::fidl::StringView>(allocator, std::forward<Args>(args)...));
  }

  FunctionApplication& clear_func();
  FunctionApplication& set_args(::fidl::ObjectView<::fidl::VectorView<::fidl::WireOptional<::test_anonymous::wire::Expression>>> elem);
  FunctionApplication& set_args(std::nullptr_t);
  template <typename... Args>
  FunctionApplication& set_args(::fidl::AnyArena& allocator, Args&&... args) {
    return set_args(
        ::fidl::ObjectView<::fidl::VectorView<::fidl::WireOptional<::test_anonymous::wire::Expression>>>(allocator, std::forward<Args>(args)...));
  }

  FunctionApplication& clear_args();
  FunctionApplication& set_flags(::test_anonymous::wire::Flags elem);

  FunctionApplication& clear_flags();

  explicit FunctionApplication(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit FunctionApplication(::fidl::ObjectView<::fidl::WireTableFrame<::test_anonymous::wire::FunctionApplication>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_anonymous::wire::FunctionApplication>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::FunctionApplication, ::fidl::WireTableBuilder<::test_anonymous::wire::FunctionApplication>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::FunctionApplication, ::fidl::WireTableExternalBuilder<::test_anonymous::wire::FunctionApplication>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_anonymous::wire::FunctionApplication>> frame_ptr_;
};
}  // namespace wire
}  // namespace test_anonymous

template <typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::FunctionApplication, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_anonymous::wire::FunctionApplication Build();
  [[nodiscard]] bool has_func() const;

  // Clears the func field.
  //
  // This method should be used sparingly, such as only during tests, as it has
  // O(number_of_fields) complexity.
  void clear_func();

  // Getter for func.
  //

  [[nodiscard]] ::fidl::StringView& func() const;

  // Setter for func.
  //

  BuilderImpl& func(Wrapper_Ignore_Me_<::fidl::ObjectView<::fidl::StringView>> elem);
  [[nodiscard]] bool has_args() const;

  // Clears the args field.
  //
  // This method should be used sparingly, such as only during tests, as it has
  // O(number_of_fields) complexity.
  void clear_args();

  // Getter for args.
  //

  [[nodiscard]] ::fidl::VectorView<::fidl::WireOptional<::test_anonymous::wire::Expression>>& args() const;

  // Setter for args.
  //

  BuilderImpl& args(Wrapper_Ignore_Me_<::fidl::ObjectView<::fidl::VectorView<::fidl::WireOptional<::test_anonymous::wire::Expression>>>> elem);
  [[nodiscard]] bool has_flags() const;

  // Clears the flags field.
  //
  // This method should be used sparingly, such as only during tests, as it has
  // O(number_of_fields) complexity.
  void clear_flags();

  // Getter for flags.
  //

  [[nodiscard]] ::test_anonymous::wire::Flags& flags() const;

  // Setter for flags.
  //

  BuilderImpl& flags(::test_anonymous::wire::Flags elem);

 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_anonymous::wire::FunctionApplication>>&& frame);

 private:
  ::test_anonymous::wire::FunctionApplication table_;
};

template <>
class ::fidl::WireTableBuilder<::test_anonymous::wire::FunctionApplication> final : public ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::FunctionApplication, ::fidl::WireTableBuilder<::test_anonymous::wire::FunctionApplication>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::FunctionApplication, ::fidl::WireTableBuilder<::test_anonymous::wire::FunctionApplication>>;

 public:
  using Base::func;

  template <
      typename First = ::fidl::StringView,
      typename... Args,
      std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<::fidl::StringView>>, int> = 0>
  ::fidl::WireTableBuilder<::test_anonymous::wire::FunctionApplication>& func(First&& first, Args&&... args_) {
    fidl::ObjectView<::fidl::StringView> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
    func(Base::Wrapper_Ignore_Me_<fidl::ObjectView<::fidl::StringView>>(view_));
    return *this;
  }
  using Base::args;

  template <
      typename First = ::fidl::VectorView<::fidl::WireOptional<::test_anonymous::wire::Expression>>,
      typename... Args,
      std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<::fidl::VectorView<::fidl::WireOptional<::test_anonymous::wire::Expression>>>>, int> = 0>
  ::fidl::WireTableBuilder<::test_anonymous::wire::FunctionApplication>& args(First&& first, Args&&... args_) {
    fidl::ObjectView<::fidl::VectorView<::fidl::WireOptional<::test_anonymous::wire::Expression>>> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
    args(Base::Wrapper_Ignore_Me_<fidl::ObjectView<::fidl::VectorView<::fidl::WireOptional<::test_anonymous::wire::Expression>>>>(view_));
    return *this;
  }

 private:
  friend class ::test_anonymous::wire::FunctionApplication;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;
};

template <>
class ::fidl::WireTableExternalBuilder<::test_anonymous::wire::FunctionApplication> final : public ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::FunctionApplication, ::fidl::WireTableExternalBuilder<::test_anonymous::wire::FunctionApplication>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::FunctionApplication, ::fidl::WireTableExternalBuilder<::test_anonymous::wire::FunctionApplication>>;

 private:
  friend class ::test_anonymous::wire::FunctionApplication;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_anonymous::wire::FunctionApplication>* frame);
};

template <>
class ::fidl::WireTableBuilder<::test_anonymous::wire::TableMember>;
template <>
class ::fidl::WireTableExternalBuilder<::test_anonymous::wire::TableMember>;

template <>
struct ::fidl::WireTableFrame<::test_anonymous::wire::TableMember> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;
  [[maybe_unused]] ::fidl::UntypedEnvelope reserved_0_;
  ::fidl::Envelope<::fidl::VectorView<::test_anonymous::wire::TableData>> table_data_;

  friend class ::test_anonymous::wire::TableMember;
  friend ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::TableMember, ::fidl::WireTableBuilder<::test_anonymous::wire::TableMember>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::TableMember, ::fidl::WireTableExternalBuilder<::test_anonymous::wire::TableMember>>;
};

namespace test_anonymous {
namespace wire {

class TableMember {
 public:
  using TableData = test_anonymous::wire::TableData;
  TableMember() = default;
  TableMember(const TableMember& other) noexcept = default;
  TableMember& operator=(const TableMember& other) noexcept = default;
  TableMember(TableMember&& other) noexcept = default;
  TableMember& operator=(TableMember&& other) noexcept = default;

  ~TableMember() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_anonymous::wire::TableMember> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_anonymous::wire::TableMember> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_anonymous::wire::TableMember>> frame);

  [[nodiscard]] ::fidl::VectorView<::test_anonymous::wire::TableData>& table_data() const;
  [[nodiscard]] bool has_table_data() const;
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
 public:
#else   // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
 private:
#endif  // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  TableMember& set_table_data(::fidl::ObjectView<::fidl::VectorView<::test_anonymous::wire::TableData>> elem);
  TableMember& set_table_data(std::nullptr_t);
  template <typename... Args>
  TableMember& set_table_data(::fidl::AnyArena& allocator, Args&&... args) {
    return set_table_data(
        ::fidl::ObjectView<::fidl::VectorView<::test_anonymous::wire::TableData>>(allocator, std::forward<Args>(args)...));
  }

  TableMember& clear_table_data();

  explicit TableMember(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit TableMember(::fidl::ObjectView<::fidl::WireTableFrame<::test_anonymous::wire::TableMember>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_anonymous::wire::TableMember>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::TableMember, ::fidl::WireTableBuilder<::test_anonymous::wire::TableMember>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::TableMember, ::fidl::WireTableExternalBuilder<::test_anonymous::wire::TableMember>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_anonymous::wire::TableMember>> frame_ptr_;
};
}  // namespace wire
}  // namespace test_anonymous

template <typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::TableMember, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_anonymous::wire::TableMember Build();
  [[nodiscard]] bool has_table_data() const;

  // Clears the table_data field.
  //
  // This method should be used sparingly, such as only during tests, as it has
  // O(number_of_fields) complexity.
  void clear_table_data();

  // Getter for table_data.
  //

  [[nodiscard]] ::fidl::VectorView<::test_anonymous::wire::TableData>& table_data() const;

  // Setter for table_data.
  //

  BuilderImpl& table_data(Wrapper_Ignore_Me_<::fidl::ObjectView<::fidl::VectorView<::test_anonymous::wire::TableData>>> elem);

 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_anonymous::wire::TableMember>>&& frame);

 private:
  ::test_anonymous::wire::TableMember table_;
};

template <>
class ::fidl::WireTableBuilder<::test_anonymous::wire::TableMember> final : public ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::TableMember, ::fidl::WireTableBuilder<::test_anonymous::wire::TableMember>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::TableMember, ::fidl::WireTableBuilder<::test_anonymous::wire::TableMember>>;

 public:
  using Base::table_data;

  template <
      typename First = ::fidl::VectorView<::test_anonymous::wire::TableData>,
      typename... Args,
      std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<::fidl::VectorView<::test_anonymous::wire::TableData>>>, int> = 0>
  ::fidl::WireTableBuilder<::test_anonymous::wire::TableMember>& table_data(First&& first, Args&&... args_) {
    fidl::ObjectView<::fidl::VectorView<::test_anonymous::wire::TableData>> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
    table_data(Base::Wrapper_Ignore_Me_<fidl::ObjectView<::fidl::VectorView<::test_anonymous::wire::TableData>>>(view_));
    return *this;
  }

 private:
  friend class ::test_anonymous::wire::TableMember;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;
};

template <>
class ::fidl::WireTableExternalBuilder<::test_anonymous::wire::TableMember> final : public ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::TableMember, ::fidl::WireTableExternalBuilder<::test_anonymous::wire::TableMember>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_anonymous::wire::TableMember, ::fidl::WireTableExternalBuilder<::test_anonymous::wire::TableMember>>;

 private:
  friend class ::test_anonymous::wire::TableMember;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_anonymous::wire::TableMember>* frame);
};
namespace test_anonymous {
namespace wire {

class Expression {
 public:
  using FunctionApplication = test_anonymous::wire::FunctionApplication;
  using BinOp = test_anonymous::wire::OverrideTest;

  Expression();

  Expression(const Expression&) = default;
  Expression& operator=(const Expression&) = default;
  Expression(Expression&&) = default;
  Expression& operator=(Expression&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kValue = 1,                // 0x1
    kBinOp = 2,                // 0x2
    kFunctionApplication = 3,  // 0x3
    _do_not_handle_this__write_a_default_case_instead = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };
  bool IsUnknown() const {
    return Which() == ::test_anonymous::wire::Expression::Tag::_do_not_handle_this__write_a_default_case_instead;
  }

  bool has_invalid_tag() const;

  bool is_value() const;

  static Expression WithValue(::fidl::ObjectView<uint64_t> val);

  template <typename... Args>
  static Expression WithValue(::fidl::AnyArena& allocator, Args&&... args) {
    return WithValue(::fidl::ObjectView<uint64_t>(allocator,
                                                  std::forward<Args>(args)...));
  }

  uint64_t& value();

  const uint64_t& value() const;

  bool is_bin_op() const;

  static Expression WithBinOp(::fidl::ObjectView<::test_anonymous::wire::OverrideTest> val);

  template <typename... Args>
  static Expression WithBinOp(::fidl::AnyArena& allocator, Args&&... args) {
    return WithBinOp(::fidl::ObjectView<::test_anonymous::wire::OverrideTest>(allocator,
                                                                              std::forward<Args>(args)...));
  }

  ::test_anonymous::wire::OverrideTest& bin_op();

  const ::test_anonymous::wire::OverrideTest& bin_op() const;

  bool is_function_application() const;

  static Expression WithFunctionApplication(::fidl::ObjectView<::test_anonymous::wire::FunctionApplication> val);

  template <typename... Args>
  static Expression WithFunctionApplication(::fidl::AnyArena& allocator, Args&&... args) {
    return WithFunctionApplication(::fidl::ObjectView<::test_anonymous::wire::FunctionApplication>(allocator,
                                                                                                   std::forward<Args>(args)...));
  }

  ::test_anonymous::wire::FunctionApplication& function_application();

  const ::test_anonymous::wire::FunctionApplication& function_application() const;

  ::test_anonymous::wire::Expression::Tag Which() const;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kValue = 1,                // 0x1
    kBinOp = 2,                // 0x2
    kFunctionApplication = 3,  // 0x3
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_anonymous::wire::Expression::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

class UnionMember {
 public:
  UnionMember();

  UnionMember(const UnionMember&) = default;
  UnionMember& operator=(const UnionMember&) = default;
  UnionMember(UnionMember&&) = default;
  UnionMember& operator=(UnionMember&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kUnionData = 2,  // 0x2
    _do_not_handle_this__write_a_default_case_instead = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };
  bool IsUnknown() const {
    return Which() == ::test_anonymous::wire::UnionMember::Tag::_do_not_handle_this__write_a_default_case_instead;
  }

  bool has_invalid_tag() const;

  bool is_union_data() const;

  static UnionMember WithUnionData(uint8_t val);

  uint8_t& union_data();

  const uint8_t& union_data() const;

  ::test_anonymous::wire::UnionMember::Tag Which() const;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kUnionData = 2,  // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_anonymous::wire::UnionMember::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

class SomeProtocolSomeMethodResult {
 public:
  using Err = test_anonymous::wire::SomeProtocolSomeMethodError;
  using Response = test_anonymous::wire::SomeProtocolSomeMethodResponse;

  SomeProtocolSomeMethodResult();

  SomeProtocolSomeMethodResult(const SomeProtocolSomeMethodResult&) = default;
  SomeProtocolSomeMethodResult& operator=(const SomeProtocolSomeMethodResult&) = default;
  SomeProtocolSomeMethodResult(SomeProtocolSomeMethodResult&&) = default;
  SomeProtocolSomeMethodResult& operator=(SomeProtocolSomeMethodResult&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const;

  bool is_response() const;

  static SomeProtocolSomeMethodResult WithResponse(::test_anonymous::wire::SomeProtocolSomeMethodResponse val);

  ::test_anonymous::wire::SomeProtocolSomeMethodResponse& response();

  const ::test_anonymous::wire::SomeProtocolSomeMethodResponse& response() const;

  bool is_err() const;

  static SomeProtocolSomeMethodResult WithErr(::test_anonymous::wire::SomeProtocolSomeMethodError val);

  ::test_anonymous::wire::SomeProtocolSomeMethodError& err();

  const ::test_anonymous::wire::SomeProtocolSomeMethodError& err() const;

  ::test_anonymous::wire::SomeProtocolSomeMethodResult::Tag Which() const;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_anonymous::wire::SomeProtocolSomeMethodResult::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

struct OverrideTest {
  using Op = test_anonymous::wire::Op;

  ::test_anonymous::wire::Op op = {};

  ::fidl::WireOptional<::test_anonymous::wire::Expression> left = {};

  ::fidl::WireOptional<::test_anonymous::wire::Expression> right = {};
};

struct SomeProtocolSomeMethodRequest {
  using UnionMember = test_anonymous::wire::UnionMember;
  using TableMember = test_anonymous::wire::TableMember;

  ::test_anonymous::wire::UnionMember union_member = {};

  ::test_anonymous::wire::TableMember table_member = {};
};

}  // namespace wire
}  // namespace test_anonymous
namespace fidl {

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_anonymous::wire::Flags, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = sizeof(uint16_t);
  static constexpr bool kIsMemcpyCompatible = true;
  static void Encode(internal::WireEncoder* encoder, ::test_anonymous::wire::Flags* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_anonymous::wire::BitsMember, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = true;
  static void Encode(internal::WireEncoder* encoder, ::test_anonymous::wire::BitsMember* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_anonymous::wire::Op, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = true;

  static void Encode(internal::WireEncoder* encoder, ::test_anonymous::wire::Op* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <bool IsRecursive>
struct internal::WireCodingTraits<::test_anonymous::wire::SomeProtocolSomeMethodError, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = true;

  static void Encode(internal::WireEncoder* encoder, ::test_anonymous::wire::SomeProtocolSomeMethodError* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_anonymous::wire::OverrideTest> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 4294967295;
  static constexpr uint32_t kPrimarySize = 40;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 4294967295;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_anonymous::wire::OverrideTest> : public std::true_type {};
template <>
struct IsWire<::test_anonymous::wire::OverrideTest> : public std::true_type {};
template <>
struct IsStruct<::test_anonymous::wire::OverrideTest> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_anonymous::wire::OverrideTest, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = 40;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<::test_anonymous::wire::Op, fidl::internal::WireCodingConstraintEmpty, IsRecursive>(), ::fidl::internal::WireStructMemberCodingInfo<::fidl::WireOptional<::test_anonymous::wire::Expression>, fidl::internal::WireCodingConstraintUnion<true>, IsRecursive>(), ::fidl::internal::WireStructMemberCodingInfo<::fidl::WireOptional<::test_anonymous::wire::Expression>, fidl::internal::WireCodingConstraintUnion<true>, IsRecursive>());
  static constexpr bool kHasPadding = true;
  using Base = WireStructCodingTraitsBase<::test_anonymous::wire::OverrideTest, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool kIsMemcpyCompatible = Base::kIsMemcpyCompatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_anonymous::wire::OverrideTest* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_anonymous::wire::TableData> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 1;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<::test_anonymous::wire::TableData> : public std::true_type {};
template <>
struct IsWire<::test_anonymous::wire::TableData> : public std::true_type {};
template <>
struct IsStruct<::test_anonymous::wire::TableData> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_anonymous::wire::TableData, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = 1;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<uint8_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<::test_anonymous::wire::TableData, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool kIsMemcpyCompatible = Base::kIsMemcpyCompatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_anonymous::wire::TableData* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_anonymous::wire::SomeProtocolSomeMethodRequest> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 3;
  static constexpr uint32_t kPrimarySize = 32;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 48;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_anonymous::wire::SomeProtocolSomeMethodRequest> : public std::true_type {};
template <>
struct IsWire<::test_anonymous::wire::SomeProtocolSomeMethodRequest> : public std::true_type {};
template <>
struct IsStruct<::test_anonymous::wire::SomeProtocolSomeMethodRequest> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_anonymous::wire::SomeProtocolSomeMethodRequest, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = 32;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<::test_anonymous::wire::UnionMember, fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>(), ::fidl::internal::WireStructMemberCodingInfo<::test_anonymous::wire::TableMember, fidl::internal::WireCodingConstraintEmpty, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<::test_anonymous::wire::SomeProtocolSomeMethodRequest, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool kIsMemcpyCompatible = Base::kIsMemcpyCompatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_anonymous::wire::SomeProtocolSomeMethodRequest* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_anonymous::wire::SomeProtocolSomeMethodResponse> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 4;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<::test_anonymous::wire::SomeProtocolSomeMethodResponse> : public std::true_type {};
template <>
struct IsWire<::test_anonymous::wire::SomeProtocolSomeMethodResponse> : public std::true_type {};
template <>
struct IsStruct<::test_anonymous::wire::SomeProtocolSomeMethodResponse> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_anonymous::wire::SomeProtocolSomeMethodResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = 4;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<::test_anonymous::wire::BitsMember, fidl::internal::WireCodingConstraintEmpty, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<::test_anonymous::wire::SomeProtocolSomeMethodResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool kIsMemcpyCompatible = Base::kIsMemcpyCompatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_anonymous::wire::SomeProtocolSomeMethodResponse* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_anonymous::wire::FunctionApplication> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 4294967295;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 4294967295;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_anonymous::wire::FunctionApplication> : public std::true_type {};
template <>
struct IsWire<::test_anonymous::wire::FunctionApplication> : public std::true_type {};
template <>
struct IsTable<::test_anonymous::wire::FunctionApplication> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_anonymous::wire::FunctionApplication, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_anonymous::wire::FunctionApplication* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_anonymous::wire::TableMember> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 3;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 48;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_anonymous::wire::TableMember> : public std::true_type {};
template <>
struct IsWire<::test_anonymous::wire::TableMember> : public std::true_type {};
template <>
struct IsTable<::test_anonymous::wire::TableMember> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_anonymous::wire::TableMember, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_anonymous::wire::TableMember* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_anonymous::wire::Expression> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 4294967295;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 4294967295;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_anonymous::wire::Expression> : public std::true_type {};
template <>
struct IsWire<::test_anonymous::wire::Expression> : public std::true_type {};
template <>
struct IsUnion<::test_anonymous::wire::Expression> : public std::true_type {};

template <typename Constraint, bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_anonymous::wire::Expression, Constraint, IsRecursive> {
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_anonymous::wire::Expression* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);

  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

// Top-level union.
template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_anonymous::wire::Expression, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public ::fidl::internal::WireCodingTraits<::test_anonymous::wire::Expression, ::fidl::internal::WireCodingConstraintUnion<false>, IsRecursive> {};

template <>
struct TypeTraits<::test_anonymous::wire::UnionMember> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_anonymous::wire::UnionMember> : public std::true_type {};
template <>
struct IsWire<::test_anonymous::wire::UnionMember> : public std::true_type {};
template <>
struct IsUnion<::test_anonymous::wire::UnionMember> : public std::true_type {};

template <typename Constraint, bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_anonymous::wire::UnionMember, Constraint, IsRecursive> {
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_anonymous::wire::UnionMember* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);

  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

// Top-level union.
template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_anonymous::wire::UnionMember, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public ::fidl::internal::WireCodingTraits<::test_anonymous::wire::UnionMember, ::fidl::internal::WireCodingConstraintUnion<false>, IsRecursive> {};

template <>
struct TypeTraits<::test_anonymous::wire::SomeProtocolSomeMethodResult> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_anonymous::wire::SomeProtocolSomeMethodResult> : public std::true_type {};
template <>
struct IsWire<::test_anonymous::wire::SomeProtocolSomeMethodResult> : public std::true_type {};
template <>
struct IsUnion<::test_anonymous::wire::SomeProtocolSomeMethodResult> : public std::true_type {};

template <typename Constraint, bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_anonymous::wire::SomeProtocolSomeMethodResult, Constraint, IsRecursive> {
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_anonymous::wire::SomeProtocolSomeMethodResult* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);

  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

// Top-level union.
template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_anonymous::wire::SomeProtocolSomeMethodResult, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public ::fidl::internal::WireCodingTraits<::test_anonymous::wire::SomeProtocolSomeMethodResult, ::fidl::internal::WireCodingConstraintUnion<false>, IsRecursive> {};

#pragma clang diagnostic pop

}  // namespace fidl
