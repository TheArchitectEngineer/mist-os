// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.enum/cpp/wire_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_enum::wire::MyStrictEnum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_enum::wire::MyStrictEnum* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  switch (*value) {
    case ::test_enum::wire::MyStrictEnum::kFoo:
    case ::test_enum::wire::MyStrictEnum::kBar:
      break;
    default:
      encoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
      return;
  }
  *position.As<::test_enum::wire::MyStrictEnum>() = *value;
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_enum::wire::MyStrictEnum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  [[maybe_unused]] ::test_enum::wire::MyStrictEnum value = *position.As<::test_enum::wire::MyStrictEnum>();
  switch (value) {
    case ::test_enum::wire::MyStrictEnum::kFoo:
    case ::test_enum::wire::MyStrictEnum::kBar:
      break;
    default:
      decoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
      return;
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_enum::wire::MyStrictEnum, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_enum::wire::MyStrictEnum, ::fidl::internal::WireCodingConstraintEmpty, false>;

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_enum::wire::MyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_enum::wire::MyFlexibleEnum* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<::test_enum::wire::MyFlexibleEnum>() = *value;
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_enum::wire::MyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
}

template struct ::fidl::internal::WireCodingTraits<::test_enum::wire::MyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_enum::wire::MyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, false>;

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_enum::wire::MyFlexibleEnumWithCustomUnknown, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_enum::wire::MyFlexibleEnumWithCustomUnknown* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<::test_enum::wire::MyFlexibleEnumWithCustomUnknown>() = *value;
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_enum::wire::MyFlexibleEnumWithCustomUnknown, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
}

template struct ::fidl::internal::WireCodingTraits<::test_enum::wire::MyFlexibleEnumWithCustomUnknown, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_enum::wire::MyFlexibleEnumWithCustomUnknown, ::fidl::internal::WireCodingConstraintEmpty, false>;

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_enum::wire::MyEmptyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_enum::wire::MyEmptyFlexibleEnum* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<::test_enum::wire::MyEmptyFlexibleEnum>() = *value;
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_enum::wire::MyEmptyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
}

template struct ::fidl::internal::WireCodingTraits<::test_enum::wire::MyEmptyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_enum::wire::MyEmptyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, false>;

#pragma clang diagnostic pop
