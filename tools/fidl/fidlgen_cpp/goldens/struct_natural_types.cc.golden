// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.struct/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_struct::Simple::Simple(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_struct::Simple::Simple(uint8_t f1, bool f2) noexcept
    : storage_({.f1 = std::move(f1),
                .f2 = std::move(f2)}) {}

::test_struct::Simple::Simple(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : Simple(Storage_{
                                                                                                .f1 = {},
                                                                                                .f2 = {},
                                                                                            }) {}
::test_struct::Simple::Simple(const ::test_struct::Simple& other) noexcept : ::test_struct::Simple(other.CloneStorage_()) {}

::test_struct::Simple& test_struct::Simple::operator=(const ::test_struct::Simple& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_struct::Simple::operator==(const Simple& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_struct::Simple, 2>::Equal(this, &other);
}

bool test_struct::Simple::operator!=(const Simple& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_struct::Simple, 2>::Equal(this, &other);
}

::test_struct::Simple::Storage_ test_struct::Simple::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.f1),
      ::fidl::internal::NaturalClone(storage_.f2)};
}
uint8_t
test_struct::Simple::f1() const {
  return storage_.f1;
}

uint8_t& ::test_struct::Simple::f1() {
  return storage_.f1;
}

::test_struct::Simple& ::test_struct::Simple::f1(uint8_t value) {
  storage_.f1 = std::move(value);
  return *this;
}
bool test_struct::Simple::f2() const {
  return storage_.f2;
}

bool& ::test_struct::Simple::f2() {
  return storage_.f2;
}

::test_struct::Simple& ::test_struct::Simple::f2(bool value) {
  storage_.f2 = std::move(value);
  return *this;
}

::test_struct::BasicStruct::BasicStruct(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_struct::BasicStruct::BasicStruct(uint32_t x, ::std::string y) noexcept
    : storage_({.x = std::move(x),
                .y = std::move(y)}) {}

::test_struct::BasicStruct::BasicStruct(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : BasicStruct(Storage_{
                                                                                                          .x = {},
                                                                                                          .y = {},
                                                                                                      }) {}
::test_struct::BasicStruct::BasicStruct(const ::test_struct::BasicStruct& other) noexcept : ::test_struct::BasicStruct(other.CloneStorage_()) {}

::test_struct::BasicStruct& test_struct::BasicStruct::operator=(const ::test_struct::BasicStruct& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_struct::BasicStruct::operator==(const BasicStruct& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_struct::BasicStruct, 24>::Equal(this, &other);
}

bool test_struct::BasicStruct::operator!=(const BasicStruct& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_struct::BasicStruct, 24>::Equal(this, &other);
}

::test_struct::BasicStruct::Storage_ test_struct::BasicStruct::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.x),
      ::fidl::internal::NaturalClone(storage_.y)};
}
uint32_t
test_struct::BasicStruct::x() const {
  return storage_.x;
}

uint32_t& ::test_struct::BasicStruct::x() {
  return storage_.x;
}

::test_struct::BasicStruct& ::test_struct::BasicStruct::x(uint32_t value) {
  storage_.x = std::move(value);
  return *this;
}
const ::std::string&
test_struct::BasicStruct::y() const {
  return storage_.y;
}

::std::string& ::test_struct::BasicStruct::y() {
  return storage_.y;
}

::test_struct::BasicStruct& ::test_struct::BasicStruct::y(::std::string value) {
  storage_.y = std::move(value);
  return *this;
}

#pragma clang diagnostic pop
