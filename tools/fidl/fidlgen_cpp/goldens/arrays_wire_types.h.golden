// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.arrays/cpp/common_types.h>
#include <fidl/test.arrays/cpp/markers.h>
#include <lib/fidl/cpp/wire/array.h>
#include <lib/fidl/cpp/wire/envelope.h>
#include <lib/fidl/cpp/wire/internal/framework_err.h>
#include <lib/fidl/cpp/wire/message.h>
#include <lib/fidl/cpp/wire/message_storage.h>
#include <lib/fidl/cpp/wire/object_view.h>
#include <lib/fidl/cpp/wire/string_view.h>
#include <lib/fidl/cpp/wire/traits.h>
#include <lib/fidl/cpp/wire/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_arrays {

namespace wire {

struct StructSmallArray;

struct StructLargeArray;

class TableSmallArray;

class TableLargeArray;

class UnionSmallArray;

class UnionLargeArray;

}  // namespace wire
}  // namespace test_arrays

template <>
class ::fidl::WireTableBuilder<::test_arrays::wire::TableSmallArray>;
template <>
class ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableSmallArray>;

template <>
struct ::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;
  ::fidl::Envelope<::fidl::Array<uint32_t, 2>> a_;

  friend class ::test_arrays::wire::TableSmallArray;
  friend ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, ::fidl::WireTableBuilder<::test_arrays::wire::TableSmallArray>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableSmallArray>>;
};

namespace test_arrays {
namespace wire {

class TableSmallArray {
 public:
  TableSmallArray() = default;
  TableSmallArray(const TableSmallArray& other) noexcept = default;
  TableSmallArray& operator=(const TableSmallArray& other) noexcept = default;
  TableSmallArray(TableSmallArray&& other) noexcept = default;
  TableSmallArray& operator=(TableSmallArray&& other) noexcept = default;

  ~TableSmallArray() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_arrays::wire::TableSmallArray> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableSmallArray> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>> frame);

  [[nodiscard]] ::fidl::Array<uint32_t, 2>& a() const;
  [[nodiscard]] bool has_a() const;
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
 public:
#else   // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
 private:
#endif  // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  TableSmallArray& set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 2>> elem);
  TableSmallArray& set_a(std::nullptr_t);
  template <typename... Args>
  TableSmallArray& set_a(::fidl::AnyArena& allocator, Args&&... args) {
    return set_a(
        ::fidl::ObjectView<::fidl::Array<uint32_t, 2>>(allocator, std::forward<Args>(args)...));
  }

  TableSmallArray& clear_a();

  explicit TableSmallArray(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit TableSmallArray(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, ::fidl::WireTableBuilder<::test_arrays::wire::TableSmallArray>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableSmallArray>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>> frame_ptr_;
};
}  // namespace wire
}  // namespace test_arrays

template <typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_arrays::wire::TableSmallArray Build();
  [[nodiscard]] bool has_a() const;

  // Clears the a field.
  //
  // This method should be used sparingly, such as only during tests, as it has
  // O(number_of_fields) complexity.
  void clear_a();

  // Getter for a.
  //

  [[nodiscard]] ::fidl::Array<uint32_t, 2>& a() const;

  // Setter for a.
  //

  BuilderImpl& a(Wrapper_Ignore_Me_<::fidl::ObjectView<::fidl::Array<uint32_t, 2>>> elem);

 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>&& frame);

 private:
  ::test_arrays::wire::TableSmallArray table_;
};

template <>
class ::fidl::WireTableBuilder<::test_arrays::wire::TableSmallArray> final : public ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, ::fidl::WireTableBuilder<::test_arrays::wire::TableSmallArray>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, ::fidl::WireTableBuilder<::test_arrays::wire::TableSmallArray>>;

 public:
  using Base::a;

  template <
      typename First = ::fidl::Array<uint32_t, 2>,
      typename... Args,
      std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<::fidl::Array<uint32_t, 2>>>, int> = 0>
  ::fidl::WireTableBuilder<::test_arrays::wire::TableSmallArray>& a(First&& first, Args&&... args_) {
    fidl::ObjectView<::fidl::Array<uint32_t, 2>> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
    a(Base::Wrapper_Ignore_Me_<fidl::ObjectView<::fidl::Array<uint32_t, 2>>>(view_));
    return *this;
  }

 private:
  friend class ::test_arrays::wire::TableSmallArray;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;
};

template <>
class ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableSmallArray> final : public ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableSmallArray>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableSmallArray, ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableSmallArray>>;

 private:
  friend class ::test_arrays::wire::TableSmallArray;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>* frame);
};

template <>
class ::fidl::WireTableBuilder<::test_arrays::wire::TableLargeArray>;
template <>
class ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableLargeArray>;

template <>
struct ::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;
  ::fidl::Envelope<::fidl::Array<uint32_t, 100>> a_;

  friend class ::test_arrays::wire::TableLargeArray;
  friend ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, ::fidl::WireTableBuilder<::test_arrays::wire::TableLargeArray>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableLargeArray>>;
};

namespace test_arrays {
namespace wire {

class TableLargeArray {
 public:
  TableLargeArray() = default;
  TableLargeArray(const TableLargeArray& other) noexcept = default;
  TableLargeArray& operator=(const TableLargeArray& other) noexcept = default;
  TableLargeArray(TableLargeArray&& other) noexcept = default;
  TableLargeArray& operator=(TableLargeArray&& other) noexcept = default;

  ~TableLargeArray() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_arrays::wire::TableLargeArray> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableLargeArray> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>> frame);

  [[nodiscard]] ::fidl::Array<uint32_t, 100>& a() const;
  [[nodiscard]] bool has_a() const;
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
 public:
#else   // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
 private:
#endif  // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  TableLargeArray& set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 100>> elem);
  TableLargeArray& set_a(std::nullptr_t);
  template <typename... Args>
  TableLargeArray& set_a(::fidl::AnyArena& allocator, Args&&... args) {
    return set_a(
        ::fidl::ObjectView<::fidl::Array<uint32_t, 100>>(allocator, std::forward<Args>(args)...));
  }

  TableLargeArray& clear_a();

  explicit TableLargeArray(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit TableLargeArray(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, ::fidl::WireTableBuilder<::test_arrays::wire::TableLargeArray>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableLargeArray>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>> frame_ptr_;
};
}  // namespace wire
}  // namespace test_arrays

template <typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_arrays::wire::TableLargeArray Build();
  [[nodiscard]] bool has_a() const;

  // Clears the a field.
  //
  // This method should be used sparingly, such as only during tests, as it has
  // O(number_of_fields) complexity.
  void clear_a();

  // Getter for a.
  //

  [[nodiscard]] ::fidl::Array<uint32_t, 100>& a() const;

  // Setter for a.
  //

  BuilderImpl& a(Wrapper_Ignore_Me_<::fidl::ObjectView<::fidl::Array<uint32_t, 100>>> elem);

 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>&& frame);

 private:
  ::test_arrays::wire::TableLargeArray table_;
};

template <>
class ::fidl::WireTableBuilder<::test_arrays::wire::TableLargeArray> final : public ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, ::fidl::WireTableBuilder<::test_arrays::wire::TableLargeArray>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, ::fidl::WireTableBuilder<::test_arrays::wire::TableLargeArray>>;

 public:
  using Base::a;

  template <
      typename First = ::fidl::Array<uint32_t, 100>,
      typename... Args,
      std::enable_if_t<!std::is_same_v<cpp20::remove_cvref_t<First>, fidl::ObjectView<::fidl::Array<uint32_t, 100>>>, int> = 0>
  ::fidl::WireTableBuilder<::test_arrays::wire::TableLargeArray>& a(First&& first, Args&&... args_) {
    fidl::ObjectView<::fidl::Array<uint32_t, 100>> view_(arena_.get(), std::forward<First>(first), std::forward<Args>(args_)...);
    a(Base::Wrapper_Ignore_Me_<fidl::ObjectView<::fidl::Array<uint32_t, 100>>>(view_));
    return *this;
  }

 private:
  friend class ::test_arrays::wire::TableLargeArray;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;
};

template <>
class ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableLargeArray> final : public ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableLargeArray>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_arrays::wire::TableLargeArray, ::fidl::WireTableExternalBuilder<::test_arrays::wire::TableLargeArray>>;

 private:
  friend class ::test_arrays::wire::TableLargeArray;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>* frame);
};
namespace test_arrays {
namespace wire {

class UnionSmallArray {
 public:
  UnionSmallArray();

  UnionSmallArray(const UnionSmallArray&) = default;
  UnionSmallArray& operator=(const UnionSmallArray&) = default;
  UnionSmallArray(UnionSmallArray&&) = default;
  UnionSmallArray& operator=(UnionSmallArray&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kA = 1,  // 0x1
  };

  bool has_invalid_tag() const;

  bool is_a() const;

  static UnionSmallArray WithA(::fidl::ObjectView<::fidl::Array<uint32_t, 2>> val);

  template <typename... Args>
  static UnionSmallArray WithA(::fidl::AnyArena& allocator, Args&&... args) {
    return WithA(::fidl::ObjectView<::fidl::Array<uint32_t, 2>>(allocator,
                                                                std::forward<Args>(args)...));
  }

  ::fidl::Array<uint32_t, 2>& a();

  const ::fidl::Array<uint32_t, 2>& a() const;

  ::test_arrays::wire::UnionSmallArray::Tag Which() const;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kA = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_arrays::wire::UnionSmallArray::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

class UnionLargeArray {
 public:
  UnionLargeArray();

  UnionLargeArray(const UnionLargeArray&) = default;
  UnionLargeArray& operator=(const UnionLargeArray&) = default;
  UnionLargeArray(UnionLargeArray&&) = default;
  UnionLargeArray& operator=(UnionLargeArray&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kA = 1,  // 0x1
  };

  bool has_invalid_tag() const;

  bool is_a() const;

  static UnionLargeArray WithA(::fidl::ObjectView<::fidl::Array<uint32_t, 100>> val);

  template <typename... Args>
  static UnionLargeArray WithA(::fidl::AnyArena& allocator, Args&&... args) {
    return WithA(::fidl::ObjectView<::fidl::Array<uint32_t, 100>>(allocator,
                                                                  std::forward<Args>(args)...));
  }

  ::fidl::Array<uint32_t, 100>& a();

  const ::fidl::Array<uint32_t, 100>& a() const;

  ::test_arrays::wire::UnionLargeArray::Tag Which() const;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kA = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_arrays::wire::UnionLargeArray::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

struct StructSmallArray {
  ::fidl::Array<uint32_t, 2> a = {};
};

struct StructLargeArray {
  ::fidl::Array<uint32_t, 100> a = {};
};

}  // namespace wire
}  // namespace test_arrays
namespace fidl {

template <>
struct TypeTraits<::test_arrays::wire::StructSmallArray> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 8;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<::test_arrays::wire::StructSmallArray> : public std::true_type {};
template <>
struct IsWire<::test_arrays::wire::StructSmallArray> : public std::true_type {};
template <>
struct IsStruct<::test_arrays::wire::StructSmallArray> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::StructSmallArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = 8;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<::fidl::Array<uint32_t, 2>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<::test_arrays::wire::StructSmallArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool kIsMemcpyCompatible = Base::kIsMemcpyCompatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_arrays::wire::StructSmallArray* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_arrays::wire::StructLargeArray> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 400;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<::test_arrays::wire::StructLargeArray> : public std::true_type {};
template <>
struct IsWire<::test_arrays::wire::StructLargeArray> : public std::true_type {};
template <>
struct IsStruct<::test_arrays::wire::StructLargeArray> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::StructLargeArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = 400;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<::fidl::Array<uint32_t, 100>, fidl::internal::WireCodingConstraintEmpty, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<::test_arrays::wire::StructLargeArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool kIsMemcpyCompatible = Base::kIsMemcpyCompatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_arrays::wire::StructLargeArray* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_arrays::wire::TableSmallArray> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 16;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_arrays::wire::TableSmallArray> : public std::true_type {};
template <>
struct IsWire<::test_arrays::wire::TableSmallArray> : public std::true_type {};
template <>
struct IsTable<::test_arrays::wire::TableSmallArray> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::TableSmallArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_arrays::wire::TableSmallArray* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_arrays::wire::TableLargeArray> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 408;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_arrays::wire::TableLargeArray> : public std::true_type {};
template <>
struct IsWire<::test_arrays::wire::TableLargeArray> : public std::true_type {};
template <>
struct IsTable<::test_arrays::wire::TableLargeArray> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::TableLargeArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_arrays::wire::TableLargeArray* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_arrays::wire::UnionSmallArray> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_arrays::wire::UnionSmallArray> : public std::true_type {};
template <>
struct IsWire<::test_arrays::wire::UnionSmallArray> : public std::true_type {};
template <>
struct IsUnion<::test_arrays::wire::UnionSmallArray> : public std::true_type {};

template <typename Constraint, bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionSmallArray, Constraint, IsRecursive> {
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_arrays::wire::UnionSmallArray* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);

  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

// Top-level union.
template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionSmallArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionSmallArray, ::fidl::internal::WireCodingConstraintUnion<false>, IsRecursive> {};

template <>
struct TypeTraits<::test_arrays::wire::UnionLargeArray> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 400;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_arrays::wire::UnionLargeArray> : public std::true_type {};
template <>
struct IsWire<::test_arrays::wire::UnionLargeArray> : public std::true_type {};
template <>
struct IsUnion<::test_arrays::wire::UnionLargeArray> : public std::true_type {};

template <typename Constraint, bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionLargeArray, Constraint, IsRecursive> {
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_arrays::wire::UnionLargeArray* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);

  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

// Top-level union.
template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionLargeArray, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public ::fidl::internal::WireCodingTraits<::test_arrays::wire::UnionLargeArray, ::fidl::internal::WireCodingConstraintUnion<false>, IsRecursive> {};

#pragma clang diagnostic pop

}  // namespace fidl
