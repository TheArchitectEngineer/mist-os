// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.errorsyntax/cpp/natural_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::ExampleUseOfErrorSyntaxCallWhichMayFailRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::ExampleUseOfErrorSyntaxCallWhichMayFailRequest(::std::string s) noexcept
    : storage_({.s = std::move(s)}) {}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::ExampleUseOfErrorSyntaxCallWhichMayFailRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : ExampleUseOfErrorSyntaxCallWhichMayFailRequest(Storage_{
                                                                                                                                                                                     .s = {},
                                                                                                                                                                                 }) {}
::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::ExampleUseOfErrorSyntaxCallWhichMayFailRequest(const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest& other) noexcept : ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest(other.CloneStorage_()) {}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest& test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::operator=(const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::operator==(const ExampleUseOfErrorSyntaxCallWhichMayFailRequest& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest, 16>::Equal(this, &other);
}

bool test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::operator!=(const ExampleUseOfErrorSyntaxCallWhichMayFailRequest& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest, 16>::Equal(this, &other);
}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::Storage_ test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.s)};
}
const ::std::string&
test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::s() const {
  return storage_.s;
}

::std::string& ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::s() {
  return storage_.s;
}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest& ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::s(::std::string value) {
  storage_.s = std::move(value);
  return *this;
}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse::ExampleUseOfErrorSyntaxCallWhichMayFailResponse(Storage_ storage) noexcept : storage_(std::move(storage)) {}
::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse::ExampleUseOfErrorSyntaxCallWhichMayFailResponse(int64_t value) noexcept
    : storage_({.value = std::move(value)}) {}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse::ExampleUseOfErrorSyntaxCallWhichMayFailResponse(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : ExampleUseOfErrorSyntaxCallWhichMayFailResponse(Storage_{
                                                                                                                                                                                       .value = {},
                                                                                                                                                                                   }) {}
::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse::ExampleUseOfErrorSyntaxCallWhichMayFailResponse(const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse& other) noexcept : ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse(other.CloneStorage_()) {}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse& test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse::operator=(const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

bool test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse::operator==(const ExampleUseOfErrorSyntaxCallWhichMayFailResponse& other) const noexcept {
  return ::fidl::internal::NaturalStructCodingTraits<::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse, 8>::Equal(this, &other);
}

bool test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse::operator!=(const ExampleUseOfErrorSyntaxCallWhichMayFailResponse& other) const noexcept {
  return !::fidl::internal::NaturalStructCodingTraits<::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse, 8>::Equal(this, &other);
}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse::Storage_ test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse::CloneStorage_() const {
  return Storage_{
      ::fidl::internal::NaturalClone(storage_.value)};
}
int64_t
test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse::value() const {
  return storage_.value;
}

int64_t& ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse::value() {
  return storage_.value;
}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse& ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse::value(int64_t value) {
  storage_.value = std::move(value);
  return *this;
}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::ExampleUseOfErrorSyntaxCallWhichMayFailResult(ExampleUseOfErrorSyntaxCallWhichMayFailResult&& other) noexcept : ExampleUseOfErrorSyntaxCallWhichMayFailResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
  *storage_ = std::move(*other.storage_);
}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult& ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::operator=(ExampleUseOfErrorSyntaxCallWhichMayFailResult&& other) noexcept {
  if (this != &other) {
    *storage_ = std::move(*other.storage_);
  }
  return *this;
}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::ExampleUseOfErrorSyntaxCallWhichMayFailResult(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
    : storage_(std::make_shared<Storage_>()) {}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::ExampleUseOfErrorSyntaxCallWhichMayFailResult(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Which() const {
  return ExampleUseOfErrorSyntaxCallWhichMayFailResult::IndexToTag(storage_->index()).value();
}

size_t test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag tag) {
  switch (tag) {
    case ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag::kResponse:
      return 1;
    case ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag::kErr:
      return 2;
    default: {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
      return 0;
    }
  }
}

std::optional<::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag> test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::IndexToTag(size_t index) {
  switch (index) {
    case 1:
      return ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag::kResponse;
    case 2:
      return ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Tag::kErr;
    default:
      return std::nullopt;
  }
}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::ExampleUseOfErrorSyntaxCallWhichMayFailResult(const ExampleUseOfErrorSyntaxCallWhichMayFailResult& other) noexcept : ExampleUseOfErrorSyntaxCallWhichMayFailResult(other.CloneStorage_()) {}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult& test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::operator=(const ExampleUseOfErrorSyntaxCallWhichMayFailResult& other) noexcept {
  if (this != &other) {
    storage_ = other.CloneStorage_();
  }
  return *this;
}

bool test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::operator==(const ExampleUseOfErrorSyntaxCallWhichMayFailResult& other) const noexcept {
  return *storage_ == *other.storage_;
}
bool test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::operator!=(const ExampleUseOfErrorSyntaxCallWhichMayFailResult& other) const noexcept {
  return *storage_ != *other.storage_;
}

std::shared_ptr<::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Storage_> test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage_>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::WithResponse(::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse val) {
  return ExampleUseOfErrorSyntaxCallWhichMayFailResult(std::make_shared<Storage_>(
      std::in_place_index_t<1>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<1, ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Storage_> test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::response() const {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<1, ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Storage_> test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::response() {
  return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult& test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::response(::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse value) {
  storage_->emplace<1>(std::move(value));
  return *this;
}
::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::WithErr(uint32_t val) {
  return ExampleUseOfErrorSyntaxCallWhichMayFailResult(std::make_shared<Storage_>(
      std::in_place_index_t<2>{},
      std::move(val)));
}

const ::fidl::internal::UnionMemberView<2, ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Storage_> test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::err() const {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::fidl::internal::UnionMemberView<2, ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::Storage_> test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::err() {
  return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult& test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult::err(uint32_t value) {
  storage_->emplace<2>(std::move(value));
  return *this;
}

#pragma clang diagnostic pop
