// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.bits/cpp/wire_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

static_assert(std::is_standard_layout_v<::test_bits::wire::MyBits>);
static_assert(sizeof(::test_bits::wire::MyBits) == sizeof(uint32_t));

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_bits::wire::MyBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_bits::wire::MyBits* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if (unlikely(static_cast<uint32_t>(*value) & ~7ull)) {
    encoder->SetError(::fidl::internal::kCodingErrorUnknownBitSetInBitsValue);
  }
  *position.As<::test_bits::wire::MyBits>() = *value;
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_bits::wire::MyBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_bits::wire::MyBits value = *position.As<::test_bits::wire::MyBits>();
  if (unlikely(static_cast<uint32_t>(value) & ~7ull)) {
    decoder->SetError(::fidl::internal::kCodingErrorUnknownBitSetInBitsValue);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_bits::wire::MyBits, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_bits::wire::MyBits, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_bits::wire::StrictBits>);
static_assert(sizeof(::test_bits::wire::StrictBits) == sizeof(uint64_t));

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_bits::wire::StrictBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_bits::wire::StrictBits* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if (unlikely(static_cast<uint64_t>(*value) & ~9223372036854775809ull)) {
    encoder->SetError(::fidl::internal::kCodingErrorUnknownBitSetInBitsValue);
  }
  *position.As<::test_bits::wire::StrictBits>() = *value;
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_bits::wire::StrictBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_bits::wire::StrictBits value = *position.As<::test_bits::wire::StrictBits>();
  if (unlikely(static_cast<uint64_t>(value) & ~9223372036854775809ull)) {
    decoder->SetError(::fidl::internal::kCodingErrorUnknownBitSetInBitsValue);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_bits::wire::StrictBits, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_bits::wire::StrictBits, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_bits::wire::FlexibleBits>);
static_assert(sizeof(::test_bits::wire::FlexibleBits) == sizeof(uint64_t));

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_bits::wire::FlexibleBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_bits::wire::FlexibleBits* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<::test_bits::wire::FlexibleBits>() = *value;
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_bits::wire::FlexibleBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
}

template struct ::fidl::internal::WireCodingTraits<::test_bits::wire::FlexibleBits, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_bits::wire::FlexibleBits, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_bits::wire::EmptyBits>);
static_assert(sizeof(::test_bits::wire::EmptyBits) == sizeof(uint32_t));

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_bits::wire::EmptyBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_bits::wire::EmptyBits* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<::test_bits::wire::EmptyBits>() = *value;
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_bits::wire::EmptyBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
}

template struct ::fidl::internal::WireCodingTraits<::test_bits::wire::EmptyBits, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_bits::wire::EmptyBits, ::fidl::internal::WireCodingConstraintEmpty, false>;

#pragma clang diagnostic pop
