// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.anonymous/cpp/common_types.h>

#if defined(__cpp_lib_format) && __cplusplus >= 202002L && defined(__Fuchsia__)
#include <format>

template <>
struct std::formatter<::test_anonymous::Flags> {
  constexpr auto parse(auto& ctx) { return ctx.begin(); }
  auto format(const ::test_anonymous::Flags& value, std::format_context& ctx) const {
    auto out = ctx.out();
    out = std::format_to(out, "test_anonymous::Flags(");
    bool first = true;
    if (value & ::test_anonymous::Flags::kInline) {
      if (!first) *out++ = '|';
      first = false;
      out = std::format_to(out, "kInline");
    }
    if (value.has_unknown_bits()) {
      if (!first) *out++ = '|';
      out = std::format_to(out, "{}", static_cast<uint16_t>(value.unknown_bits()));
    }
    *out++ = ')';
    return out;
  }
};
template <>
struct std::formatter<::test_anonymous::BitsMember> {
  constexpr auto parse(auto& ctx) { return ctx.begin(); }
  auto format(const ::test_anonymous::BitsMember& value, std::format_context& ctx) const {
    auto out = ctx.out();
    out = std::format_to(out, "test_anonymous::BitsMember(");
    bool first = true;
    if (value & ::test_anonymous::BitsMember::kBitOne) {
      if (!first) *out++ = '|';
      first = false;
      out = std::format_to(out, "kBitOne");
    }
    if (value & ::test_anonymous::BitsMember::kBitTwo) {
      if (!first) *out++ = '|';
      first = false;
      out = std::format_to(out, "kBitTwo");
    }
    if (value.has_unknown_bits()) {
      if (!first) *out++ = '|';
      out = std::format_to(out, "{}", static_cast<uint32_t>(value.unknown_bits()));
    }
    *out++ = ')';
    return out;
  }
};
template <>
struct std::formatter<::test_anonymous::Op> {
  constexpr auto parse(auto& ctx) { return ctx.begin(); }
  auto format(const ::test_anonymous::Op& value, std::format_context& ctx) const {
    std::string_view output;
    switch (value) {
      case ::test_anonymous::Op::kAdd:
        output = "kAdd";
        break;
      case ::test_anonymous::Op::kMul:
        output = "kMul";
        break;
      case ::test_anonymous::Op::kDiv:
        output = "kDiv";
        break;
      default:
        output = "UNKNOWN";
    }
    return std::format_to(ctx.out(), "test_anonymous::Op::{}", output);
  }
};
template <>
struct std::formatter<::test_anonymous::SomeProtocolSomeMethodError> {
  constexpr auto parse(auto& ctx) { return ctx.begin(); }
  auto format(const ::test_anonymous::SomeProtocolSomeMethodError& value, std::format_context& ctx) const {
    std::string_view output;
    switch (value) {
      case ::test_anonymous::SomeProtocolSomeMethodError::kErrorOne:
        output = "kErrorOne";
        break;
      case ::test_anonymous::SomeProtocolSomeMethodError::kErrorTwo:
        output = "kErrorTwo";
        break;
      default:
        output = "UNKNOWN";
    }
    return std::format_to(ctx.out(), "test_anonymous::SomeProtocolSomeMethodError::{}", output);
  }
};

#endif
