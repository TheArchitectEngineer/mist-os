// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.serializable/cpp/common_types.h>
#include <fidl/test.serializable/cpp/markers.h>
#include <lib/fidl/cpp/wire/array.h>
#include <lib/fidl/cpp/wire/envelope.h>
#include <lib/fidl/cpp/wire/internal/framework_err.h>
#include <lib/fidl/cpp/wire/message.h>
#include <lib/fidl/cpp/wire/message_storage.h>
#include <lib/fidl/cpp/wire/object_view.h>
#include <lib/fidl/cpp/wire/string_view.h>
#include <lib/fidl/cpp/wire/traits.h>
#include <lib/fidl/cpp/wire/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_serializable {

namespace wire {

struct SerializableStruct;

class SerializableTable;

class SerializableUnion;

struct SerializableStruct {
  static constexpr char kSerializableName[] = "test.serializable.SerializableStruct";

  uint8_t __reserved = {};
};
}  // namespace wire
}  // namespace test_serializable

template <>
class ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>;
template <>
class ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>;

template <>
struct ::fidl::WireTableFrame<::test_serializable::wire::SerializableTable> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;

  friend class ::test_serializable::wire::SerializableTable;
  friend ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>>;
};

namespace test_serializable {
namespace wire {

class SerializableTable {
 public:
  static constexpr char kSerializableName[] = "test.serializable.SerializableTable";
  SerializableTable() = default;
  SerializableTable(const SerializableTable& other) noexcept = default;
  SerializableTable& operator=(const SerializableTable& other) noexcept = default;
  SerializableTable(SerializableTable&& other) noexcept = default;
  SerializableTable& operator=(SerializableTable&& other) noexcept = default;

  ~SerializableTable() = default;

  // Returns whether no field is set.
  bool IsEmpty() const;

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>> frame);
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
 public:
#else   // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
 private:
#endif  // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  explicit SerializableTable(::fidl::AnyArena& allocator);
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit SerializableTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>&& frame);

  void Allocate(::fidl::AnyArena& allocator);
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>&& frame_ptr);

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>> frame_ptr_;
};
}  // namespace wire
}  // namespace test_serializable

template <typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_serializable::wire::SerializableTable Build();

 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>&& frame);

 private:
  ::test_serializable::wire::SerializableTable table_;
};

template <>
class ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>>;

 public:
 private:
  friend class ::test_serializable::wire::SerializableTable;
  WireTableBuilder(::fidl::AnyArena& arena);

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;
};

template <>
class ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>>;

 private:
  friend class ::test_serializable::wire::SerializableTable;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>* frame);
};
namespace test_serializable {
namespace wire {

class SerializableUnion {
 public:
  static constexpr char kSerializableName[] = "test.serializable.SerializableUnion";

  SerializableUnion();

  SerializableUnion(const SerializableUnion&) = default;
  SerializableUnion& operator=(const SerializableUnion&) = default;
  SerializableUnion(SerializableUnion&&) = default;
  SerializableUnion& operator=(SerializableUnion&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kUnused = 1,  // 0x1
  };

  bool has_invalid_tag() const;

  bool is_unused() const;

  static SerializableUnion WithUnused(bool val);

  bool& unused();

  const bool& unused() const;

  ::test_serializable::wire::SerializableUnion::Tag Which() const;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kUnused = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_serializable::wire::SerializableUnion::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

}  // namespace wire
}  // namespace test_serializable
namespace fidl {

template <>
struct TypeTraits<::test_serializable::wire::SerializableStruct> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 1;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<::test_serializable::wire::SerializableStruct> : public std::true_type {};
template <>
struct IsWire<::test_serializable::wire::SerializableStruct> : public std::true_type {};
template <>
struct IsStruct<::test_serializable::wire::SerializableStruct> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableStruct, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = 1;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<uint8_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<::test_serializable::wire::SerializableStruct, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool kIsMemcpyCompatible = Base::kIsMemcpyCompatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_serializable::wire::SerializableStruct* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_serializable::wire::SerializableTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_serializable::wire::SerializableTable> : public std::true_type {};
template <>
struct IsWire<::test_serializable::wire::SerializableTable> : public std::true_type {};
template <>
struct IsTable<::test_serializable::wire::SerializableTable> : public std::true_type {};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_serializable::wire::SerializableTable* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

template <>
struct TypeTraits<::test_serializable::wire::SerializableUnion> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_serializable::wire::SerializableUnion> : public std::true_type {};
template <>
struct IsWire<::test_serializable::wire::SerializableUnion> : public std::true_type {};
template <>
struct IsUnion<::test_serializable::wire::SerializableUnion> : public std::true_type {};

template <typename Constraint, bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableUnion, Constraint, IsRecursive> {
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_serializable::wire::SerializableUnion* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);

  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth);
};

// Top-level union.
template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableUnion, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableUnion, ::fidl::internal::WireCodingConstraintUnion<false>, IsRecursive> {};

#pragma clang diagnostic pop

}  // namespace fidl
