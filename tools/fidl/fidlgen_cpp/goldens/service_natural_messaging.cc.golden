// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#ifdef __Fuchsia__

#include <fidl/test.service/cpp/natural_messaging.h>
#include <fidl/test.service/cpp/wire_messaging.h>
#include <lib/fidl/cpp/wire/unknown_interactions.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_service {

[[maybe_unused]]
constexpr inline uint64_t kFirstProtocol_MethodOnFirst_Ordinal = 6352548393671797041lu;

[[maybe_unused]]
constexpr inline ::fidl::MessageDynamicFlags kFirstProtocol_MethodOnFirst_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
}  // namespace test_service

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_service::FirstProtocol>::MethodOnFirst() const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_service::kFirstProtocol_MethodOnFirst_Ordinal, ::test_service::kFirstProtocol_MethodOnFirst_DynamicFlags};
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_service::FirstProtocol>::MethodOnFirst() {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_service::kFirstProtocol_MethodOnFirst_Ordinal, ::test_service::kFirstProtocol_MethodOnFirst_DynamicFlags};
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

::fidl::UnownedClientEnd<::test_service::FirstProtocol> fidl::internal::NaturalSyncClientImpl<::test_service::FirstProtocol>::_client_end() const {
  return ::fidl::UnownedClientEnd<::test_service::FirstProtocol>(
      _transport().get<::fidl::internal::ChannelTransport>());
}

::fidl::Status fidl::SyncEventHandler<::test_service::FirstProtocol>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_service::FirstProtocol> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_service::FirstProtocol> event_storage;
  fidl::internal::NaturalEventDispatcher<::test_service::FirstProtocol> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}

::fidl::internal::NaturalEventDispatcher<::test_service::FirstProtocol>::NaturalEventDispatcher(::fidl::internal::NaturalEventHandlerInterface<::test_service::FirstProtocol>* event_handler)
    : IncomingEventDispatcher(event_handler) {}

::fidl::ProtocolHandler<::test_service::FirstProtocol> fidl::Server<::test_service::FirstProtocol>::bind_handler(async_dispatcher_t* dispatcher) {
  return [impl = this, dispatcher = dispatcher](::fidl::ServerEnd<::test_service::FirstProtocol> request) {
    (void)::fidl::BindServer(dispatcher, std::move(request), impl);
  };
}

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<::test_service::FirstProtocol>::entries_[] = {
    {
        ::test_service::kFirstProtocol_MethodOnFirst_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessageWithoutBody(
              msg, metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_service::FirstProtocol::MethodOnFirst>::Sync completer(txn);
          static_cast<::fidl::Server<::test_service::FirstProtocol>*>(interface)->MethodOnFirst(

              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<::test_service::FirstProtocol>::entries_end_ =
    &entries_[1];

void fidl::internal::NaturalServerDispatcher<::test_service::FirstProtocol>::Dispatch(::fidl::Server<::test_service::FirstProtocol>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                      internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_, &unknown_method_handler_entry_);
}

void fidl::Server<::test_service::FirstProtocol>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::NaturalServerDispatcher<::test_service::FirstProtocol>::Dispatch(this, std::move(msg), storage_view, txn);
}
namespace test_service {

[[maybe_unused]]
constexpr inline uint64_t kSecondProtocol_MethodOnSecond_Ordinal = 8121179205110225988lu;

[[maybe_unused]]
constexpr inline ::fidl::MessageDynamicFlags kSecondProtocol_MethodOnSecond_DynamicFlags = ::fidl::MessageDynamicFlags::kStrictMethod;
}  // namespace test_service

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalClientImpl<::test_service::SecondProtocol>::MethodOnSecond() const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_service::kSecondProtocol_MethodOnSecond_Ordinal, ::test_service::kSecondProtocol_MethodOnSecond_DynamicFlags};
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::OneWayStatus status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}

::fit::result<::fidl::OneWayError>
fidl::internal::NaturalSyncClientImpl<::test_service::SecondProtocol>::MethodOnSecond() {
  ::fidl::internal::NaturalMessageEncoder encoder{
      &::fidl::internal::ChannelTransport::VTable, ::test_service::kSecondProtocol_MethodOnSecond_Ordinal, ::test_service::kSecondProtocol_MethodOnSecond_DynamicFlags};
  ::fidl::OutgoingMessage msg = encoder.GetMessage();
  msg.Write(_client_end().handle());
  return ::fidl::internal::ToFitxResult(::fidl::OneWayStatus{msg});
}

::fidl::UnownedClientEnd<::test_service::SecondProtocol> fidl::internal::NaturalSyncClientImpl<::test_service::SecondProtocol>::_client_end() const {
  return ::fidl::UnownedClientEnd<::test_service::SecondProtocol>(
      _transport().get<::fidl::internal::ChannelTransport>());
}

::fidl::Status fidl::SyncEventHandler<::test_service::SecondProtocol>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_service::SecondProtocol> client_end) {
  ::fidl::internal::IncomingEventsStorage<::test_service::SecondProtocol> event_storage;
  fidl::internal::NaturalEventDispatcher<::test_service::SecondProtocol> dispatcher{this};
  return HandleOneEventImpl_(client_end.channel(), event_storage.view(), dispatcher);
}

::fidl::internal::NaturalEventDispatcher<::test_service::SecondProtocol>::NaturalEventDispatcher(::fidl::internal::NaturalEventHandlerInterface<::test_service::SecondProtocol>* event_handler)
    : IncomingEventDispatcher(event_handler) {}

::fidl::ProtocolHandler<::test_service::SecondProtocol> fidl::Server<::test_service::SecondProtocol>::bind_handler(async_dispatcher_t* dispatcher) {
  return [impl = this, dispatcher = dispatcher](::fidl::ServerEnd<::test_service::SecondProtocol> request) {
    (void)::fidl::BindServer(dispatcher, std::move(request), impl);
  };
}

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<::test_service::SecondProtocol>::entries_[] = {
    {
        ::test_service::kSecondProtocol_MethodOnSecond_Ordinal,
        [](void* interface, ::fidl::EncodedMessage& msg, ::fidl::WireFormatMetadata metadata,
           internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
          ::fit::result decoded = ::fidl::internal::DecodeTransactionalMessageWithoutBody(
              msg, metadata);
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::internal::NaturalCompleter<::test_service::SecondProtocol::MethodOnSecond>::Sync completer(txn);
          static_cast<::fidl::Server<::test_service::SecondProtocol>*>(interface)->MethodOnSecond(

              completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<::test_service::SecondProtocol>::entries_end_ =
    &entries_[1];

void fidl::internal::NaturalServerDispatcher<::test_service::SecondProtocol>::Dispatch(::fidl::Server<::test_service::SecondProtocol>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                                                                                       internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_, &unknown_method_handler_entry_);
}

void fidl::Server<::test_service::SecondProtocol>::dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::NaturalServerDispatcher<::test_service::SecondProtocol>::Dispatch(this, std::move(msg), storage_view, txn);
}

#pragma clang diagnostic pop

#endif  // __Fuchsia__
