// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.placementofattributes/cpp/common_types.h>
#include <fidl/test.placementofattributes/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.exampleusing/cpp/natural_types.h>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_placementofattributes {

class ExampleProtocolMethodRequest;

class ExampleStruct;

class ExampleTable;

class ExampleUnion;

using Alias = uint32_t;

constexpr uint32_t kExampleConst = 0u;

class ExampleProtocolMethodRequest {
 private:
  struct Storage_;

 public:
  ExampleProtocolMethodRequest(Storage_ storage) noexcept;
  ExampleProtocolMethodRequest(::test_exampleusing::Empty arg) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |ExampleProtocolMethodRequest| only if all of its members are default constructible.
  ExampleProtocolMethodRequest() = default;
#pragma clang diagnostic pop

  ExampleProtocolMethodRequest(ExampleProtocolMethodRequest&&) noexcept = default;
  ExampleProtocolMethodRequest& operator=(ExampleProtocolMethodRequest&&) noexcept = default;
  ExampleProtocolMethodRequest(const ExampleProtocolMethodRequest& other) noexcept;
  ExampleProtocolMethodRequest& operator=(const ExampleProtocolMethodRequest& other) noexcept;

  bool operator==(const ExampleProtocolMethodRequest& other) const noexcept;
  bool operator!=(const ExampleProtocolMethodRequest& other) const noexcept;

  const ::test_exampleusing::Empty&
  arg() const;

  ::test_exampleusing::Empty& arg();

  // Setter for arg.
  //

  ExampleProtocolMethodRequest& arg(::test_exampleusing::Empty value);

  ExampleProtocolMethodRequest(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::test_exampleusing::Empty arg;
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_placementofattributes::ExampleProtocolMethodRequest, 1>;
  friend struct ::fidl::internal::MemberVisitor<::test_placementofattributes::ExampleProtocolMethodRequest>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, ::test_exampleusing::Empty, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::arg, 0});
  static constexpr auto kPadding = std::make_tuple();
};

class ExampleStruct {
 private:
  struct Storage_;

 public:
  ExampleStruct(Storage_ storage) noexcept;
  ExampleStruct(uint32_t member) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |ExampleStruct| only if all of its members are default constructible.
  ExampleStruct() = default;
#pragma clang diagnostic pop

  ExampleStruct(ExampleStruct&&) noexcept = default;
  ExampleStruct& operator=(ExampleStruct&&) noexcept = default;
  ExampleStruct(const ExampleStruct& other) noexcept;
  ExampleStruct& operator=(const ExampleStruct& other) noexcept;

  bool operator==(const ExampleStruct& other) const noexcept;
  bool operator!=(const ExampleStruct& other) const noexcept;

  uint32_t
  member() const;

  uint32_t& member();

  // Setter for member.
  //

  ExampleStruct& member(uint32_t value);

  ExampleStruct(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    uint32_t member = {};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_placementofattributes::ExampleStruct, 4>;
  friend struct ::fidl::internal::MemberVisitor<::test_placementofattributes::ExampleStruct>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::member, 0});
  static constexpr auto kPadding = std::make_tuple();
};

class ExampleTable {
 private:
  struct Storage_;

 public:
  ExampleTable(Storage_ storage) noexcept;
  ExampleTable() noexcept = default;
  ExampleTable(ExampleTable&&) noexcept = default;
  ExampleTable& operator=(ExampleTable&&) noexcept = default;
  ExampleTable(const ExampleTable& other) noexcept;
  ExampleTable& operator=(const ExampleTable& other) noexcept;
  bool operator==(const ExampleTable& other) const noexcept;
  bool operator!=(const ExampleTable& other) const noexcept;

  bool IsEmpty() const;

  const std::optional<uint32_t>& member() const;
  ::std::optional<uint32_t>& member();

  // Setter for member.
  //

  ExampleTable& member(std::optional<uint32_t> value);

  ExampleTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    ::std::optional<uint32_t> member;
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_placementofattributes::ExampleTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_placementofattributes::ExampleTable>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, uint32_t, fidl::internal::NaturalCodingConstraintEmpty>{
      1, &Storage_::member});
};

class ExampleUnion {
 private:
  using Storage_ =
      std::variant<
          std::monostate, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kVariant = 1,  // 0x1
  };

  ExampleUnion(ExampleUnion&& other) noexcept;
  ExampleUnion& operator=(ExampleUnion&& other) noexcept;
  ExampleUnion(const ExampleUnion& other) noexcept;
  ExampleUnion& operator=(const ExampleUnion& other) noexcept;
  bool operator==(const ExampleUnion& other) const noexcept;
  bool operator!=(const ExampleUnion& other) const noexcept;

  ::test_placementofattributes::ExampleUnion::Tag Which() const;
  static ExampleUnion WithVariant(uint32_t val);
  const ::fidl::internal::UnionMemberView<1, Storage_> variant() const;
  ::fidl::internal::UnionMemberView<1, Storage_> variant();

  // Sets the union to hold the variant member.
  //

  ExampleUnion& variant(uint32_t value);

  ExampleUnion(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_placementofattributes::ExampleUnion>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit ExampleUnion(std::shared_ptr<Storage_> storage);

  static size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_placementofattributes::ExampleUnion::Tag tag);
  static std::optional<::test_placementofattributes::ExampleUnion::Tag> IndexToTag(size_t index);
};

}  // namespace test_placementofattributes
namespace fidl {

template <>
struct IsFidlType<::test_placementofattributes::ExampleProtocolMethodRequest> : public std::true_type {};

template <>
struct TypeTraits<::test_placementofattributes::ExampleProtocolMethodRequest> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 1;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_placementofattributes::ExampleProtocolMethodRequest> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_placementofattributes::ExampleProtocolMethodRequest, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_placementofattributes::ExampleProtocolMethodRequest, 1> {};
template <>
struct IsFidlType<::test_placementofattributes::ExampleStruct> : public std::true_type {};

template <>
struct TypeTraits<::test_placementofattributes::ExampleStruct> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 4;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_placementofattributes::ExampleStruct> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_placementofattributes::ExampleStruct, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_placementofattributes::ExampleStruct, 4> {};

template <>
struct IsFidlType<::test_placementofattributes::ExampleTable> : public std::true_type {};

template <>
struct TypeTraits<::test_placementofattributes::ExampleTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 2;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_placementofattributes::ExampleTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_placementofattributes::ExampleTable, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_placementofattributes::ExampleTable> {};

template <>
struct IsFidlType<::test_placementofattributes::ExampleUnion> : public std::true_type {};

template <>
struct TypeTraits<::test_placementofattributes::ExampleUnion> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_placementofattributes::ExampleUnion> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_placementofattributes::ExampleUnion, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_placementofattributes::ExampleUnion> {};

template <>
struct internal::NaturalCodingTraits<::test_placementofattributes::ExampleBits, ::fidl::internal::NaturalCodingConstraintEmpty> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::NaturalEncoder* encoder, ::test_placementofattributes::ExampleBits* value, size_t offset, size_t recursion_depth);
  static void Decode(internal::NaturalDecoder* decoder, ::test_placementofattributes::ExampleBits* value, size_t offset, size_t recursion_depth);
};

template <>
struct internal::NaturalCodingTraits<::test_placementofattributes::ExampleEnum, ::fidl::internal::NaturalCodingConstraintEmpty> {
  static constexpr size_t kInlineSize = sizeof(uint32_t);
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::NaturalEncoder* encoder, ::test_placementofattributes::ExampleEnum* value, size_t offset, size_t recursion_depth);
  static void Decode(internal::NaturalDecoder* decoder, ::test_placementofattributes::ExampleEnum* value, size_t offset, size_t recursion_depth);
};

#pragma clang diagnostic pop

}  // namespace fidl
