// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.doccomments/cpp/wire_types.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

static_assert(std::is_standard_layout_v<::test_doccomments::wire::MyStrictBits>);
static_assert(sizeof(::test_doccomments::wire::MyStrictBits) == sizeof(uint32_t));

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::MyStrictBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_doccomments::wire::MyStrictBits* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if (unlikely(static_cast<uint32_t>(*value) & ~3ull)) {
    encoder->SetError(::fidl::internal::kCodingErrorUnknownBitSetInBitsValue);
  }
  *position.As<::test_doccomments::wire::MyStrictBits>() = *value;
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::MyStrictBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_doccomments::wire::MyStrictBits value = *position.As<::test_doccomments::wire::MyStrictBits>();
  if (unlikely(static_cast<uint32_t>(value) & ~3ull)) {
    decoder->SetError(::fidl::internal::kCodingErrorUnknownBitSetInBitsValue);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::MyStrictBits, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::MyStrictBits, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_doccomments::wire::MyFlexibleBits>);
static_assert(sizeof(::test_doccomments::wire::MyFlexibleBits) == sizeof(uint32_t));

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::MyFlexibleBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_doccomments::wire::MyFlexibleBits* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<::test_doccomments::wire::MyFlexibleBits>() = *value;
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::MyFlexibleBits, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
}

template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::MyFlexibleBits, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::MyFlexibleBits, ::fidl::internal::WireCodingConstraintEmpty, false>;

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::MyStrictEnum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_doccomments::wire::MyStrictEnum* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  switch (*value) {
    case ::test_doccomments::wire::MyStrictEnum::kFoo:
    case ::test_doccomments::wire::MyStrictEnum::kBar:
      break;
    default:
      encoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
      return;
  }
  *position.As<::test_doccomments::wire::MyStrictEnum>() = *value;
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::MyStrictEnum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  [[maybe_unused]] ::test_doccomments::wire::MyStrictEnum value = *position.As<::test_doccomments::wire::MyStrictEnum>();
  switch (value) {
    case ::test_doccomments::wire::MyStrictEnum::kFoo:
    case ::test_doccomments::wire::MyStrictEnum::kBar:
      break;
    default:
      decoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
      return;
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::MyStrictEnum, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::MyStrictEnum, ::fidl::internal::WireCodingConstraintEmpty, false>;

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::MyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_doccomments::wire::MyFlexibleEnum* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  *position.As<::test_doccomments::wire::MyFlexibleEnum>() = *value;
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::MyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
}

template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::MyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::MyFlexibleEnum, ::fidl::internal::WireCodingConstraintEmpty, false>;

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::Struct, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_doccomments::wire::Struct* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (kIsMemcpyCompatible) {
    memcpy(position.As<void>(), value, sizeof(::test_doccomments::wire::Struct));
  } else {
    internal::WireCodingTraits<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(encoder, &value->field, position + 0, recursion_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::Struct, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  if constexpr (!Base::are_members_memcpy_compatible) {
    internal::WireCodingTraits<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + 0, recursion_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::Struct, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::Struct, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_doccomments::wire::Struct>);
static_assert(offsetof(::test_doccomments::wire::Struct, field) == 0);
static_assert(sizeof(::test_doccomments::wire::Struct) == ::fidl::TypeTraits<::test_doccomments::wire::Struct>::kPrimarySize);

::test_doccomments::wire::StrictUnion::StrictUnion() : ordinal_(::test_doccomments::wire::StrictUnion::Ordinal::Invalid), envelope_{} {}
::test_doccomments::wire::StrictUnion::Tag test_doccomments::wire::StrictUnion::Which() const {
  ZX_ASSERT(!has_invalid_tag());
  return static_cast<::test_doccomments::wire::StrictUnion::Tag>(ordinal_);
}

void ::test_doccomments::wire::StrictUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(StrictUnion) == sizeof(fidl_union_t));
  static_assert(offsetof(StrictUnion, ordinal_) == offsetof(fidl_union_t, tag));
  static_assert(offsetof(StrictUnion, envelope_) == offsetof(fidl_union_t, envelope));
}

bool test_doccomments::wire::StrictUnion::has_invalid_tag() const { return ordinal_ == ::test_doccomments::wire::StrictUnion::Ordinal::Invalid; }

bool test_doccomments::wire::StrictUnion::is_field() const { return ordinal_ == ::test_doccomments::wire::StrictUnion::Ordinal::kField; }
::test_doccomments::wire::StrictUnion test_doccomments::wire::StrictUnion::WithField(int32_t val) {
  StrictUnion result;
  result.ordinal_ = ::test_doccomments::wire::StrictUnion::Ordinal::kField;
  result.envelope_.As<int32_t>().set_data(std::move(val));
  return result;
}

/// union member comment #1
///
/// union member comment #3
int32_t& test_doccomments::wire::StrictUnion::field() {
  ZX_ASSERT(ordinal_ == ::test_doccomments::wire::StrictUnion::Ordinal::kField);
  return envelope_.As<int32_t>().get_data();
}
/// union member comment #1
///
/// union member comment #3
const int32_t& test_doccomments::wire::StrictUnion::field() const {
  ZX_ASSERT(ordinal_ == ::test_doccomments::wire::StrictUnion::Ordinal::kField);
  return envelope_.As<int32_t>().get_data();
}

static_assert(std::is_standard_layout_v<::test_doccomments::wire::StrictUnion>);

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::StrictUnion, Constraint, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_doccomments::wire::StrictUnion* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

  if (unlikely(u->tag == 0)) {
    if constexpr (Constraint::is_optional) {
      *position.As<fidl_union_t>() = {};
      return;
    }
    encoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  *position.As<fidl_xunion_tag_t>() = u->tag;

  size_t encode_inline_size;
  switch (u->tag) {
    case 1:  // ::test_doccomments::wire::StrictUnion::Tag::kField
      encode_inline_size = ::fidl::internal::WireCodingTraits<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      encode_inline_size = 0;
      break;
  }
  ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
  switch (u->tag) {
    case 1:  // ::test_doccomments::wire::StrictUnion::Tag::kField
      encode_fn = ::fidl::internal::MakeEncodeFn<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      encode_fn = nullptr;
      break;
  }
  WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::StrictUnion, Constraint, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_doccomments::wire::StrictUnion::Tag tag = *position.As<::test_doccomments::wire::StrictUnion::Tag>();
  if (unlikely(static_cast<uint64_t>(tag) == 0)) {
    if constexpr (!Constraint::is_optional) {
      decoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
      return;
    }
    if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
      decoder->SetError(::fidl::internal::kCodingErrorZeroTagButNonZeroEnvelope);
    }
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  size_t decode_inline_size;
  switch (tag) {
    case ::test_doccomments::wire::StrictUnion::Tag::kField:
      decode_inline_size = ::fidl::internal::WireCodingTraits<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      decode_inline_size = 0;
      break;
  }
  DecodeFn<IsRecursive> decode_fn;
  switch (tag) {
    case ::test_doccomments::wire::StrictUnion::Tag::kField:
      decode_fn = ::fidl::internal::MakeDecodeFn<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      decode_fn = nullptr;
      break;
  }
  ::fidl::internal::WireDecodeStrictEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::StrictUnion, ::fidl::internal::WireCodingConstraintUnion<false>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::StrictUnion, ::fidl::internal::WireCodingConstraintUnion<false>, false>;
template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::StrictUnion, ::fidl::internal::WireCodingConstraintUnion<true>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::StrictUnion, ::fidl::internal::WireCodingConstraintUnion<true>, false>;

::test_doccomments::wire::FlexibleUnion::FlexibleUnion() : ordinal_(::test_doccomments::wire::FlexibleUnion::Ordinal::Invalid), envelope_{} {}
auto ::test_doccomments::wire::FlexibleUnion::Which() const -> ::test_doccomments::wire::FlexibleUnion::Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case ::test_doccomments::wire::FlexibleUnion::Ordinal::kField:
      return static_cast<::test_doccomments::wire::FlexibleUnion::Tag>(ordinal_);
    default:
      return ::test_doccomments::wire::FlexibleUnion::Tag::_do_not_handle_this__write_a_default_case_instead;
  }
}

void ::test_doccomments::wire::FlexibleUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(FlexibleUnion) == sizeof(fidl_union_t));
  static_assert(offsetof(FlexibleUnion, ordinal_) == offsetof(fidl_union_t, tag));
  static_assert(offsetof(FlexibleUnion, envelope_) == offsetof(fidl_union_t, envelope));
}

bool test_doccomments::wire::FlexibleUnion::has_invalid_tag() const { return ordinal_ == ::test_doccomments::wire::FlexibleUnion::Ordinal::Invalid; }

bool test_doccomments::wire::FlexibleUnion::is_field() const { return ordinal_ == ::test_doccomments::wire::FlexibleUnion::Ordinal::kField; }
::test_doccomments::wire::FlexibleUnion test_doccomments::wire::FlexibleUnion::WithField(int32_t val) {
  FlexibleUnion result;
  result.ordinal_ = ::test_doccomments::wire::FlexibleUnion::Ordinal::kField;
  result.envelope_.As<int32_t>().set_data(std::move(val));
  return result;
}

/// union member comment #1
///
/// union member comment #3
int32_t& test_doccomments::wire::FlexibleUnion::field() {
  ZX_ASSERT(ordinal_ == ::test_doccomments::wire::FlexibleUnion::Ordinal::kField);
  return envelope_.As<int32_t>().get_data();
}
/// union member comment #1
///
/// union member comment #3
const int32_t& test_doccomments::wire::FlexibleUnion::field() const {
  ZX_ASSERT(ordinal_ == ::test_doccomments::wire::FlexibleUnion::Ordinal::kField);
  return envelope_.As<int32_t>().get_data();
}

static_assert(std::is_standard_layout_v<::test_doccomments::wire::FlexibleUnion>);

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::FlexibleUnion, Constraint, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_doccomments::wire::FlexibleUnion* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

  if (unlikely(u->tag == 0)) {
    if constexpr (Constraint::is_optional) {
      *position.As<fidl_union_t>() = {};
      return;
    }
    encoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  *position.As<fidl_xunion_tag_t>() = u->tag;

  size_t encode_inline_size;
  switch (u->tag) {
    case 1:  // ::test_doccomments::wire::FlexibleUnion::Tag::kField
      encode_inline_size = ::fidl::internal::WireCodingTraits<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      encode_inline_size = 0;
      break;
  }
  ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
  switch (u->tag) {
    case 1:  // ::test_doccomments::wire::FlexibleUnion::Tag::kField
      encode_fn = ::fidl::internal::MakeEncodeFn<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      encode_fn = nullptr;
      break;
  }
  WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template <typename Constraint, bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::FlexibleUnion, Constraint, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::test_doccomments::wire::FlexibleUnion::Tag tag = *position.As<::test_doccomments::wire::FlexibleUnion::Tag>();
  if (unlikely(static_cast<uint64_t>(tag) == 0)) {
    if constexpr (!Constraint::is_optional) {
      decoder->SetError(::fidl::internal::kCodingErrorInvalidUnionTag);
      return;
    }
    if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
      decoder->SetError(::fidl::internal::kCodingErrorZeroTagButNonZeroEnvelope);
    }
    return;
  }

  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
  if (!inner_depth.IsValid()) {
    return;
  }

  size_t decode_inline_size;
  switch (tag) {
    case ::test_doccomments::wire::FlexibleUnion::Tag::kField:
      decode_inline_size = ::fidl::internal::WireCodingTraits<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
      break;
    default:
      decode_inline_size = 0;
      break;
  }
  DecodeFn<IsRecursive> decode_fn;
  switch (tag) {
    case ::test_doccomments::wire::FlexibleUnion::Tag::kField:
      decode_fn = ::fidl::internal::MakeDecodeFn<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
      break;
    default:
      decode_fn = nullptr;
      break;
  }
  ::fidl::internal::WireDecodeFlexibleEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
}

template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::FlexibleUnion, ::fidl::internal::WireCodingConstraintUnion<false>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::FlexibleUnion, ::fidl::internal::WireCodingConstraintUnion<false>, false>;
template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::FlexibleUnion, ::fidl::internal::WireCodingConstraintUnion<true>, true>;
template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::FlexibleUnion, ::fidl::internal::WireCodingConstraintUnion<true>, false>;

bool ::fidl::WireTableFrame<::test_doccomments::wire::Table>::HasUnknownData() const {
  return false;
}

uint64_t fidl::WireTableFrame<::test_doccomments::wire::Table>::ComputeMaxOrdinal() const {
  uint64_t max_ordinal = 0;
  if (!field_.has_data()) {
    max_ordinal = 1;
  }
  return max_ordinal;
}

::test_doccomments::wire::Table::Table(::fidl::AnyArena& allocator)
    : frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_doccomments::wire::Table>>(allocator)) {}

::test_doccomments::wire::Table::Table(::fidl::ObjectView<::fidl::WireTableFrame<::test_doccomments::wire::Table>>&& frame)
    : frame_ptr_(std::move(frame)) {}

void test_doccomments::wire::Table::Allocate(::fidl::AnyArena& allocator) {
  max_ordinal_ = 0;
  frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_doccomments::wire::Table>>(allocator);
}
void test_doccomments::wire::Table::Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_doccomments::wire::Table>>&& frame_ptr) {
  max_ordinal_ = 0;
  frame_ptr_ = std::move(frame_ptr);
}

bool ::test_doccomments::wire::Table::IsEmpty() const { return max_ordinal_ == 0; }

bool ::test_doccomments::wire::Table::HasUnknownData() const {
  if (max_ordinal_ > 1) {
    return true;
  }
  if (frame_ptr_ == nullptr) {
    return false;
  }
  return frame_ptr_->HasUnknownData();
}

int32_t& test_doccomments::wire::Table::field() const {
  ZX_ASSERT(has_Field());
  return frame_ptr_->field_.get_data();
}

bool test_doccomments::wire::Table::has_Field() const {
  return max_ordinal_ >= 1 && frame_ptr_->field_.has_data();
}

::test_doccomments::wire::Table& test_doccomments::wire::Table::clear_Field() {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->field_.clear_data();
  max_ordinal_ = frame_ptr_->ComputeMaxOrdinal();
  return *this;
}

::test_doccomments::wire::Table& test_doccomments::wire::Table::set_field(int32_t elem) {
  ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
  frame_ptr_->field_.set_data(std::move(elem));
  max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
  return *this;
}

::fidl::WireTableBuilder<::test_doccomments::wire::Table> test_doccomments::wire::Table::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_doccomments::wire::Table>(arena);
}
::fidl::WireTableExternalBuilder<::test_doccomments::wire::Table> test_doccomments::wire::Table::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_doccomments::wire::Table>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_doccomments::wire::Table>(std::move(frame));
}

template <typename BuilderImpl>
fidl::internal::WireTableBaseBuilder<::test_doccomments::wire::Table, BuilderImpl>::WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_doccomments::wire::Table>>&& frame)
    : table_(std::move(frame)) {}

template <typename BuilderImpl>
::test_doccomments::wire::Table fidl::internal::WireTableBaseBuilder<::test_doccomments::wire::Table, BuilderImpl>::Build() {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  ::test_doccomments::wire::Table t = std::move(table_);
  // Poison this builder to prevent accidental reuse.
  table_.frame_ptr_ = nullptr;
  return t;
}
template <typename BuilderImpl>
bool fidl::internal::WireTableBaseBuilder<::test_doccomments::wire::Table, BuilderImpl>::has_Field() const {
  return table_.has_Field();
}

template <typename BuilderImpl>
void fidl::internal::WireTableBaseBuilder<::test_doccomments::wire::Table, BuilderImpl>::clear_Field() {
  table_.clear_Field();
}

template <typename BuilderImpl>
int32_t& fidl::internal::WireTableBaseBuilder<::test_doccomments::wire::Table, BuilderImpl>::field() const {
  return table_.field();
}
template <typename BuilderImpl>
BuilderImpl& fidl::internal::WireTableBaseBuilder<::test_doccomments::wire::Table, BuilderImpl>::field(int32_t elem) {
  ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
  table_.frame_ptr_->field_.set_data(std::move(elem));
  table_.max_ordinal_ = std::max(table_.max_ordinal_, static_cast<uint64_t>(1));
  return *static_cast<BuilderImpl*>(this);
}

template class fidl::internal::WireTableBaseBuilder<::test_doccomments::wire::Table, ::fidl::WireTableBuilder<::test_doccomments::wire::Table>>;
template class fidl::internal::WireTableBaseBuilder<::test_doccomments::wire::Table, ::fidl::WireTableExternalBuilder<::test_doccomments::wire::Table>>;

::fidl::WireTableBuilder<::test_doccomments::wire::Table>::WireTableBuilder(::fidl::AnyArena& arena)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_doccomments::wire::Table>>(arena)),
      arena_(arena) {}

::fidl::WireTableExternalBuilder<::test_doccomments::wire::Table>::WireTableExternalBuilder(::fidl::WireTableFrame<::test_doccomments::wire::Table>* frame)
    : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_doccomments::wire::Table>>::FromExternal(frame)) {}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::Table, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
    ::fidl::internal::WireEncoder* encoder, ::test_doccomments::wire::Table* value, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit ==
      Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
  fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
  for (size_t i = 0; i < vec->count; i++) {
    size_t encode_inline_size = 0;
    switch (i) {
      case 0:
        encode_inline_size = ::fidl::internal::WireCodingTraits<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
    switch (i) {
      case 0:
        encode_fn = ::fidl::internal::MakeEncodeFn<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
  }
}

template <bool IsRecursive>
void fidl::internal::WireCodingTraits<::test_doccomments::wire::Table, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
    ::fidl::internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, ::fidl::internal::RecursionDepth<IsRecursive> recursion_depth) {
  ::fidl::internal::RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
  if (!inner_depth.IsValid()) {
    return;
  }

  ::fidl::internal::WirePosition vector_position;
  if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
    return;
  }

  fidl_vector_t* vec = position.As<fidl_vector_t>();
  for (size_t i = 0; i < vec->count; i++) {
    size_t decode_inline_size = 0;
    switch (i) {
      case 0:
        decode_inline_size = ::fidl::internal::WireCodingTraits<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
    }
    DecodeFn<IsRecursive> decode_fn = nullptr;
    switch (i) {
      case 0:
        decode_fn = ::fidl::internal::MakeDecodeFn<int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
    }
    ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
  }
}

template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::Table, ::fidl::internal::WireCodingConstraintEmpty, true>;
template struct ::fidl::internal::WireCodingTraits<::test_doccomments::wire::Table, ::fidl::internal::WireCodingConstraintEmpty, false>;

static_assert(std::is_standard_layout_v<::test_doccomments::wire::Table>);

#pragma clang diagnostic pop
