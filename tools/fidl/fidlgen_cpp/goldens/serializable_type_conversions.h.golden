// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.serializable/cpp/markers.h>
#include <fidl/test.serializable/cpp/natural_types.h>
#include <fidl/test.serializable/cpp/wire_types.h>
#ifdef __Fuchsia__
#include <fidl/test.serializable/cpp/natural_messaging.h>
#include <fidl/test.serializable/cpp/wire_messaging.h>

#endif  // __Fuchsia__
#include <lib/fidl/cpp/wire_natural_conversions.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace fidl {
namespace internal {

template <>
struct WireNaturalConversionTraits<::test_serializable::wire::SerializableStruct, ::test_serializable::SerializableStruct> {
  static ::test_serializable::SerializableStruct ToNatural(::test_serializable::wire::SerializableStruct src);
  static ::test_serializable::wire::SerializableStruct ToWire(fidl::AnyArena& arena, ::test_serializable::SerializableStruct src);
};

template <>
struct NaturalTypeForWireType<::test_serializable::wire::SerializableStruct> {
  using type = ::test_serializable::SerializableStruct;
};
template <>
struct WireTypeForNaturalType<::test_serializable::SerializableStruct> {
  using type = ::test_serializable::wire::SerializableStruct;
};

template <>
struct WireNaturalConversionTraits<::test_serializable::wire::SerializableTable, ::test_serializable::SerializableTable> {
  static ::test_serializable::SerializableTable ToNatural(::test_serializable::wire::SerializableTable src);
  static ::test_serializable::wire::SerializableTable ToWire(fidl::AnyArena& arena, ::test_serializable::SerializableTable src);
};

template <>
struct NaturalTypeForWireType<::test_serializable::wire::SerializableTable> {
  using type = ::test_serializable::SerializableTable;
};
template <>
struct WireTypeForNaturalType<::test_serializable::SerializableTable> {
  using type = ::test_serializable::wire::SerializableTable;
};

template <>
struct WireNaturalConversionTraits<::test_serializable::wire::SerializableUnion, ::test_serializable::SerializableUnion> {
  static ::test_serializable::SerializableUnion ToNatural(::test_serializable::wire::SerializableUnion src);
  static ::test_serializable::wire::SerializableUnion ToWire(fidl::AnyArena& arena, ::test_serializable::SerializableUnion src);
};

template <>
struct WireNaturalConversionTraits<::fidl::WireOptional<::test_serializable::wire::SerializableUnion>, std::unique_ptr<::test_serializable::SerializableUnion>> {
  static std::unique_ptr<::test_serializable::SerializableUnion> ToNatural(::fidl::WireOptional<::test_serializable::wire::SerializableUnion> src);
  static ::fidl::WireOptional<::test_serializable::wire::SerializableUnion> ToWire(fidl::AnyArena& arena, std::unique_ptr<::test_serializable::SerializableUnion> src);
};

template <>
struct NaturalTypeForWireType<::test_serializable::wire::SerializableUnion> {
  using type = ::test_serializable::SerializableUnion;
};
template <>
struct WireTypeForNaturalType<::test_serializable::SerializableUnion> {
  using type = ::test_serializable::wire::SerializableUnion;
};

#pragma clang diagnostic pop

}  // namespace internal
}  // namespace fidl
