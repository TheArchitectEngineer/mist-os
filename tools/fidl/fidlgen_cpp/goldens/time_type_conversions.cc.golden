// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.time/cpp/type_conversions.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace fidl {
namespace internal {

::test_time::AllInstants WireNaturalConversionTraits<::test_time::wire::AllInstants, ::test_time::AllInstants>::ToNatural(::test_time::wire::AllInstants src) {
  return ::test_time::AllInstants{{
      .monotonic = WireNaturalConversionTraits<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, ::fidl::basic_time<ZX_CLOCK_MONOTONIC>>::ToNatural(std::move(src.monotonic)),
      .boot = WireNaturalConversionTraits<::fidl::basic_time<ZX_CLOCK_BOOT>, ::fidl::basic_time<ZX_CLOCK_BOOT>>::ToNatural(std::move(src.boot)),
      .monotonic_ticks = WireNaturalConversionTraits<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, ::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>>::ToNatural(std::move(src.monotonic_ticks)),
      .boot_ticks = WireNaturalConversionTraits<::fidl::basic_ticks<ZX_CLOCK_BOOT>, ::fidl::basic_ticks<ZX_CLOCK_BOOT>>::ToNatural(std::move(src.boot_ticks)),
  }};
}
::test_time::wire::AllInstants WireNaturalConversionTraits<::test_time::wire::AllInstants, ::test_time::AllInstants>::ToWire(fidl::AnyArena& arena, ::test_time::AllInstants src) {
  return ::test_time::wire::AllInstants{
      .monotonic = WireNaturalConversionTraits<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, ::fidl::basic_time<ZX_CLOCK_MONOTONIC>>::ToWire(arena, std::move(src.monotonic())),
      .boot = WireNaturalConversionTraits<::fidl::basic_time<ZX_CLOCK_BOOT>, ::fidl::basic_time<ZX_CLOCK_BOOT>>::ToWire(arena, std::move(src.boot())),
      .monotonic_ticks = WireNaturalConversionTraits<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, ::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>>::ToWire(arena, std::move(src.monotonic_ticks())),
      .boot_ticks = WireNaturalConversionTraits<::fidl::basic_ticks<ZX_CLOCK_BOOT>, ::fidl::basic_ticks<ZX_CLOCK_BOOT>>::ToWire(arena, std::move(src.boot_ticks())),
  };
}
::test_time::ComplexInstants WireNaturalConversionTraits<::test_time::wire::ComplexInstants, ::test_time::ComplexInstants>::ToNatural(::test_time::wire::ComplexInstants src) {
  ::test_time::ComplexInstants dst;
  if (src.has_monotonic()) {
    dst.monotonic() =
        WireNaturalConversionTraits<::fidl::Array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>, ::std::array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>>::ToNatural(std::move(src.monotonic()));
  }
  if (src.has_boot()) {
    dst.boot() =
        WireNaturalConversionTraits<::fidl::VectorView<::fidl::basic_time<ZX_CLOCK_BOOT>>, ::std::vector<::fidl::basic_time<ZX_CLOCK_BOOT>>>::ToNatural(std::move(src.boot()));
  }
  if (src.has_monotonic_ticks()) {
    dst.monotonic_ticks() =
        WireNaturalConversionTraits<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>, ::std::array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>>::ToNatural(std::move(src.monotonic_ticks()));
  }
  if (src.has_boot_ticks()) {
    dst.boot_ticks() =
        WireNaturalConversionTraits<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>, ::std::array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>>::ToNatural(std::move(src.boot_ticks()));
  }

  return dst;
}
::test_time::wire::ComplexInstants WireNaturalConversionTraits<::test_time::wire::ComplexInstants, ::test_time::ComplexInstants>::ToWire(fidl::AnyArena& arena, ::test_time::ComplexInstants src) {
  auto builder = ::test_time::wire::ComplexInstants::Builder(arena);
  if (src.monotonic().has_value()) {
    builder.monotonic(
        WireNaturalConversionTraits<::fidl::Array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>, ::std::array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>>::ToWire(arena, std::move(src.monotonic().value())));
  }
  if (src.boot().has_value()) {
    builder.boot(
        WireNaturalConversionTraits<::fidl::VectorView<::fidl::basic_time<ZX_CLOCK_BOOT>>, ::std::vector<::fidl::basic_time<ZX_CLOCK_BOOT>>>::ToWire(arena, std::move(src.boot().value())));
  }
  if (src.monotonic_ticks().has_value()) {
    builder.monotonic_ticks(
        WireNaturalConversionTraits<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>, ::std::array<::fidl::basic_ticks<ZX_CLOCK_MONOTONIC>, 10>>::ToWire(arena, std::move(src.monotonic_ticks().value())));
  }
  if (src.boot_ticks().has_value()) {
    builder.boot_ticks(
        WireNaturalConversionTraits<::fidl::Array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>, ::std::array<::fidl::basic_ticks<ZX_CLOCK_BOOT>, 10>>::ToWire(arena, std::move(src.boot_ticks().value())));
  }
  return builder.Build();
}

#pragma clang diagnostic pop

}  // namespace internal
}  // namespace fidl
