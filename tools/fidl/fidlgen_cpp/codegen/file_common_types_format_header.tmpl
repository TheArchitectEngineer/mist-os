{{/*
// Copyright 2025 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "Filename:CommonTypesFormatHeader" -}}
  fidl/{{ .LibraryDots }}/cpp/common_types_format.h
{{- end }}

{{- define "File:CommonTypesFormatHeader" -}}
  {{- UseUnified -}}
  // WARNING: This file is machine generated by fidlgen.
  {{ range $experiment := .Experiments }}
  // fidl_experiment = {{ $experiment }}
  {{- end }}

  #pragma once

  #include <{{ .Library | Filename "CommonTypesHeader" }}>

  #if defined(__cpp_lib_format) && __cplusplus >= 202002L && defined(__Fuchsia__)
  #include <format>

  {{ EnsureNamespace "" }}
  {{- range .Bits }}
    template<>
    struct std::formatter<{{ . }}> {
      constexpr auto parse(auto& ctx) { return ctx.begin(); }
      auto format(const {{ . }}& value, std::format_context& ctx) const {
        auto out = ctx.out();
        out = std::format_to(out, "{{ .NoLeading }}(");
        bool first = true;

        {{- $bits := . -}}
        {{- range .Members }}
          if (value & {{ $bits }}::{{ . }}) {
            if (!first) *out++ = '|';
            first = false;
            out = std::format_to(out, "{{ . }}");
          }
        {{- end }}
        {{- if not .IsStrict }}
          if (value.has_unknown_bits()) {
            if (!first) *out++ = '|';
            {{- if or (eq .Type.String "uint8_t") ((eq .Type.String "int8_t")) }}
              out =  std::format_to(out, "{}", static_cast<int>(static_cast<{{ .Type }}>(value.unknown_bits())));
            {{- else }}
              out = std::format_to(out, "{}", static_cast<{{ .Type }}>(value.unknown_bits()));
            {{- end }}
          }
        {{- end }}
        *out++ = ')';
        return out;
      }
    };
  {{- end }}
  {{- range .Enums }}
    template<>
    struct std::formatter<{{ . }}> {
      constexpr auto parse(auto& ctx) { return ctx.begin(); }
      auto format(const {{ . }}& value, std::format_context& ctx) const {
        std::string_view output;
        switch (value) {
          {{- $enum := . -}}
          {{- range .Members }}
            case {{ $enum }}::{{ . }}:
              output =  "{{ . }}";
              break;
          {{- end }}
          default:
              output =  "UNKNOWN";
        }
        return std::format_to(ctx.out(), "{{ .NoLeading }}::{}", output);
      }
    };
  {{- end }}

  #endif
  {{ EndOfFile }}
{{- end }}
