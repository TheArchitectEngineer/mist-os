// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#![warn(clippy::all)]
#![allow(unused_parens, unused_mut, unused_imports, nonstandard_style)]

use bitflags::bitflags;
use fidl::encoding::{MessageBufFor, ProxyChannelBox, ResourceDialect};
use futures::future::{self, MaybeDone, TryFutureExt};
use zx_status;

pub const BASIC: &str = "'\"\\\n\r\t";

pub const DOLLAR: &str = "$";

pub const DOLLAR_BRACE: &str = "${";

pub const MAX: &str = "\u{10ffff}";

pub const NULL: &str = "\u{0}";

pub const SMILE_LEADING_ZERO: &str = "ðŸ˜€";

pub const SMILE_LITERAL: &str = "ðŸ˜€";

pub const SMILE_LOWER: &str = "ðŸ˜€";

pub const SMILE_UPPER: &str = "ðŸ˜€";

/// "pleaseescapethisdocommentproperly"
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct DocCommentWithQuotes;

impl fidl::Persistable for DocCommentWithQuotes {}

mod internal {
    use super::*;

    impl fidl::encoding::ValueTypeMarker for DocCommentWithQuotes {
        type Borrowed<'a> = &'a Self;
        fn borrow(value: &<Self as fidl::encoding::TypeMarker>::Owned) -> Self::Borrowed<'_> {
            value
        }
    }

    unsafe impl fidl::encoding::TypeMarker for DocCommentWithQuotes {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            1
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            1
        }
    }

    unsafe impl<D: fidl::encoding::ResourceDialect> fidl::encoding::Encode<DocCommentWithQuotes, D>
        for &DocCommentWithQuotes
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_, D>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<DocCommentWithQuotes>(offset);
            encoder.write_num(0u8, offset);
            Ok(())
        }
    }

    impl<D: fidl::encoding::ResourceDialect> fidl::encoding::Decode<Self, D> for DocCommentWithQuotes {
        #[inline(always)]
        fn new_empty() -> Self {
            Self
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_, D>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            match decoder.read_num::<u8>(offset) {
                0 => Ok(()),
                _ => Err(fidl::Error::Invalid),
            }
        }
    }
}
