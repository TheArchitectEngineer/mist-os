// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#![warn(clippy::all)]
#![allow(unused_parens, unused_mut, unused_imports, nonstandard_style)]

use bitflags::bitflags;
use fidl::client::QueryResponseFut;
use fidl::encoding::{MessageBufFor, ProxyChannelBox, ResourceDialect};
use fidl::endpoints::{ControlHandle as _, Responder as _};
pub use fidl_test_errorsyntax_common::*;
use futures::future::{self, MaybeDone, TryFutureExt};
use zx_status;

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct ExampleUseOfErrorSyntaxMarker;

impl fidl::endpoints::ProtocolMarker for ExampleUseOfErrorSyntaxMarker {
    type Proxy = ExampleUseOfErrorSyntaxProxy;
    type RequestStream = ExampleUseOfErrorSyntaxRequestStream;
    #[cfg(target_os = "fuchsia")]
    type SynchronousProxy = ExampleUseOfErrorSyntaxSynchronousProxy;

    const DEBUG_NAME: &'static str = "(anonymous) ExampleUseOfErrorSyntax";
}
pub type ExampleUseOfErrorSyntaxCallWhichMayFailResult = Result<i64, u32>;

pub trait ExampleUseOfErrorSyntaxProxyInterface: Send + Sync {
    type ComposedCallWhichMayFailResponseFut: std::future::Future<
            Output = Result<
                fidl_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailResult,
                fidl::Error,
            >,
        > + Send;
    fn r#composed_call_which_may_fail(&self, s: &str) -> Self::ComposedCallWhichMayFailResponseFut;
    type CallWhichMayFailResponseFut: std::future::Future<
            Output = Result<ExampleUseOfErrorSyntaxCallWhichMayFailResult, fidl::Error>,
        > + Send;
    fn r#call_which_may_fail(&self, s: &str) -> Self::CallWhichMayFailResponseFut;
}
#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct ExampleUseOfErrorSyntaxSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl fidl::endpoints::SynchronousProxy for ExampleUseOfErrorSyntaxSynchronousProxy {
    type Proxy = ExampleUseOfErrorSyntaxProxy;
    type Protocol = ExampleUseOfErrorSyntaxMarker;

    fn from_channel(inner: fidl::Channel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    fn as_channel(&self) -> &fidl::Channel {
        self.client.as_channel()
    }
}

#[cfg(target_os = "fuchsia")]
impl ExampleUseOfErrorSyntaxSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name =
            <ExampleUseOfErrorSyntaxMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::MonotonicInstant,
    ) -> Result<ExampleUseOfErrorSyntaxEvent, fidl::Error> {
        ExampleUseOfErrorSyntaxEvent::decode(self.client.wait_for_event(deadline)?)
    }

    pub fn r#composed_call_which_may_fail(
        &self,
        mut s: &str,
        ___deadline: zx::MonotonicInstant,
    ) -> Result<
        fidl_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailResult,
        fidl::Error,
    > {
        let _response = self.client.send_query::<
            fidl_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailRequest,
            fidl::encoding::ResultType<fidl_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailResponse, u32>,
        >(
            (s,),
            0x3179cf8f46814221,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x.value))
    }

    pub fn r#call_which_may_fail(
        &self,
        mut s: &str,
        ___deadline: zx::MonotonicInstant,
    ) -> Result<ExampleUseOfErrorSyntaxCallWhichMayFailResult, fidl::Error> {
        let _response = self.client.send_query::<
            ExampleUseOfErrorSyntaxCallWhichMayFailRequest,
            fidl::encoding::ResultType<ExampleUseOfErrorSyntaxCallWhichMayFailResponse, u32>,
        >(
            (s,),
            0x3424ff83ce3004a2,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.map(|x| x.value))
    }
}

#[derive(Debug, Clone)]
pub struct ExampleUseOfErrorSyntaxProxy {
    client: fidl::client::Client<fidl::encoding::DefaultFuchsiaResourceDialect>,
}

impl fidl::endpoints::Proxy for ExampleUseOfErrorSyntaxProxy {
    type Protocol = ExampleUseOfErrorSyntaxMarker;

    fn from_channel(inner: ::fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl ExampleUseOfErrorSyntaxProxy {
    /// Create a new Proxy for test.errorsyntax/ExampleUseOfErrorSyntax.
    pub fn new(channel: ::fidl::AsyncChannel) -> Self {
        let protocol_name =
            <ExampleUseOfErrorSyntaxMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the protocol.
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> ExampleUseOfErrorSyntaxEventStream {
        ExampleUseOfErrorSyntaxEventStream { event_receiver: self.client.take_event_receiver() }
    }

    pub fn r#composed_call_which_may_fail(
        &self,
        mut s: &str,
    ) -> fidl::client::QueryResponseFut<
        fidl_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailResult,
        fidl::encoding::DefaultFuchsiaResourceDialect,
    > {
        ExampleUseOfErrorSyntaxProxyInterface::r#composed_call_which_may_fail(self, s)
    }

    pub fn r#call_which_may_fail(
        &self,
        mut s: &str,
    ) -> fidl::client::QueryResponseFut<
        ExampleUseOfErrorSyntaxCallWhichMayFailResult,
        fidl::encoding::DefaultFuchsiaResourceDialect,
    > {
        ExampleUseOfErrorSyntaxProxyInterface::r#call_which_may_fail(self, s)
    }
}

impl ExampleUseOfErrorSyntaxProxyInterface for ExampleUseOfErrorSyntaxProxy {
    type ComposedCallWhichMayFailResponseFut = fidl::client::QueryResponseFut<
        fidl_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailResult,
        fidl::encoding::DefaultFuchsiaResourceDialect,
    >;
    fn r#composed_call_which_may_fail(
        &self,
        mut s: &str,
    ) -> Self::ComposedCallWhichMayFailResponseFut {
        fn _decode(
            mut _buf: Result<<fidl::encoding::DefaultFuchsiaResourceDialect as fidl::encoding::ResourceDialect>::MessageBufEtc, fidl::Error>,
        ) -> Result<
            fidl_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailResult,
            fidl::Error,
        > {
            let _response = fidl::client::decode_transaction_body::<fidl::encoding::ResultType<fidl_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailResponse, u32>, fidl::encoding::DefaultFuchsiaResourceDialect, 0x3179cf8f46814221>(_buf?)?;
            Ok(_response.map(|x| x.value))
        }
        self.client.send_query_and_decode::<
            fidl_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailRequest,
            fidl_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailResult,
        >(
            (s,),
            0x3179cf8f46814221,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }

    type CallWhichMayFailResponseFut = fidl::client::QueryResponseFut<
        ExampleUseOfErrorSyntaxCallWhichMayFailResult,
        fidl::encoding::DefaultFuchsiaResourceDialect,
    >;
    fn r#call_which_may_fail(&self, mut s: &str) -> Self::CallWhichMayFailResponseFut {
        fn _decode(
            mut _buf: Result<<fidl::encoding::DefaultFuchsiaResourceDialect as fidl::encoding::ResourceDialect>::MessageBufEtc, fidl::Error>,
        ) -> Result<ExampleUseOfErrorSyntaxCallWhichMayFailResult, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                fidl::encoding::ResultType<ExampleUseOfErrorSyntaxCallWhichMayFailResponse, u32>,
                fidl::encoding::DefaultFuchsiaResourceDialect,
                0x3424ff83ce3004a2,
            >(_buf?)?;
            Ok(_response.map(|x| x.value))
        }
        self.client.send_query_and_decode::<
            ExampleUseOfErrorSyntaxCallWhichMayFailRequest,
            ExampleUseOfErrorSyntaxCallWhichMayFailResult,
        >(
            (s,),
            0x3424ff83ce3004a2,
            fidl::encoding::DynamicFlags::empty(),
            _decode,
        )
    }
}

pub struct ExampleUseOfErrorSyntaxEventStream {
    event_receiver: fidl::client::EventReceiver<fidl::encoding::DefaultFuchsiaResourceDialect>,
}

impl std::marker::Unpin for ExampleUseOfErrorSyntaxEventStream {}

impl futures::stream::FusedStream for ExampleUseOfErrorSyntaxEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for ExampleUseOfErrorSyntaxEventStream {
    type Item = Result<ExampleUseOfErrorSyntaxEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => std::task::Poll::Ready(Some(ExampleUseOfErrorSyntaxEvent::decode(buf))),
            None => std::task::Poll::Ready(None),
        }
    }
}

#[derive(Debug)]
pub enum ExampleUseOfErrorSyntaxEvent {}

impl ExampleUseOfErrorSyntaxEvent {
    /// Decodes a message buffer as a [`ExampleUseOfErrorSyntaxEvent`].
    fn decode(
        mut buf: <fidl::encoding::DefaultFuchsiaResourceDialect as fidl::encoding::ResourceDialect>::MessageBufEtc,
    ) -> Result<ExampleUseOfErrorSyntaxEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
        debug_assert_eq!(tx_header.tx_id, 0);
        match tx_header.ordinal {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal,
                protocol_name:
                    <ExampleUseOfErrorSyntaxMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for test.errorsyntax/ExampleUseOfErrorSyntax.
pub struct ExampleUseOfErrorSyntaxRequestStream {
    inner: std::sync::Arc<fidl::ServeInner<fidl::encoding::DefaultFuchsiaResourceDialect>>,
    is_terminated: bool,
}

impl std::marker::Unpin for ExampleUseOfErrorSyntaxRequestStream {}

impl futures::stream::FusedStream for ExampleUseOfErrorSyntaxRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for ExampleUseOfErrorSyntaxRequestStream {
    type Protocol = ExampleUseOfErrorSyntaxMarker;
    type ControlHandle = ExampleUseOfErrorSyntaxControlHandle;

    fn from_channel(channel: ::fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        ExampleUseOfErrorSyntaxControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(
        self,
    ) -> (::std::sync::Arc<fidl::ServeInner<fidl::encoding::DefaultFuchsiaResourceDialect>>, bool)
    {
        (self.inner, self.is_terminated)
    }

    fn from_inner(
        inner: std::sync::Arc<fidl::ServeInner<fidl::encoding::DefaultFuchsiaResourceDialect>>,
        is_terminated: bool,
    ) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for ExampleUseOfErrorSyntaxRequestStream {
    type Item = Result<ExampleUseOfErrorSyntaxRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.check_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled ExampleUseOfErrorSyntaxRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf::<_, fidl::encoding::DefaultFuchsiaResourceDialect>(
            |bytes, handles| {
                match this.inner.channel().read_etc(cx, bytes, handles) {
                    std::task::Poll::Ready(Ok(())) => {}
                    std::task::Poll::Pending => return std::task::Poll::Pending,
                    std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                        this.is_terminated = true;
                        return std::task::Poll::Ready(None);
                    }
                    std::task::Poll::Ready(Err(e)) => {
                        return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(
                            e.into(),
                        ))))
                    }
                }

                // A message has been received from the channel
                let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

                std::task::Poll::Ready(Some(match header.ordinal {
                0x3179cf8f46814221 => {
                    header.validate_request_tx_id(fidl::MethodType::TwoWay)?;
                    let mut req = fidl::new_empty!(fidl_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailRequest, fidl::encoding::DefaultFuchsiaResourceDialect);
                    fidl::encoding::Decoder::<fidl::encoding::DefaultFuchsiaResourceDialect>::decode_into::<fidl_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailRequest>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = ExampleUseOfErrorSyntaxControlHandle {
                        inner: this.inner.clone(),
                    };
                    Ok(ExampleUseOfErrorSyntaxRequest::ComposedCallWhichMayFail {s: req.s,

                        responder: ExampleUseOfErrorSyntaxComposedCallWhichMayFailResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id,
                        },
                    })
                }
                0x3424ff83ce3004a2 => {
                    header.validate_request_tx_id(fidl::MethodType::TwoWay)?;
                    let mut req = fidl::new_empty!(ExampleUseOfErrorSyntaxCallWhichMayFailRequest, fidl::encoding::DefaultFuchsiaResourceDialect);
                    fidl::encoding::Decoder::<fidl::encoding::DefaultFuchsiaResourceDialect>::decode_into::<ExampleUseOfErrorSyntaxCallWhichMayFailRequest>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = ExampleUseOfErrorSyntaxControlHandle {
                        inner: this.inner.clone(),
                    };
                    Ok(ExampleUseOfErrorSyntaxRequest::CallWhichMayFail {s: req.s,

                        responder: ExampleUseOfErrorSyntaxCallWhichMayFailResponder {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id,
                        },
                    })
                }
                _ => Err(fidl::Error::UnknownOrdinal {
                    ordinal: header.ordinal,
                    protocol_name: <ExampleUseOfErrorSyntaxMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
            },
        )
    }
}

#[derive(Debug)]
pub enum ExampleUseOfErrorSyntaxRequest {
    ComposedCallWhichMayFail {
        s: String,
        responder: ExampleUseOfErrorSyntaxComposedCallWhichMayFailResponder,
    },
    CallWhichMayFail {
        s: String,
        responder: ExampleUseOfErrorSyntaxCallWhichMayFailResponder,
    },
}

impl ExampleUseOfErrorSyntaxRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_composed_call_which_may_fail(
        self,
    ) -> Option<(String, ExampleUseOfErrorSyntaxComposedCallWhichMayFailResponder)> {
        if let ExampleUseOfErrorSyntaxRequest::ComposedCallWhichMayFail { s, responder } = self {
            Some((s, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_call_which_may_fail(
        self,
    ) -> Option<(String, ExampleUseOfErrorSyntaxCallWhichMayFailResponder)> {
        if let ExampleUseOfErrorSyntaxRequest::CallWhichMayFail { s, responder } = self {
            Some((s, responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            ExampleUseOfErrorSyntaxRequest::ComposedCallWhichMayFail { .. } => {
                "composed_call_which_may_fail"
            }
            ExampleUseOfErrorSyntaxRequest::CallWhichMayFail { .. } => "call_which_may_fail",
        }
    }
}

#[derive(Debug, Clone)]
pub struct ExampleUseOfErrorSyntaxControlHandle {
    inner: std::sync::Arc<fidl::ServeInner<fidl::encoding::DefaultFuchsiaResourceDialect>>,
}

impl fidl::endpoints::ControlHandle for ExampleUseOfErrorSyntaxControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }
    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }
    fn on_closed(&self) -> fidl::OnSignalsRef<'_> {
        self.inner.channel().on_closed()
    }

    #[cfg(target_os = "fuchsia")]
    fn signal_peer(
        &self,
        clear_mask: zx::Signals,
        set_mask: zx::Signals,
    ) -> Result<(), zx_status::Status> {
        use fidl::Peered;
        self.inner.channel().signal_peer(clear_mask, set_mask)
    }
}

impl ExampleUseOfErrorSyntaxControlHandle {}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct ExampleUseOfErrorSyntaxComposedCallWhichMayFailResponder {
    control_handle: std::mem::ManuallyDrop<ExampleUseOfErrorSyntaxControlHandle>,
    tx_id: u32,
}

/// Set the the channel to be shutdown (see [`ExampleUseOfErrorSyntaxControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for ExampleUseOfErrorSyntaxComposedCallWhichMayFailResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for ExampleUseOfErrorSyntaxComposedCallWhichMayFailResponder {
    type ControlHandle = ExampleUseOfErrorSyntaxControlHandle;

    fn control_handle(&self) -> &ExampleUseOfErrorSyntaxControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl ExampleUseOfErrorSyntaxComposedCallWhichMayFailResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<i64, u32>) -> Result<(), fidl::Error> {
        let _result = self.send_raw(result);
        if _result.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        _result
    }

    /// Similar to "send" but does not shutdown the channel if an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<i64, u32>) -> Result<(), fidl::Error> {
        let _result = self.send_raw(result);
        self.drop_without_shutdown();
        _result
    }

    fn send_raw(&self, mut result: Result<i64, u32>) -> Result<(), fidl::Error> {
        self.control_handle.inner.send::<fidl::encoding::ResultType<
            fidl_test_errorsyntax_parent::ParentUsesErrorSyntaxComposedCallWhichMayFailResponse,
            u32,
        >>(
            result.map(|value| (value,)),
            self.tx_id,
            0x3179cf8f46814221,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct ExampleUseOfErrorSyntaxCallWhichMayFailResponder {
    control_handle: std::mem::ManuallyDrop<ExampleUseOfErrorSyntaxControlHandle>,
    tx_id: u32,
}

/// Set the the channel to be shutdown (see [`ExampleUseOfErrorSyntaxControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for ExampleUseOfErrorSyntaxCallWhichMayFailResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for ExampleUseOfErrorSyntaxCallWhichMayFailResponder {
    type ControlHandle = ExampleUseOfErrorSyntaxControlHandle;

    fn control_handle(&self) -> &ExampleUseOfErrorSyntaxControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl ExampleUseOfErrorSyntaxCallWhichMayFailResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut result: Result<i64, u32>) -> Result<(), fidl::Error> {
        let _result = self.send_raw(result);
        if _result.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        _result
    }

    /// Similar to "send" but does not shutdown the channel if an error occurs.
    pub fn send_no_shutdown_on_err(self, mut result: Result<i64, u32>) -> Result<(), fidl::Error> {
        let _result = self.send_raw(result);
        self.drop_without_shutdown();
        _result
    }

    fn send_raw(&self, mut result: Result<i64, u32>) -> Result<(), fidl::Error> {
        self.control_handle.inner.send::<fidl::encoding::ResultType<
            ExampleUseOfErrorSyntaxCallWhichMayFailResponse,
            u32,
        >>(
            result.map(|value| (value,)),
            self.tx_id,
            0x3424ff83ce3004a2,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

mod internal {
    use super::*;
}
