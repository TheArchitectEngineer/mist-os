// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#![warn(clippy::all)]
#![allow(unused_parens, unused_mut, unused_imports, nonstandard_style)]

use bitflags::bitflags;
use fidl::client::QueryResponseFut;
use fidl::encoding::{MessageBufFor, ProxyChannelBox, ResourceDialect};
use fidl::endpoints::{ControlHandle as _, Responder as _};
pub use fidl_test_aliases_common::*;
use futures::future::{self, MaybeDone, TryFutureExt};
use zx_status;

pub type AliasOfChannel = fidl::Channel;

pub type Channel = fidl::Channel;

#[derive(Debug, PartialEq)]
pub struct ExampleOfUseOfAliases {
    pub field_of_u32: u32,
    pub field_of_vec_of_strings: Vec<String>,
    pub field_of_vec_of_strings_at_most_nine: Vec<String>,
    pub field_of_vec_of_strings_at_most_5: Vec<String>,
    pub field_of_vec_of_ref_me_at_most_5: Vec<fidl_test_someotherlibrary::ReferenceMe>,
    pub field_of_channel: fidl::Channel,
    pub field_of_client_end: fidl::Channel,
    pub field_of_nullable_client_end: Option<fidl::Channel>,
}

impl fidl::Standalone<fidl::encoding::DefaultFuchsiaResourceDialect> for ExampleOfUseOfAliases {}

mod internal {
    use super::*;

    impl fidl::encoding::ResourceTypeMarker for ExampleOfUseOfAliases {
        type Borrowed<'a> = &'a mut Self;
        fn take_or_borrow<'a>(
            value: &'a mut <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::TypeMarker for ExampleOfUseOfAliases {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            88
        }
    }

    unsafe impl
        fidl::encoding::Encode<ExampleOfUseOfAliases, fidl::encoding::DefaultFuchsiaResourceDialect>
        for &mut ExampleOfUseOfAliases
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<
                '_,
                fidl::encoding::DefaultFuchsiaResourceDialect,
            >,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<ExampleOfUseOfAliases>(offset);
            // Delegate to tuple encoding.
            fidl::encoding::Encode::<ExampleOfUseOfAliases, fidl::encoding::DefaultFuchsiaResourceDialect>::encode(
                (
                    <u32 as fidl::encoding::ValueTypeMarker>::borrow(&self.field_of_u32),
                    <fidl::encoding::UnboundedVector<fidl::encoding::UnboundedString> as fidl::encoding::ValueTypeMarker>::borrow(&self.field_of_vec_of_strings),
                    <fidl::encoding::Vector<fidl::encoding::UnboundedString, 9> as fidl::encoding::ValueTypeMarker>::borrow(&self.field_of_vec_of_strings_at_most_nine),
                    <fidl::encoding::Vector<fidl::encoding::UnboundedString, 5> as fidl::encoding::ValueTypeMarker>::borrow(&self.field_of_vec_of_strings_at_most_5),
                    <fidl::encoding::Vector<fidl_test_someotherlibrary::ReferenceMe, 5> as fidl::encoding::ValueTypeMarker>::borrow(&self.field_of_vec_of_ref_me_at_most_5),
                    <fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648> as fidl::encoding::ResourceTypeMarker>::take_or_borrow(&mut self.field_of_channel),
                    <fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648> as fidl::encoding::ResourceTypeMarker>::take_or_borrow(&mut self.field_of_client_end),
                    <fidl::encoding::Optional<fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648>> as fidl::encoding::ResourceTypeMarker>::take_or_borrow(&mut self.field_of_nullable_client_end),
                ),
                encoder, offset, _depth
            )
        }
    }
    unsafe impl<
            T0: fidl::encoding::Encode<u32, fidl::encoding::DefaultFuchsiaResourceDialect>,
            T1: fidl::encoding::Encode<
                fidl::encoding::UnboundedVector<fidl::encoding::UnboundedString>,
                fidl::encoding::DefaultFuchsiaResourceDialect,
            >,
            T2: fidl::encoding::Encode<
                fidl::encoding::Vector<fidl::encoding::UnboundedString, 9>,
                fidl::encoding::DefaultFuchsiaResourceDialect,
            >,
            T3: fidl::encoding::Encode<
                fidl::encoding::Vector<fidl::encoding::UnboundedString, 5>,
                fidl::encoding::DefaultFuchsiaResourceDialect,
            >,
            T4: fidl::encoding::Encode<
                fidl::encoding::Vector<fidl_test_someotherlibrary::ReferenceMe, 5>,
                fidl::encoding::DefaultFuchsiaResourceDialect,
            >,
            T5: fidl::encoding::Encode<
                fidl::encoding::HandleType<
                    fidl::Channel,
                    { fidl::ObjectType::CHANNEL.into_raw() },
                    2147483648,
                >,
                fidl::encoding::DefaultFuchsiaResourceDialect,
            >,
            T6: fidl::encoding::Encode<
                fidl::encoding::HandleType<
                    fidl::Channel,
                    { fidl::ObjectType::CHANNEL.into_raw() },
                    2147483648,
                >,
                fidl::encoding::DefaultFuchsiaResourceDialect,
            >,
            T7: fidl::encoding::Encode<
                fidl::encoding::Optional<
                    fidl::encoding::HandleType<
                        fidl::Channel,
                        { fidl::ObjectType::CHANNEL.into_raw() },
                        2147483648,
                    >,
                >,
                fidl::encoding::DefaultFuchsiaResourceDialect,
            >,
        >
        fidl::encoding::Encode<ExampleOfUseOfAliases, fidl::encoding::DefaultFuchsiaResourceDialect>
        for (T0, T1, T2, T3, T4, T5, T6, T7)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<
                '_,
                fidl::encoding::DefaultFuchsiaResourceDialect,
            >,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<ExampleOfUseOfAliases>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            unsafe {
                let ptr = encoder.buf.as_mut_ptr().add(offset).offset(0);
                (ptr as *mut u64).write_unaligned(0);
            }
            unsafe {
                let ptr = encoder.buf.as_mut_ptr().add(offset).offset(80);
                (ptr as *mut u64).write_unaligned(0);
            }
            // Write the fields.
            self.0.encode(encoder, offset + 0, depth)?;
            self.1.encode(encoder, offset + 8, depth)?;
            self.2.encode(encoder, offset + 24, depth)?;
            self.3.encode(encoder, offset + 40, depth)?;
            self.4.encode(encoder, offset + 56, depth)?;
            self.5.encode(encoder, offset + 72, depth)?;
            self.6.encode(encoder, offset + 76, depth)?;
            self.7.encode(encoder, offset + 80, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self, fidl::encoding::DefaultFuchsiaResourceDialect>
        for ExampleOfUseOfAliases
    {
        #[inline(always)]
        fn new_empty() -> Self {
            Self {
                field_of_u32: fidl::new_empty!(u32, fidl::encoding::DefaultFuchsiaResourceDialect),
                field_of_vec_of_strings: fidl::new_empty!(
                    fidl::encoding::UnboundedVector<fidl::encoding::UnboundedString>,
                    fidl::encoding::DefaultFuchsiaResourceDialect
                ),
                field_of_vec_of_strings_at_most_nine: fidl::new_empty!(fidl::encoding::Vector<fidl::encoding::UnboundedString, 9>, fidl::encoding::DefaultFuchsiaResourceDialect),
                field_of_vec_of_strings_at_most_5: fidl::new_empty!(fidl::encoding::Vector<fidl::encoding::UnboundedString, 5>, fidl::encoding::DefaultFuchsiaResourceDialect),
                field_of_vec_of_ref_me_at_most_5: fidl::new_empty!(fidl::encoding::Vector<fidl_test_someotherlibrary::ReferenceMe, 5>, fidl::encoding::DefaultFuchsiaResourceDialect),
                field_of_channel: fidl::new_empty!(fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648>, fidl::encoding::DefaultFuchsiaResourceDialect),
                field_of_client_end: fidl::new_empty!(fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648>, fidl::encoding::DefaultFuchsiaResourceDialect),
                field_of_nullable_client_end: fidl::new_empty!(
                    fidl::encoding::Optional<
                        fidl::encoding::HandleType<
                            fidl::Channel,
                            { fidl::ObjectType::CHANNEL.into_raw() },
                            2147483648,
                        >,
                    >,
                    fidl::encoding::DefaultFuchsiaResourceDialect
                ),
            }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<
                '_,
                fidl::encoding::DefaultFuchsiaResourceDialect,
            >,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            // Verify that padding bytes are zero.
            let ptr = unsafe { decoder.buf.as_ptr().add(offset).offset(0) };
            let padval = unsafe { (ptr as *const u64).read_unaligned() };
            let mask = 0xffffffff00000000u64;
            let maskedval = padval & mask;
            if maskedval != 0 {
                return Err(fidl::Error::NonZeroPadding {
                    padding_start: offset + 0 + ((mask as u64).trailing_zeros() / 8) as usize,
                });
            }
            let ptr = unsafe { decoder.buf.as_ptr().add(offset).offset(80) };
            let padval = unsafe { (ptr as *const u64).read_unaligned() };
            let mask = 0xffffffff00000000u64;
            let maskedval = padval & mask;
            if maskedval != 0 {
                return Err(fidl::Error::NonZeroPadding {
                    padding_start: offset + 80 + ((mask as u64).trailing_zeros() / 8) as usize,
                });
            }
            fidl::decode!(
                u32,
                fidl::encoding::DefaultFuchsiaResourceDialect,
                &mut self.field_of_u32,
                decoder,
                offset + 0,
                _depth
            )?;
            fidl::decode!(
                fidl::encoding::UnboundedVector<fidl::encoding::UnboundedString>,
                fidl::encoding::DefaultFuchsiaResourceDialect,
                &mut self.field_of_vec_of_strings,
                decoder,
                offset + 8,
                _depth
            )?;
            fidl::decode!(fidl::encoding::Vector<fidl::encoding::UnboundedString, 9>, fidl::encoding::DefaultFuchsiaResourceDialect, &mut self.field_of_vec_of_strings_at_most_nine, decoder, offset + 24, _depth)?;
            fidl::decode!(fidl::encoding::Vector<fidl::encoding::UnboundedString, 5>, fidl::encoding::DefaultFuchsiaResourceDialect, &mut self.field_of_vec_of_strings_at_most_5, decoder, offset + 40, _depth)?;
            fidl::decode!(fidl::encoding::Vector<fidl_test_someotherlibrary::ReferenceMe, 5>, fidl::encoding::DefaultFuchsiaResourceDialect, &mut self.field_of_vec_of_ref_me_at_most_5, decoder, offset + 56, _depth)?;
            fidl::decode!(fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648>, fidl::encoding::DefaultFuchsiaResourceDialect, &mut self.field_of_channel, decoder, offset + 72, _depth)?;
            fidl::decode!(fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648>, fidl::encoding::DefaultFuchsiaResourceDialect, &mut self.field_of_client_end, decoder, offset + 76, _depth)?;
            fidl::decode!(
                fidl::encoding::Optional<
                    fidl::encoding::HandleType<
                        fidl::Channel,
                        { fidl::ObjectType::CHANNEL.into_raw() },
                        2147483648,
                    >,
                >,
                fidl::encoding::DefaultFuchsiaResourceDialect,
                &mut self.field_of_nullable_client_end,
                decoder,
                offset + 80,
                _depth
            )?;
            Ok(())
        }
    }
}
