// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#![warn(clippy::all)]
#![allow(unused_parens, unused_mut, unused_imports, nonstandard_style)]

use bitflags::bitflags;
use fidl::client::QueryResponseFut;
use fidl::encoding::{MessageBufFor, ProxyChannelBox, ResourceDialect};
use fidl::endpoints::{ControlHandle as _, Responder as _};
pub use fidl_test_requestflexibleenvelope_common::*;
use futures::future::{self, MaybeDone, TryFutureExt};
use zx_status;

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct ProtocolMarker;

impl fidl::endpoints::ProtocolMarker for ProtocolMarker {
    type Proxy = ProtocolProxy;
    type RequestStream = ProtocolRequestStream;
    #[cfg(target_os = "fuchsia")]
    type SynchronousProxy = ProtocolSynchronousProxy;

    const DEBUG_NAME: &'static str = "(anonymous) Protocol";
}

pub trait ProtocolProxyInterface: Send + Sync {
    type RequestStrictResponseFlexibleResponseFut: std::future::Future<Output = Result<FlexibleFoo, fidl::Error>>
        + Send;
    fn r#request_strict_response_flexible(
        &self,
        s: &StrictFoo,
    ) -> Self::RequestStrictResponseFlexibleResponseFut;
    type RequestFlexibleResponseStrictResponseFut: std::future::Future<Output = Result<StrictFoo, fidl::Error>>
        + Send;
    fn r#request_flexible_response_strict(
        &self,
        s: &FlexibleFoo,
    ) -> Self::RequestFlexibleResponseStrictResponseFut;
}
#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct ProtocolSynchronousProxy {
    client: fidl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl fidl::endpoints::SynchronousProxy for ProtocolSynchronousProxy {
    type Proxy = ProtocolProxy;
    type Protocol = ProtocolMarker;

    fn from_channel(inner: fidl::Channel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    fn as_channel(&self) -> &fidl::Channel {
        self.client.as_channel()
    }
}

#[cfg(target_os = "fuchsia")]
impl ProtocolSynchronousProxy {
    pub fn new(channel: fidl::Channel) -> Self {
        let protocol_name = <ProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> fidl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(
        &self,
        deadline: zx::MonotonicInstant,
    ) -> Result<ProtocolEvent, fidl::Error> {
        ProtocolEvent::decode(self.client.wait_for_event(deadline)?)
    }

    pub fn r#request_strict_response_flexible(
        &self,
        mut s: &StrictFoo,
        ___deadline: zx::MonotonicInstant,
    ) -> Result<FlexibleFoo, fidl::Error> {
        let _response = self.client.send_query::<
            ProtocolRequestStrictResponseFlexibleRequest,
            ProtocolRequestStrictResponseFlexibleResponse,
        >(
            (s,),
            0x9b8c7d3d118df13,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.f)
    }

    pub fn r#request_flexible_response_strict(
        &self,
        mut s: &FlexibleFoo,
        ___deadline: zx::MonotonicInstant,
    ) -> Result<StrictFoo, fidl::Error> {
        let _response = self.client.send_query::<
            ProtocolRequestFlexibleResponseStrictRequest,
            ProtocolRequestFlexibleResponseStrictResponse,
        >(
            (s,),
            0x480c77690533acb7,
            fidl::encoding::DynamicFlags::empty(),
            ___deadline,
        )?;
        Ok(_response.f)
    }
}

#[derive(Debug, Clone)]
pub struct ProtocolProxy {
    client: fidl::client::Client<fidl::encoding::DefaultFuchsiaResourceDialect>,
}

impl fidl::endpoints::Proxy for ProtocolProxy {
    type Protocol = ProtocolMarker;

    fn from_channel(inner: ::fidl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::fidl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::fidl::AsyncChannel {
        self.client.as_channel()
    }
}

impl ProtocolProxy {
    /// Create a new Proxy for test.requestflexibleenvelope/Protocol.
    pub fn new(channel: ::fidl::AsyncChannel) -> Self {
        let protocol_name = <ProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: fidl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the protocol.
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> ProtocolEventStream {
        ProtocolEventStream { event_receiver: self.client.take_event_receiver() }
    }

    pub fn r#request_strict_response_flexible(
        &self,
        mut s: &StrictFoo,
    ) -> fidl::client::QueryResponseFut<FlexibleFoo, fidl::encoding::DefaultFuchsiaResourceDialect>
    {
        ProtocolProxyInterface::r#request_strict_response_flexible(self, s)
    }

    pub fn r#request_flexible_response_strict(
        &self,
        mut s: &FlexibleFoo,
    ) -> fidl::client::QueryResponseFut<StrictFoo, fidl::encoding::DefaultFuchsiaResourceDialect>
    {
        ProtocolProxyInterface::r#request_flexible_response_strict(self, s)
    }
}

impl ProtocolProxyInterface for ProtocolProxy {
    type RequestStrictResponseFlexibleResponseFut =
        fidl::client::QueryResponseFut<FlexibleFoo, fidl::encoding::DefaultFuchsiaResourceDialect>;
    fn r#request_strict_response_flexible(
        &self,
        mut s: &StrictFoo,
    ) -> Self::RequestStrictResponseFlexibleResponseFut {
        fn _decode(
            mut _buf: Result<<fidl::encoding::DefaultFuchsiaResourceDialect as fidl::encoding::ResourceDialect>::MessageBufEtc, fidl::Error>,
        ) -> Result<FlexibleFoo, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                ProtocolRequestStrictResponseFlexibleResponse,
                fidl::encoding::DefaultFuchsiaResourceDialect,
                0x9b8c7d3d118df13,
            >(_buf?)?;
            Ok(_response.f)
        }
        self.client
            .send_query_and_decode::<ProtocolRequestStrictResponseFlexibleRequest, FlexibleFoo>(
                (s,),
                0x9b8c7d3d118df13,
                fidl::encoding::DynamicFlags::empty(),
                _decode,
            )
    }

    type RequestFlexibleResponseStrictResponseFut =
        fidl::client::QueryResponseFut<StrictFoo, fidl::encoding::DefaultFuchsiaResourceDialect>;
    fn r#request_flexible_response_strict(
        &self,
        mut s: &FlexibleFoo,
    ) -> Self::RequestFlexibleResponseStrictResponseFut {
        fn _decode(
            mut _buf: Result<<fidl::encoding::DefaultFuchsiaResourceDialect as fidl::encoding::ResourceDialect>::MessageBufEtc, fidl::Error>,
        ) -> Result<StrictFoo, fidl::Error> {
            let _response = fidl::client::decode_transaction_body::<
                ProtocolRequestFlexibleResponseStrictResponse,
                fidl::encoding::DefaultFuchsiaResourceDialect,
                0x480c77690533acb7,
            >(_buf?)?;
            Ok(_response.f)
        }
        self.client
            .send_query_and_decode::<ProtocolRequestFlexibleResponseStrictRequest, StrictFoo>(
                (s,),
                0x480c77690533acb7,
                fidl::encoding::DynamicFlags::empty(),
                _decode,
            )
    }
}

pub struct ProtocolEventStream {
    event_receiver: fidl::client::EventReceiver<fidl::encoding::DefaultFuchsiaResourceDialect>,
}

impl std::marker::Unpin for ProtocolEventStream {}

impl futures::stream::FusedStream for ProtocolEventStream {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for ProtocolEventStream {
    type Item = Result<ProtocolEvent, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        match futures::ready!(futures::stream::StreamExt::poll_next_unpin(
            &mut self.event_receiver,
            cx
        )?) {
            Some(buf) => std::task::Poll::Ready(Some(ProtocolEvent::decode(buf))),
            None => std::task::Poll::Ready(None),
        }
    }
}

#[derive(Debug)]
pub enum ProtocolEvent {}

impl ProtocolEvent {
    /// Decodes a message buffer as a [`ProtocolEvent`].
    fn decode(
        mut buf: <fidl::encoding::DefaultFuchsiaResourceDialect as fidl::encoding::ResourceDialect>::MessageBufEtc,
    ) -> Result<ProtocolEvent, fidl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;
        debug_assert_eq!(tx_header.tx_id, 0);
        match tx_header.ordinal {
            _ => Err(fidl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal,
                protocol_name: <ProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
            }),
        }
    }
}

/// A Stream of incoming requests for test.requestflexibleenvelope/Protocol.
pub struct ProtocolRequestStream {
    inner: std::sync::Arc<fidl::ServeInner<fidl::encoding::DefaultFuchsiaResourceDialect>>,
    is_terminated: bool,
}

impl std::marker::Unpin for ProtocolRequestStream {}

impl futures::stream::FusedStream for ProtocolRequestStream {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl fidl::endpoints::RequestStream for ProtocolRequestStream {
    type Protocol = ProtocolMarker;
    type ControlHandle = ProtocolControlHandle;

    fn from_channel(channel: ::fidl::AsyncChannel) -> Self {
        Self { inner: std::sync::Arc::new(fidl::ServeInner::new(channel)), is_terminated: false }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        ProtocolControlHandle { inner: self.inner.clone() }
    }

    fn into_inner(
        self,
    ) -> (::std::sync::Arc<fidl::ServeInner<fidl::encoding::DefaultFuchsiaResourceDialect>>, bool)
    {
        (self.inner, self.is_terminated)
    }

    fn from_inner(
        inner: std::sync::Arc<fidl::ServeInner<fidl::encoding::DefaultFuchsiaResourceDialect>>,
        is_terminated: bool,
    ) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for ProtocolRequestStream {
    type Item = Result<ProtocolRequest, fidl::Error>;

    fn poll_next(
        mut self: std::pin::Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<Option<Self::Item>> {
        let this = &mut *self;
        if this.inner.check_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled ProtocolRequestStream after completion");
        }
        fidl::encoding::with_tls_decode_buf::<_, fidl::encoding::DefaultFuchsiaResourceDialect>(
            |bytes, handles| {
                match this.inner.channel().read_etc(cx, bytes, handles) {
                    std::task::Poll::Ready(Ok(())) => {}
                    std::task::Poll::Pending => return std::task::Poll::Pending,
                    std::task::Poll::Ready(Err(zx_status::Status::PEER_CLOSED)) => {
                        this.is_terminated = true;
                        return std::task::Poll::Ready(None);
                    }
                    std::task::Poll::Ready(Err(e)) => {
                        return std::task::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(
                            e.into(),
                        ))))
                    }
                }

                // A message has been received from the channel
                let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

                std::task::Poll::Ready(Some(match header.ordinal {
                    0x9b8c7d3d118df13 => {
                        header.validate_request_tx_id(fidl::MethodType::TwoWay)?;
                        let mut req = fidl::new_empty!(
                            ProtocolRequestStrictResponseFlexibleRequest,
                            fidl::encoding::DefaultFuchsiaResourceDialect
                        );
                        fidl::encoding::Decoder::<fidl::encoding::DefaultFuchsiaResourceDialect>::decode_into::<ProtocolRequestStrictResponseFlexibleRequest>(&header, _body_bytes, handles, &mut req)?;
                        let control_handle = ProtocolControlHandle { inner: this.inner.clone() };
                        Ok(ProtocolRequest::RequestStrictResponseFlexible {
                            s: req.s,

                            responder: ProtocolRequestStrictResponseFlexibleResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id,
                            },
                        })
                    }
                    0x480c77690533acb7 => {
                        header.validate_request_tx_id(fidl::MethodType::TwoWay)?;
                        let mut req = fidl::new_empty!(
                            ProtocolRequestFlexibleResponseStrictRequest,
                            fidl::encoding::DefaultFuchsiaResourceDialect
                        );
                        fidl::encoding::Decoder::<fidl::encoding::DefaultFuchsiaResourceDialect>::decode_into::<ProtocolRequestFlexibleResponseStrictRequest>(&header, _body_bytes, handles, &mut req)?;
                        let control_handle = ProtocolControlHandle { inner: this.inner.clone() };
                        Ok(ProtocolRequest::RequestFlexibleResponseStrict {
                            s: req.s,

                            responder: ProtocolRequestFlexibleResponseStrictResponder {
                                control_handle: std::mem::ManuallyDrop::new(control_handle),
                                tx_id: header.tx_id,
                            },
                        })
                    }
                    _ => Err(fidl::Error::UnknownOrdinal {
                        ordinal: header.ordinal,
                        protocol_name:
                            <ProtocolMarker as fidl::endpoints::ProtocolMarker>::DEBUG_NAME,
                    }),
                }))
            },
        )
    }
}

#[derive(Debug)]
pub enum ProtocolRequest {
    RequestStrictResponseFlexible {
        s: StrictFoo,
        responder: ProtocolRequestStrictResponseFlexibleResponder,
    },
    RequestFlexibleResponseStrict {
        s: FlexibleFoo,
        responder: ProtocolRequestFlexibleResponseStrictResponder,
    },
}

impl ProtocolRequest {
    #[allow(irrefutable_let_patterns)]
    pub fn into_request_strict_response_flexible(
        self,
    ) -> Option<(StrictFoo, ProtocolRequestStrictResponseFlexibleResponder)> {
        if let ProtocolRequest::RequestStrictResponseFlexible { s, responder } = self {
            Some((s, responder))
        } else {
            None
        }
    }

    #[allow(irrefutable_let_patterns)]
    pub fn into_request_flexible_response_strict(
        self,
    ) -> Option<(FlexibleFoo, ProtocolRequestFlexibleResponseStrictResponder)> {
        if let ProtocolRequest::RequestFlexibleResponseStrict { s, responder } = self {
            Some((s, responder))
        } else {
            None
        }
    }

    /// Name of the method defined in FIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            ProtocolRequest::RequestStrictResponseFlexible { .. } => {
                "request_strict_response_flexible"
            }
            ProtocolRequest::RequestFlexibleResponseStrict { .. } => {
                "request_flexible_response_strict"
            }
        }
    }
}

#[derive(Debug, Clone)]
pub struct ProtocolControlHandle {
    inner: std::sync::Arc<fidl::ServeInner<fidl::encoding::DefaultFuchsiaResourceDialect>>,
}

impl fidl::endpoints::ControlHandle for ProtocolControlHandle {
    fn shutdown(&self) {
        self.inner.shutdown()
    }
    fn shutdown_with_epitaph(&self, status: zx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }
    fn on_closed(&self) -> fidl::OnSignalsRef<'_> {
        self.inner.channel().on_closed()
    }

    #[cfg(target_os = "fuchsia")]
    fn signal_peer(
        &self,
        clear_mask: zx::Signals,
        set_mask: zx::Signals,
    ) -> Result<(), zx_status::Status> {
        use fidl::Peered;
        self.inner.channel().signal_peer(clear_mask, set_mask)
    }
}

impl ProtocolControlHandle {}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct ProtocolRequestStrictResponseFlexibleResponder {
    control_handle: std::mem::ManuallyDrop<ProtocolControlHandle>,
    tx_id: u32,
}

/// Set the the channel to be shutdown (see [`ProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for ProtocolRequestStrictResponseFlexibleResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for ProtocolRequestStrictResponseFlexibleResponder {
    type ControlHandle = ProtocolControlHandle;

    fn control_handle(&self) -> &ProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl ProtocolRequestStrictResponseFlexibleResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut f: &FlexibleFoo) -> Result<(), fidl::Error> {
        let _result = self.send_raw(f);
        if _result.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        _result
    }

    /// Similar to "send" but does not shutdown the channel if an error occurs.
    pub fn send_no_shutdown_on_err(self, mut f: &FlexibleFoo) -> Result<(), fidl::Error> {
        let _result = self.send_raw(f);
        self.drop_without_shutdown();
        _result
    }

    fn send_raw(&self, mut f: &FlexibleFoo) -> Result<(), fidl::Error> {
        self.control_handle.inner.send::<ProtocolRequestStrictResponseFlexibleResponse>(
            (f,),
            self.tx_id,
            0x9b8c7d3d118df13,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct ProtocolRequestFlexibleResponseStrictResponder {
    control_handle: std::mem::ManuallyDrop<ProtocolControlHandle>,
    tx_id: u32,
}

/// Set the the channel to be shutdown (see [`ProtocolControlHandle::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for ProtocolRequestFlexibleResponseStrictResponder {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl fidl::endpoints::Responder for ProtocolRequestFlexibleResponseStrictResponder {
    type ControlHandle = ProtocolControlHandle;

    fn control_handle(&self) -> &ProtocolControlHandle {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl ProtocolRequestFlexibleResponseStrictResponder {
    /// Sends a response to the FIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self, mut f: &StrictFoo) -> Result<(), fidl::Error> {
        let _result = self.send_raw(f);
        if _result.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        _result
    }

    /// Similar to "send" but does not shutdown the channel if an error occurs.
    pub fn send_no_shutdown_on_err(self, mut f: &StrictFoo) -> Result<(), fidl::Error> {
        let _result = self.send_raw(f);
        self.drop_without_shutdown();
        _result
    }

    fn send_raw(&self, mut f: &StrictFoo) -> Result<(), fidl::Error> {
        self.control_handle.inner.send::<ProtocolRequestFlexibleResponseStrictResponse>(
            (f,),
            self.tx_id,
            0x480c77690533acb7,
            fidl::encoding::DynamicFlags::empty(),
        )
    }
}

mod internal {
    use super::*;
}
