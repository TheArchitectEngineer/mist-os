# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl
from fidl._ir import get_fidl_ir_map

_ir_path = get_fidl_ir_map()["test.encapsulatedstructs"]
add_ir_path(_ir_path)


@dataclass
class ArrayInt16Int8:
    arr: typing.Sequence[Int16Int8]

    __fidl_kind__ = "struct"
    __fidl_type__ = "ArrayInt16Int8"
    __fidl_raw_type__ = "test.encapsulatedstructs/ArrayInt16Int8"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.encapsulatedstructs",
            "test.encapsulatedstructs/ArrayInt16Int8",
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "arr": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Int16Int8:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Int16Int8"
    __fidl_raw_type__ = "test.encapsulatedstructs/Int16Int8"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.encapsulatedstructs",
            "test.encapsulatedstructs/Int16Int8",
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Int8Int32:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Int8Int32"
    __fidl_raw_type__ = "test.encapsulatedstructs/Int8Int32"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.encapsulatedstructs",
            "test.encapsulatedstructs/Int8Int32",
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class NonInlineStructTestStruct:
    element: typing.Optional[Int16Int8]
    h: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "NonInlineStructTestStruct"
    __fidl_raw_type__ = "test.encapsulatedstructs/NonInlineStructTestStruct"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.encapsulatedstructs",
            "test.encapsulatedstructs/NonInlineStructTestStruct",
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "element": None,  # type: ignore[arg-type,unused-ignore]
                "h": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class StructPaddingTestStruct:
    trailing: Int16Int8
    inner: Int8Int32
    array: ArrayInt16Int8

    __fidl_kind__ = "struct"
    __fidl_type__ = "StructPaddingTestStruct"
    __fidl_raw_type__ = "test.encapsulatedstructs/StructPaddingTestStruct"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.encapsulatedstructs",
            "test.encapsulatedstructs/StructPaddingTestStruct",
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "trailing": None,  # type: ignore[arg-type,unused-ignore]
                "inner": None,  # type: ignore[arg-type,unused-ignore]
                "array": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class TopLevelStruct:
    a: StructPaddingTestStruct
    b: NonInlineStructTestStruct

    __fidl_kind__ = "struct"
    __fidl_type__ = "TopLevelStruct"
    __fidl_raw_type__ = "test.encapsulatedstructs/TopLevelStruct"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.encapsulatedstructs",
            "test.encapsulatedstructs/TopLevelStruct",
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )
