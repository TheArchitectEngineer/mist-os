# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl
from fidl._ir import get_fidl_ir_map

_ir_path = get_fidl_ir_map()["test.aliases"]
add_ir_path(_ir_path)

import fidl_test_someotherlibrary


@dataclass
class ExampleOfUseOfAliases:
    field_of_u32: int
    field_of_vec_of_strings: typing.Sequence[str]
    field_of_vec_of_strings_at_most_nine: typing.Sequence[str]
    field_of_vec_of_strings_at_most_5: typing.Sequence[str]
    field_of_vec_of_ref_me_at_most_5: typing.Sequence[
        fidl_test_someotherlibrary.ReferenceMe
    ]
    field_of_channel: int
    field_of_client_end: int
    field_of_nullable_client_end: typing.Optional[int]

    __fidl_kind__ = "struct"
    __fidl_type__ = "ExampleOfUseOfAliases"
    __fidl_raw_type__ = "test.aliases/ExampleOfUseOfAliases"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.aliases", "test.aliases/ExampleOfUseOfAliases"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "field_of_u32": None,  # type: ignore[arg-type,unused-ignore]
                "field_of_vec_of_strings": None,  # type: ignore[arg-type,unused-ignore]
                "field_of_vec_of_strings_at_most_nine": None,  # type: ignore[arg-type,unused-ignore]
                "field_of_vec_of_strings_at_most_5": None,  # type: ignore[arg-type,unused-ignore]
                "field_of_vec_of_ref_me_at_most_5": None,  # type: ignore[arg-type,unused-ignore]
                "field_of_channel": None,  # type: ignore[arg-type,unused-ignore]
                "field_of_client_end": None,  # type: ignore[arg-type,unused-ignore]
                "field_of_nullable_client_end": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


ObjType = enum.IntEnum(
    "ObjType",
    {
        "__fidl_kind__": "enum",
        "__fidl_type__": "ObjType",
        "__fidl_raw_type__": "test.aliases/obj_type",
        "__strict__": True,
        "NONE": 0,
        "CHANNEL": 4,
        "make_default": classmethod(lambda cls: cls(0)),
    },
)


# Generated aliases
ReferenceMe = fidl_test_someotherlibrary.ReferenceMe
AliasOfChannel = int
Channel = int
U32 = int
VecOfStrings = typing.Sequence[str]
VecOfStringsAtMost5 = typing.Sequence[str]
