# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.newtype"]
add_ir_path(_ir_path)


@dataclass
class CalculatorAddRequest:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    a: int | None
    b: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "CalculatorAddRequest"
    __fidl_raw_type__ = "test.newtype/CalculatorAddRequest"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.newtype", "test.newtype/CalculatorAddRequest"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,
                "b": None,
            }
        )


@dataclass
class CalculatorAddResponse:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    sum_: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "CalculatorAddResponse"
    __fidl_raw_type__ = "test.newtype/CalculatorAddResponse"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.newtype", "test.newtype/CalculatorAddResponse"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "sum_": None,
            }
        )


@dataclass
class Struct:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    foo: str | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "Struct"
    __fidl_raw_type__ = "test.newtype/Struct"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(self, "test.newtype", "test.newtype/Struct")

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "foo": None,
            }
        )


@dataclass
class Table:
    __fidl_kind__ = "table"
    __fidl_type__ = "Table"
    __fidl_raw_type__ = "test.newtype/Table"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(self, "test.newtype", "test.newtype/Table")

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls()


class Union:
    _b: typing.Optional[bool]

    __fidl_kind__ = "union"
    __fidl_type__ = "Union"
    __fidl_raw_type__ = "test.newtype/Union"
    _is_result = False

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.b != other.b:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.b:
            variant = f"b={self.b!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        b: typing.Optional[bool] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if b is not None:
            self._b = b
            variants.append("b")
            number_of_variants += 1
        if number_of_variants != 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def b(self) -> bool | None:
        return getattr(self, "_b", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(self, "test.newtype", "test.newtype/Union")

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


Enum = enum.IntEnum(
    "Enum",
    {
        "__fidl_kind__": "enum",
        "__fidl_type__": "Enum",
        "__fidl_raw_type__": "test.newtype/Enum",
        "__strict__": False,
        "A": 1,
        "B": 15,
        "EMPTY__": 0,
        "make_default": classmethod(lambda cls: cls(0)),
    },
)


Bits = enum.IntFlag(
    "Bits",
    {
        "__fidl_kind__": "bits",
        "__fidl_type__": "Bits",
        "__fidl_raw_type__": "test.newtype/Bits",
        "__strict__": False,
        "A": 1,
        "make_default": classmethod(lambda cls: cls(value=0)),
    },
)


# Generated aliases
Alias = Struct


import fidl._construct
from fidl._fidl_common import DomainError, MethodInfo, FrameworkError
from abc import abstractmethod, ABC


class CalculatorServer(fidl._server.ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.newtype"
    method_map: typing.Dict[int, MethodInfo] = {
        7893336915889044876: MethodInfo(
            name="add",
            request_ident="test.newtype/CalculatorAddRequest",
            requires_response=True,
            empty_response=False,
            has_result=False,
            response_identifier="test.newtype/CalculatorAddResponse",
        ),
    }

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    _MethodResponse_add: typing.TypeAlias = CalculatorAddResponse

    @abstractmethod
    def add(
        self,
        request: CalculatorAddRequest,
    ) -> (
        typing.Coroutine[typing.Any, typing.Any, _MethodResponse_add]
        | _MethodResponse_add
    ):
        ...


class CalculatorClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.newtype"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    def add(
        self,
        *,
        a: int,
        b: int,
    ) -> typing.Coroutine[typing.Any, typing.Any, CalculatorAddResponse]:
        msg = CalculatorAddRequest(
            a,
            b,
        )
        return self._send_two_way_fidl_request(
            7893336915889044876,
            "test.newtype",
            msg,
            fidl._fidl_common.normalize_identifier(
                "test.newtype/CalculatorAddResponse"
            ),
        )


class CalculatorEventHandler(fidl._client.EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.newtype"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


CalculatorMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.newtype/Calculator"
)
