# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.inheritancewithrecursivedecl"]
add_ir_path(_ir_path)


@dataclass
class ChildSecondRequest:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    request: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ChildSecondRequest"
    __fidl_raw_type__ = "test.inheritancewithrecursivedecl/ChildSecondRequest"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.inheritancewithrecursivedecl",
            "test.inheritancewithrecursivedecl/ChildSecondRequest",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "request": None,
            }
        )


@dataclass
class ParentFirstRequest:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    request: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ParentFirstRequest"
    __fidl_raw_type__ = "test.inheritancewithrecursivedecl/ParentFirstRequest"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.inheritancewithrecursivedecl",
            "test.inheritancewithrecursivedecl/ParentFirstRequest",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "request": None,
            }
        )


import fidl._construct
from fidl._fidl_common import DomainError, MethodInfo, FrameworkError
from abc import abstractmethod, ABC


class ChildServer(fidl._server.ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.inheritancewithrecursivedecl"
    method_map: typing.Dict[int, MethodInfo] = {
        3973163707930985819: MethodInfo(
            name="first",
            request_ident="test.inheritancewithrecursivedecl/ParentFirstRequest",
            requires_response=False,
            empty_response=False,
            has_result=False,
            response_identifier="",
        ),
        2545123272820824165: MethodInfo(
            name="second",
            request_ident="test.inheritancewithrecursivedecl/ChildSecondRequest",
            requires_response=False,
            empty_response=False,
            has_result=False,
            response_identifier="",
        ),
    }

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    _MethodResponse_first: typing.TypeAlias = None

    @abstractmethod
    def first(
        self,
        request: ParentFirstRequest,
    ) -> (
        typing.Coroutine[typing.Any, typing.Any, _MethodResponse_first]
        | _MethodResponse_first
    ):
        ...

    _MethodResponse_second: typing.TypeAlias = None

    @abstractmethod
    def second(
        self,
        request: ChildSecondRequest,
    ) -> (
        typing.Coroutine[typing.Any, typing.Any, _MethodResponse_second]
        | _MethodResponse_second
    ):
        ...


class ChildClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.inheritancewithrecursivedecl"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    def first(
        self,
        *,
        request: int,
    ) -> None:
        msg = ParentFirstRequest(
            request,
        )

        self._send_one_way_fidl_request(
            0,
            3973163707930985819,
            "test.inheritancewithrecursivedecl",
            msg,
        )

    def second(
        self,
        *,
        request: int,
    ) -> None:
        msg = ChildSecondRequest(
            request,
        )

        self._send_one_way_fidl_request(
            0,
            2545123272820824165,
            "test.inheritancewithrecursivedecl",
            msg,
        )


class ChildEventHandler(fidl._client.EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.inheritancewithrecursivedecl"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


ChildMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.inheritancewithrecursivedecl/Child"
)


import fidl._construct
from fidl._fidl_common import DomainError, MethodInfo, FrameworkError
from abc import abstractmethod, ABC


class ParentServer(fidl._server.ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.inheritancewithrecursivedecl"
    method_map: typing.Dict[int, MethodInfo] = {
        3973163707930985819: MethodInfo(
            name="first",
            request_ident="test.inheritancewithrecursivedecl/ParentFirstRequest",
            requires_response=False,
            empty_response=False,
            has_result=False,
            response_identifier="",
        ),
    }

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    _MethodResponse_first: typing.TypeAlias = None

    @abstractmethod
    def first(
        self,
        request: ParentFirstRequest,
    ) -> (
        typing.Coroutine[typing.Any, typing.Any, _MethodResponse_first]
        | _MethodResponse_first
    ):
        ...


class ParentClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.inheritancewithrecursivedecl"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    def first(
        self,
        *,
        request: int,
    ) -> None:
        msg = ParentFirstRequest(
            request,
        )

        self._send_one_way_fidl_request(
            0,
            3973163707930985819,
            "test.inheritancewithrecursivedecl",
            msg,
        )


class ParentEventHandler(fidl._client.EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.inheritancewithrecursivedecl"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


ParentMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.inheritancewithrecursivedecl/Parent"
)
