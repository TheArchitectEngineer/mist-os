# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.experimentalmaybefromalias"]
add_ir_path(_ir_path)


@dataclass
class Testing:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    u1: int | None
    u2: typing.Sequence[int] | None
    u3: typing.Sequence[int] | None
    u4: typing.Sequence[typing.Sequence[int]] | None
    u5: typing.Sequence[typing.Sequence[int]] | None
    u6: typing.Sequence[typing.Sequence[int]] | None
    u7: typing.Sequence[typing.Sequence[int]] | None
    v1: typing.Optional[typing.Sequence[int]] | None
    v2: typing.Sequence[typing.Optional[typing.Sequence[int]]] | None
    v3: typing.Sequence[typing.Optional[typing.Sequence[int]]] | None
    a1: typing.Sequence[int] | None
    a2: typing.Sequence[typing.Sequence[int]] | None
    a3: typing.Sequence[typing.Sequence[int]] | None
    r1: typing.Optional[int] | None
    r2: typing.Sequence[typing.Optional[int]] | None
    r3: typing.Sequence[typing.Optional[int]] | None
    b1: typing.Sequence[int] | None
    b2: typing.Sequence[typing.Sequence[int]] | None
    b3: typing.Sequence[typing.Sequence[int]] | None
    s1: str | None
    s2: typing.Sequence[str] | None
    s3: typing.Sequence[str] | None
    vv1: typing.Sequence[int] | None
    vv2: typing.Sequence[typing.Sequence[int]] | None
    vv3: typing.Sequence[typing.Sequence[int]] | None
    aa1: typing.Sequence[int] | None
    aa2: typing.Sequence[typing.Sequence[int]] | None
    aa3: typing.Sequence[typing.Sequence[int]] | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "Testing"
    __fidl_raw_type__ = "test.experimentalmaybefromalias/Testing"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.experimentalmaybefromalias",
            "test.experimentalmaybefromalias/Testing",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "u1": None,
                "u2": None,
                "u3": None,
                "u4": None,
                "u5": None,
                "u6": None,
                "u7": None,
                "v1": None,
                "v2": None,
                "v3": None,
                "a1": None,
                "a2": None,
                "a3": None,
                "r1": None,
                "r2": None,
                "r3": None,
                "b1": None,
                "b2": None,
                "b3": None,
                "s1": None,
                "s2": None,
                "s3": None,
                "vv1": None,
                "vv2": None,
                "vv3": None,
                "aa1": None,
                "aa2": None,
                "aa3": None,
            }
        )


# Generated aliases
AliasOfArray = typing.Sequence[int]
AliasOfArrayContainingAliasOfArray = typing.Sequence[int]
AliasOfBytes = typing.Sequence[int]
AliasOfRequest = typing.Optional[int]
AliasOfString = str
AliasOfVectorContainingAliasOfVector = typing.Sequence[int]
U64 = int
Vector = typing.Optional[typing.Sequence[int]]


import fidl._construct
from fidl._fidl_common import DomainError, MethodInfo, FrameworkError
from abc import abstractmethod, ABC


class MyProtocolServer(fidl._server.ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.experimentalmaybefromalias"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


class MyProtocolClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.experimentalmaybefromalias"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


class MyProtocolEventHandler(fidl._client.EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.experimentalmaybefromalias"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


MyProtocolMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.experimentalmaybefromalias/MyProtocol"
)
