# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.error"]
add_ir_path(_ir_path)


@dataclass
class ExampleFooRequest:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    s: str | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ExampleFooRequest"
    __fidl_raw_type__ = "test.error/ExampleFooRequest"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.error", "test.error/ExampleFooRequest"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "s": None,
            }
        )


@dataclass
class ExampleFooResponse:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    y: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ExampleFooResponse"
    __fidl_raw_type__ = "test.error/Example_foo_Response"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.error", "test.error/Example_foo_Response"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "y": None,
            }
        )


class ExampleFooResult:
    _response: typing.Optional[ExampleFooResponse]
    _err: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "ExampleFooResult"
    __fidl_raw_type__ = "test.error/Example_foo_Result"
    _is_result = True

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.response != other.response:
            return False
        if self.err != other.err:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.response:
            variant = f"response={self.response!r}"
        if self.err:
            variant = f"err={self.err!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        response: typing.Optional[ExampleFooResponse] = None,
        err: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if response is not None:
            self._response = response
            variants.append("response")
            number_of_variants += 1
        if err is not None:
            self._err = err
            variants.append("err")
            number_of_variants += 1
        if number_of_variants > 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def response(self) -> ExampleFooResponse | None:
        return getattr(self, "_response", None)

    @property
    def err(self) -> int | None:
        return getattr(self, "_err", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.error", "test.error/Example_foo_Result"
        )

    def unwrap(self) -> ExampleFooResponse:
        """Returns the response if result does not contain an error. Otherwise, raises an exception."""
        try:
            if (
                hasattr(self, "_framework_err")
                and self._framework_err is not None
            ):
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} framework error {self._framework_err}"
                )
        except AttributeError:
            pass
        try:
            if hasattr(self, "_err") and self._err is not None:
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} error {self._err}"
                )
        except AttributeError:
            pass

        assert (
            self._response is not None
        ), f"Failed to unwrap {self.__fidl_raw_type__}. Result does not contain an error or response."
        return self._response

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


import fidl._construct
from fidl._fidl_common import DomainError, MethodInfo, FrameworkError
from abc import abstractmethod, ABC


class ExampleServer(fidl._server.ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.error"
    method_map: typing.Dict[int, MethodInfo] = {
        1107623248440401476: MethodInfo(
            name="foo",
            request_ident="test.error/ExampleFooRequest",
            requires_response=True,
            empty_response=False,
            has_result=True,
            response_identifier="test.error/Example_foo_Result",
        ),
    }

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    _MethodResponse_foo: typing.TypeAlias = typing.Union[
        DomainError,
        ExampleFooResponse,
    ]

    @abstractmethod
    def foo(
        self,
        request: ExampleFooRequest,
    ) -> (
        typing.Coroutine[typing.Any, typing.Any, _MethodResponse_foo]
        | _MethodResponse_foo
    ):
        ...


class ExampleClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.error"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    def foo(
        self,
        *,
        s: str,
    ) -> typing.Coroutine[typing.Any, typing.Any, ExampleFooResult]:
        msg = ExampleFooRequest(
            s,
        )
        return self._send_two_way_fidl_request(
            1107623248440401476,
            "test.error",
            msg,
            fidl._fidl_common.normalize_identifier(
                "test.error/Example_foo_Result"
            ),
        )


class ExampleEventHandler(fidl._client.EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.error"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


ExampleMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.error/Example"
)
