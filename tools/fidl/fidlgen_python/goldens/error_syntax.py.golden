# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.errorsyntax"]
add_ir_path(_ir_path)

import fidl_test_errorsyntax_parent


@dataclass
class ExampleUseOfErrorSyntaxCallWhichMayFailRequest:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    s: str | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ExampleUseOfErrorSyntaxCallWhichMayFailRequest"
    __fidl_raw_type__ = (
        "test.errorsyntax/ExampleUseOfErrorSyntaxCallWhichMayFailRequest"
    )

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.errorsyntax",
            "test.errorsyntax/ExampleUseOfErrorSyntaxCallWhichMayFailRequest",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "s": None,
            }
        )


@dataclass
class ExampleUseOfErrorSyntaxCallWhichMayFailResponse:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    value: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ExampleUseOfErrorSyntaxCallWhichMayFailResponse"
    __fidl_raw_type__ = (
        "test.errorsyntax/ExampleUseOfErrorSyntax_CallWhichMayFail_Response"
    )

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.errorsyntax",
            "test.errorsyntax/ExampleUseOfErrorSyntax_CallWhichMayFail_Response",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "value": None,
            }
        )


class ExampleUseOfErrorSyntaxCallWhichMayFailResult:
    _response: typing.Optional[ExampleUseOfErrorSyntaxCallWhichMayFailResponse]
    _err: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "ExampleUseOfErrorSyntaxCallWhichMayFailResult"
    __fidl_raw_type__ = (
        "test.errorsyntax/ExampleUseOfErrorSyntax_CallWhichMayFail_Result"
    )
    _is_result = True

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.response != other.response:
            return False
        if self.err != other.err:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.response:
            variant = f"response={self.response!r}"
        if self.err:
            variant = f"err={self.err!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        response: typing.Optional[
            ExampleUseOfErrorSyntaxCallWhichMayFailResponse
        ] = None,
        err: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if response is not None:
            self._response = response
            variants.append("response")
            number_of_variants += 1
        if err is not None:
            self._err = err
            variants.append("err")
            number_of_variants += 1
        if number_of_variants > 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def response(
        self,
    ) -> ExampleUseOfErrorSyntaxCallWhichMayFailResponse | None:
        return getattr(self, "_response", None)

    @property
    def err(self) -> int | None:
        return getattr(self, "_err", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.errorsyntax",
            "test.errorsyntax/ExampleUseOfErrorSyntax_CallWhichMayFail_Result",
        )

    def unwrap(self) -> ExampleUseOfErrorSyntaxCallWhichMayFailResponse:
        """Returns the response if result does not contain an error. Otherwise, raises an exception."""
        try:
            if (
                hasattr(self, "_framework_err")
                and self._framework_err is not None
            ):
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} framework error {self._framework_err}"
                )
        except AttributeError:
            pass
        try:
            if hasattr(self, "_err") and self._err is not None:
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} error {self._err}"
                )
        except AttributeError:
            pass

        assert (
            self._response is not None
        ), f"Failed to unwrap {self.__fidl_raw_type__}. Result does not contain an error or response."
        return self._response

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


import fidl._construct
from fidl._fidl_common import DomainError, MethodInfo, FrameworkError
from abc import abstractmethod, ABC


class ExampleUseOfErrorSyntaxServer(fidl._server.ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.errorsyntax"
    method_map: typing.Dict[int, MethodInfo] = {
        3565108794310607393: MethodInfo(
            name="composed_call_which_may_fail",
            request_ident="test.errorsyntax.parent/ParentUsesErrorSyntaxComposedCallWhichMayFailRequest",
            requires_response=True,
            empty_response=False,
            has_result=True,
            response_identifier="test.errorsyntax.parent/ParentUsesErrorSyntax_ComposedCallWhichMayFail_Result",
        ),
        3757408930698888354: MethodInfo(
            name="call_which_may_fail",
            request_ident="test.errorsyntax/ExampleUseOfErrorSyntaxCallWhichMayFailRequest",
            requires_response=True,
            empty_response=False,
            has_result=True,
            response_identifier="test.errorsyntax/ExampleUseOfErrorSyntax_CallWhichMayFail_Result",
        ),
    }

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    _MethodResponse_composed_call_which_may_fail: typing.TypeAlias = typing.Union[
        DomainError,
        fidl_test_errorsyntax_parent.ParentUsesErrorSyntaxComposedCallWhichMayFailResponse,
    ]

    @abstractmethod
    def composed_call_which_may_fail(
        self,
        request: fidl_test_errorsyntax_parent.ParentUsesErrorSyntaxComposedCallWhichMayFailRequest,
    ) -> (
        typing.Coroutine[
            typing.Any, typing.Any, _MethodResponse_composed_call_which_may_fail
        ]
        | _MethodResponse_composed_call_which_may_fail
    ):
        ...

    _MethodResponse_call_which_may_fail: typing.TypeAlias = typing.Union[
        DomainError,
        ExampleUseOfErrorSyntaxCallWhichMayFailResponse,
    ]

    @abstractmethod
    def call_which_may_fail(
        self,
        request: ExampleUseOfErrorSyntaxCallWhichMayFailRequest,
    ) -> (
        typing.Coroutine[
            typing.Any, typing.Any, _MethodResponse_call_which_may_fail
        ]
        | _MethodResponse_call_which_may_fail
    ):
        ...


class ExampleUseOfErrorSyntaxClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.errorsyntax"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    def composed_call_which_may_fail(
        self,
        *,
        s: str,
    ) -> typing.Coroutine[
        typing.Any,
        typing.Any,
        fidl_test_errorsyntax_parent.ParentUsesErrorSyntaxComposedCallWhichMayFailResult,
    ]:
        msg = fidl_test_errorsyntax_parent.ParentUsesErrorSyntaxComposedCallWhichMayFailRequest(
            s,
        )
        return self._send_two_way_fidl_request(
            3565108794310607393,
            "test.errorsyntax",
            msg,
            fidl._fidl_common.normalize_identifier(
                "test.errorsyntax.parent/ParentUsesErrorSyntax_ComposedCallWhichMayFail_Result"
            ),
        )

    def call_which_may_fail(
        self,
        *,
        s: str,
    ) -> typing.Coroutine[
        typing.Any, typing.Any, ExampleUseOfErrorSyntaxCallWhichMayFailResult
    ]:
        msg = ExampleUseOfErrorSyntaxCallWhichMayFailRequest(
            s,
        )
        return self._send_two_way_fidl_request(
            3757408930698888354,
            "test.errorsyntax",
            msg,
            fidl._fidl_common.normalize_identifier(
                "test.errorsyntax/ExampleUseOfErrorSyntax_CallWhichMayFail_Result"
            ),
        )


class ExampleUseOfErrorSyntaxEventHandler(fidl._client.EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.errorsyntax"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


ExampleUseOfErrorSyntaxMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.errorsyntax/ExampleUseOfErrorSyntax"
)
