# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.protocolrequest"]
add_ir_path(_ir_path)


@dataclass
class ParentGetChildRequestResponse:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    r: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ParentGetChildRequestResponse"
    __fidl_raw_type__ = "test.protocolrequest/ParentGetChildRequestResponse"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.protocolrequest",
            "test.protocolrequest/ParentGetChildRequestResponse",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "r": None,
            }
        )


@dataclass
class ParentGetChildResponse:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    c: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ParentGetChildResponse"
    __fidl_raw_type__ = "test.protocolrequest/ParentGetChildResponse"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.protocolrequest",
            "test.protocolrequest/ParentGetChildResponse",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "c": None,
            }
        )


@dataclass
class ParentTakeChildRequest:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    c: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ParentTakeChildRequest"
    __fidl_raw_type__ = "test.protocolrequest/ParentTakeChildRequest"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.protocolrequest",
            "test.protocolrequest/ParentTakeChildRequest",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "c": None,
            }
        )


@dataclass
class ParentTakeChildRequestRequest:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    r: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ParentTakeChildRequestRequest"
    __fidl_raw_type__ = "test.protocolrequest/ParentTakeChildRequestRequest"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.protocolrequest",
            "test.protocolrequest/ParentTakeChildRequestRequest",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "r": None,
            }
        )


import fidl._construct
from fidl._fidl_common import DomainError, MethodInfo, FrameworkError
from abc import abstractmethod, ABC


class ChildServer(fidl._server.ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.protocolrequest"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


class ChildClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.protocolrequest"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


class ChildEventHandler(fidl._client.EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.protocolrequest"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


ChildMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.protocolrequest/Child"
)


import fidl._construct
from fidl._fidl_common import DomainError, MethodInfo, FrameworkError
from abc import abstractmethod, ABC


class ParentServer(fidl._server.ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.protocolrequest"
    method_map: typing.Dict[int, MethodInfo] = {
        881818649151440699: MethodInfo(
            name="get_child",
            request_ident="",
            requires_response=True,
            empty_response=False,
            has_result=False,
            response_identifier="test.protocolrequest/ParentGetChildResponse",
        ),
        1096855814967598201: MethodInfo(
            name="get_child_request",
            request_ident="",
            requires_response=True,
            empty_response=False,
            has_result=False,
            response_identifier="test.protocolrequest/ParentGetChildRequestResponse",
        ),
        4470101341872267920: MethodInfo(
            name="take_child",
            request_ident="test.protocolrequest/ParentTakeChildRequest",
            requires_response=False,
            empty_response=False,
            has_result=False,
            response_identifier="",
        ),
        2333981071306416007: MethodInfo(
            name="take_child_request",
            request_ident="test.protocolrequest/ParentTakeChildRequestRequest",
            requires_response=False,
            empty_response=False,
            has_result=False,
            response_identifier="",
        ),
    }

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    _MethodResponse_get_child: typing.TypeAlias = ParentGetChildResponse

    @abstractmethod
    def get_child(
        self,
    ) -> (
        typing.Coroutine[typing.Any, typing.Any, _MethodResponse_get_child]
        | _MethodResponse_get_child
    ):
        ...

    _MethodResponse_get_child_request: typing.TypeAlias = (
        ParentGetChildRequestResponse
    )

    @abstractmethod
    def get_child_request(
        self,
    ) -> (
        typing.Coroutine[
            typing.Any, typing.Any, _MethodResponse_get_child_request
        ]
        | _MethodResponse_get_child_request
    ):
        ...

    _MethodResponse_take_child: typing.TypeAlias = None

    @abstractmethod
    def take_child(
        self,
        request: ParentTakeChildRequest,
    ) -> (
        typing.Coroutine[typing.Any, typing.Any, _MethodResponse_take_child]
        | _MethodResponse_take_child
    ):
        ...

    _MethodResponse_take_child_request: typing.TypeAlias = None

    @abstractmethod
    def take_child_request(
        self,
        request: ParentTakeChildRequestRequest,
    ) -> (
        typing.Coroutine[
            typing.Any, typing.Any, _MethodResponse_take_child_request
        ]
        | _MethodResponse_take_child_request
    ):
        ...


class ParentClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.protocolrequest"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    def get_child(
        self,
    ) -> typing.Coroutine[typing.Any, typing.Any, ParentGetChildResponse]:
        msg = None
        return self._send_two_way_fidl_request(
            881818649151440699,
            "test.protocolrequest",
            msg,
            fidl._fidl_common.normalize_identifier(
                "test.protocolrequest/ParentGetChildResponse"
            ),
        )

    def get_child_request(
        self,
    ) -> typing.Coroutine[
        typing.Any, typing.Any, ParentGetChildRequestResponse
    ]:
        msg = None
        return self._send_two_way_fidl_request(
            1096855814967598201,
            "test.protocolrequest",
            msg,
            fidl._fidl_common.normalize_identifier(
                "test.protocolrequest/ParentGetChildRequestResponse"
            ),
        )

    def take_child(
        self,
        *,
        c: int,
    ) -> None:
        msg = ParentTakeChildRequest(
            c,
        )

        self._send_one_way_fidl_request(
            0,
            4470101341872267920,
            "test.protocolrequest",
            msg,
        )

    def take_child_request(
        self,
        *,
        r: int,
    ) -> None:
        msg = ParentTakeChildRequestRequest(
            r,
        )

        self._send_one_way_fidl_request(
            0,
            2333981071306416007,
            "test.protocolrequest",
            msg,
        )


class ParentEventHandler(fidl._client.EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.protocolrequest"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


ParentMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.protocolrequest/Parent"
)
