# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl
from fidl._ir import get_fidl_ir_map

_ir_path = get_fidl_ir_map()["test.padding"]
add_ir_path(_ir_path)


@dataclass
class Padding1ByteEnd:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding1ByteEnd"
    __fidl_raw_type__ = "test.padding/Padding1ByteEnd"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding1ByteEnd"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding1ByteMiddle:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding1ByteMiddle"
    __fidl_raw_type__ = "test.padding/Padding1ByteMiddle"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding1ByteMiddle"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding2ByteAlignmentLength6:
    a: int
    b: int
    c: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding2ByteAlignmentLength6"
    __fidl_raw_type__ = "test.padding/Padding2ByteAlignmentLength6"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding2ByteAlignmentLength6"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
                "c": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding2ByteEnd:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding2ByteEnd"
    __fidl_raw_type__ = "test.padding/Padding2ByteEnd"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding2ByteEnd"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding2ByteMiddle:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding2ByteMiddle"
    __fidl_raw_type__ = "test.padding/Padding2ByteMiddle"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding2ByteMiddle"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding3ByteEnd:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding3ByteEnd"
    __fidl_raw_type__ = "test.padding/Padding3ByteEnd"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding3ByteEnd"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding3ByteMiddle:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding3ByteMiddle"
    __fidl_raw_type__ = "test.padding/Padding3ByteMiddle"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding3ByteMiddle"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding4ByteAlignmentLength12:
    a: int
    b: int
    c: int
    d: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding4ByteAlignmentLength12"
    __fidl_raw_type__ = "test.padding/Padding4ByteAlignmentLength12"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding4ByteAlignmentLength12"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
                "c": None,  # type: ignore[arg-type,unused-ignore]
                "d": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding4ByteEnd:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding4ByteEnd"
    __fidl_raw_type__ = "test.padding/Padding4ByteEnd"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding4ByteEnd"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding4ByteMiddle:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding4ByteMiddle"
    __fidl_raw_type__ = "test.padding/Padding4ByteMiddle"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding4ByteMiddle"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding5ByteEnd:
    a: int
    b: int
    c: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding5ByteEnd"
    __fidl_raw_type__ = "test.padding/Padding5ByteEnd"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding5ByteEnd"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
                "c": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding5ByteMiddle:
    a: int
    b: int
    c: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding5ByteMiddle"
    __fidl_raw_type__ = "test.padding/Padding5ByteMiddle"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding5ByteMiddle"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
                "c": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding6ByteEnd:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding6ByteEnd"
    __fidl_raw_type__ = "test.padding/Padding6ByteEnd"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding6ByteEnd"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding6ByteMiddle:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding6ByteMiddle"
    __fidl_raw_type__ = "test.padding/Padding6ByteMiddle"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding6ByteMiddle"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding7ByteEnd:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding7ByteEnd"
    __fidl_raw_type__ = "test.padding/Padding7ByteEnd"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding7ByteEnd"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Padding7ByteMiddle:
    a: int
    b: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Padding7ByteMiddle"
    __fidl_raw_type__ = "test.padding/Padding7ByteMiddle"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.padding", "test.padding/Padding7ByteMiddle"
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,  # type: ignore[arg-type,unused-ignore]
                "b": None,  # type: ignore[arg-type,unused-ignore]
            }
        )
