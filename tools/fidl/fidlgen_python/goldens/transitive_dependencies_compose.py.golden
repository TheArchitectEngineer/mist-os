# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl
from fidl._ir import get_fidl_ir_map

_ir_path = get_fidl_ir_map()["test.transitivedependenciescompose"]
add_ir_path(_ir_path)

import fidl_test_bottom


from fidl._client import EventHandlerBase, FidlClient
from fidl._server import ServerBase
from fidl._fidl_common import (
    DomainError,
    FrameworkError,
    MethodInfo,
    FidlProtocolMarker,
    normalize_identifier,
)

from abc import abstractmethod, ABC


class TopServer(ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.transitivedependenciescompose"
    method_map: typing.Dict[int, MethodInfo] = {
        2618685789258237543: MethodInfo(
            name="get_foo",
            request_ident="",
            requires_response=True,
            empty_response=False,
            has_result=False,
            response_identifier="test.bottom/BottomGetFooResponse",
        ),
    }

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        import fidl._construct

        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    _MethodResponse_get_foo: typing.TypeAlias = (
        fidl_test_bottom.BottomGetFooResponse
    )

    @abstractmethod
    def get_foo(
        self,
    ) -> (
        typing.Coroutine[typing.Any, typing.Any, _MethodResponse_get_foo]
        | _MethodResponse_get_foo
    ):
        ...


class TopClient(FidlClient):
    __fidl_kind__ = "client"
    library = "test.transitivedependenciescompose"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        import fidl._construct

        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    def get_foo(
        self,
    ) -> typing.Coroutine[
        typing.Any, typing.Any, fidl_test_bottom.BottomGetFooResponse
    ]:
        msg = None
        return self._send_two_way_fidl_request(
            2618685789258237543,
            "test.transitivedependenciescompose",
            msg,
            normalize_identifier("test.bottom/BottomGetFooResponse"),
        )


class TopEventHandler(EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.transitivedependenciescompose"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        import fidl._construct

        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


TopMarker = FidlProtocolMarker(
    "(nondiscoverable) test.transitivedependenciescompose/Top"
)
