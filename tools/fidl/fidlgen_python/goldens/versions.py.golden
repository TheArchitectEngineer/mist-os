# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl
from fidl._ir import get_fidl_ir_map

_ir_path = get_fidl_ir_map()["test.versions"]
add_ir_path(_ir_path)


@dataclass
class Struct:
    x: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "Struct"
    __fidl_raw_type__ = "test.versions/Struct"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(self, "test.versions", "test.versions/Struct")

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "x": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class Table:
    x: int | None

    def __init__(
        self,
        x: int | None = None,
    ) -> None:
        self.x = x

    __fidl_kind__ = "table"
    __fidl_type__ = "Table"
    __fidl_raw_type__ = "test.versions/Table"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(self, "test.versions", "test.versions/Table")

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls()


class Union:
    _x: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "Union"
    __fidl_raw_type__ = "test.versions/Union"
    _is_result = False

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.x != other.x:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.x:
            variant = f"x={self.x!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        x: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if x is not None:
            self._x = x
            variants.append("x")
            number_of_variants += 1
        if number_of_variants != 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def x(self) -> int | None:
        return getattr(self, "_x", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(self, "test.versions", "test.versions/Union")

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


Enum = enum.IntEnum(
    "Enum",
    {
        "__fidl_kind__": "enum",
        "__fidl_type__": "Enum",
        "__fidl_raw_type__": "test.versions/Enum",
        "__strict__": False,
        "A": 1,
        "EMPTY__": 0,
        "make_default": classmethod(lambda cls: cls(0)),
    },
)


Bits = enum.IntFlag(
    "Bits",
    {
        "__fidl_kind__": "bits",
        "__fidl_type__": "Bits",
        "__fidl_raw_type__": "test.versions/Bits",
        "__strict__": False,
        "A": 1,
        "make_default": classmethod(lambda cls: cls(value=0)),
    },
)


# Generated constants
ADDED_AT_HEAD: bool = True
ADDED_AT_NEXT: bool = True
CONST: int = 0

# Generated aliases
Alias = str


from fidl._client import EventHandlerBase, FidlClient
from fidl._server import ServerBase
from fidl._fidl_common import (
    DomainError,
    FrameworkError,
    MethodInfo,
    FidlProtocolMarker,
    normalize_identifier,
)

from abc import abstractmethod, ABC


class OtherProtocolServer(ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.versions"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        import fidl._construct

        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


class OtherProtocolClient(FidlClient):
    __fidl_kind__ = "client"
    library = "test.versions"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        import fidl._construct

        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


class OtherProtocolEventHandler(EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.versions"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        import fidl._construct

        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


OtherProtocolMarker = FidlProtocolMarker(
    "(nondiscoverable) test.versions/OtherProtocol"
)


from fidl._client import EventHandlerBase, FidlClient
from fidl._server import ServerBase
from fidl._fidl_common import (
    DomainError,
    FrameworkError,
    MethodInfo,
    FidlProtocolMarker,
    normalize_identifier,
)

from abc import abstractmethod, ABC


class ProtocolServer(ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.versions"
    method_map: typing.Dict[int, MethodInfo] = {
        6231434419097198905: MethodInfo(
            name="foo",
            request_ident="",
            requires_response=False,
            empty_response=False,
            has_result=False,
            response_identifier="",
        ),
    }

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        import fidl._construct

        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    _MethodResponse_foo: typing.TypeAlias = None

    @abstractmethod
    def foo(
        self,
    ) -> (
        typing.Coroutine[typing.Any, typing.Any, _MethodResponse_foo]
        | _MethodResponse_foo
    ):
        ...


class ProtocolClient(FidlClient):
    __fidl_kind__ = "client"
    library = "test.versions"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        import fidl._construct

        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    def foo(
        self,
    ) -> None:
        msg = None

        self._send_one_way_fidl_request(
            0,
            6231434419097198905,
            "test.versions",
            msg,
        )


class ProtocolEventHandler(EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.versions"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        import fidl._construct

        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


ProtocolMarker = FidlProtocolMarker("(nondiscoverable) test.versions/Protocol")
