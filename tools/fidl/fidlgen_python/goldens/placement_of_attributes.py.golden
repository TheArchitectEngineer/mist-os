# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl
from fidl._ir import get_fidl_ir_map

_ir_path = get_fidl_ir_map()["test.placementofattributes"]
add_ir_path(_ir_path)

import fidl_test_exampleusing


@dataclass
class ExampleProtocolMethodRequest:
    arg: fidl_test_exampleusing.Empty

    __fidl_kind__ = "struct"
    __fidl_type__ = "ExampleProtocolMethodRequest"
    __fidl_raw_type__ = (
        "test.placementofattributes/ExampleProtocolMethodRequest"
    )

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.placementofattributes",
            "test.placementofattributes/ExampleProtocolMethodRequest",
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "arg": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class ExampleStruct:
    member: int

    __fidl_kind__ = "struct"
    __fidl_type__ = "ExampleStruct"
    __fidl_raw_type__ = "test.placementofattributes/ExampleStruct"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.placementofattributes",
            "test.placementofattributes/ExampleStruct",
        )

    # TODO(https://fxbug.dev/394421154): Assigning None (incorrectly) to each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "member": None,  # type: ignore[arg-type,unused-ignore]
            }
        )


@dataclass
class ExampleTable:
    member: int | None

    def __init__(
        self,
        member: int | None = None,
    ) -> None:
        self.member = member

    __fidl_kind__ = "table"
    __fidl_type__ = "ExampleTable"
    __fidl_raw_type__ = "test.placementofattributes/ExampleTable"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.placementofattributes",
            "test.placementofattributes/ExampleTable",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls()


class ExampleUnion:
    _variant: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "ExampleUnion"
    __fidl_raw_type__ = "test.placementofattributes/ExampleUnion"
    _is_result = False

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.variant != other.variant:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.variant:
            variant = f"variant={self.variant!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        variant: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if variant is not None:
            self._variant = variant
            variants.append("variant")
            number_of_variants += 1
        if number_of_variants != 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def variant(self) -> int | None:
        return getattr(self, "_variant", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.placementofattributes",
            "test.placementofattributes/ExampleUnion",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


ExampleEnum = enum.IntEnum(
    "ExampleEnum",
    {
        "__fidl_kind__": "enum",
        "__fidl_type__": "ExampleEnum",
        "__fidl_raw_type__": "test.placementofattributes/ExampleEnum",
        "__strict__": True,
        "MEMBER": 1,
        "EMPTY__": 0,
        "make_default": classmethod(lambda cls: cls(0)),
    },
)


ExampleBits = enum.IntFlag(
    "ExampleBits",
    {
        "__fidl_kind__": "bits",
        "__fidl_type__": "ExampleBits",
        "__fidl_raw_type__": "test.placementofattributes/ExampleBits",
        "__strict__": True,
        "MEMBER": 1,
        "make_default": classmethod(lambda cls: cls(value=0)),
    },
)


# Generated constants
EXAMPLE_CONST: int = 0

# Generated aliases
Alias = int


from fidl._client import EventHandlerBase, FidlClient
from fidl._server import ServerBase
from fidl._fidl_common import (
    DomainError,
    FrameworkError,
    MethodInfo,
    FidlProtocolMarker,
    normalize_identifier,
)

from abc import abstractmethod, ABC


class ExampleProtocolServer(ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.placementofattributes"
    method_map: typing.Dict[int, MethodInfo] = {
        6023439637367187273: MethodInfo(
            name="method",
            request_ident="test.placementofattributes/ExampleProtocolMethodRequest",
            requires_response=False,
            empty_response=False,
            has_result=False,
            response_identifier="",
        ),
    }

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        import fidl._construct

        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    _MethodResponse_method: typing.TypeAlias = None

    @abstractmethod
    def method(
        self,
        request: ExampleProtocolMethodRequest,
    ) -> (
        typing.Coroutine[typing.Any, typing.Any, _MethodResponse_method]
        | _MethodResponse_method
    ):
        ...


class ExampleProtocolClient(FidlClient):
    __fidl_kind__ = "client"
    library = "test.placementofattributes"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        import fidl._construct

        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    def method(
        self,
        *,
        arg: fidl_test_exampleusing.Empty,
    ) -> None:
        msg = ExampleProtocolMethodRequest(
            arg,
        )

        self._send_one_way_fidl_request(
            0,
            6023439637367187273,
            "test.placementofattributes",
            msg,
        )


class ExampleProtocolEventHandler(EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.placementofattributes"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        import fidl._construct

        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


ExampleProtocolMarker = FidlProtocolMarker(
    "(nondiscoverable) test.placementofattributes/ExampleProtocol"
)
