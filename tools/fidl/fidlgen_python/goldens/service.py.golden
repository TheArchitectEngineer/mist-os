# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.service"]
add_ir_path(_ir_path)


import fidl._construct
from fidl._fidl_common import DomainError, MethodInfo, FrameworkError
from abc import abstractmethod, ABC


class FirstProtocolServer(fidl._server.ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.service"
    method_map: typing.Dict[int, MethodInfo] = {
        6352548393671797041: MethodInfo(
            name="method_on_first",
            request_ident="",
            requires_response=False,
            empty_response=False,
            has_result=False,
            response_identifier="",
        ),
    }

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    _MethodResponse_method_on_first: typing.TypeAlias = None

    @abstractmethod
    def method_on_first(
        self,
    ) -> (
        typing.Coroutine[
            typing.Any, typing.Any, _MethodResponse_method_on_first
        ]
        | _MethodResponse_method_on_first
    ):
        ...


class FirstProtocolClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.service"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    def method_on_first(
        self,
    ) -> None:
        msg = None

        self._send_one_way_fidl_request(
            0,
            6352548393671797041,
            "test.service",
            msg,
        )


class FirstProtocolEventHandler(fidl._client.EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.service"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


FirstProtocolMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.service/FirstProtocol"
)


import fidl._construct
from fidl._fidl_common import DomainError, MethodInfo, FrameworkError
from abc import abstractmethod, ABC


class SecondProtocolServer(fidl._server.ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.service"
    method_map: typing.Dict[int, MethodInfo] = {
        8121179205110225988: MethodInfo(
            name="method_on_second",
            request_ident="",
            requires_response=False,
            empty_response=False,
            has_result=False,
            response_identifier="",
        ),
    }

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    _MethodResponse_method_on_second: typing.TypeAlias = None

    @abstractmethod
    def method_on_second(
        self,
    ) -> (
        typing.Coroutine[
            typing.Any, typing.Any, _MethodResponse_method_on_second
        ]
        | _MethodResponse_method_on_second
    ):
        ...


class SecondProtocolClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.service"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )

    def method_on_second(
        self,
    ) -> None:
        msg = None

        self._send_one_way_fidl_request(
            0,
            8121179205110225988,
            "test.service",
            msg,
        )


class SecondProtocolEventHandler(fidl._client.EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.service"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


SecondProtocolMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.service/SecondProtocol"
)
