# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.handles"]
add_ir_path(_ir_path)


@dataclass
class FdfHandles:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    fdf_channel_handle: int | None
    client_end_driver: int | None
    server_end_driver: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "FdfHandles"
    __fidl_raw_type__ = "test.handles/FdfHandles"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.handles", "test.handles/FdfHandles"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "fdf_channel_handle": None,
                "client_end_driver": None,
                "server_end_driver": None,
            }
        )


@dataclass
class Handles:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    plain_handle: int | None
    bti_handle: int | None
    channel_handle: int | None
    clock_handle: int | None
    debuglog_handle: int | None
    event_handle: int | None
    eventpair_handle: int | None
    exception_handle: int | None
    fifo_handle: int | None
    guest_handle: int | None
    interrupt_handle: int | None
    iob_handle: int | None
    iommu_handle: int | None
    job_handle: int | None
    msi_handle: int | None
    pager_handle: int | None
    pmt_handle: int | None
    port_handle: int | None
    process_handle: int | None
    profile_handle: int | None
    resource_handle: int | None
    socket_handle: int | None
    stream_handle: int | None
    suspendtoken_handle: int | None
    thread_handle: int | None
    timer_handle: int | None
    vcpu_handle: int | None
    vmar_handle: int | None
    vmo_handle: int | None
    rights_handle: int | None
    aliased_plain_handle_field: int | None
    aliased_subtype_handle_field: int | None
    aliased_rights_handle_field: int | None
    some_protocol: int | None
    request_some_protocol: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "Handles"
    __fidl_raw_type__ = "test.handles/Handles"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(self, "test.handles", "test.handles/Handles")

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "plain_handle": None,
                "bti_handle": None,
                "channel_handle": None,
                "clock_handle": None,
                "debuglog_handle": None,
                "event_handle": None,
                "eventpair_handle": None,
                "exception_handle": None,
                "fifo_handle": None,
                "guest_handle": None,
                "interrupt_handle": None,
                "iob_handle": None,
                "iommu_handle": None,
                "job_handle": None,
                "msi_handle": None,
                "pager_handle": None,
                "pmt_handle": None,
                "port_handle": None,
                "process_handle": None,
                "profile_handle": None,
                "resource_handle": None,
                "socket_handle": None,
                "stream_handle": None,
                "suspendtoken_handle": None,
                "thread_handle": None,
                "timer_handle": None,
                "vcpu_handle": None,
                "vmar_handle": None,
                "vmo_handle": None,
                "rights_handle": None,
                "aliased_plain_handle_field": None,
                "aliased_subtype_handle_field": None,
                "aliased_rights_handle_field": None,
                "some_protocol": None,
                "request_some_protocol": None,
            }
        )


# Generated aliases
AliasedPlainHandle = int
AliasedRightsHandle = int
AliasedSubtypeHandle = int


import fidl._construct
from fidl._fidl_common import DomainError, MethodInfo, FrameworkError
from abc import abstractmethod, ABC


class SomeProtocolServer(fidl._server.ServerBase, ABC):
    __fidl_kind__ = "server"
    library = "test.handles"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


class SomeProtocolClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.handles"

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


class SomeProtocolEventHandler(fidl._client.EventHandlerBase, ABC):
    __fidl_kind__ = "event_handler"
    library = "test.handles"
    method_map: typing.Dict[int, MethodInfo] = {}

    @staticmethod
    def construct_response_object(
        response_ident: str, response_obj: typing.Any
    ) -> typing.Any:
        return fidl._construct.construct_response_object(
            response_ident, response_obj
        )


SomeProtocolMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.handles/SomeProtocol"
)
