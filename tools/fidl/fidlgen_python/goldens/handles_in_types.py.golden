# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.handlesintypes"]
add_ir_path(_ir_path)


@dataclass
class EmptyResourceStruct:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.

    __fidl_kind__ = "struct"
    __fidl_type__ = "EmptyResourceStruct"
    __fidl_raw_type__ = "test.handlesintypes/EmptyResourceStruct"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.handlesintypes",
            "test.handlesintypes/EmptyResourceStruct",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(**{})


@dataclass
class HandlesInTypes:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    normal_handle: int | None
    handle_in_vec: typing.Sequence[int] | None
    handle_in_array: typing.Sequence[int] | None
    handle_in_mixed_vec_array: typing.Sequence[typing.Sequence[int]] | None
    table_with_handle: TableWithHandle | None
    union_with_handle: UnionWithHandle | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "HandlesInTypes"
    __fidl_raw_type__ = "test.handlesintypes/HandlesInTypes"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.handlesintypes", "test.handlesintypes/HandlesInTypes"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "normal_handle": None,
                "handle_in_vec": None,
                "handle_in_array": None,
                "handle_in_mixed_vec_array": None,
                "table_with_handle": None,
                "union_with_handle": None,
            }
        )


@dataclass
class EmptyResourceTable:
    __fidl_kind__ = "table"
    __fidl_type__ = "EmptyResourceTable"
    __fidl_raw_type__ = "test.handlesintypes/EmptyResourceTable"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.handlesintypes",
            "test.handlesintypes/EmptyResourceTable",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls()


@dataclass
class TableWithHandle:
    h: int | None

    def __init__(
        self,
        h: int | None = None,
    ) -> None:
        self.h = h

    __fidl_kind__ = "table"
    __fidl_type__ = "TableWithHandle"
    __fidl_raw_type__ = "test.handlesintypes/TableWithHandle"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.handlesintypes", "test.handlesintypes/TableWithHandle"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls()


class EmptyResourceUnion:
    __fidl_kind__ = "union"
    __fidl_type__ = "EmptyResourceUnion"
    __fidl_raw_type__ = "test.handlesintypes/EmptyResourceUnion"
    _is_result = False

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        return f"<'{self.__fidl_type__}' object({variant})>"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.handlesintypes",
            "test.handlesintypes/EmptyResourceUnion",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls()


class UnionWithHandle:
    _h: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "UnionWithHandle"
    __fidl_raw_type__ = "test.handlesintypes/UnionWithHandle"
    _is_result = False

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.h != other.h:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.h:
            variant = f"h={self.h!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        h: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if h is not None:
            self._h = h
            variants.append("h")
            number_of_variants += 1
        if number_of_variants != 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def h(self) -> int | None:
        return getattr(self, "_h", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.handlesintypes", "test.handlesintypes/UnionWithHandle"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


ObjType = enum.IntEnum(
    "ObjType",
    {
        "__fidl_kind__": "enum",
        "__fidl_type__": "ObjType",
        "__fidl_raw_type__": "test.handlesintypes/obj_type",
        "__strict__": True,
        "NONE": 0,
        "VMO": 3,
        "make_default": classmethod(lambda cls: cls(0)),
    },
)
