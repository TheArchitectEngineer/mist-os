# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.arrays"]
add_ir_path(_ir_path)


@dataclass
class StructLargeArray:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    a: typing.Sequence[int] | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "StructLargeArray"
    __fidl_raw_type__ = "test.arrays/StructLargeArray"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.arrays", "test.arrays/StructLargeArray"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,
            }
        )


@dataclass
class StructSmallArray:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    a: typing.Sequence[int] | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "StructSmallArray"
    __fidl_raw_type__ = "test.arrays/StructSmallArray"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.arrays", "test.arrays/StructSmallArray"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "a": None,
            }
        )


@dataclass
class TableLargeArray:
    a: typing.Sequence[int] | None

    def __init__(
        self,
        a: typing.Sequence[int] | None = None,
    ) -> None:
        self.a = a

    __fidl_kind__ = "table"
    __fidl_type__ = "TableLargeArray"
    __fidl_raw_type__ = "test.arrays/TableLargeArray"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.arrays", "test.arrays/TableLargeArray"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls()


@dataclass
class TableSmallArray:
    a: typing.Sequence[int] | None

    def __init__(
        self,
        a: typing.Sequence[int] | None = None,
    ) -> None:
        self.a = a

    __fidl_kind__ = "table"
    __fidl_type__ = "TableSmallArray"
    __fidl_raw_type__ = "test.arrays/TableSmallArray"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.arrays", "test.arrays/TableSmallArray"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls()


class UnionLargeArray:
    _a: typing.Optional[typing.Sequence[int]]

    __fidl_kind__ = "union"
    __fidl_type__ = "UnionLargeArray"
    __fidl_raw_type__ = "test.arrays/UnionLargeArray"
    _is_result = False

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.a != other.a:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.a:
            variant = f"a={self.a!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        a: typing.Optional[typing.Sequence[int]] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if a is not None:
            self._a = a
            variants.append("a")
            number_of_variants += 1
        if number_of_variants != 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def a(self) -> typing.Sequence[int] | None:
        return getattr(self, "_a", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.arrays", "test.arrays/UnionLargeArray"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


class UnionSmallArray:
    _a: typing.Optional[typing.Sequence[int]]

    __fidl_kind__ = "union"
    __fidl_type__ = "UnionSmallArray"
    __fidl_raw_type__ = "test.arrays/UnionSmallArray"
    _is_result = False

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.a != other.a:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.a:
            variant = f"a={self.a!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        a: typing.Optional[typing.Sequence[int]] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if a is not None:
            self._a = a
            variants.append("a")
            number_of_variants += 1
        if number_of_variants != 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def a(self) -> typing.Sequence[int] | None:
        return getattr(self, "_a", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.arrays", "test.arrays/UnionSmallArray"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())
