// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
@available(added=HEAD)
library fuchsia.hardware.display.controller;

using zx;

type ImageTilingType = strict enum : uint32 {
    /// The image is linear and VMO backed.
    LINEAR = 0;

    // Intentionally left some gap between LINEAR and CAPTURE.

    /// The image is used for capture
    CAPTURE = 10;
};

/// The intended usage for a sysmem BufferCollection holding image buffers.
///
/// Each buffer in the collection will store a single image, which is intended
/// to be used as described below.
type ImageBufferUsage = struct {
    /// Specifies how individual pixels are arranged in an image buffer.
    ///
    /// See [`fuchsia.hardware.display.types/ImageTilingTypeIdValue`].
    tiling_type uint32;
};

/// Equivalent to the [`fuchsia.math/SizeU`] FIDL type.
type SizeU = struct {
    width uint32;
    height uint32;
};

/// Describes how an image is stored in a buffer of a sysmem BufferCollection.
///
/// The buffer is dedicated to storing a single image. The properties below are
/// needed for decoding the image from the buffer.
// TODO(https://fxbug.dev/329163718): sysmem already has some of the information
// here. Prune this structure, replacing members with querying properties on the
// associated sysmem BufferCollection.
type ImageMetadata = struct {
    /// The image size, in pixels.
    dimensions SizeU;

    /// Specifies how individual pixels are arranged in an image buffer.
    ///
    /// See [`fuchsia.hardware.display.types/ImageTilingTypeIdValue`].
    tiling_type uint32;
};

const INVALID_DISPLAY_ID uint64 = 0;
const INVALID_MODE_ID uint16 = 0;
const INVALID_ID uint64 = 0;

/// Indicates that a ConfigStamp is invalid.
const INVALID_CONFIG_STAMP_VALUE uint64 = 0;

/// A unique stamp representing a unique set of display configuration.
/// The value is always strictly increasing in chronological order.
type ConfigStamp = struct {
    /// For valid configurations, the value should not be equal to
    /// `INVALID_CONFIG_STAMP_VALUE`.
    value uint64;
};

// An E-EDID can contain up to 256 data blocks, each of which contains 128
// bytes. So it can contain up to 256 * 128 = 32768 bytes of data.
const MAX_COUNT_EDID_BYTES uint32 = 32768;

/// Equal to [`fuchsia.sysmem2/MAX_COUNT_PIXEL_FORMAT_AND_MODIFIERS`].
const MAX_COUNT_DISPLAY_PIXEL_FORMATS uint32 = 64;

const MAX_COUNT_DISPLAY_INFO_PREFERRED_MODES uint32 = 4;

/// Collects the information reported by the engine hardware about a display.
///
/// The data representation closely matches the formats used by display engine
/// hardware. The display coordinator is responsible for parsing these formats
/// and converting the information into forms that are more suitable for
/// higher-level software.
type RawDisplayInfo = resource struct {
    display_id uint64;

    /// Operational modes known to be supported by the display.
    ///
    /// When this vector is not empty, the display modes here take precedence
    /// over the modes retrieved from `edid_bytes`. The modes are ordered by
    /// suitability. The first mode is most preferred. The display modes here
    /// may overlap with the modes encoded in the display's E-EDID.
    ///
    /// Drivers for internal (embedded) displays typically report the display's
    /// only supported operational mode in this member. Drivers that support
    /// seamless display handoff from a bootloader report the display's initial
    /// mode in this member.
    preferred_modes vector<DisplayMode>:MAX_COUNT_DISPLAY_INFO_PREFERRED_MODES;

    /// Display capabilities, encoded using the E-EDID standard.
    ///
    /// E-EDID (Enhanced Extended Display Identification Data) is a VESA
    /// standard that describes display capabilities as a series of 128-byte
    /// data blocks.
    ///
    /// When this vector is not empty and contains valid E-EDID information, it
    /// is used as the definitive description of the display's capabilities.
    ///
    /// Drivers for external (connected) displays use this member to report the
    /// display's E-EDID, when it is exposed in a non-standard manner.
    edid_bytes vector<uint8>:MAX_COUNT_EDID_BYTES;

    /// A list of pixel formats supported by the display.
    ///
    /// The pixel formats modes are ordered by suitability. The first format is
    /// most preferred.
    pixel_formats vector<FuchsiaImages2PixelFormatEnumValue>:MAX_COUNT_DISPLAY_PIXEL_FORMATS;
};

/// Receives and acknowledges events on a display engine.
///
/// A [`DisplayEngineListener`] may be registered to the engine through the
/// [`DisplayCoordinatorImpl`] protocol before it receives any events.
///
/// The client will not make any `ZX_PROTOCOL_DISPLAY_ENGINE` calls into the device
/// during these callbacks.
@transport("Banjo")
@banjo_layout("ddk-interface")
closed protocol DisplayEngineListener {
    /// See [`fuchsia.hardware.display.engine/EngineListener.OnDisplayAdded`].
    strict OnDisplayAdded(resource struct {
        display_info RawDisplayInfo;
    });

    /// See [`fuchsia.hardware.display.engine/EngineListener.OnDisplayRemoved`].
    strict OnDisplayRemoved(struct {
        display_id uint64;
    });

    /// See [`fuchsia.hardware.display.engine/EngineListener.OnDisplayVsync`].
    strict OnDisplayVsync(struct {
        display_id uint64;
        timestamp zx.Time;
        config_stamp box<ConfigStamp>;
    });

    /// See [`fuchsia.hardware.display.engine/EngineListener.OnCaptureComplete`].
    strict OnCaptureComplete();
};

type Alpha = strict enum : uint8 {
    DISABLE = 0;
    PREMULTIPLIED = 1;
    HW_MULTIPLY = 2;
};

/// Equivalent to the
/// ['fuchsia.hardware.display.types/CoordinateTransformation'] FIDL type.
type CoordinateTransformation = strict enum : uint32 {
    IDENTITY = 0;
    REFLECT_X = 1;
    REFLECT_Y = 2;
    ROTATE_CCW_180 = 3;
    ROTATE_CCW_90 = 4;
    ROTATE_CCW_90_REFLECT_X = 5;
    ROTATE_CCW_90_REFLECT_Y = 6;
    ROTATE_CCW_270 = 7;
};

/// Equivalent to the [`fuchsia.math/RectU`] FIDL type.
type RectU = struct {
    x uint32;
    y uint32;
    width uint32;
    height uint32;
};

/// Equivalent to the ['fuchsia.hardware.display.types/Color'] FIDL type.
type Color = struct {
    format FuchsiaImages2PixelFormatEnumValue;
    bytes array<uint8, 8>;
};

/// Equivalent to the ['fuchsia.hardware.display.types/Layer'] FIDL type.
type Layer = struct {
    display_destination RectU;
    image_source RectU;
    image_handle uint64;
    image_metadata ImageMetadata;
    fallback_color Color;
    alpha_mode Alpha;
    alpha_layer_val float32;
    image_source_transformation CoordinateTransformation;
};

/// constants for display_config's mode_flags field
type ModeFlag = strict enum : uint32 {
    VSYNC_POSITIVE = 0x1;
    HSYNC_POSITIVE = 0x2;
    INTERLACED = 0x4;
    ALTERNATING_VBLANK = 0x8;
    DOUBLE_CLOCKED = 0x10;
};

/// The video parameters which specify the display mode.
///
/// A superset of the [`fuchsia.hardware.display.types/Mode`] FIDL type.
type DisplayMode = struct {
    /// The rate at which pixel data gets transferred to the display.
    ///
    /// Valid modes have positive pixel clock rates. This constraint effectively
    /// means that the refresh rate / frame rate must be positive.
    pixel_clock_hz int64;

    /// The horizontal size of the display's addresable area.
    ///
    /// The value must not be zero for valid modes. This constraint effectively
    /// means that the display's active area must not be empty.
    h_addressable uint32;

    h_front_porch uint32;
    h_sync_pulse uint32;
    h_blanking uint32;

    /// The horizontal size of the display's addresable area.
    ///
    /// The value must not be zero for valid modes. This constraint effectively
    /// means that the display's active area must not be empty.
    v_addressable uint32;

    v_front_porch uint32;
    v_sync_pulse uint32;
    v_blanking uint32;

    /// Reserved for future extensibility. Must be zero.
    flags uint32;
};

type ColorConversion = strict enum : uint32 {
    /// If set, use the 0 vector for the color conversion preoffset
    PREOFFSET = 0x1;
    /// If set, use the identity matrix for the color conversion coefficients
    COEFFICIENTS = 0x2;
    /// If set, use the 0 vector for the color conversion postoffset
    POSTOFFSET = 0x4;
};

type DisplayConfig = struct {
    /// the display id to which the configuration applies
    display_id uint64;

    mode DisplayMode;

    /// Bitmask of flags defined in the ColorConversion enum.
    cc_flags uint32;
    /// Color conversion is applied to each pixel according to the formula:
    ///
    /// (cc_coefficients * (pixel + cc_preoffsets)) + cc_postoffsets
    ///
    /// where pixel is a column vector consisting of the pixel's 3 components.
    cc_preoffsets array<float32, 3>;
    cc_coefficients array<array<float32, 3>, 3>;
    cc_postoffsets array<float32, 3>;

    /// Valid display configurations have at least one layer.
    layer vector<Layer>:MAX;
};

/// Equivalent to the [`fuchsia.hardware.display.types/ConfigResult`] FIDL type.
type ConfigCheckResult = strict enum : uint32 {
    OK = 0;
    INVALID_CONFIG = 1;
    UNSUPPORTED_CONFIG = 2;
    TOO_MANY = 3;
    UNSUPPORTED_MODES = 4;
};

/// Subset of compositing operations on a layer.
///
/// The set of all compositing operations is the members of the FIDL enum
/// [`fuchsia.hardware.display.types/ClientCompositionOpcode`]. See the
/// documentation there for the semantics of each operation.
type LayerCompositionOperations = strict bits : uint32 {
    USE_IMAGE = 0x1;
    MERGE = 0x2;
    FRAME_SCALE = 0x4;
    SRC_FRAME = 0x8;
    TRANSFORM = 0x10;
    COLOR_CONVERSION = 0x20;
    ALPHA = 0x40;
};

/// Equivalent to the [`fuchsia.hardware.display.engine/EngineInfo`] FIDL type.
type EngineInfo = struct {
    max_layer_count uint16;
    max_connected_display_count uint16;
    is_capture_supported bool;
};

/// The client guarantees that check_configuration and apply_configuration are always
/// made from a single thread. The client makes no other threading guarantees.
@transport("Banjo")
@banjo_layout("ddk-protocol")
closed protocol DisplayEngine {
    /// See [`fuchsia.hardware.display.engine/Engine.CompleteCoordinatorConnection`].
    strict CompleteCoordinatorConnection(resource struct {
        engine_listener client_end:DisplayEngineListener;
    }) -> (struct {
        engine_info EngineInfo;
    });

    /// Clears the `DisplayEngineListener` connection established by
    /// [`DisplayEngine.CompleteCoordinatorConnection`].
    strict UnsetListener();

    /// See [`fuchsia.hardware.display.engine/Engine.ImportBufferCollection2`].
    strict ImportBufferCollection(resource struct {
        collection_id uint64;

        /// The client end of a channel speaking [`fuchsia.sysmem2/BufferCollectionToken`].
        ///
        /// The FIDL version of this call uses a typed client end here.
        collection_token zx.Handle:CHANNEL;
    }) -> (struct {
        s zx.Status;
    });

    /// See [`fuchsia.hardware.display.engine/Engine.ReleaseBufferCollection`].
    strict ReleaseBufferCollection(struct {
        collection_id uint64;
    }) -> (struct {
        s zx.Status;
    });

    /// See [`fuchsia.hardware.display.engine/Engine.ImportImage`].
    strict ImportImage(struct {
        image_metadata ImageMetadata;
        collection_id uint64;
        index uint32;
    }) -> (struct {
        s zx.Status;

        /// Undefined if the call does not succeed.
        image_handle uint64;
    });

    /// See [`fuchsia.hardware.display.engine/Engine.ImportImageForCapture`].
    strict ImportImageForCapture(struct {
        collection_id uint64;
        index uint32;
    }) -> (struct {
        s zx.Status;

        /// Undefined if the call does not succeed.
        capture_handle uint64;
    });

    /// See [`fuchsia.hardware.display.engine/Engine.ReleaseImage`].
    strict ReleaseImage(struct {
        image_handle uint64;
    });

    /// See [`fuchsia.hardware.display.engine/Engine.CheckConfiguration`].
    strict CheckConfiguration(struct {
        display_config DisplayConfig;
    }) -> (struct {
        config_check_result ConfigCheckResult;
        layer_composition_operations vector<LayerCompositionOperations>:MAX;
    });

    /// See [`fuchsia.hardware.display.engine/Engine.ApplyConfiguration`].
    strict ApplyConfiguration(struct {
        display_config DisplayConfig;
        config_stamp ConfigStamp;
    }) -> ();

    /// See [`fuchsia.hardware.display.engine/Engine.SetBufferCollectionConstraints`].
    strict SetBufferCollectionConstraints(struct {
        usage ImageBufferUsage;
        collection_id uint64;
    }) -> (struct {
        s zx.Status;
    });

    /// See [`fuchsia.hardware.display.engine/Engine.SetDisplayPower`].
    strict SetDisplayPower(struct {
        display_id uint64;
        power_on bool;
    }) -> (struct {
        s zx.Status;
    });

    /// See [`fuchsia.hardware.display.engine/Engine.StartCapture`].
    strict StartCapture(struct {
        capture_handle uint64;
    }) -> (struct {
        s zx.Status;
    });

    /// See [`fuchsia.hardware.display.engine/Engine.ReleaseCapture`].
    strict ReleaseCapture(struct {
        capture_handle uint64;
    }) -> (struct {
        s zx.Status;
    });

    /// See [`fuchsia.hardware.display.engine/Engine.SetMinimumRgb`].
    strict SetMinimumRgb(struct {
        /// Must be >= 0 and <= 255.
        minimum_rgb uint8;
    }) -> (struct {
        s zx.Status;
    });
};
