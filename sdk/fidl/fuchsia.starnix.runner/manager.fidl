// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
@available(added=HEAD)
library fuchsia.starnix.runner;

using zx;

const PROXY_NAME_LEN uint32 = 1024;

@discoverable
open protocol Manager {
    /// Suspends the container running in `job`.
    ///
    /// The call will return successfully when `wake_event` has been signaled. Returns
    /// an error if `wake_locks` is signaled at the end of suspension, or an error is
    /// encountered when suspending the container's processes.
    flexible SuspendContainer(resource table {
        /// The job of the container to suspend.
        1: container_job zx.Handle:JOB;
        /// The event that is used to signal whether or not there are any active wake locks
        /// in the container.
        2: wake_locks zx.Handle:EVENTPAIR;
    }) -> (table {
        /// The amount of time spent in the suspend state.
        ///
        /// It is used for tracking suspend stats in the Starnix kernel.
        1: suspend_time zx.Duration;

        /// The name of the event that woke the container.
        2: resume_reason string:1024;
    }) error SuspendError;

    /// Creates a pass-through proxy that forwards messages between the `container_channel` and the
    /// `remote_channel`.
    ///
    /// If any messages arrive on `remote_channel` while the container is suspended via
    /// `SuspendContainer`, the container will be resumed and `resume_event` will be signaled with
    /// `ZX_EVENT_SIGNALED`. Any suspend call that is made while that signal is present on
    /// `resume_event` will wake immediately. The container is responsible for clearing
    /// `ZX_EVENT_SIGNALED`.
    flexible ProxyWakeChannel(resource table {
        /// The job of the container that holds the other end of `container_channel`.
        1: container_job zx.Handle:JOB;

        /// The channel endpoint that is connected to the container.
        2: container_channel zx.Handle:CHANNEL;

        /// The channel endpoint that is connected to a component outside the container.
        3: remote_channel zx.Handle:CHANNEL;

        /// The event that will be signaled when a message appears on `container_channel` while the
        /// container is suspended.
        4: resume_event zx.Handle:EVENTPAIR;

        /// The name of the proxy, used for debugging purposes.
        5: name string:PROXY_NAME_LEN;
    });

    /// Registers an eventpair that will be signaled when the container is suspended or resumed.
    /// The signals are ASLEEP(USER_1) and AWAKE(USER_0).
    ///
    /// The kernel returns AWAKE upon initial registration of the eventpair.
    flexible RegisterWakeWatcher(resource table {
        /// The event that will be signaled when the container's wake status changes.
        1: watcher zx.Handle:EVENTPAIR;
    }) -> ();
};

type SuspendError = flexible enum {
    // A wake lock was acquired during the suspend operation.
    WAKE_LOCKS_EXIST = 1;
    // Failed to suspend all the processes in the provided container's job.
    SUSPEND_FAILURE = 2;
};
