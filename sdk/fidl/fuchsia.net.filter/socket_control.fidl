// Copyright 2025 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.net.filter;

using fuchsia.ebpf;

/// Hook to which a `SocketControl` client can attach an eBPF filter.
type SocketHook = flexible enum {
    /// Runs for all packets delivered to local IP sockets.
    INGRESS = 1;

    /// Runs for all packets produced by local IP sockets.
    EGRESS = 2;
};

/// Allows to attach eBPF filters to sockets API.
///
/// More than one `SocketControl` client is allowed but they cannot install
/// more than one filter for the same hook. Closing the client end causes
/// all filters installed by that client to be removed.
///
/// *Warning:* Currently this protocol should be routed only to Starnix.
@discoverable
closed protocol SocketControl {
    /// Attaches the specified eBPF `program` to the specified `hook`.
    ///
    /// May fail if another program is already attached (potentially by another
    /// `SocketControl` instance).
    ///
    /// *Warning:* Caller must check that the specified program is compatible
    /// with the specified `hook`.
    // TODO(https://fxbug.dev/399946028): Implement BPF service, which will
    // allow to ensure that the program is always verified.
    strict AttachEbpfProgram(@generated_name("AttachEbpfProgramOptions") resource table {
        1: hook SocketHook;
        2: program fuchsia.ebpf.VerifiedProgram;
    }) -> () error strict enum {
        /// The specified configuration is not supported currently.
        NOT_SUPPORTED = 1;

        // Failed to link a program.
        LINK_FAILED = 2;

        /// Failed to initialize a map.
        MAP_FAILED = 3;

        /// Another program is already attached to the hook.
        DUPLICATE_ATTACHMENT = 4;
    };


    /// Detaches eBPF program from the specified `hook`.
    strict DetachEbpfProgram(struct {
        hook SocketHook;
    }) -> () error strict enum {
        /// No filters attached to the hook.
        NOT_FOUND = 1;
    };
};
