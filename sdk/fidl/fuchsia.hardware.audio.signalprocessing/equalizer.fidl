// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.hardware.audio.signalprocessing;

const MAX_COUNT_EQUALIZER_BANDS uint32 = 64;

/// Type of the equalizer band.
type EqualizerBandType = flexible enum : uint64 {
    /// Increase/decrease in `gain_db` in the vicinity of a `frequency` with an optional `q`.
    PEAK = 1;

    /// Narrow band rejection significantly attenuating a `frequency` with an optional `q`.
    NOTCH = 2;

    /// Decrease gain below a `frequency` with an optional `q`, a.k.a high pass.
    LOW_CUT = 3;

    /// Decrease gain above a `frequency` with an optional `q`, a.k.a low pass.
    HIGH_CUT = 4;

    /// Decrease gain below a `frequency` for a `gain_db` amount with a plateau effect.
    LOW_SHELF = 5;

    /// Decrease gain above a `frequency` for a `gain_db` amount with a plateau effect.
    HIGH_SHELF = 6;
};

/// Parameters for an equalizer Band.
type EqualizerBand = table {
    /// Unique ID for this band. Must only be unique within the corresponding `Element`.
    /// Only valid until the channel associated with the `SignalProcessing` protocol is closed.
    ///
    /// Required.
    1: id uint64;
};

/// Equalizer supported controls specified in `Equalizer`.
type EqualizerSupportedControls = flexible bits : uint64 {
    /// If set, `SetElementState` can change an equalizer band's `frequency`.
    CAN_CONTROL_FREQUENCY = 0x1;

    /// If set, `SetElementState` can change an equalizer band's `q`.
    CAN_CONTROL_Q = 0x2;

    /// If set, `SetElementState` can change a band's `type` to `EqualizerBandType.PEAK`.
    SUPPORTS_TYPE_PEAK = 0x4;

    /// If set, `SetElementState` can change a band's `type` to `EqualizerBandType.NOTCH`.
    SUPPORTS_TYPE_NOTCH = 0x8;

    /// If set, `SetElementState` can change a band's `type` to `EqualizerBandType.LOW_CUT`.
    SUPPORTS_TYPE_LOW_CUT = 0x10;

    /// If set, `SetElementState` can change a band's `type` to `EqualizerBandType.HIGH_CUT`.
    SUPPORTS_TYPE_HIGH_CUT = 0x20;

    /// If set, `SetElementState` can change a band's `type` `EqualizerBandType.LOW_SHELF`.
    SUPPORTS_TYPE_LOW_SHELF = 0x40;

    /// If set, `SetElementState` can change a band's `type` to `EqualizerBandType.HIGH_SHELF`.
    SUPPORTS_TYPE_HIGH_SHELF = 0x80;
};

/// Parameters for a `Element` with `type` equal to `EQUALIZER`.
type Equalizer = table {
    /// Equalizers in this protocol are built by a number of bands, each specifying a number of
    /// parameters here and in `EqualizerElementState` that can be changed with `SetElementState`.
    /// The number of elements of the `bands` vector determines the number of bands
    /// supported by this processing element.
    ///
    /// Required. Must contain at least one entry.
    1: bands vector<EqualizerBand>:MAX_COUNT_EQUALIZER_BANDS;

    /// The controls supported by this equalizer (i.e. that can be changed via `SetElementState`).
    ///
    /// Optional.
    2: supported_controls EqualizerSupportedControls;

    /// If included and true, individual bands can be disabled via `SetElementState`.
    /// If not included or false, bands are always enabled.
    /// For EQ bands to be functional, the enclosing equalizer processing element must also be
    /// started and not bypassed.
    ///
    /// Optional.
    3: can_disable_bands bool;

    /// Minimum frequency for all bands, in Hz.
    ///
    /// Required.
    4: min_frequency uint32;

    /// Maximum frequency for all bands, in Hz.
    ///
    /// Required.
    5: max_frequency uint32;

    /// Maximum quality factor, usually denoted by "Q", for all bands.
    /// This indicates how narrow the frequency transition is. Higher Q values imply narrower
    /// notches/peaks and steeper cuts/shelves. Must be positive.
    ///
    /// Optional. If specified, must be finite.
    6: max_q float32;

    /// Minimum gain in dB.
    ///
    /// Required, if `supported_controls` is present and includes `SUPPORTS_TYPE_PEAK`,
    /// `SUPPORTS_TYPE_LOW_SHELF` or `SUPPORTS_TYPE_HIGH_SHELF`. Must be finite.
    /// Disallowed, otherwise.
    7: min_gain_db float32;

    /// Maximum gain in dB.
    ///
    /// Required, if `supported_controls` is present and includes `SUPPORTS_TYPE_PEAK`,
    /// `SUPPORTS_TYPE_LOW_SHELF` or `SUPPORTS_TYPE_HIGH_SHELF`. Must be finite.
    /// Disallowed, otherwise.
    8: max_gain_db float32;
};

/// State for a single band within a `Element` with `type` equal to `EQUALIZER`.
type EqualizerBandState = table {
    /// Unique ID for the band. Must match one of the `id`s specified in `Equalizer` `bands`.
    ///
    /// Required.
    1: id uint64;

    /// Type of band.
    ///
    /// Required.
    /// If this is a call to `SetElementState`, then the corresponding `SUPPORTS_TYPE_...`
    /// `EqualizerSupportedControls` bit for `type` must be set in `Element.supported_controls`.
    2: type EqualizerBandType;

    /// Center frequency for the band.
    ///
    /// Required.
    /// If this is a call to `SetElementState` and represents a change in this band's frequency,
    /// then `CAN_CONTROL_FREQUENCY` must be set in `Element.supported_controls`.
    3: frequency uint32;

    /// Quality factor, usually denoted as "Q".
    /// Indicates how narrow the frequency transition is. Higher Q values imply narrower
    /// notches/peaks and steeper cuts/shelves. Must be positive.
    ///
    /// Optional.
    /// If used in `SetElementState` and represents a change in this band's q, then `CAN_CONTROL_Q`
    /// must be set in  `Element.supported_controls`. Must be finite.
    4: q float32;

    /// Gain in dB.
    ///
    /// Required, for `EqualizerBandType` of `PEAK`, `LOW_SHELF` and `HIGH_SHELF`. Must be finite.
    /// Disallowed, for `EqualizerBandType` of `NOTCH`, `LOW_CUT` and `HIGH_CUT`.
    5: gain_db float32;

    /// Enable/disable the band.
    /// If disabled, audio still flows through the equalizer but this band has no effect.
    ///
    /// If absent in the return value from `WatchElementState`, the band is enabled.
    /// If omitted in a `SetElementState` call, the band's enable/disable state is unchanged.
    ///
    /// Bypassing the entire enclosing processing element (by setting `ElementState.bypassed` to
    /// true) does not change this field's value, although for an equalizer band to be functional,
    /// its enclosing equalizer processing element must be both started and not bypassed.
    ///
    /// Optional.
    6: enabled bool;
};

/// State for a `Element` with `type` equal to `EQUALIZER`.
type EqualizerElementState = table {
    /// The states of the bands in this equalizer processing element.
    ///
    /// # Deprecation
    ///
    /// Use `band_states` instead.
    @available(removed=20)
    1: bands_state vector<EqualizerBandState>:MAX_COUNT_EQUALIZER_BANDS;

    /// The states of the bands in this equalizer processing element.
    ///
    /// The number of elements of the `band_states` vector must be equal or smaller than the
    /// number of elements of the `bands` returned in returned in the corresponding
    /// `Equalizer`. `band_states` must have at least one element.
    /// The bands controlled by `band_states` are determined by each `band.id`.
    ///
    /// Required. Must contain at least one entry.
    @available(added=20)
    2: band_states vector<EqualizerBandState>:MAX_COUNT_EQUALIZER_BANDS;
};
