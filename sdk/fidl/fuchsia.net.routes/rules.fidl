// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.net.routes;

using fuchsia.net.interfaces;

/// The priority of the rule set, all rule sets are linearized based on this.
///
/// Rules of a `RuleSet` with a smaller [`RuleSetPriority`] are executed before
/// rules of a `RuleSet` with a larger [`RuleSetPriority`]. That is, `RuleSet`
/// with priority 0 has the top priority.
@available(added=HEAD)
alias RuleSetPriority = uint32;

/// A reserved rule set priority for the netstack.
///
/// This is used by the network stack for installing default rules.
@available(added=HEAD)
const DEFAULT_RULE_SET_PRIORITY RuleSetPriority = 0xffffffff;

/// The index of a rule within a provided rule set.
///
/// Rules within the same `RuleSet` are oredered based on the index. Rule at
/// index 0 is evaluated first among the entire set.
@available(added=HEAD)
alias RuleIndex = uint32;

/// Actions of a rule if the matcher matches.
@available(added=HEAD)
type RuleAction = flexible union {
    /// Look for a route in the indicated route table. If there is no matching
    /// route in the target table, the lookup will continue to consider the
    /// next rule.
    1: lookup TableId;
    /// Return network is unreachable. This is contrary to if a `lookup` table
    /// is empty or no matching routes, this decision is terminal and stops
    /// the lookup process from continuing.
    2: unreachable struct {};
};

/// Matches the mark value of a packet.
@available(added=HEAD)
type MarkMatcher = flexible union {
    /// This mark domain does not have a mark.
    1: unmarked struct {};
    2: marked struct {
        /// Mask to apply before comparing to the range in `between`.
        mask uint32;
        /// The mark is between the given range.
        between struct {
            /// start of the range, inclusive.
            start uint32;
            /// end of the range, inclusive.
            end uint32;
        };
    };
};

/// Matches on the originating interface of the outgoing packet.
@available(added=HEAD)
type InterfaceMatcher = flexible union {
    /// Matches the device iff the names match.
    ///
    /// The name is not a pattern or regex, it needs to be an exact match for
    /// the rule to be chosen.
    1: device_name fuchsia.net.interfaces.Name;
    /// Matches iff the outgoing traffic is not bound to a device.
    2: unbound struct {};
    // TODO(https://fxbug.dev/351015513): Introduce a variant that matches on the ID.
};

/// The common matcher that can be matched to both IPv4 and IPv6 packets.
///
/// A matcher matches a packet if all of the present fields match the
/// corresponding properties.
@available(added=HEAD)
type BaseMatcher = table {
    /// Matches the packet iff the packet was locally generated.
    1: locally_generated bool;

    /// Matches the packet iff the packet is sent with `SO_BINDTODEVICE`.
    2: bound_device InterfaceMatcher;

    /// Matches the MARK_1 domain.
    3: mark_1 MarkMatcher;

    /// Matches for the MARK_2 domain.
    4: mark_2 MarkMatcher;
};
