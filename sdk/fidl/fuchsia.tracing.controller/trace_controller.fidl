// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
@available(added=26)
library fuchsia.tracing.controller;

using fuchsia.tracing;
using zx;

/// The maximum number of providers supported.
const MAX_NUM_PROVIDERS uint32 = 100;

/// The maximum length of an alert name.
const MAX_ALERT_NAME_LENGTH uint32 = 14;

/// aliases
alias AlertName = string:MAX_ALERT_NAME_LENGTH;

/// The state of the tracing session.
/// A "session" is everything between `Initialize` and `Terminate`.
type SessionState = flexible enum {
    /// The tracing system is ready for a new session.
    /// There can be only one session at a time.
    READY = 1;
    /// A new tracing session has been initialized.
    INITIALIZED = 2;
    /// Tracing is in the midst of starting.
    STARTING = 3;
    /// Tracing has started.
    STARTED = 4;
    /// Tracing is in the midst of being stopped.
    STOPPING = 5;
    /// Tracing has fully stopped.
    STOPPED = 6;
    /// Tracing is in the midst of being terminated.
    /// Once the system has completely terminated the session it goes back
    /// to the READY state.
    TERMINATING = 7;
};

/// The provisioner interface used to initialize a trace Session, that can
/// then be started and stopped.
///
/// The provisioner is required to start a trace Session and bind the control
/// to the client. It can also perform tasks like getting the list of registered
/// providers and known categories, which can be performed without a existing
/// trace Session.
@discoverable
open protocol Provisioner {
    /// Requests to initialize tracing with the specified `config`.
    ///
    /// A bad request will terminate the connection.
    ///
    /// Dropping the socket connection will abort and terminate the
    /// existing trace Session.
    ///
    /// The trace controller emits trace data to `output` as a sequence of
    /// binary formatted trace records.  Traces obtained from different providers
    /// are delimited by metadata records within the stream.
    flexible InitializeTracing(resource struct {
        controller server_end:Session;
        config TraceConfig;
        output zx.Handle:<SOCKET, zx.Rights.WRITE | zx.Rights.WAIT>;
    });

    /// Return the set of registered providers.
    flexible GetProviders() -> (struct {
        providers vector<ProviderInfo>:MAX_NUM_PROVIDERS;
    });

    // Gets the known categories.
    flexible GetKnownCategories() -> (struct {
        categories vector<fuchsia.tracing.KnownCategory>:fuchsia.tracing.MAX_NUM_KNOWN_CATEGORIES;
    });
};

/// The session interface used by the trace tool to start/stop/terminate a trace Session.
///
/// The trace Session may lightly validate the structure of
/// trace records as it copies them from trace buffers into the output.
/// In particular, it may verify the size of each record header to ensure
/// that the framing of trace records in the data stream is maintained.
///
/// The trace Session does not validate the contents of the trace records
/// themselves.  For example, it does not try to check argument lengths in
/// events.  This ensures that the trace format can be extended without needing
/// to modify the trace Session.
///
/// The trace Session must be initialized from the provisioner. It can then be
/// used to start/stop tracing as many times as needed. Dropping the Session
/// will terminate tracing.
open protocol Session {
    /// Requests to start tracing with the specified `options`.
    ///
    /// If tracing has already started then the request is ignored,
    /// except to send back an error code.
    ///
    /// The trace Session acknowledges the request when all
    /// registered providers have been started or after
    /// `TraceConfig.start_timeout_milliseconds` milliseconds.
    /// One useful reason for the has-started acknowledgement is that the
    /// trace program can start a program to trace knowing that all the
    /// providers are started.
    flexible StartTracing(StartOptions) -> () error StartError;

    /// Requests to stop tracing.
    ///
    /// If tracing has already stopped then this does nothing.
    /// Returning a result lets callers know when it's ok to, for example,
    /// start tracing again.
    flexible StopTracing(StopOptions) -> (StopResult) error StopError;

    /// Returns the next alert when it arrives.
    ///
    /// Alerts received by the Session are queued until a WatchAlert
    /// request is received. Alerts are sent to the caller in the order
    /// they were received.
    ///
    /// WatchAlert requests are also queued until an alert is received
    /// and the requests are serviced in the order they were received.
    flexible WatchAlert() -> (struct {
        alert_name AlertName;
    });

    /// Event sent when the Session state changes.
    flexible -> OnSessionStateChange(struct {
        state SessionState;
    });
};

// Individual providers can be tuned with this.
type ProviderSpec = table {
    1: name fuchsia.tracing.ProviderName;
    2: buffer_size_megabytes_hint uint32;
    3: categories fuchsia.tracing.EnabledCategoryList;
};

/// Provides options for the trace.
type TraceConfig = table {
    /// The trace categories to record, or an empty array for all.
    1: categories fuchsia.tracing.EnabledCategoryList;

    /// Suggested size of trace buffer which each provider should receive.
    // If table defaults were supported, this would default to 4.
    2: buffer_size_megabytes_hint uint32;

    /// Acknowledge start request after at most `start_timeout_milliseconds`.
    // If table defaults were supported, this would default to 5000.
    3: start_timeout_milliseconds uint64;

    // If table defaults were supported, this would default to BufferingMode.ONESHOT.
    4: buffering_mode fuchsia.tracing.BufferingMode;

    /// Overrides for particular providers.
    5: provider_specs vector<ProviderSpec>:MAX_NUM_PROVIDERS;

    /// Maximum trace format version supported byt the client.
    /// If not set, this defaults to the latest available trace format version.
    6: version FxtVersion;

    /// When true, the session will buffer the trace within the
    /// fuchsia.tracing.controller server and only send the trace over the
    /// output socket to the client once the trace completes.
    ///
    /// It is recommended that defering the trace transfer be set to true when
    /// using streaming mode and the fuchsia.tracing.controller client is across
    /// the host-device boundary, such as with ffx. In this, or other cases
    /// where sending the trace data could cause exess cpu overhead, the disk
    /// writing cost is preferrable to the cost of sending to the client.
    ///
    /// NOTE: defer_transfer only has effect during BufferingMode.STREAMING as
    /// other modes don't otherwise send trace data to the client during a
    /// trace.
    @available(added=NEXT)
    7: defer_transfer bool;
};

/// Statistics data per provider collected over the course of the tracing session
type ProviderStats = table {
    1: name fuchsia.tracing.ProviderName;
    2: pid zx.Koid;
    3: buffering_mode fuchsia.tracing.BufferingMode;
    4: buffer_wrapped_count uint32;
    5: records_dropped uint64;
    6: percentage_durable_buffer_used float32;
    7: non_durable_bytes_written uint64;
};

/// Result of a terminate request.
type StopResult = table {
    1: provider_stats vector<ProviderStats>:MAX_NUM_PROVIDERS;
};

/// Error codes from Start operations.
type StartError = flexible enum {
    /// Tracing hasn't been initialized, not ready to start.
    NOT_INITIALIZED = 1;
    /// Tracing has already been started.
    ALREADY_STARTED = 2;
    /// Tracing is currently being stopped.
    STOPPING = 3;
    /// Tracing is currently being terminated.
    TERMINATING = 4;
};

/// Error codes from Stop operations.
type StopError = flexible enum {
    /// Trace controller is unavailable. Nothing to stop.
    NOT_INITIALIZED = 1;
    /// Tracing has not started or is currently stoppped.
    NOT_STARTED = 2;
    /// Tracing aborted due to error.
    ABORTED = 3;
};

/// Additional options to control trace data collection.
type StartOptions = table {
    /// Whether and how to clear the buffer when starting data collection.
    /// This allows, for example, multiple Start/Stop trace runs to be
    /// collected in the same buffer.
    ///
    /// If the preceding `Stop()` request had `save_after_stopped=true`
    /// then this value is overridden to CLEAR_ENTIRE_BUFFER to avoid
    /// duplicate data being saved.
    1: buffer_disposition fuchsia.tracing.BufferDisposition;

    /// The trace categories to add to the initial set provided in
    /// `TraceConfig`. If the combined number of categories goes over the
    /// limit then the extra categories past the limit are discarded.
    2: additional_categories fuchsia.tracing.EnabledCategoryList;
};

/// Additional options to control stopping of a trace.
type StopOptions = table {
    /// If true then write all collected data after tracing has stopped.
    /// This is useful in situations where one wants to clear the buffer
    /// before starting the next trace, without having to first terminate the
    /// trace and start a new one.
    1: write_results bool;
};

/// Result of `GetProviders`.
type ProviderInfo = table {
    /// The provider's ID, assigned by trace-manager.
    1: id fuchsia.tracing.ProviderId;

    /// The provider's pid.
    2: pid zx.Koid;

    /// The name of the provider.
    3: name fuchsia.tracing.ProviderName;
};

/// Version of trace record format.
///
/// Default to the latest available version, which is currently 0.1.
///
/// More information about the format of trace records can be found here:
/// https://fuchsia.dev/fuchsia-src/reference/tracing/trace-format
type FxtVersion = table {
    /// Defaults to 0.
    1: major uint32;

    /// Defaults to 1
    2: minor uint32;
};
