// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// See the top level API summary in `doc.fidl`.
library fuchsia.time.alarms;

using zx;
using fuchsia.power.system;

// The main protocol to look at in this file is `WakeAlarms` below.

alias AlarmId = string:128;

/// [WakeAlarms] provides setting up platform-wide wake alarms.
///
/// An alarm is a promise made by the system to the caller of the API to notify
/// the caller that AT LEAST a certain amount of time has expired. The alarm
/// may fire later than the requested amount of time at the discretion of the
/// server implementing this API.
///
/// When this notification happens, we say that the wake alarm has "fired".
///
/// A "wake" alarm firing also ensures that the system comes back from a reduced
/// power state if needed, so that it can notify the caller.
///
/// The general shape of a wake alarm API has three parts:
/// * A specification of when a wake alarm is supposed to fire,
/// * A way to notify the caller of an alarm that fired, and
/// * A way to keep the system awake until both the caller and the callee have
///   completed work associated with the alarm.
@discoverable
open protocol WakeAlarms {
    /// Sets a wake alarm with the provided parameters, and waits for the alarm
    /// to fire.
    ///
    /// The caller may request multiple alarms concurrently. Re-requesting
    /// an alarm that has the same `alarm_id` as an already scheduled alarm
    /// causes that scheduled alarm to be canceled before the same alarm
    /// is scheduled again.
    ///
    /// The call to `SetAndWait` returns when the alarm fires, or an error
    /// occurs, or the alarm is canceled.
    ///
    /// ## Return value
    ///
    /// * `keep_alive`: a handle which prevents system suspend so long as
    ///   it is held alive.
    ///
    /// ## Protocol Errors
    ///
    /// * [DROPPED] if the alarm has been canceled by using
    ///   [Cancel].
    /// * [UNSPECIFIED] you are observing a new failure mode which has not
    ///   been assigned an error code yet. Expect this failure mode to be
    ///   assigned a more specific error code in future versions of this API.
    ///   This is not a bug, but an indication that you may need to update the
    ///   API version.
    /// * [INTERNAL] is a bug: an internal fallible call (which is expected
    ///   to be unlikely to fail) has failed somehow. Please report this for
    ///   investigation.
    SetAndWait(@generated_name("SetAndWaitArgs") resource struct {
        /// The deadline at which the timer is supposed to fire. This
        /// corresponds to a time instant on the boot timeline.
        deadline zx.InstantBoot;

        /// Optional mode that allows the API to support a number of use cases.
        mode @generated_name("SetMode") flexible resource union {
            /// This lease is dropped as immediately after the alarm is scheduled
            /// (or an error occurs during scheduling), thus guaranteeing that the
            /// alarm is scheduled before the system is suspended.
            1: keep_alive fuchsia.power.system.LeaseToken;
            /// The callee signals this event (with ZX_EVENT_SIGNALED) once the alarm
            /// is scheduled. This indicates that the caller can drop any pending wake
            /// leases related to this call.
            2: notify_setup_done zx.Handle:EVENT;
        };

        /// Set to a nonempty value to identify the alarm. A unique value
        /// of [AlarmId] must be picked per each unique alarm within a
        /// single FIDL connection's scope.
        ///
        /// Supplying an alarm_id for an already scheduled alarm reschedules
        /// that alarm.
        alarm_id AlarmId;
    }) -> (resource struct {
        /// Used by the caller to ensure a minimum time slice for useful work,
        /// before the system may suspend again.
        keep_alive fuchsia.power.system.LeaseToken;
    }) error WakeAlarmsError;

    /// Cancels the alarm specified by `alarm_id`.
    ///
    /// Providing an `alarm_id` of an alarm that is not scheduled quietly
    /// succeeds.
    Cancel(struct {
        /// The unique identifier of the alarm to cancel.
        ///
        /// The alarm identified by `alarm_id` is canceled, and will no
        /// longer be expected to fire. The respective `SetAndWait` will
        /// return [WakeAlarmsError::DROPPED].
        ///
        /// A race condition is possible where the alarm fires while
        /// the Cancel call is being processed, or even slightly later.
        /// The caller must handle such an event gracefully.
        alarm_id AlarmId;
    });
};

/// WakeAlarmsError describes the error code that can be returned from wake
/// alarm API calls.
type WakeAlarmsError = flexible enum {
    /// Denotes new failure mode which has not been assigned an error code yet.
    ///
    /// Expect this failure mode to be assigned a more specific error code in
    /// the future versions of this API. This is not a bug, but an indication
    /// that you may need to update the API version.
    UNSPECIFIED = 1;
    /// This alarm was canceled, or rescheduled by the API user.
    DROPPED = 2;
    /// The server end encountered an error internal to its code, which should
    /// not ever happen in normal operation. Receiving this error means that the
    /// server end of the connection has a bug that must be fixed.
    INTERNAL = 3;
};
