// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.hardware.display.types;

using fuchsia.images2;

/// Transformations that can be applied by display hardware to input images.
///
/// The coordinate system transformations listed here can be implemented in
/// hardware by display engines, because they have straightforward
/// implementations for raster images.
///
/// Support for input image transformations (every member except for `IDENTITY`)
/// varies across display engines. This is because each transformation requires
/// non-trivial hardware modifications that have area (cost) and power
/// implications.
type CoordinateTransformation = strict enum : uint8 {
    /// Image pixels are passed through without any change.
    ///
    /// This is the only value guaranteed to be supported by all display engine
    /// drivers.
    IDENTITY = 0;

    /// Image pixels are reflected across a line meeting the image's center, parallel to the X axis.
    ///
    /// This enum member's numeric value has a single bit set to 1. Any
    /// transformation whose value has this bit set involves an X reflection.
    ///
    /// This transformation is also called an "X flip".
    ///
    /// Example:
    /// |a b c d|      |i j k l|
    /// |e f g h|  ->  |e f g h|
    /// |i j k l|      |a b c d|
    REFLECT_X = 1;

    /// Image pixels are reflected across a line meeting the image's center, parallel to the Y axis.
    ///
    /// This enum member's numeric value has a single bit set to 1. Any
    /// transformation whose value has this bit set involves an Y reflection.
    ///
    /// This transformation is also called an "Y flip".
    ///
    /// Example:
    /// |a b c d|      |d c b a|
    /// |e f g h|  ->  |h g f e|
    /// |i j k l|      |l k j i|
    REFLECT_Y = 2;

    // TODO(https://fxbug.dev/356385730): Switch the convention for rotations
    // from CCW (counter-clockwise) to CW (clockwise).

    /// Image pixels are rotated around the image's center counter-clockwise by 180 degrees.
    ///
    /// This is equivalent to applying the `REFLECT_X` and `REFLECT_Y`
    /// transforms. `REFLECT_X` and `REFLECT_Y` are commutative, so their
    /// ordering doesn't matter.
    ///
    /// Example:
    /// |a b c d|      |l k j i|
    /// |e f g h|  ->  |h g f e|
    /// |i j k l|      |d c b a|
    ROTATE_CCW_180 = 3;

    /// Image pixels are rotated around the image's center counter-clockwise by 90 degrees.
    ///
    /// The image produced by this transformation has different dimensions from
    /// the input image.
    ///
    /// This enum member's numeric value has a single bit set to 1. Any
    /// transformation whose value has this bit set involves a 90-degree
    /// counter-clockwise rotation.
    ///
    /// Example:
    /// |a b c d|      |d h l|
    /// |e f g h|  ->  |c g k|
    /// |i j k l|      |b f j|
    ///                |a e i|
    ROTATE_CCW_90 = 4;

    /// Image pixels are transformed using `ROTATE_CCW_90`, followed by `REFLECT_X`.
    ///
    /// The image produced by this transformation has different dimensions from
    /// the input image.
    ///
    /// Example:
    /// |a b c d|      |a e i|
    /// |e f g h|  ->  |b f k|
    /// |i j k l|      |c g k|
    ///                |d h l|
    ROTATE_CCW_90_REFLECT_X = 5;

    /// Image pixels are transformed using `ROTATE_CCW_90`, followed by `REFLECT_Y`.
    ///
    /// The image produced by this transformation has different dimensions from
    /// the input image.
    ///
    /// Example:
    /// |a b c d|      |l h d|
    /// |e f g h|  ->  |k g c|
    /// |i j k l|      |j f b|
    ///                |i e a|
    ROTATE_CCW_90_REFLECT_Y = 6;

    /// Image pixels are rotated around the image's center counter-clockwise by 270 degrees.
    ///
    /// The image produced by this transformation has different dimensions from
    /// the input image.
    ///
    /// This is equivalent to applying the `ROTATE_CCW_90` transform, followed
    /// by `REFLECT_X` and `REFLECT_Y`. `REFLECT_X` and `REFLECT_Y` are
    /// commutative, so their ordering doesn't matter.
    ///
    /// Example:
    /// |a b c d|      |i e a|
    /// |e f g h|  ->  |j f b|
    /// |i j k l|      |k g c|
    ///                |l h d|
    ROTATE_CCW_270 = 7;
};

type AlphaMode = strict enum : uint8 {
    /// Alpha is disabled for the plane (default).
    DISABLE = 0;
    /// Plane alpha is premultiplied.
    PREMULTIPLIED = 1;
    /// Hardware should multiply the alpha and color channels when blending.
    HW_MULTIPLY = 2;
};

type ClientCompositionOpcode = strict enum : uint8 {
    /// The client should configure the layer to use a source image.
    CLIENT_USE_IMAGE = 0;

    /// The client should composite the layer.
    ///
    /// The client must composite all the layers that have this flag, and
    /// replace them with a single layer that has the compositing result.
    ///
    /// The flag will be present on a continuous range of layers.
    CLIENT_MERGE = 1;
    /// The client should provide a new image produced by scaling the source image
    /// such that the dimensions of the new image's src_frame and dest_frame are
    /// equal to the dimensions of the current image's dest_frame.
    CLIENT_FRAME_SCALE = 2;
    /// The client should provide a new image produced by clipping the source image
    /// to the region specified by src_frame.
    CLIENT_SRC_FRAME = 3;
    /// The client should provide a new image produced by applying the desired
    /// transformation, so that TRANSFORM_IDENTITY can be specified.
    CLIENT_TRANSFORM = 4;
    /// The client should apply the color conversion itself.
    CLIENT_COLOR_CONVERSION = 5;
    /// The client should apply the alpha itself.
    CLIENT_ALPHA = 6;
};

/// A color constant.
type Color = struct {
    /// The format of pixel data stored in `bytes`.
    ///
    /// The format must use a single plane. The encoding of one pixel
    /// must fit within the `bytes` array.
    format fuchsia.images2.PixelFormat;

    /// The constant color, expressed as one pixel encoded using `format`.
    ///
    /// The pixel is encoded using little-endian byte ordering and zero padding.
    /// In other words, the bytes obtained by encoding the pixel using `format`
    /// are stored starting at the first byte in the array. If the pixel
    /// requires fewer bytes per pixel than the array size, any unused bytes
    /// (towards the end of the array) must be set to 0 (zero).
    bytes array<uint8, 8>;
    // The array fits the largest color representations that would be useful in
    // the context of display engine hardware. The display engine hardware we're
    // familiar with has pixel processing pipelines that support 4 color
    // channels (3 color channels plus one alpha channel), and operate with
    // precisions of 10-12 bits per channel.
};
