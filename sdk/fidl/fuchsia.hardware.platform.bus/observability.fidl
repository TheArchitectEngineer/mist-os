// Copyright 2025 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.hardware.platform.bus;

using zx;
using fuchsia.driver.framework;

/// Provides information related to interrupts assigned by the board driver to various
/// devices.
closed protocol InterruptAttributor {
    strict GetInterruptInfo(struct {
        /// The vector the interrupt controller uses to refer to this interrupt.
        interrupt_vector uint32;
    }) -> (resource struct {
        /// The name of the device which the board driver gave to the device the interrupt
        /// was assigned to.
        device_name string:fuchsia.driver.framework.MAX_NODE_NAME_LENGTH;

        /// Token that represents the driver component instance which the interrupt was given to.
        /// It may be be exchanged with the driver framework or component framework to learn more
        /// information about component, such as it's URL or moniker.
        ///
        /// If a driver has not yet bound to the device and taken control of the interrupt yet,
        /// it will not yet be present.
        component_token zx.Handle:<EVENT, optional>;
    }) error zx.Status;
};

service ObservabilityService {
    interrupt client_end:InterruptAttributor;
};
