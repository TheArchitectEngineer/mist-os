// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
@available(added=HEAD)
library fuchsia.hardware.platform.bus;

using zx;
using fuchsia.driver.framework;
using fuchsia.hardware.power;

const MAX_INFO_STRING_LENGTH uint32 = 32;
const MAX_POWER_CONFIGS uint32 = 32;

const MAX_MMIO uint32 = 10;
const MAX_IRQ uint32 = 32;
const MAX_BTI uint32 = 10;
const MAX_SMC uint32 = 10;

/// Mode for creating zircon interrupts. In sync with ZX_INTERRUPT_MODE_* values
/// from //zircon/system/public/zircon/types.h.
type ZirconInterruptMode = strict enum : uint32 {
    DEFAULT = 0x0;
    EDGE_LOW = 0x2;
    EDGE_HIGH = 0x4;
    LEVEL_LOW = 0x6;
    LEVEL_HIGH = 0x8;
    EDGE_BOTH = 0xA;
};

/// Definition of a MMIO resource for a platform device node.
type Mmio = table {
    /// Physical address of MMIO region. Does not need to be page aligned.
    1: base uint64;
    /// Length of MMIO region in bytes. Does not need to be page aligned.
    2: length uint64;
    /// Name that can be used to retrieve the Mmio using
    /// [`fuchsia.hardware.platform.device/GetMmioByName`].
    /// It is valid for this to be empty, however the resource will only be able
    /// to be retrieved using [`fuchsia.hardware.platform.device/GetMmioById`].
    3: name string:fuchsia.driver.framework.MAX_RESOURCE_NAME_LENGTH;
};

type Irq = table {
    1: irq uint32;

    /// Bit flag for setting the interrupt mode.
    2: mode ZirconInterruptMode;

    /// Properties for this interrupt's fragment.
    3: properties
            vector<fuchsia.driver.framework.NodeProperty2>:fuchsia.driver.framework.MAX_PROPERTY_COUNT;
    /// Name that can be used to retrieve the irq using
    /// [`fuchsia.hardware.platform.device/GetInterruptByName`].
    /// It is valid for this to be empty, however the resource will only be able
    /// to be retrieved using [`fuchsia.hardware.platform.device/GetInterruptById`].
    4: name string:fuchsia.driver.framework.MAX_RESOURCE_NAME_LENGTH;

    /// If set to true, this interrupt will wake the device out of suspend.
    5: wake_vector bool;
};

/// Definition of a bus transaction initiator (bti) for a platform device node.
type Bti = table {
    1: iommu_index uint32;
    2: bti_id uint32;
    /// Name that can be used to retrieve the bti using
    /// [`fuchsia.hardware.platform.device/GetBtiByName`].
    /// It is valid for this to be empty, however the resource will only be able
    /// to be retrieved using [`fuchsia.hardware.platform.device/GetBtiById`].
    3: name string:fuchsia.driver.framework.MAX_RESOURCE_NAME_LENGTH;
};

/// Definition of a Secure Monitor Call (SMC), which allows calls to be made from the user space.
type Smc = table {
    /// The device is granted the ability to make SMC calls with service call numbers ranging from
    /// service_call_num_base to service_call_num_base + count - 1.
    1: service_call_num_base uint32;
    2: count uint32;
    /// The device has exclusive access to this smc range.
    3: exclusive bool;
    /// Name that can be used to retrieve the smc using
    /// [`fuchsia.hardware.platform.device/GetSmcByName`].
    /// It is valid for this to be empty, however the resource will only be able
    /// to be retrieved using [`fuchsia.hardware.platform.device/GetSmcById`].
    4: name string:fuchsia.driver.framework.MAX_RESOURCE_NAME_LENGTH;
};

/// Represents the metadata that's available in a platform device.
type Metadata = table {
    /// Metadata identifier.
    1: id string:MAX;
    /// Metadata bytes.
    2: data vector<uint8>:MAX;
};

/// Device metadata to be passed from bootloader via a ZBI record.
type BootMetadata = table {
    /// Metadata type (matches `zbi_header_t.type` for bootloader metadata).
    1: zbi_type uint32;
    /// Matches `zbi_header_t.extra` for bootloader metadata.
    /// Used in cases where bootloader provides multiple metadata records of the same type.
    2: zbi_extra uint32;
};

/// Board information set by the board driver.
type BoardInfo = table {
    /// Board name from the boot image platform ID record or from the BIOS on x86 platforms.
    1: board_name string:MAX_INFO_STRING_LENGTH;
    /// Board specific revision number.
    2: board_revision uint32;
};

/// Bootloader information set by the board driver.
@available(added=HEAD)
type BootloaderInfo = table {
    1: vendor string:MAX_INFO_STRING_LENGTH;
};

/// Arguments for adding a platform device node to the platform bus.
type Node = table {
    /// Name of the node.
    1: name string:fuchsia.driver.framework.MAX_NODE_NAME_LENGTH;
    /// `BIND_PLATFORM_DEV_VID`
    2: vid uint32;
    /// `BIND_PLATFORM_DEV_PID`
    3: pid uint32;
    /// `BIND_PLATFORM_DEV_DID`
    4: did uint32;
    /// Instance ID. Contributes to device-name if non-zero.
    /// `BIND_PLATFORM_DEV_INSTANCE_ID`
    5: instance_id uint32;
    /// MMIO regions.
    6: mmio vector<Mmio>:MAX_MMIO;
    /// Interrupts.
    7: irq vector<Irq>:MAX_IRQ;
    /// BTIs.
    8: bti vector<Bti>:MAX_BTI;
    /// SMC calls.
    9: smc vector<Smc>:MAX_SMC;
    /// Metadata
    10: metadata vector<Metadata>:MAX;
    /// Boot metadata (from ZBI items)
    11: boot_metadata vector<BootMetadata>:MAX;

    /// Other node properties beyond BIND_PLATFORM_DEV_VID, BIND_PLATFORM_DEV_PID, and BIND_PLATFORM_DEV_DID.
    12: properties
            vector<fuchsia.driver.framework.NodeProperty2>:fuchsia.driver.framework.MAX_PROPERTY_COUNT;
    13: power_config
            vector<fuchsia.hardware.power.PowerElementConfiguration>:MAX_INFO_STRING_LENGTH;
};

/// This is originally from the Banjo fuchsia.hardware.platform.device library,
/// but it is temporarily included here until that is migrated to FIDL.
type TemporaryBoardInfo = struct {
    /// Vendor ID for the board.
    vid uint32;
    /// Product ID for the board.
    pid uint32;
    /// Board name from the boot image platform ID record,
    /// (or from the BIOS on x86 platforms).
    board_name string:32;
    /// Board specific revision number.
    board_revision uint32;
};

/// Servers that implement this protocol can be registered to the platform
/// bus to receive callbacks on why the platform bus is suspending.
@available(added=HEAD)
closed protocol SysSuspend {
    /// Invoked by the platform bus when its suspend hook is called.
    strict Callback(struct {
        enable_wake bool;
        suspend_reason uint8;
    }) -> (struct {
        out_status zx.Status;
    });
};

@discoverable
@transport("Driver")
open protocol PlatformBus {
    /// Adds a new platform device node to the bus, using configuration provided
    /// by |node|. Platform device nodes are created in their own separate
    /// driver hosts.
    strict NodeAdd(struct {
        node Node;
    }) -> () error zx.Status;

    /// Board drivers may use this to get information about the board, and to
    /// differentiate between multiple boards that they support.
    strict GetBoardInfo() -> (struct {
        info TemporaryBoardInfo;
    }) error zx.Status;

    /// Board drivers may use this to set information about the board.
    strict SetBoardInfo(struct {
        info BoardInfo;
    }) -> () error zx.Status;

    /// Board drivers may use this to set information about the bootloader.
    @available(added=HEAD)
    strict SetBootloaderInfo(struct {
        info BootloaderInfo;
    }) -> () error zx.Status;

    /// Registers a callback that's invoked by the platform bus when it's suspending.
    @available(added=HEAD)
    strict RegisterSysSuspendCallback(resource struct {
        suspend_cb client_end:SysSuspend;
    }) -> () error zx.Status;

    /// Adds a composite node specification that has |node| as one of the
    /// composite node's parents. To accomplish this, this method does a couple
    /// of things. The method adds a platform device node specified by |node| as
    /// a child of the platform bus. Also, a
    /// `fuchsia.driver.framework.ParentSpec` is added to |spec| which matches
    /// the newly added platform device node. Composite bind rules should include
    /// a stanza that matches the properites of |node| in order for the bind
    /// rules to match against the `CompositeNodeSpec`.
    strict AddCompositeNodeSpec(struct {
        node Node;
        spec fuchsia.driver.framework.CompositeNodeSpec;
    }) -> () error zx.Status;
};

@discoverable
@transport("Driver")
closed protocol Iommu {
    strict GetBti(struct {
        iommu_index uint32;
        bti_id uint32;
    }) -> (resource struct {
        bti zx.Handle:BTI;
    }) error zx.Status;
};

type FirmwareType = flexible enum : uint32 {
    DEVICE_TREE = 1;
    ACPI = 2;
    SMBIOS = 3;
};

type FirmwareBlob = resource struct {
    vmo zx.Handle:VMO;
    length uint64;
};

@discoverable
@transport("Driver")
closed protocol Firmware {
    strict GetFirmware(struct {
        type FirmwareType;
    }) -> (resource struct {
        blobs vector<FirmwareBlob>:MAX;
    }) error zx.Status;
};

service Service {
    platform_bus client_end:PlatformBus;
    iommu client_end:Iommu;
    firmware client_end:Firmware;
};
