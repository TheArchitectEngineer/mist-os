// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
@available(added=HEAD)
library fuchsia.hardware.sdhci;

using zx;

type Quirk = strict bits : uint64 {
    /// This is a BCM28xx specific quirk. The bottom 8 bits of the 136
    /// bit response are normally filled by 7 CRC bits and 1 reserved bit.
    /// The BCM controller checks the CRC for us and strips it off in the
    /// process.
    /// The higher level stack expects 136B responses to be packed in a
    /// certain way so we shift all the fields back to their proper offsets.
    STRIP_RESPONSE_CRC = 0x1;
    /// BCM28xx quirk: The BCM28xx appears to use its internal DMA engine to
    /// perform transfers against the SD card. Normally we would use SDMA or
    /// ADMA (if the part supported it). Since this part doesn't appear to
    /// support either, we just use PIO.
    NO_DMA = 0x2;
    /// The bottom 8 bits of the 136 bit response are normally filled by 7 CRC bits
    /// and 1 reserved bit. Some controllers strip off the CRC.
    /// The higher level stack expects 136B responses to be packed in a certain way
    /// so we shift all the fields back to their proper offsets.
    STRIP_RESPONSE_CRC_PRESERVE_ORDER = 0x4;
    /// The controller uses a tuning process that does not follow the SDHCI specification.
    NON_STANDARD_TUNING = 0x8;
    /// Don't use DDR modes even if the SDHCI capabilities register indicates it is supported.
    NO_DDR = 0x10;
    /// Prevent DMA buffers from crossing boundaries specified by dma_boundary_alignment. For
    /// example, a boundary alignment of 0x10000 will cause buffers crossing 64K boundaries to be
    /// split across multiple descriptors.
    USE_DMA_BOUNDARY_ALIGNMENT = 0x20;
};

@discoverable
@transport("Driver")
closed protocol Device {
    strict GetInterrupt() -> (resource struct {
        irq zx.Handle:INTERRUPT;
    }) error zx.Status;

    /// Mmio size minus offset must be at least 512 bytes as per the SDHCI specification.
    strict GetMmio() -> (resource struct {
        mmio zx.Handle:VMO;
        offset zx.Off;
    }) error zx.Status;

    /// Gets a handle to the bus transaction initiator for the device. The caller
    /// receives ownership of the handle.
    strict GetBti(struct {
        index uint32;
    }) -> (resource struct {
        bti zx.Handle:BTI;
    }) error zx.Status;

    strict GetBaseClock() -> (struct {
        clock uint32;
    });

    /// Returns device quirks.
    strict GetQuirks() -> (struct {
        quirks Quirk;
        dma_boundary_alignment uint64;
    });

    /// Platform specific HW reset.
    strict HwReset() -> ();

    /// SDHCI defines two clocks: the clock delivered to the external card ("SD clock") and the
    /// internal clock (upstream of the SD clock).
    ///
    /// `VendorSetBusClock()` always enables the internal clock, and if `frequency_hz` is nonzero,
    /// enables the SD clock with the given frequency (the SD clock is disabled if `frequency_hz` is
    /// zero). The driver must wait for all clocks to be stable before returning.
    ///
    /// This method is optional. If no vendor-specific clock configuration is needed, `ZX_ERR_STOP`
    /// should be returned, after which the SDHCI driver will configure the Clock Control register
    /// as recommended by the SDHCI specification.
    strict VendorSetBusClock(struct {
        frequency_hz uint32;
    }) -> () error zx.Status;

    /// Perform a vendor-specific tuning sequence. `cmd_idx` is the command that should used to
    /// receive the tuning pattern from the device. If no vendor-specific tuning sequence is needed,
    /// `ZX_ERR_STOP` should be returned, after which the SDHCI driver will perform tuning using the
    /// sequence prescribed by the SDHCI specification.
    strict VendorPerformTuning(struct {
        cmd_idx uint32;
    }) -> () error zx.Status;
};

service Service {
    device client_end:Device;
};
