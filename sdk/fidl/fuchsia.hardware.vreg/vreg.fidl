// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
@available(added=HEAD)
library fuchsia.hardware.vreg;

using zx;

// For regulators that can be placed in performance states, this enum specifies the list of
// available performance states.
// Entries in this enum are generally sorted in ascening order of performance (and power
// consumption) with gaps left in between entries in case the enum should need to be extended with
// additional intermediate values.
type RegulatorMode = flexible enum {
    LOW_POWER = 0x100;
    HIGH_PERFORMANCE = 0x200;
};

@discoverable
closed protocol Vreg {
    // Set the step which yields a voltage of min_uv + step_size_uv * step.
    // Any regulator that is disabled must remain disabled but the new voltage setting must be
    // cached and applied the next time the regulator is enabled.
    strict SetVoltageStep(struct {
        step uint32;
    }) -> () error zx.Status;

    // Get the current step.
    strict GetVoltageStep() -> (struct {
        result uint32;
    }) error zx.Status;

    // Sets the state of the regulator. Each field is optional but at least one field must be
    // present. Not all regulators may support all fields.
    // Returns ZX_ERR_INVALID_ARGS if the combination of args provided cannot be realized.
    strict SetState(table {
        1: step uint32;
        2: enable bool;
        3: current_ua uint32;
        4: mode RegulatorMode;
    }) -> () error zx.Status;

    // Enable this regulator.
    // If Enable() is called before the regulator has been configured via a call to `SetVoltageStep`
    // then the behavior of this method call is left up to the implementation. The implementation
    // may choose to return an error or set the voltage to some nominal value.
    // The client should not make any assumptions about the state of the regulator at boot time.
    // The enable status of the regulator at boot time is left up to the implementation.
    // Returns `ZX_ERR_NOT_SUPPORTED` if this regulator does not support being Enabled.
    // Returns `ZX_ERR_TIMED_OUT` if the voltage did not settle in an appropriate period of time.
    strict Enable() -> () error zx.Status;

    // Disable this regulator.
    // Returns `ZX_ERR_NOT_SUPPORTED` if this regulator does not support being Disabled.
    strict Disable() -> () error zx.Status;

    // Obtain the parameters for this voltage regulator.
    // The output for this voltage regulator is defined by the
    // following formula:
    //
    //  v_out = min_voltage + step_size * step
    //
    // Where the `step` is programmable by software.
    strict GetRegulatorParams() -> (struct {
        // Minimum voltage supported by this voltage regulator.
        min_uv uint32;

        // Voltage increment at each step.
        step_size_uv uint32;

        // Max number of steps.
        num_steps uint32;
    }) error zx.Status;
};

service Service {
    vreg client_end:Vreg;
};
