// Copyright 2025 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/// Types related to GNSS locations.
///
/// This FIDL provides shared types used by GNSS drivers or services.
@available(added=HEAD)
library fuchsia.location.gnss.types;

/// Horizontal location on earth.
type LatLong = struct {
    /// Latitude in degrees.
    latitude_deg float64;
    /// Longitude in degrees.
    longitude_deg float64;
};

/// Horizontal location with accuracy.
type HorizontalLocation = table {
    /// Latitude and longitude.
    /// Required.
    1: lat_long LatLong;
    /// Estimated horizontal accuracy radius in meters.
    /// Optional.
    2: horizontal_accuracy_meters float64;
};

/// Altitude with accuracy.
type Altitude = table {
    /// Altitude in meters above the WGS84 reference ellipsoid.
    /// Required.
    1: altitude_meters float64;
    /// Estimated altitude accuracy in meters.
    /// Optional.
    2: vertical_accuracy_meters float64;
};

/// Speed with accuracy.
type Speed = table {
    /// Speed at the time of calculating location.
    /// Required.
    1: speed_meters_per_sec float64;
    /// Estimated speed accuracy in meters per second.
    /// Optional.
    2: speed_accuracy_meters_per_sec float64;
};

/// Bearing with accuracy.
type Bearing = table {
    /// Bearing in degrees.
    /// Required.
    1: bearing_deg float64;
    /// Estimated bearing accuracy in degrees.
    /// Optional.
    2: bearing_accuracy_deg float64;
};

/// GNSS location.
///
/// Location provider leaves optional fields blank if the corresponding.
/// information is unavailable.
type Location = table {
    /// Horizontal location.
    /// Required.
    1: lat_long HorizontalLocation;
    /// Altitude in meters above the WGS84 reference ellipsoid.
    /// Optional.
    2: altitude Altitude;
    /// Speed at the time of calculating location.
    /// Optional.
    3: speed Speed;
    /// Bearings. Optional.
    4: bearing Bearing;
    /// GPS time at which last position fix was taken.
    /// Optional.
    5: timestamp_gps_utc_msec uint64;
};

/// Fix types depending on how GNSS receivers determine the fix.
type FixType = flexible enum {
    /// Fix calculated based on direct satellite signals.
    STANDALONE = 1;
    /// Fix calculated with assistance data from a server
    /// for faster and more accurate fixes.
    MS_BASED = 2;
    /// Fix calculated by offloading some of the position
    /// calculation to a server.
    MS_ASSISTED = 3;
};

/// Parameters for fix calculation.
type FixParams = table {
    /// Type of fix to establish.
    /// Required.
    1: fix_type FixType;
    /// Maximum time to wait for a position fix.
    /// Required.
    2: max_time_secs uint8;
    /// The desired accuracy for the location fix.
    /// The modem attempts to determine the location as accurately as possible,
    /// but will stop searching after `max_time_secs` seconds or when
    ///  the estimated accuracy is within `max_dist_meters` meters.
    /// Required.
    3: max_dist_meters uint32;
};

/// Bit masks indicating capabilities that are supported by platform and engine.
type Capabilities = flexible bits : uint32 {
    /// Capability bit mask indicating that GNSS supports scheduling fixes.
    CAPABILITY_SCHEDULING = 0x00000001;

    /// Capability bit mask indicating that GNSS supports Mobile Station-Based
    /// AGNSS mode.
    CAPABILITY_MSB = 0x00000002;

    /// Capability bit mask indicating that GNSS supports Mobile Station-Assisted
    /// AGNSS mode.
    CAPABILITY_MSA = 0x00000004;

    /// Capability bit mask indicating that GNSS supports single-shot fixes.
    CAPABILITY_SINGLE_SHOT = 0x00000008;
};

/// Errors returned in case of failures.
type Error = flexible enum {

    /// Modem is offline.
    MODEM_OFFLINE = 1;

    /// GNSS is disabled.
    GNSS_DISABLED = 2;

    /// Timeout occurred while waiting for an action.
    TIMEOUT = 3;

    /// No cached fix available.
    NO_FIX_AVAILABLE = 4;

    /// Failed due to internal error.
    INTERNAL_ERROR = 5;

    /// Active location session is ongoing.
    ACTIVE_SESSION_ONGOING = 6;

    /// All required parameters are not available.
    MISSING_PARAMETERS = 7;

    /// Unsupported feature.
    NOT_SUPPORTED = 8;

    /// Bad state.
    BAD_STATE = 9;
};
