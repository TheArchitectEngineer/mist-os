// Copyright 2025 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
@available(added=HEAD)
library fuchsia.hardware.qcom.hvdcpopti;

using zx;

/// Essential Parameters.
const ESSENTIAL_PARAMS_LENGTH uint64 = 48;
alias EssentialParams = array<uint8, ESSENTIAL_PARAMS_LENGTH>;

/// Config.
const CONFIG_LENGTH uint64 = 104;
alias Config = array<uint8, CONFIG_LENGTH>;

/// FIFO data.
const FIFO_DATA_MAX_LENGTH uint64 = 1748;

/// FIFO processed data.
const PROCESSED_FIFO_DATA_LENGTH uint64 = 152;
alias ProcessedFifoData = array<uint8, PROCESSED_FIFO_DATA_LENGTH>;

/// Step and JEITA Params.
const STEP_AND_JEITA_PARAMS_LENGTH uint64 = 247;
alias StepAndJeitaParams = array<uint8, STEP_AND_JEITA_PARAMS_LENGTH>;

/// Battery configuration.
const BATTERY_CONFIG_LENGTH uint64 = 304;
alias BatteryConfig = array<uint8, BATTERY_CONFIG_LENGTH>;

/// Battery profile.
const BATTERY_PROFILE_REQUEST_LENGTH uint64 = 8;
alias BatteryProfileRequest = array<uint8, BATTERY_PROFILE_REQUEST_LENGTH>;

const BATTERY_PROFILE_LENGTH uint64 = 596;
alias BatteryProfile = array<uint8, BATTERY_PROFILE_LENGTH>;

/// Used by driver to interface with Starnix and speak to the hvdcp_opti daemon.
@discoverable
closed protocol Device {
    strict GetEssentialParams() -> (struct {
        params EssentialParams;
    }) error zx.Status;

    strict SetEssentialParams(struct {
        params EssentialParams;
    }) -> () error zx.Status;

    strict GetConfig() -> (struct {
        config Config;
    });

    strict -> OnFifoData(struct {
        data vector<uint8>:FIFO_DATA_MAX_LENGTH;
    });

    strict SetProcessedFifoData(struct {
        data ProcessedFifoData;
    }) -> ();

    strict GetStepAndJeitaParams() -> (struct {
        params StepAndJeitaParams;
    });

    strict GetBatteryConfig() -> (struct {
        config BatteryConfig;
    });

    strict GetBatteryProfile(struct {
        request BatteryProfileRequest;
    }) -> (struct {
        profile BatteryProfile;
    }) error zx.Status;

    /// Gets Industrial I/O (IIO) reading value. Values available depend on what the server
    /// supports. May overlap with other configs in fuchsia.power.battery, but will be cleaned
    /// up with sysfs cleanup.
    strict GetIioValue(struct {
        label string:MAX;
    }) -> (struct {
        value int32;
    }) error zx.Status;
};

service Service {
    device client_end:Device;
};
