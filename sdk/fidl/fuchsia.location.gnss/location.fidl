// Copyright 2025 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/// Protocols and types related to GNSS locations.
@available(added=HEAD)
library fuchsia.location.gnss;

using fuchsia.location.gnss.types;

/// Listener for location updates.
open protocol LocationListener {
    /// Hanging-get to obtain next location in the tracking session.
    ///
    /// This call blocks until a new location is is available.
    ///
    /// ## Errors
    /// Returns `GNSS_DISABLED` if GNSS is disabled.
    /// Returns `TIMEOUT` if time out occurred before obtaining an initial
    ///         location of desired accuracy.
    /// Returns `INTERNAL_ERROR` in case of any unspecified issue.
    /// Returns `BAD_STATE` when there is a pending GetNextLocation call.
    GetNextLocation() -> (struct {
        // GNSS location
        location fuchsia.location.gnss.types.Location;
    }) error fuchsia.location.gnss.types.Error;
};

/// Provides access to location data from GNSS.
@discoverable
open protocol Provider {
    /// Get a single shot time-limited position fix with a
    /// specified accuracy.
    ///
    /// ## Errors
    ///
    /// Returns `GNSS_DISABLED` if GNSS is disabled.
    /// Returns `MISSING_PARAMETERS` if all required fix parameters
    ///         are not provided in the request.
    /// Returns `NOT_SUPPORTED` if this feature is not supported.
    /// Returns `INTERNAL_ERROR` in case of any other unspecified issue.
    flexible GetSingleShotFix(struct {
        /// Parameters for fix request.
        params fuchsia.location.gnss.types.FixParams;
    }) -> (struct {
        /// GNSS location.
        location fuchsia.location.gnss.types.Location;
    }) error fuchsia.location.gnss.types.Error;

    /// Start a location tracking session.
    ///
    /// ## Errors
    ///
    /// Returns `GNSS_DISABLED` if GNSS is disabled.
    /// Returns `MISSING_PARAMETERS` if all required fix parameters
    ///         are not provided in the request.
    /// Returns `NOT_SUPPORTED` if this feature is not supported.
    /// Returns `INTERNAL_ERROR` in case of any unspecified issue.
    flexible StartTimeBasedLocationTracking(resource struct {
        /// Parameters for fix request.
        params fuchsia.location.gnss.types.FixParams;
        /// Time between fixes in milliseconds.
        interval_msec uint32;
        /// Listener for location updates.
        listener server_end:LocationListener;
    }) -> () error fuchsia.location.gnss.types.Error;

    /// Get the system's supported GNSS capabilities.
    ///
    /// The system's supported capabilities are built from the platform capabilities
    /// and the available GNSS devices.
    flexible GetCapabilities() -> (struct {
        /// Capability bit mask.
        capabilities fuchsia.location.gnss.types.Capabilities;
    });
};
