// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.bluetooth.le;

using fuchsia.bluetooth as bt;
using zx;

/// An ISO data packet can be no larger than the maximum 12-bit unsigned integer.
/// See Bluetooth Core Spec Version 6.0 | Vol 4, Part E, Section 5.4.5
@available(added=27)
const MAX_ISO_PACKET_SIZE uint16 = 0x0FFF;

/// The maximum number of connected isochronous streams that can be added to
/// a connected isochronous group.
@available(added=27)
const MAX_STREAMS_IN_GROUP uint8 = 31;

/// Parameters related to a single direction of transmission in an established CIS.
@available(added=24)
type CisUnidirectionalParams = table {
    /// Transport latency, in the range [234, 8388607] microseconds
    ///
    /// This field is always present.
    1: transport_latency zx.Duration;

    /// Burst number for transmissions in this direction.
    ///
    /// This field is always present.
    2: burst_number uint8;

    /// Flush timeout for each payload, in multiples of the ISO interval.
    ///
    /// This field is always present.
    3: flush_timeout uint8;
};

/// Established configuration for a single CIS.
@available(added=24)
type CisEstablishedParameters = table {
    /// Maximum time for transmission of PDUs of all CISes in a CIG event.
    /// In the range [234, 8388607] microseconds.
    ///
    /// This field is always present.
    1: cig_sync_delay zx.Duration;

    /// The maximum time for transmission of PDUs of the specified CIS in a CIG
    /// event. In the range [234, 8388607] microseconds.
    ///
    /// This field is always present.
    2: cis_sync_delay zx.Duration;

    /// Maximum number of subevents in each CIS event.
    ///
    /// This field is always present.
    3: max_subevents uint8;

    /// Time between two consecutive CIS anchor points, in the range [5ms, 4s]
    ///
    /// This field is always present.
    4: iso_interval zx.Duration;

    /// Parameters for Central => Peripheral transmissions, if applicable.
    ///
    /// This field is present if the stream includes isochronous data transmission from the
    /// Central to the Peripheral.
    5: central_to_peripheral_params CisUnidirectionalParams;

    /// Parameters for Peripheral => Central transmissions, if applicable.
    ///
    /// This field is present if the stream includes isochronous data transmission from the
    /// Peripheral to the Central.
    6: peripheral_to_central_params CisUnidirectionalParams;
};

/// Flags indicating validity of data received from an isochronous channel.
@available(added=24)
type IsoPacketStatusFlag = strict enum : uint8 {
    /// Valid data. The complete SDU was received correctly.
    VALID_DATA = 0;

    /// Possibly invalid data. One ore more of the fragments received may contain errors or part of
    /// the packet may be missing.
    DATA_WITH_POSSIBLE_ERRORS = 1;

    /// Parts of the packet were not received correctly.
    LOST_DATA = 2;
};

@available(added=27)
type CigFramingOptions = strict enum {
    UNFRAMED = 0x00;
    FRAMED = 0x01;
};

@available(added=27)
type CigPacking = flexible enum {
    SEQUENTIAL = 0x00;
    INTERLEAVED = 0x01;
};

@available(added=27)
type CigParameters = table {
    /// Interval between the start of consecutive SDUs (central => peripheral,
    /// microseconds). This is a function of the codec being used.
    /// Required.
    1: sdu_interval_c_to_p uint32;

    /// Interval between the start of consecutive SDUs (peripheral => central,
    /// microseconds). This is a function of the codec being used.
    /// Required.
    2: sdu_interval_p_to_c uint32;

    /// The preferred method of arranging subevents of multiple CISes. The
    /// controller may ignore this parameter.
    /// Optional. If not specified, SEQUENTIAL will be used.
    3: packing CigPacking;

    /// Specifies inclusion of time offset values in data frame.
    /// Optional. If not specified, UNFRAMED will be used.
    4: framing CigFramingOptions;

    /// Maximum latency, in milliseconds, between controllers (central =>
    /// peripheral).
    /// Required.
    5: max_transport_latency_c_to_p uint16;

    /// Maximum latency, in milliseconds, between controllers (peripheral =>
    /// central).
    /// Required.
    6: max_transport_latency_p_to_c uint16;
};

@available(added=27)
type CisRequestedParameters = resource table {
    /// ID selected to uniquely identify a stream within a CIG. All `cis_id`s
    /// must be distinct within a single creation request.
    /// Required.
    1: cis_id uint8;

    /// The channel that will be used for operations on the stream.
    /// Required.
    2: connection_stream server_end:IsochronousStream;

    /// Maximum SDU size (central => peripheral). This is a function of the
    /// codec being used. Unidirectional streams should set the unused
    /// direction to 0.
    /// Optional. If not provided, a value of 0 will be used (unidirectional)
    3: max_sdu_size_outgoing uint16;

    /// Maximum SDU size (peripheral => central). This is a function of the
    /// codec being used. Unidirectional streams should set the unused
    /// direction to 0.
    /// Optional. If not provided, a value of 0 will be used (unidirectional)
    4: max_sdu_size_incoming uint16;
};

@available(added=27)
type CisParameters = table {
    /// ID of the stream to establish (as previously passed to Connection/CreateCig()).
    /// Required.
    1: cis_id uint8;

    /// Peripheral device providing other end of the isochronous data stream.
    /// Required.
    2: id bt.PeerId;
};

@available(added=27)
type CreateCigError = flexible enum {
    /// The CIG could not be created because an unknown or unspecified error occurred unrelated
    /// to the other errors defined below.
    UNKNOWN = 1;

    /// The CIG could not be created because it would exceed available resources.
    NOT_ENOUGH_RESOURCES = 2;

    /// The CIG could not be created because the combination of parameters supplied to CreateCig
    /// for one or more CISes are invalid.
    INVALID_CIS_PARAMETERS = 3;
};

@available(added=27)
type EstablishStreamsError = flexible enum {
    /// The controller does not support a CIS with the parameters specified for it.
    NOT_SUPPORTED = 1;

    /// The same CIS was specified multiple times in a call.
    DUPLICATE_CIS = 2;

    /// One or more CISes specified already exist.
    CIS_ALREADY_ESTABLISHED = 3;

    /// One or more of the peers specified in the CIS parameters are not connected.
    PEER_NOT_CONNECTED = 4;
};

@available(added=24)
open protocol IsochronousStream {
    /// Provide notification when a CIS is established, as initiated by a Central
    /// (from CigServer::CreateCis()), or a Peripheral (from CisRequestManager::Accept()).
    flexible -> OnEstablished(table {

        /// A result of ZX_ERR_INTERNAL indicates that the controller received a request
        /// but was unable to establish the stream.
        1: result zx.Status;

        /// This field is always present if a stream was successfully established.
        2: established_params CisEstablishedParameters;
    });

    /// Create an isochronous data path with the specified parameters. Only in-band (HCI) ISO
    /// transport is currently supported.
    ///
    /// Returns ZX_ERR_ALREADY_EXISTS if a ISO stream has already been created for this
    /// direction.
    ///
    /// Returns ZX_ERR_BAD_STATE if issued on a peripheral before a CIS request has been
    /// accepted.
    ///
    /// Returns ZX_ERR_INVALID_ARGS if the codec arguments are invalid or outside of the
    /// controller's supported range.
    flexible SetupDataPath(table {
        /// Directions in which data will flow.
        /// Required.
        1: data_direction bt.DataDirection;

        /// Specifies the coding format used over the air.
        /// Required.
        2: codec_attributes bt.CodecAttributes;

        /// The delay provided must be within the controller's supported range and should not
        /// exceed 4 seconds.
        /// Required.
        3: controller_delay zx.Duration;
    }) -> () error zx.Status;

    /// Receive data from an output (controller => host) ISO stream that has been established and
    /// set up. Designed to be used with a hanging get pattern.
    ///
    /// Can be invoked before the ISO data stream has been established and set up, but will not
    /// return until after it has been set up and data has been received.
    flexible Read() -> (table {
        /// The data frame itself.
        /// Required.
        1: data vector<uint8>:MAX;

        /// The sequence number associated with the frame.
        /// Required.
        2: sequence_number uint16;

        /// Status flags of packet, as reported by the controller.
        /// Required.
        3: status_flag IsoPacketStatusFlag;

        /// Reception timestamp, as reported by the controller.
        /// Optional.
        4: timestamp zx.Duration;
    });

    /// Send data to an established ISO stream (host => controller).
    ///
    /// Returns ZX_ERR_INTERNAL for any errors encountered.
    @available(added=27)
    flexible Write(table {
        /// The data frame itself.
        1: data vector<uint8>:MAX_ISO_PACKET_SIZE;
    }) -> () error zx.Status;
};

@available(added=27)
open protocol ConnectedIsochronousGroup {
    /// Connect one or more Isochronous streams. Each CIS is established with the peer specified
    /// in the parameters. On successful initiation of the operation, an OnEstablished() event will
    /// be sent on the IsochronousStream.
    ///
    /// On error, no CISes are established and an appropriate `EstablishStreamsError` code will be
    /// returned.
    ///
    /// Otherwise, this call returns once each CIS specified has connected.
    flexible EstablishStreams(table {
        /// Required.
        1: cis_params vector<CisParameters>:MAX_STREAMS_IN_GROUP;
    }) -> () error EstablishStreamsError;

    /// Remove this CIG. Associated streams will be closed. This protocol will be closed after
    /// all of the associated streams have closed and the group has been removed.
    flexible Remove();
};
