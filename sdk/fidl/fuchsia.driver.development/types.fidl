// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.driver.development;

using fuchsia.component.decl;
using fuchsia.driver.framework;
using fuchsia.url;
using zx;

const NODE_MONIKER_MAX uint32 = 1024;
@available(added=26)
const MAX_SEGMENTS uint32 = 20;

type NodeInfo = table {
    /// Unique ID identifying the node.
    1: id uint64;

    /// List of ids representing parents. If more than one, this is a composite node.
    2: parent_ids vector<uint64>:MAX;

    /// List of ids representing children.
    3: child_ids vector<uint64>:MAX;

    /// The process KOID of the driver host the driver resides within.
    4: driver_host_koid zx.Koid;

    /// URL to the driver component manifest
    5: bound_driver_url fuchsia.url.Url;

    /// The collection-relative moniker of the node.
    @available(added=18)
    7: moniker string:NODE_MONIKER_MAX;

    /// Properties of the node.
    @available(added=18)
    8: node_property_list
            vector<fuchsia.driver.framework.NodeProperty>:fuchsia.driver.framework.MAX_PROPERTY_COUNT;

    /// Component offers to the node.
    @available(added=18)
    9: offer_list vector<fuchsia.component.decl.Offer>:MAX;

    /// Whether the node is in a quarantined state. That is, the |bound_driver_url| has failed to
    /// start, and the node is no longer running its driver instance.
    @available(added=25)
    10: quarantined bool;

    /// Information about the node's bus topology.
    @available(added=26)
    11: bus_topology vector<fuchsia.driver.framework.BusInfo>:MAX_SEGMENTS;
};

/// Information about a node binding to either a driver or a composite.
type NodeBindingInfo = table {
    /// Full topological name of the node.
    1: node_name string:NODE_MONIKER_MAX;
    /// This is the component url for the driver that bound to the node.
    /// If this is present, then |composite_parents| must not be.
    2: driver_url fuchsia.url.Url;
    /// The composite parents that this node binded to.
    /// If this is present, then |driver_url| must not be.
    3: composite_parents vector<fuchsia.driver.framework.CompositeParent>:MAX;
};

/// Contains information for a composite.
type CompositeInfo = strict union {
    2: composite fuchsia.driver.framework.CompositeInfo;
};

/// Contains information for a composite node.
type CompositeNodeInfo = table {
    /// The topological paths of the parent nodes of this composite, ordered by index.
    1: parent_topological_paths vector<string:<MAX, optional>>:MAX;

    /// The topological path of the created composite node. Empty if not created.
    2: topological_path string:MAX;

    // Information about the composite.
    3: composite CompositeInfo;
};

/// Contains information for a thread.
@available(added=NEXT)
type ThreadInfo = table {
    /// The koid for the thread.
    1: koid zx.Koid;

    /// The name of the thread.
    2: name string:MAX;

    /// The scheduler role of the thread.
    3: scheduler_role string:MAX;
};

/// Contains information for a dispatcher.
@available(added=NEXT)
type DispatcherInfo = table {
    /// The driver which created this dispatcher.
    1: driver fuchsia.url.Url;

    /// The name of the dispatcher.
    2: name string:MAX;

    /// The options the dispatcher was created with.
    3: options uint32;

    /// The scheduler role of the dispatcher.
    4: scheduler_role string:MAX;
};

/// Contains information for a driver host.
@available(added=NEXT)
type DriverHostInfo = table {
    /// The process KOID of the driver host.
    1: process_koid zx.Koid;

    /// The list of threads of the driver host.
    2: threads vector<ThreadInfo>:MAX;

    /// List of drivers loaded into this driver host.
    3: drivers vector<fuchsia.url.Url>:MAX;

    /// List of dispatchers .
    4: dispatchers vector<DispatcherInfo>:MAX;
};

type TestNodeAddArgs = table {
    /// Name of the node.
    1: name string:NODE_MONIKER_MAX;

    /// Properties of the node.
    2: properties
            vector<fuchsia.driver.framework.NodeProperty>:fuchsia.driver.framework.MAX_PROPERTY_COUNT;
};

/// These flags indicate when a |fuchsia.driver.index.DriverIndex::MatchDriver| call should be
/// made for a node that is restarting in order to find a new driver, instead of reusing the driver
/// that was previously bound to the node.
type RestartRematchFlags = flexible bits : uint32 {
    /// Rematch nodes that are currently bound to the requested driver. The requested driver is
    /// the driver url that the restart operation was initiated for.
    REQUESTED = 0x0001;
    /// Rematch nodes that are currently bound to a driver other than the requested driver. These
    /// are nodes that are affected by the restart of the requested driver, for example when
    /// it is a colocated parent.
    NON_REQUESTED = 0x0002;
    /// Rematch nodes that are created as part of a completed composite spec.
    COMPOSITE_SPEC = 0x0008;
};
