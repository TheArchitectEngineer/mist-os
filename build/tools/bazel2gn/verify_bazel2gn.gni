# Copyright 2025 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")

# Verifies the consistency between the file this target is defined in, and the
# BUILD.bazel file from the same directory.
#
# NOTE: This template is meant to be auto-generated by bazel2gn. It is very
# unlikely you would want to create a target using this template manually.
template("verify_bazel2gn") {
  assert(is_host,
         "verify_bazel2gn targets can only be expanded in the host_toolchain")

  # We need nothing from the invoker, and this `not_needed` is needed to keep GN
  # from complaining.
  not_needed(invoker, "*")

  compiled_action(target_name) {
    testonly = true
    _gn_bin = "//prebuilt/third_party/gn/${host_platform}/gn"
    inputs = [
      _gn_bin,
      "BUILD.bazel",
      "BUILD.gn",
    ]
    outputs = [ "${target_out_dir}/${target_name}.diff" ]
    tool = "//build/tools/bazel2gn"
    args = [
      "--bazel_input_path",
      rebase_path("BUILD.bazel", root_build_dir),
      "--gn_output_path",
      rebase_path("BUILD.gn", root_build_dir),
      "--gn_bin",
      rebase_path(_gn_bin, root_build_dir),
      "--diff_output_path",
      rebase_path(outputs[0], root_build_dir),
      "--check_only",
    ]
    metadata = {
      # Path from repository root to where this target is defined.
      #
      # For example: //build/tools/bazel2gn -> build/tools/bazel2gn.
      bazel2gn_dir = [ rebase_path(".", "//") ]
    }
  }
}
