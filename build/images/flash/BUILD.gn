# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bazel/bazel_inputs.gni")
import("//build/board.gni")
import("//build/images/custom_signing.gni")
import("//build/images/flash/parts.gni")
import("//build/images/vboot/vboot.gni")
import("//build/sdk/config.gni")
import("//build/sdk/virtual_device.gni")

assert(current_toolchain == default_toolchain,
       "//build/images/* are only valid in the Fuchsia toolchain")

# Deps that are added to the //build/images:default_image_deps target.
flash_image_deps = []

# EFI ESP images.
group("esp") {
  public_deps = [ "//src/firmware/gigaboot/cpp:fuchsia" ]
}

bazel_input_file("esp.bazel_input") {
  generator = ":esp"
  outputs = [ "${root_build_dir}/fuchsia.esp.blk" ]
  gn_targets_name = "fuchsia_esp"
}

if (use_gigaboot) {
  flash_image_deps += [ ":esp" ]
}

foreach(firmware, firmware_prebuilts) {
  if (firmware.type == "") {
    # Don't add a trailing delimiter if firmware.type is empty.
    name = "firmware"
    bootserver_arg = "--firmware"
  } else {
    name = "firmware_${firmware.type}"
    bootserver_arg = "--firmware-${firmware.type}"
  }

  copy(name) {
    testonly = true
    sources = [ "${firmware.path}${firmware_prebuilts_path_suffix}" ]
    outputs = [ "$root_out_dir/$name.img" ]

    metadata = {
      images = [
        {
          label = get_label_info(":$name", "label_with_toolchain")
          archive = true
          bootserver_pave = [ bootserver_arg ]
          bootserver_pave_zedboot = [ bootserver_arg ]
          name = name
          path = "$name.img"
          type = "img"

          if (defined(firmware.partition)) {
            fastboot_flash = [ firmware.partition ]
          }
        },
      ]
    }
  }

  flash_image_deps += [ ":$name" ]
}

group("flash") {
  testonly = true
  public_deps = flash_image_deps
}
