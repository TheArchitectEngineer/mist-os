# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/assembled_system.gni")
import("//build/assembly/legacy_image_metadata_overrides.gni")
import("//build/assembly/update_package.gni")
import("//build/board.gni")
import("//build/images/args.gni")
import("//build/images/filesystem_limits.gni")
import("//build/images/vboot/vboot.gni")
import("//build/product.gni")
import("//build/python/python_action.gni")
import("//build/sdk/product_bundle.gni")
import("//build/security.gni")
import("//build/testing/host_test_data.gni")
import("//zircon/kernel/phys/qemu.gni")

if (is_host) {
  host_test_data("fuchsia_zbi_for_host_tests") {
    sources = [ "$root_build_dir/fuchsia.zbi" ]
    # This dep cannot be specified, because it creates a dependency cycle.  It
    # could be added if all tests using this were not in any package set (and
    # were just in host_labels)
    #deps = [ ":fuchsia($default_toolchain)" ]
  }
}

# The assembly operation should only be defined in the default (fuchsia)
# toolchain.
if (is_fuchsia) {
  assert(current_toolchain == default_toolchain,
         "//build/images/* are only valid in the Fuchsia toolchain")

  # This catches inadvertent dependencies on the "fucshia" assembly implementation
  # in bringup-only configurations.
  assert(
      !use_bringup_assembly,
      "The bringup product config cannot rely on the fuchsia assembly.  Bringup has it's own in //build/images/bringup")

  ##################################################
  # Fuchsia
  ##################################################

  # The `:fuchsia` target assembles the main Fuchsia image, for the core product only.
  #
  # This group only provides GN metadata about the update package(s), none of
  # packages that are included in the assembled image are present in GN metadata
  # walks of this target.
  #
  # To get the list of packages in this assembly, use the
  # `package_list_from_assembly()` GN template.
  group("fuchsia") {
    testonly = fuchsia_zbi_testonly

    if (!use_bazel_images_only) {
      public_deps = [
        ":fuchsia_assembly",
        ":product_bundle",
        ":update",
      ]
    }

    metadata = {
      package_barrier = []
      if (!use_bazel_images_only) {
        # Only include the update package(s) manifest(s) in metadata collection.
        # To get a file containing a list of the base & cache packages, use the
        # `package_list_from_assembly()` GN template.
        package_barrier = [ ":update" ]
      }
    }
  }

  # Bazel assembly builds a product bundle, so we don't need to build product
  # bundle and update packages in GN.
  if (!use_bazel_images_only) {
    assembled_system("fuchsia_assembly") {
      testonly = fuchsia_zbi_testonly

      generate_fvm = !fxfs_blob
      generate_fxfs = fxfs_blob
      generate_fvm_fastboot = !fxfs_blob && assembly_generate_fvm_fastboot
      generate_fvm_nand = !fxfs_blob && assembly_generate_fvm_nand
      generate_vbmeta = use_vbmeta

      board_config_label = board_configuration_label

      if (generate_fvm) {
        assembly_include_account_in_fvm = include_account_in_fvm
      }

      # zbi arguments
      if (custom_signing_script != "") {
        inputs = custom_signing_script_inputs
        deps = [ "//build/images/custom_signing:deps" ]
        generate_signed_zbi = true
      } else if (use_vboot) {
        inputs = vboot_action.inputs
        generate_signed_zbi = true
      }

      if (fuchsia_product_assembly_config_label != false) {
        product_assembly_config_label = fuchsia_product_assembly_config_label
      }

      output_dir = root_build_dir
      image_name = "fuchsia"

      image_metadata_overrides = legacy_fuchsia_image_metadata_overrides
    }

    files = {
      platform_aib_dir = get_label_info("//bundles/assembly", "target_out_dir")

      # Outputs of assembly.
      outdir = target_out_dir + "/fuchsia"
      zbi = "${outdir}/fuchsia.zbi"
      zbi_signed = "${outdir}/fuchsia.zbi.signed"
      vbmeta = "${outdir}/fuchsia.vbmeta"
      blobfs = "${outdir}/blob.blk"
      fvm = "${outdir}/fvm.blk"
      fvm_sparse = "${outdir}/fvm.sparse.blk"
      fvm_fastboot = "${outdir}/fvm.fastboot.blk"
      fxfs = "${outdir}/fxfs.blk"
      fxfs_sparse = "${outdir}/fxfs.sparse.blk"
      packages_json = "${outdir}/packages.json"
      images_json = "${outdir}/images.json"

      # Outputs of recovery.
      recovery_name = get_label_info(recovery_label, "name")
      recovery_outdir =
          get_label_info(recovery_label, "target_out_dir") + "/" + recovery_name
      recovery_zbi = "${recovery_outdir}/${recovery_name}.zbi"
      recovery_zbi_signed = "${recovery_outdir}/${recovery_name}.zbi.signed"
      recovery_vbmeta = "${recovery_outdir}/${recovery_name}.vbmeta"
      recovery_blobfs = "${recovery_outdir}/blob.blk"
      recovery_fvm = "${recovery_outdir}/fvm.blk"
      recovery_fvm_sparse = "${recovery_outdir}/fvm.sparse.blk"
      recovery_fvm_fastboot = "${recovery_outdir}/fvm.fastboot.blk"
      recovery_fxfs = "${recovery_outdir}/fxfs.blk"
      recovery_fxfs_sparse = "${recovery_outdir}/fxfs.sparse.blk"
      recovery_images_json = "${recovery_outdir}/images.json"

      esp_image_path = "${root_build_dir}/fuchsia.esp.blk"

      qemu_kernel = qemu_boot_shim.path
    }

    _partitions_config = "//boards/partitions:default"
    if (has_board) {
      assert(partitions_config_label != false,
             "Need to define partitions_config_label")
      _partitions_config = partitions_config_label
    }

    update_epoch = update_platform_epoch + update_product_epoch
    update_package("update") {
      testonly = fuchsia_zbi_testonly
      deps = [
        ":fuchsia_assembly",
        "//build/info:build_info_files",
        recovery_label,
      ]
      partitions = _partitions_config
      system_a = files.images_json
      system_r = files.recovery_images_json
      board_name = board_name
      version_file = build_info_files.version
      epoch = "${update_epoch}"
    }

    product_bundle_label = "product_bundle"
    product_bundle(product_bundle_label) {
      testonly = fuchsia_zbi_testonly
      name = main_product_bundle_name
      deps = [
        ":fuchsia_assembly",
        "//build/info:build_info_files",
        recovery_label,
      ]

      update = {
        version_file = build_info_files.version
        epoch = "${update_epoch}"
      }

      partitions = _partitions_config
      system_a = files.images_json
      system_r = files.recovery_images_json

      # Create lists of the files that are referenced by the assembly manifests.
      _assembly_contents = [ files.qemu_kernel ]
      if (fxfs_blob) {
        _assembly_contents += [
          files.fxfs,
          files.fxfs_sparse,
        ]
      } else {
        _assembly_contents += [
          files.blobfs,
          files.fvm,
          files.fvm_sparse,
        ]
      }
      _recovery_contents = [ files.qemu_kernel ]
      if (files.recovery_name != "zedboot") {
        if (fxfs_blob) {
          _recovery_contents += [
            files.recovery_fxfs,
            files.recovery_fxfs_sparse,
          ]
        } else {
          _recovery_contents += [
            files.blobfs,
            files.fvm,
            files.fvm_sparse,
          ]
        }
      }
      if (!fxfs_blob &&
          (assembly_generate_fvm_fastboot || assembly_generate_fvm_nand)) {
        _assembly_contents += [ files.fvm_fastboot ]
        if (files.recovery_name != "zedboot") {
          _recovery_contents += [ files.recovery_fvm_fastboot ]
        }
      }
      if (custom_signing_script != "" || use_vboot) {
        _assembly_contents += [ files.zbi_signed ]
        _recovery_contents += [ files.recovery_zbi_signed ]
      } else {
        _assembly_contents += [ files.zbi ]
        _recovery_contents += [ files.recovery_zbi ]
      }
      if (use_vbmeta) {
        _assembly_contents += [ files.vbmeta ]
        _recovery_contents += [ files.recovery_vbmeta ]
      }

      # List the contents of each input so that the outputs can be calculated.
      system_a_contents = _assembly_contents
      system_r_contents = _recovery_contents

      if (delivery_blob_type != false) {
        delivery_blob_type = delivery_blob_type
      }
    }
  }
}
