# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

declare_args() {
  # This is a build that imports a board (vs. sdk).  If a board is set
  # (fx set <product>.<board>) this is true.
  has_board = false

  # Board name used for paving and amber updates.
  board_name = ""

  # Human readable board description corresponding to the board name.
  board_description = ""

  # Configs that are added when targeting this board.
  board_configs = []

  # A list of paths to the unlock credentials file necessary to unlock this
  # board's fastboot protocol.
  board_fastboot_unlock_credentials = []

  # List of paths to board-specific tools to include in the build output.
  #
  # Most development tools can just be used in-tree and do not need to be
  # included here. This arg is only meant for tools which may need to be
  # distributed along with the build files, for example tools for flashing
  # from SoC recovery mode.
  #
  # Assets included in this way are included best-effort only and do not form
  # any kind of stable contract for users of the archive.
  board_tools = []

  # The label for the board configuration target to use with Product Assembly
  board_configuration_label = false

  # Whether or not the board supports emulator devices.
  # This is used to determine if product bundle metadata should generate a
  # virtual device spec or both.
  board_is_emu = false

  # The partitions config information used to create an update package and
  # product bundle.
  partitions_config_label = false

  # The label for the dtbo target. This is used by boot_tests
  dtbo_label = false
}

declare_args() {
  # Possibly use a different configuration for recovery than for the main
  # product.  By default, use the same board.
  #
  # This is a separate declare_args() block so that it can default to the
  # provided value for 'board_configuration_label'
  recovery_board_configuration_label = board_configuration_label
}

# Ensure that partitions_config_label is default_toolchain-qualified.
if (partitions_config_label != false) {
  if (partitions_config_label ==
      get_label_info(partitions_config_label, "label_no_toolchain")) {
    partitions_config_label = "$partitions_config_label($default_toolchain)"
  } else {
    assert(
        get_label_info(partitions_config_label, "toolchain") ==
            default_toolchain,
        "partitions_config_label (\"$partitions_config_label\") should be a target in the default_toolchain")
  }
}
