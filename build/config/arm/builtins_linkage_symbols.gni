# Copyright 2025 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This lists linkage symbols that are normal and harmless references implicitly
# emitted by the compiler, but always provided by the "builtins" library.
builtins_linkage_symbols = [
  "__aeabi_cdcmpeq",
  "__aeabi_cdcmpeq_check_nan",
  "__aeabi_cdcmple",
  "__aeabi_cdrcmple",
  "__aeabi_cfcmpeq",
  "__aeabi_cfcmpeq_check_nan",
  "__aeabi_cfcmple",
  "__aeabi_cfrcmple",
  "__aeabi_d2f",
  "__aeabi_d2h",
  "__aeabi_d2iz",
  "__aeabi_d2lz",
  "__aeabi_d2uiz",
  "__aeabi_d2ulz",
  "__aeabi_dadd",
  "__aeabi_dcmpeq",
  "__aeabi_dcmpge",
  "__aeabi_dcmpgt",
  "__aeabi_dcmple",
  "__aeabi_dcmplt",
  "__aeabi_dcmpun",
  "__aeabi_ddiv",
  "__aeabi_dmul",
  "__aeabi_dneg",
  "__aeabi_drsub",
  "__aeabi_dsub",
  "__aeabi_f2d",
  "__aeabi_f2h",
  "__aeabi_f2iz",
  "__aeabi_f2lz",
  "__aeabi_f2uiz",
  "__aeabi_f2ulz",
  "__aeabi_fadd",
  "__aeabi_fcmpeq",
  "__aeabi_fcmpge",
  "__aeabi_fcmpgt",
  "__aeabi_fcmple",
  "__aeabi_fcmplt",
  "__aeabi_fcmpun",
  "__aeabi_fdiv",
  "__aeabi_fmul",
  "__aeabi_fneg",
  "__aeabi_frsub",
  "__aeabi_fsub",
  "__aeabi_h2f",
  "__aeabi_i2d",
  "__aeabi_i2f",
  "__aeabi_idiv",
  "__aeabi_idiv0",
  "__aeabi_idivmod",
  "__aeabi_l2d",
  "__aeabi_l2f",
  "__aeabi_lasr",
  "__aeabi_lcmp",
  "__aeabi_ldiv0",
  "__aeabi_ldivmod",
  "__aeabi_llsl",
  "__aeabi_llsr",
  "__aeabi_lmul",
  "__aeabi_memclr",
  "__aeabi_memclr4",
  "__aeabi_memclr8",
  "__aeabi_memcmp",
  "__aeabi_memcmp4",
  "__aeabi_memcmp8",
  "__aeabi_memcpy",
  "__aeabi_memcpy4",
  "__aeabi_memcpy8",
  "__aeabi_memmove",
  "__aeabi_memmove4",
  "__aeabi_memmove8",
  "__aeabi_memset",
  "__aeabi_memset4",
  "__aeabi_memset8",
  "__aeabi_ui2d",
  "__aeabi_ui2f",
  "__aeabi_uidiv",
  "__aeabi_uidivmod",
  "__aeabi_ul2d",
  "__aeabi_ul2f",
  "__aeabi_ulcmp",
  "__aeabi_uldivmod",

  # This is not actually provided by builtins, but by libunwind.  It's not
  # actually used in any relocated value; it's just referenced by a pro forma
  # R_ARM_NONE reloc to indicate the expectation that the unwinder will infer
  # implicit references to it from EHABI format encoding that doesn't include
  # its actual address.
  "__aeabi_unwind_cpp_pr0",
]
