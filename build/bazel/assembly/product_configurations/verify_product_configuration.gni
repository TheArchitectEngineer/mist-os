# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bazel/bazel_workspace.gni")

# Compares a product configuration file with a golden target.
#
# Parameters
#
#  gn_product_config_target (required)
#    The target generating the GN product config to be compared.
#    Type: string (label)
#
#  bazel_product_config_file (required)
#    The product config file generated by Bazel to be compared.
#    NOTE: this file must be generated by a dep of this target.
#    Type: string (path)
#
#  config_data_to_ignore (optional)
#    List of config_data to ignore in the comparison. Each entry
#    should be of the following form: "[package_name]:[destination path]".
#
#  deps
#  visibility
#
template("verify_product_configuration") {
  assert(defined(invoker.gn_product_config_target),
         "gn_product_config_target is required")
  assert(defined(invoker.bazel_product_config_file),
         "bazel_product_config_file is required")

  action(target_name) {
    testonly = true

    # See https://fxbug.dev/42073317#c4
    hermetic_deps = false

    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])
    _gn_product_config_out_dir =
        get_label_info(invoker.gn_product_config_target, "target_out_dir")
    _gn_product_config_name =
        get_label_info(invoker.gn_product_config_target, "name")
    _gn_product_config_file = "${_gn_product_config_out_dir}/${_gn_product_config_name}/product_assembly_config.json"

    depfile = "${target_gen_dir}/${target_name}.d"

    inputs = [
      _gn_product_config_file,
      invoker.bazel_product_config_file,
    ]
    outputs = [ "${target_out_dir}/${target_name}/diff" ]

    deps = [ invoker.gn_product_config_target ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }

    script = "//build/bazel/assembly/product_configurations/verify_product_configuration.py"
    args = [
      "--product_config1",
      rebase_path(inputs[0], root_build_dir),
      "--root_dir1",
      ".",
      "--product_config2",
      rebase_path(inputs[1], root_build_dir),
      "--root_dir2",
      bazel_top_dir_rebased + "/workspace",
      "--depfile",
      rebase_path(depfile, root_build_dir),
      "--output",
      rebase_path(outputs[0], root_build_dir),
    ]

    if (defined(invoker.config_data_to_ignore)) {
      args += [ "--config_data_to_ignore" ]
      args += invoker.config_data_to_ignore
    }
  }
}
