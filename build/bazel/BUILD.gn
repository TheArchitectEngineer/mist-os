# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/developer_overrides.gni")
import("//build/assembly/sshd_config.gni")
import("//build/bazel/bazel_action.gni")
import("//build/bazel/bazel_content_hashes.gni")
import("//build/bazel/bazel_inputs.gni")
import("//build/bazel/bazel_workspace.gni")
import("//build/bazel/generate_content_hash_file.gni")
import("//build/bazel/generate_prebuilt_dir_content_hash.gni")
import("//build/bazel/remote_services.gni")
import("//build/config/clang/clang.gni")
import("//build/images/vbmeta.gni")
import("//build/info/info.gni")
import("//build/product.gni")
import("//src/connectivity/policy/netcfg/delegated_network_provisioning.gni")

assert(
    current_toolchain == default_toolchain,
    "This BUILD.gn file should only be parsed in the default toolchain, to prevent generating Bazel workspace multiple times.")

group("generate_main_workspace") {
  # This dependency is needed to properly populate the @fuchsia_sdk repository.
  deps = [ "//sdk:bazel_in_tree_idk" ]

  # This dependency is needed to properly populate the @internal_sdk repository.
  # (see https://fxbug.dev/42063353).
  # TODO(https://fxbug.dev/333907192): Remove this.
  deps += [ "//sdk:bazel_internal_only_idk" ]
}

# Generate a symlink to the @fuchsia_sdk repository, after ensuring it was
# properly populated by Bazel. The symlink has a stable path of
# $BAZEL_TOPDIR/fuchsia_sdk while the actual location of the repository
# depends on Bazel internals (e.g. whether BzlMod is enabled or not).
group("generate_fuchsia_sdk_repository") {
  deps = [ ":final_fuchsia_in_tree_sdk" ]
}

# LINT.IfChange
generate_content_hash_file("fuchsia_in_tree_idk.hash") {
  source_paths = [ "$root_build_dir/sdk/exported/bazel_in_tree_idk" ]
  deps = [ "//sdk:bazel_in_tree_idk" ]
}

generate_content_hash_file("fuchsia_internal_only_idk.hash") {
  source_paths = [ "$root_build_dir/sdk/exported/bazel_internal_only_idk" ]
  deps = [ "//sdk:bazel_internal_only_idk" ]
}

# LINT.ThenChange(//build/bazel/scripts/workspace_utils.py)

# Generate a symlink that points to the final version of the in-tree IDK
# Nothing should depend on this directly, as it should only be used
# to run the Bazel SDK Test suite, see //build/bazel_sdk/tests/README.md
bazel_action("final_fuchsia_in_tree_idk") {
  command = "build"

  # NOTE: The list item below should be @fuchsia_in_tree_idk//:final_idk
  # but bazel_action() does not support Bazel target labels that belong
  # to an external repository. To work around this, an alias() target
  # is created in //build/bazel/bazel_sdk:BUILD.bazel, and the
  # `bazel` path in the scope below is explicit instead of using
  # substitution expressions such as {{BAZEL_TARGET_OUT_DIR}}.
  bazel_targets = [ "//build/bazel/bazel_sdk:final_fuchsia_in_tree_idk" ]
  deps = [ "//build/bazel/bazel_sdk:bazel_in_tree_idk.bazel_input" ]

  # We want the symlink to appear as gen/build/bazel/fuchsia_in_idk
  ninja_base_dir = target_gen_dir

  final_symlink_outputs = [
    {
      bazel = "bazel-bin/external/fuchsia_in_tree_idk/final_idk"
      ninja = "fuchsia_in_tree_idk"
    },
  ]
}

# Generate a symlink that points to the final version of the Bazel SDK
# used by the platform build.
bazel_action("final_fuchsia_in_tree_sdk") {
  command = "build"
  bazel_targets = [
    "//build/bazel/bazel_sdk:final_fuchsia_in_tree_sdk",
    "//build/bazel/bazel_sdk:verify_final_fuchsia_in_tree_sdk",
  ]
  deps = [ "//build/bazel/bazel_sdk:bazel_in_tree_idk.bazel_input" ]

  # We want the symlink to appear as $BUILD_DIR/gen/build/bazel/fuchsia_sdk
  ninja_base_dir = target_gen_dir

  final_symlink_outputs = [
    {
      bazel = "{{BAZEL_TARGET_OUT_DIR}}/{{BAZEL_TARGET_NAME}}"
      ninja = "fuchsia_sdk"
    },
  ]

  metadata = {
    # Used by the //:bazel_sdk_info build API module target.
    bazel_sdk_info = [
      {
        location = rebase_path("$target_gen_dir/fuchsia_sdk", root_build_dir)
      },
    ]
  }
}

# Write the content of bazel_content_hash_definitions to a JSON file
# at `gn gen` time.
generated_file("bazel_content_hashes_json") {
  outputs = [ "$root_build_dir/bazel_content_hashes.json" ]
  contents = bazel_content_hash_definitions
  output_conversion = "json"
}

# Generate content hash files for python and Clang toolchains.
#
# These will be used to trigger new runs of the bazel_sdk_test_xxx targets
# if the content of these directory changes. And the
# //build/bazel_sdk/tests/script/bazel_test.py script will ensure that their
# values are passed to the test workspace.
#
generate_prebuilt_dir_content_hash(prebuilt_content_hash_targets.python) {
  source_dir = "//prebuilt/third_party/python3/${host_os}-${host_cpu}"
  output = prebuilt_content_hash_files.python
  cipd_name = "cpython3"
  exclude_suffixes = [ ".pyc" ]
}

generate_prebuilt_dir_content_hash(prebuilt_content_hash_targets.clang) {
  # clang_prefix points to the "bin" directory in clang toolchain, so go one
  # level up to get the clang root dir.
  source_dir = get_path_info(clang_prefix, "dir")
  output = prebuilt_content_hash_files.clang
  cipd_name = "clang"
}

# Pass the map of which developer overrides to use with which assembly label to
# Bazel.
generated_file("assembly_developer_overrides") {
  outputs = [ "${root_gen_dir}/assembly_developer_overrides.json" ]
  contents = all_product_assembly_overrides
  output_conversion = "json"
}

group("tests") {
  testonly = true
  deps = [
    "bazel_sdk:tests",
    "fuchsia_idk:tests",
    "scripts:tests",
  ]
}

# bazel_action_allowlist is a list of all GN actions that invoke Bazel.
#
# To convert/add new Bazel targets, instead of adding to this list, prefer:
#
#   1. Expanding existing bazel_build_groups in GN
#   2. Add targets as deps in the Bazel build graph
#
# NOTE: Bazel actions in GN are known to introduce performance overheads in
# builds when they are included. Each included bazel action is expected to make
# the entire build O(seconds) slower. While the Fuchsia build team is working on
# improving this, please request a review with us if you want to change this
# list.
group("bazel_action_allowlist") {
  # Bazel assembly
  visibility = [
    "//boards/pkvm:*",
    "//boards/vim3:*",
    "//products/microfuchsia:*",
    "//products/minimal:*",
    "//products/terminal:*",
    "//products/workbench:*",
    "//products/zedboot:*",
  ]

  # Bazel assembly used in tests
  visibility += [ "//build/images/updates/tests:bazel_pb_bazel_build_group" ]

  # Bazel build related targets
  visibility += [
    "//build/bazel:final_fuchsia_in_tree_idk",
    "//build/bazel:final_fuchsia_in_tree_sdk",
    "//build/bazel/assembly:verify_assembly_configs.bazel_build_group",
    "//build/bazel/bazel_sdk:in_tree_fuchsia_sdk",
    "//build/bazel/bazel_sdk:verify_fuchsia_sdk_repository",
    "//build/bazel/bazel_sdk/docs:docs.bazel_build_group",
    "//build/bazel/examples:examples",
    "//build/bazel/examples/hello_world:hello_world",
  ]

  visibility += [ "//vendor/*" ]
  visibility += [ "//local/*" ]

  visibility += [
    "//boards/vim3:bazel_drivers",
    "//examples/drivers:bazel_test_packages.bazel_build",
    "//examples/drivers/simple/dfv2:bazel_package.bazel_build",
    "//examples/drivers/template:bazel_package.bazel_build",
    "//examples/drivers/transport/driver/v2:child_bazel_package.bazel_build",
    "//examples/drivers/transport/driver/v2:parent_bazel_package.bazel_build",
    "//sdk/lib/driver/devicetree/examples/example-board:bazel_package.bazel_build",
    "//src:bazel_tests.bazel_build",
    "//src/devices/block/drivers/aml-sdmmc:aml-sdmmc-no-banjo-bazel-package.bazel_build",
    "//src/devices/board/drivers/vim3-devicetree:bazel_package.bazel_build",
    "//src/devices/clock/drivers/vim3-clk:bazel_package.bazel_build",
    "//src/devices/gpio/drivers/aml-gpio:bazel_package.bazel_build",
    "//src/devices/i2c/drivers/aml-i2c:bazel_package.bazel_build",
    "//src/devices/usb/drivers/aml-usb-phy:bazel_package.bazel_build",
    "//src/devices/usb/drivers/dwc3:bazel_package.bazel_build",
    "//src/media/audio/drivers/aml-g12-tdm:aml-g12-composite-bazel-package.bazel_build",
    "//src/ui/input/drivers/adc-buttons:bazel_package.bazel_build",
  ]
}
