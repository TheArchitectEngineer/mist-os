# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

load("@rules_python//python:py_binary.bzl", "py_binary")
load(":rules.bzl", "compare_bazel_sdk_contents", "generate_bazel_sdk")

# A script used to convert an IDK export directory into a Fuchsia Bazel SDK directory.
#
# Example usage with `bazel run`:
#
# ```
# # Build IDK export directory
# fx build sdk:final_fuchsia_idk.exported
#
# # Build the Fuchsia Bazel SDK directory. Absolute paths are required
# # because `bazel run` scripts are launched from the Bazel execroot, not
# # the current directory.
# fx bazel run //build/bazel/bazel_sdk:idk_to_bazel_sdk -- \
#    --input-idk $(pwd)/out/default/sdk/exported/fuchsia_idk \
#    --output-sdk /tmp/fuchsia_sdk \
#    --buildifier $(pwd)/prebuilt/third_party/buildifier/linux-x64/buildifier \
#
# # Run test suite to verify its content.
# build/bazel_sdk/tests/scripts/bazel_test.py \
#    --fuchsia_sdk_dir /tmp/fuchsia_sdk
# ```
py_binary(
    name = "idk_to_bazel_sdk",
    srcs = ["idk_to_bazel_sdk.py"],
    data = [
        # NOTE: Making this file a py_library() does not work because Bazel will
        # resolve the symlink (to the .bzl file) then complain that the real file
        # does not end in .py. Fortunately, just adding it here as a data dependency
        # is enough to make it available in the runfile directory. But this requires
        # idk_to_bazel_sdk.py to use sys.path.insert(...) to modify its search path
        # before the import.
        "generate_sdk_build_rules.py",

        # The set of template files that are used by the script at runtime.
        "@rules_fuchsia//fuchsia/workspace/sdk_templates:templates",
    ],
    visibility = ["//visibility:public"],
)

py_binary(
    name = "compare_bazel_sdks",
    srcs = ["compare_bazel_sdks.py"],
    main = "compare_bazel_sdks.py",
)

# An alias to @fuchsia_idk//:final_idk because the GN bazel_action()
# template does not support listing targets that belong to repository
# rules in its `bazel_targets` argument.
alias(
    name = "final_fuchsia_in_tree_idk",
    actual = "@fuchsia_in_tree_idk//:final_idk",
)

generate_bazel_sdk(
    name = "bazel_in_tree_sdk",
    idk_export_dir = "@gn_targets//sdk:bazel_in_tree_idk",
    use_rules_fuchsia = True,
)

# A target used to force the creation of the @fuchsia_sdk repository,
# then copy its top-level BUILD.bazel to an output stamp file for
# a GN target with the same label.
genrule(
    name = "in_tree_fuchsia_sdk",
    srcs = ["@fuchsia_sdk//:BUILD.bazel"],
    outs = ["stamp"],
    cmd = "cp -f $(SRCS) \"$@\"",
)

# Compare the content of the @fuchsia_sdk with the SDK generated
# from the Ninja-generated in-tree IDK. Success means that
# using the fuchsia_sdk_repository() function either at build time or
# in a repository rule works in exactly the same way, as expected.
compare_bazel_sdk_contents(
    name = "verify_fuchsia_sdk_repository",
    first_sdk = "@fuchsia_sdk//:WORKSPACE.bazel",
    second_sdk = ":bazel_in_tree_sdk",
)

# Generate the final Fuchsia Bazel SDK from the final Fuchsia platform IDK.
#
# This contains the same SDK atoms as the platform build's @fuchsia_sdk repository,
# but does not include references to @fuchsia_platform_idk, and is directly usable
# in out-of-tree workspaces, e.g. with a project WORKSPACE directive such as:
#
# ```
# local_repository(
#    name = "fuchsia_sdk",
#    path = "/path/to/final_fuchsia_sdk",
# )
# ```
#
generate_bazel_sdk(
    name = "final_fuchsia_in_tree_sdk",
    idk_export_label = "@fuchsia_in_tree_idk//:final_idk",
    use_rules_fuchsia = True,
)

# Compare the content of :final_fuchsia_in_tree_sdk with the one generated
# by parsing the Ninja-generated in-tree IDK. Success means that
# the Ninja IDK -> @fuchsia_in_tree_idk -> final_fuchsia_in_tree_idk -> final_fuchsia_in_tree_sdk
# transformations are correct.
compare_bazel_sdk_contents(
    name = "verify_final_fuchsia_in_tree_sdk",
    first_sdk = ":final_fuchsia_in_tree_sdk",
    second_sdk = ":bazel_in_tree_sdk",
)
