# Copyright 2025 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

load("@rules_rust//crate_universe:defs.bzl", "crate", "crates_vendor", "render_config")
load("@rules_rust//rust:toolchain.bzl", "rust_stdlib_filegroup", "rust_toolchain")
load("//:crate_annotations.bzl", "CRATE_ANNOTATIONS")

crates_vendor(
    name = "crates_vendor",
    annotations = CRATE_ANNOTATIONS,
    bazel = "//:bazel",
    buildifier = "//:buildifier",
    cargo_bazel = "//:cargo-bazel",
    cargo_lockfile = "//third_party/rust_crates:Cargo.lock",
    manifests = ["//third_party/rust_crates:Cargo.toml"],
    mode = "local",
    render_config = render_config(
        # We don't generate cargo_toml_env_vars because these targets require
        # extra Rust dependencies to run cargo, which we don't provide in our
        # main Bazel workspaces.
        #
        # See https://github.com/bazelbuild/rules_rust/issues/3335.
        generate_cargo_toml_env_vars = False,
        generate_rules_license_metadata = True,
        regen_command = "fx update-rustc-third-party",
    ),
    supported_platform_triples = [
        "x86_64-unknown-linux-gnu",
        "x86_64-unknown-fuchsia",
        "aarch64-unknown-fuchsia",
    ],
    vendor_path = "third_party/rust_crates/vendor",
)

rust_stdlib_filegroup(
    name = "rust_stdlib_linux_x64",
    srcs = glob(["rust_toolchain/lib/rustlib/x86_64-unknown-linux-gnu/lib/*"]),
)

rust_toolchain(
    name = "rust_toolchain_linux_x64",
    binary_ext = "",
    cargo = "//:rust_toolchain/bin/cargo",
    dylib_ext = ".so",
    exec_triple = "x86_64-unknown-linux-gnu",
    rust_doc = "//:rust_toolchain/bin/rustdoc",
    rust_std = "//:rust_stdlib_linux_x64",
    rustc = "//:rust_toolchain/bin/rustc",
    staticlib_ext = ".a",
    stdlib_linkflags = [
        "-lpthread",
        "-ldl",
    ],
    target_triple = "x86_64-unknown-linux-gnu",
)

toolchain(
    name = "toolchain_linux_x64",
    exec_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    toolchain = ":rust_toolchain_linux_x64",
    toolchain_type = "@rules_rust//rust:toolchain",
)
