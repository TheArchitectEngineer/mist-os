# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# AUTO-GENERATED - DO NOT EDIT!

# Enable gcert authentication, which will automatically refresh OAuth
# tokens while gcert certificate (unrestricted) is still valid.
# Use build/rbe/check_loas_restrictions.sh to determine certificate type.
build:gcertauth --credential_helper=*.googleapis.com=/google/src/head/depot/google3/devtools/blaze/bazel/credhelper/credhelper

# Setup remote build (RBE)
build:_remote_common --remote_instance_name={remote_instance_name}
build:_remote_common --incompatible_strict_action_env=true
build:remote --define=EXECUTOR=remote
build:_remote_common --google_default_credentials=true
# Only accept outputs from remote execution on the back-end (remote workers).
build:_remote_common --noremote_upload_local_results
# --remote_proxy may be passed at run time, with a pointer to a temporary socket.
# Tell bazel to download (all,minimal,toplevel) remote build artifacts.
build:_remote_common --remote_download_outputs={remote_download_outputs}

# remote: will request remote execution on cache-misses
build:remote --config=_remote_common
build:remote --remote_executor=grpcs://remotebuildexecution.googleapis.com

# remote_cache_only: will lookup cache, but on cache-miss, only spawn local execution
build:remote_cache_only --config=_remote_common
build:remote_cache_only --remote_cache=grpcs://remotebuildexecution.googleapis.com

# nocache: force cache-miss, re-execute remotely
build:nocache --config=remote
build:nocache --noremote_accept_cached

# Build event protocol (BEP) streaming
build:_bes_common --google_auth_scopes=https://www.googleapis.com/auth/cloud-platform
build:_bes_common --google_default_credentials=true
build:_bes_common --bes_instance_name={rbe_project}
build:_bes_common --bes_header=X-Goog-User-Project={rbe_project}
build:_bes_common --bes_keywords=fuchsia

# Start with a long retry delay to tolerate usage spikes that run into the (per-minute) quota.
build:_bes_infra --experimental_build_event_upload_retry_minimum_delay=30s
# --bes_proxy may be passed at run time, with a pointer to a temporary socket.

# Users and infra share the same service, but users are less patient, hence a smaller delay.
build:_bes_user --experimental_build_event_upload_retry_minimum_delay=10s

# Setup sponge (go/sponge-bazel)
build:_sponge --config=_bes_common
build:_sponge --bes_backend=buildeventservice-pa.googleapis.com
build:_sponge --bes_results_url=http://sponge2/

# This variant is suitable for developers.
build:sponge --config=_sponge --config=_bes_user
# This variant is suitable for infra.
build:sponge_infra --config=_sponge --config=_bes_infra

# Setup ResultStore
build:_resultstore --config=_bes_common
build:_resultstore --bes_backend=buildeventservice.googleapis.com
# note: go/fxbtx points to project=rbe-fuchsia-prod (and should match {rbe_project})
build:_resultstore --bes_results_url=http://go/fxbtx/
build:_resultstore --remote_instance_name=projects/{rbe_project}/instances/default

# This variant is suitable for developers.
build:resultstore --config=_resultstore --config=_bes_user
# This variant is suitable for infra.
build:resultstore_infra --config=_resultstore --config=_bes_infra
