# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

load("@rules_fuchsia//fuchsia:defs.bzl", "fuchsia_package", "get_fuchsia_api_levels")
load("//fuchsia/packaging:common_utils.bzl", "failure_test", "no_repo_default_api_level_failure_test", "unknown_override_api_level_failure_test", "unknown_repo_default_api_level_failure_test")
load("//test_utils:api_levels.bzl", "some_valid_numerical_api_level_as_string")
load(":fuchsia_package_checker_test.bzl", "fuchsia_package_checker_test", "no_repo_default_api_level_fuchsia_package_checker_test", "repo_default_api_level_next_fuchsia_package_checker_test", "repo_default_unknown_and_override_next_api_level_fuchsia_package_checker_test", "repo_default_unknown_api_level_fuchsia_package_checker_test")

NUMERICAL_LEVEL_ABI_REVISION = [
    level.abi_revision
    for level in get_fuchsia_api_levels()
    if level.api_level == some_valid_numerical_api_level_as_string()
][0]

NEXT_ABI_REVISION = [
    level.abi_revision
    for level in get_fuchsia_api_levels()
    if level.api_level == "NEXT"
][0]

HEAD_ABI_REVISION = [
    level.abi_revision
    for level in get_fuchsia_api_levels()
    if level.api_level == "HEAD"
][0]

REPO_DEFAULT_ABI_REVISION = [
    level.abi_revision
    for level in get_fuchsia_api_levels()
    # TODO(https://fxbug.dev/354047162): Figure out a way to automate the API level name.
    if level.api_level == "16"
][0]

_COMMON_EXPECTED_BLOBS_IN_PKG_WITH_CC_COMPONENT = {
    "data/text_file.txt": "text_file.txt",

    # Common files that should automatically be added

    # From SDK sysroot
    "lib/ld.so.1": "ld.so.1",

    # From Clang toolchain runtimes
    "lib/libc++.so.2": "libc++.so.2",
    "lib/libc++abi.so.1": "libc++abi.so.1",
    "lib/libunwind.so.1": "libunwind.so.1",
    "lib/libfdio.so": "libfdio.so",
}

# Values used in tests of `pkg_for_test` and variantes for different levels.
EXPECTED_BLOBS_IN_PKG = {
    "bin/cc_bin": "cc_bin.binary_stripped",
} | _COMMON_EXPECTED_BLOBS_IN_PKG_WITH_CC_COMPONENT

# The C++ binary in package_with_binary_linkable_only_at_head_api_level has
# a different name.
EXPECTED_BLOBS_IN_LINKABLE_ONLY_AT_HEAD_PKG = {
    "bin/cc_bin_with_main_only_at_head": "cc_bin_with_main_only_at_head.binary_stripped",
} | _COMMON_EXPECTED_BLOBS_IN_PKG_WITH_CC_COMPONENT

MANIFESTS_FOR_PKG = [
    "meta/cc_component.cm",
    "meta/empty_component.cm",
]

STRUCTURED_CONFIG_FILES = [
    "meta/cc_component.cvf",
]

# TODO(https://fxbug.dev/354047162): Remove these two when no longer needed.
EXPECTED_BLOBS_IN_PKG_WITHOUT_CC_COMPONENT = {
    "data/text_file.txt": "text_file.txt",
}

MANIFESTS_FOR_PKG_WITHOUT_CC_COMPONENT = [
    "meta/empty_component.cm",
]

test_suite(
    name = "tests",

    # Tests are listed in the order they are defined.
    # buildifier: leave-alone, do not sort
    tests = [
        ":empty_package_check",
        ":cc_pkg_test",
        ":cc_pkg_with_static_cpp_test",
        ":cc_test_pkg_test",
        ":cc_unittest_pkg_test",
        ":subpkg_test",
        ":cc_driver_pkg_test",
        ":cc_driver_pkg_with_tool_test",
        ":cc_pkg_at_numerical_api_level_test",
        ":cc_pkg_at_next_test",
        ":cc_pkg_at_retired_api_level_test",
        ":pkg_at_unknown_numerical_api_level_test",
        ":pkg_at_lowercase_next_api_level_test",
        ":pkg_at_next_api_level_and_no_repo_default",
        ":pkg_at_next_api_level_and_unknown_repo_default",
        ":override_api_level_overrides_unknown_repo_default",
        ":override_api_level_overrides_unknown_package_and_repo_default",
        ":pkg_without_api_level_and_some_supported_repo_default",
        ":pkg_without_api_level_and_repo_default_next",
        ":failure_test_pkg_without_api_level_and_no_repo_default",
        ":failure_test_pkg_without_api_level_and_unknown_repo_default",
        ":failure_test_pkg_at_next_api_level_with_unknown_override_api_level",
        ":cc_pkg_linkable_only_at_head_api_level",
    ],
    visibility = ["//visibility:public"],
)

fuchsia_package(
    name = "empty",
    package_name = "empty_package",
    fuchsia_api_level = "HEAD",
)

fuchsia_package_checker_test(
    name = "empty_package_check",
    package_name = "empty_package",
    size = "small",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = {},
    manifests = [],
    package_under_test = ":empty",
    structured_config_files = [],
)

# Also serves the purpose of "cc_test_pkg_at_head".
fuchsia_package_checker_test(
    name = "cc_pkg_test",
    package_name = "pkg_for_test",
    size = "small",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = EXPECTED_BLOBS_IN_PKG,
    manifests = MANIFESTS_FOR_PKG,
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg",
    structured_config_files = STRUCTURED_CONFIG_FILES,
)

fuchsia_package_checker_test(
    name = "cc_pkg_with_static_cpp_test",
    package_name = "pkg_with_static_cpp_for_test",
    size = "small",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = {
        "bin/cc_bin_static_cpp": "cc_bin_static_cpp.binary_stripped",

        # Common files that should automatically be added

        # From SDK sysroot
        "lib/ld.so.1": "ld.so.1",

        # From Clang toolchain runtimes
        "lib/libfdio.so": "libfdio.so",
    },
    manifests = [
        "meta/cc_component.cm",
    ],
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_with_static_cpp",
)

fuchsia_package_checker_test(
    name = "cc_test_pkg_test",
    package_name = "test_pkg_for_test",
    size = "small",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = {
        "bin/cc_test": "cc_test.binary_stripped",
        "data/text_file.txt": "text_file.txt",

        # Common files that should automatically be added

        # From SDK sysroot
        "lib/ld.so.1": "ld.so.1",

        # From Clang toolchain runtimes
        "lib/libc++.so.2": "libc++.so.2",
        "lib/libc++abi.so.1": "libc++abi.so.1",
        "lib/libunwind.so.1": "libunwind.so.1",
        "lib/libfdio.so": "libfdio.so",
    },
    manifests = [
        # The test component
        "meta/cc_test.cm",
        # The included component
        "meta/empty_component.cm",
    ],
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:test_pkg",
)

fuchsia_package_checker_test(
    name = "cc_unittest_pkg_test",
    package_name = "unittest_pkg_for_test",
    size = "small",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = {
        "bin/cc_unit_test": "cc_unit_test.binary_stripped",
        # Common files that should automatically be added

        # From SDK sysroot
        "lib/ld.so.1": "ld.so.1",

        # From Clang toolchain runtimes
        "lib/libc++.so.2": "libc++.so.2",
        "lib/libc++abi.so.1": "libc++abi.so.1",
        "lib/libunwind.so.1": "libunwind.so.1",
        "lib/libfdio.so": "libfdio.so",
    },
    manifests = [
        "meta/cc_unit_test.cm",
    ],
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:unittest_pkg",
)

fuchsia_package_checker_test(
    name = "subpkg_test",
    package_name = "pkg_with_subpkg_for_test",
    size = "small",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = {},
    expected_subpackages = ["pkg_for_test"],
    manifests = ["meta/empty_component.cm"],
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_with_subpkg",
)

fuchsia_package_checker_test(
    name = "cc_driver_pkg_test",
    package_name = "test_driver",
    size = "small",
    bind_bytecode = "meta/bind/test_driver.bindbc",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = {
        # The driver binary
        "driver/test_driver_so.so": "test_driver_so.so_stripped",

        # Common files
        "lib/ld.so.1": "ld.so.1",
        "lib/libfdio.so": "libfdio.so",
        "lib/libsvc.so": "libsvc.so",
        "lib/libtrace-engine.so": "libtrace-engine.so",
        "lib/libdriver_runtime.so": "libdriver_runtime.so",
    },
    manifests = [
        "meta/test_driver.cm",
    ],
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_driver:pkg",
    structured_config_files = [
        "meta/test_driver.cvf",
    ],
)

fuchsia_package_checker_test(
    name = "cc_driver_pkg_with_tool_test",
    package_name = "test_driver_with_tool",
    size = "small",
    bind_bytecode = "meta/bind/test_driver.bindbc",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = {
        # The driver binary
        "driver/test_driver_so.so": "test_driver_so.so_stripped",

        # The driver tool
        "bin/ctl": "ctl.binary_stripped",

        # Common files
        "lib/ld.so.1": "ld.so.1",
        "lib/libfdio.so": "libfdio.so",
        "lib/libsvc.so": "libsvc.so",
        "lib/libtrace-engine.so": "libtrace-engine.so",
        "lib/libdriver_runtime.so": "libdriver_runtime.so",

        # The following files are needed by the tool, make sure they are included
        "lib/libc++.so.2": "libc++.so.2",
        "lib/libc++abi.so.1": "libc++abi.so.1",
        "lib/libunwind.so.1": "libunwind.so.1",
    },
    manifests = [
        "meta/test_driver.cm",
    ],
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_driver:pkg_with_tool",
    structured_config_files = [
        "meta/test_driver.cvf",
    ],
)

fuchsia_package_checker_test(
    name = "cc_pkg_at_numerical_api_level_test",

    # With ":cc_component", this test would fail if artifacts for the API level
    # returned by `some_valid_numerical_api_level_as_string() have not been built.
    # TODO(https://fxbug.dev/382560521): Only run this test when that is the
    # case and remove `_without_cc_component`/`_WITHOUT_CC_COMPONENT` below.
    package_name = "pkg_at_numerical_api_level_without_cc_component_for_test",
    size = "small",
    expected_abi_revision = NUMERICAL_LEVEL_ABI_REVISION,
    expected_blobs_to_file_names = EXPECTED_BLOBS_IN_PKG_WITHOUT_CC_COMPONENT,
    manifests = MANIFESTS_FOR_PKG_WITHOUT_CC_COMPONENT,
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_at_numerical_api_level_without_cc_component",
    structured_config_files = STRUCTURED_CONFIG_FILES,
)

fuchsia_package_checker_test(
    name = "cc_pkg_at_next_test",

    # With ":cc_component", this test would fail if artifacts for "NEXT" have not been built.
    # TODO(https://fxbug.dev/382560521): Only run this test when that is the
    # case and remove `_without_cc_component`/`_WITHOUT_CC_COMPONENT` below.
    package_name = "pkg_at_next_api_level_without_cc_component_for_test",
    size = "small",
    expected_abi_revision = NEXT_ABI_REVISION,
    expected_blobs_to_file_names = EXPECTED_BLOBS_IN_PKG_WITHOUT_CC_COMPONENT,
    manifests = MANIFESTS_FOR_PKG_WITHOUT_CC_COMPONENT,
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_at_next_api_level_without_cc_component",
    structured_config_files = STRUCTURED_CONFIG_FILES,
)

failure_test(
    name = "cc_pkg_at_retired_api_level_test",
    size = "small",
    expected_failure_message = 'ERROR: "21" is not an API level supported by this SDK. API level should be one of ["',
    tags = ["manual"],

    # With ":cc_component" included in the package, this test fails with:
    # ERROR: .../obj/build/bazel/bazel_sdk/bazel_sdk_tests/output_base/external/fuchsia_sdk/pkg/fdio/BUILD.bazel:26:11: @@fuchsia_sdk//fuchsia/constraints:is_x64_api_HEAD is not a valid select() condition for @@fuchsia_sdk//pkg/fdio:fdio.
    # TODO(https://fxbug.dev/382773036): Fix this and use ":cc_component to pkg_at_retired_api_level.
    target_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_at_retired_api_level_without_cc_component",
)

failure_test(
    name = "pkg_at_unknown_numerical_api_level_test",
    size = "small",
    expected_failure_message = 'ERROR: "90000" is not an API level supported by this SDK. API level should be one of ["',
    tags = ["manual"],

    # With ":cc_component" included in the package, this test fails with:
    # ERROR: .../obj/build/bazel/bazel_sdk/bazel_sdk_tests/output_base/external/fuchsia_sdk/pkg/fdio/BUILD.bazel:26:11: @@fuchsia_sdk//fuchsia/constraints:is_x64_api_HEAD is not a valid select() condition for @@fuchsia_sdk//pkg/fdio:fdio.
    # TODO(https://fxbug.dev/382773036): Fix this and use `pkg_at_unknown_numerical_api_level`.
    target_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_at_unknown_numerical_api_level_without_cc_component",
)

failure_test(
    name = "pkg_at_lowercase_next_api_level_test",
    size = "small",
    expected_failure_message = 'ERROR: "next" is not an API level supported by this SDK. API level should be one of ["',
    tags = ["manual"],

    # With ":cc_component" included in the package, this test fails with:
    # ERROR: .../obj/build/bazel/bazel_sdk/bazel_sdk_tests/output_base/external/fuchsia_sdk/pkg/fdio/BUILD.bazel:26:11: @@fuchsia_sdk//fuchsia/constraints:is_x64_api_HEAD is not a valid select() condition for @@fuchsia_sdk//pkg/fdio:fdio.
    # TODO(https://fxbug.dev/382773036): Fix this and use  `pkg_at_lowercase_next_api_level`.
    target_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_at_lowercase_next_api_level_without_cc_component",
)

no_repo_default_api_level_fuchsia_package_checker_test(
    name = "pkg_at_next_api_level_and_no_repo_default",
    size = "small",
    expected_abi_revision = NEXT_ABI_REVISION,

    # With ":cc_component", this test would fail if artifacts for "NEXT" have not been built.
    # TODO(https://fxbug.dev/382560521): Only run this test when that is the
    # case and remove `_without_cc_component`/`_WITHOUT_CC_COMPONENT` below.
    expected_blobs_to_file_names = EXPECTED_BLOBS_IN_PKG_WITHOUT_CC_COMPONENT,
    manifests = MANIFESTS_FOR_PKG_WITHOUT_CC_COMPONENT,
    structured_config_files = STRUCTURED_CONFIG_FILES,
    target_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_at_next_api_level_without_cc_component",
)

repo_default_unknown_api_level_fuchsia_package_checker_test(
    name = "pkg_at_next_api_level_and_unknown_repo_default",
    size = "small",
    expected_abi_revision = NEXT_ABI_REVISION,

    # With ":cc_component", this test would fail if artifacts for "NEXT" have not been built.
    # TODO(https://fxbug.dev/382560521): Only run this test when that is the
    # case and remove `_without_cc_component`/`_WITHOUT_CC_COMPONENT` below.
    expected_blobs_to_file_names = EXPECTED_BLOBS_IN_PKG_WITHOUT_CC_COMPONENT,
    manifests = MANIFESTS_FOR_PKG_WITHOUT_CC_COMPONENT,
    structured_config_files = STRUCTURED_CONFIG_FILES,
    target_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_at_next_api_level_without_cc_component",
)

repo_default_unknown_and_override_next_api_level_fuchsia_package_checker_test(
    name = "override_api_level_overrides_unknown_repo_default",
    size = "small",
    expected_abi_revision = NEXT_ABI_REVISION,

    # With ":cc_component", this test would fail if artifacts for "NEXT" have not been built.
    # TODO(https://fxbug.dev/382560521): Only run this test when that is the
    # case and remove `_without_cc_component`/`_WITHOUT_CC_COMPONENT` below.
    expected_blobs_to_file_names = EXPECTED_BLOBS_IN_PKG_WITHOUT_CC_COMPONENT,
    manifests = MANIFESTS_FOR_PKG_WITHOUT_CC_COMPONENT,
    structured_config_files = STRUCTURED_CONFIG_FILES,
    target_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_without_api_level_without_cc_component",
)

repo_default_unknown_and_override_next_api_level_fuchsia_package_checker_test(
    name = "override_api_level_overrides_unknown_package_and_repo_default",
    size = "small",
    expected_abi_revision = NEXT_ABI_REVISION,

    # With ":cc_component", this test would fail if artifacts for "NEXT" have not been built.
    # TODO(https://fxbug.dev/382560521): Only run this test when that is the
    # case and remove `_without_cc_component`/`_WITHOUT_CC_COMPONENT` below.
    expected_blobs_to_file_names = EXPECTED_BLOBS_IN_PKG_WITHOUT_CC_COMPONENT,
    manifests = MANIFESTS_FOR_PKG_WITHOUT_CC_COMPONENT,
    structured_config_files = STRUCTURED_CONFIG_FILES,
    target_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_at_unknown_numerical_api_level_without_cc_component",
)

# The test workspace has a default API level, which will be used.
fuchsia_package_checker_test(
    name = "pkg_without_api_level_and_some_supported_repo_default",

    # With ":cc_component", this test would fail if artifacts for the API level
    # the level specified in `//build/bazel_sdk/tests/.bazelrc` have not been built.
    # TODO(https://fxbug.dev/382560521): Only run this test when that is the
    # case and remove `_without_cc_component`/`_WITHOUT_CC_COMPONENT` below.
    package_name = "pkg_without_api_level_without_cc_component_for_test",
    size = "small",
    expected_abi_revision = REPO_DEFAULT_ABI_REVISION,
    expected_blobs_to_file_names = EXPECTED_BLOBS_IN_PKG_WITHOUT_CC_COMPONENT,
    manifests = MANIFESTS_FOR_PKG_WITHOUT_CC_COMPONENT,
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_without_api_level_without_cc_component",
    structured_config_files = STRUCTURED_CONFIG_FILES,
)

repo_default_api_level_next_fuchsia_package_checker_test(
    name = "pkg_without_api_level_and_repo_default_next",
    size = "small",
    expected_abi_revision = NEXT_ABI_REVISION,

    # With ":cc_component", this test would fail if artifacts for "NEXT" have not been built.
    # TODO(https://fxbug.dev/382560521): Only run this test when that is the
    # case and remove `_without_cc_component`/`_WITHOUT_CC_COMPONENT` below.
    expected_blobs_to_file_names = EXPECTED_BLOBS_IN_PKG_WITHOUT_CC_COMPONENT,
    manifests = MANIFESTS_FOR_PKG_WITHOUT_CC_COMPONENT,
    structured_config_files = STRUCTURED_CONFIG_FILES,
    target_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_without_api_level_without_cc_component",
)

no_repo_default_api_level_failure_test(
    name = "failure_test_pkg_without_api_level_and_no_repo_default",
    expected_failure_message = "ERROR: An API level has not been specified for this target or the repository.",
    tags = ["manual"],

    # With ":cc_component" included in the package, this test fails with:
    # ERROR: .../obj/build/bazel/bazel_sdk/bazel_sdk_tests/output_base/external/fuchsia_sdk/pkg/fdio/BUILD.bazel:26:11: @@fuchsia_sdk//fuchsia/constraints:is_x64_api_HEAD is not a valid select() condition for @@fuchsia_sdk//pkg/fdio:fdio.
    # TODO(https://fxbug.dev/382773036): Fix this and use pkg_without_api_level.
    target_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_without_api_level_without_cc_component",
)

unknown_repo_default_api_level_failure_test(
    name = "failure_test_pkg_without_api_level_and_unknown_repo_default",
    expected_failure_message = 'ERROR: "98765" is not an API level supported by this SDK. API level should be one of ["',
    tags = ["manual"],

    # With ":cc_component" included in the package, this test fails with:
    # ERROR: .../obj/build/bazel/bazel_sdk/bazel_sdk_tests/output_base/external/fuchsia_sdk/pkg/fdio/BUILD.bazel:26:11: @@fuchsia_sdk//fuchsia/constraints:is_x64_api_HEAD is not a valid select() condition for @@fuchsia_sdk//pkg/fdio:fdio.
    # TODO(https://fxbug.dev/382773036): Fix this and use `pkg_without_api_level`.
    target_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_without_api_level_without_cc_component",
)

unknown_override_api_level_failure_test(
    name = "failure_test_pkg_at_next_api_level_with_unknown_override_api_level",
    expected_failure_message = 'ERROR: "123456" is not an API level supported by this SDK. API level should be one of ["',
    tags = ["manual"],

    # With ":cc_component" included in the package, this test fails with:
    # ERROR: .../obj/build/bazel/bazel_sdk/bazel_sdk_tests/output_base/external/fuchsia_sdk/pkg/fdio/BUILD.bazel:26:11: @@fuchsia_sdk//fuchsia/constraints:is_x64_api_HEAD is not a valid select() condition for @@fuchsia_sdk//pkg/fdio:fdio.
    # TODO(https://fxbug.dev/382773036): Fix this and use `pkg_at_next_api_level`.
    target_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_at_next_api_level_without_cc_component",
)

# Tests use of "@fuchsia_sdk//fuchsia/constraints:api_level_HEAD" and the
# presence of other constraints.
# Negative tests of the other constraints do not appear to be possible because
# the binaries would fail to link and failure tests only cover analysis phase.
# TODO(https://fxbug.dev/382560521): Once the bug is resolved, change all
# `_only_at_head` to `_only_at_next` because "HEAD" has often been the default
# and does not provide as much confidence in the excercising of the constraints.
fuchsia_package_checker_test(
    name = "cc_pkg_linkable_only_at_head_api_level",
    package_name = "package_with_binary_linkable_only_at_head_api_level_for_test",
    size = "small",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = EXPECTED_BLOBS_IN_LINKABLE_ONLY_AT_HEAD_PKG,
    manifests = MANIFESTS_FOR_PKG,
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:package_with_binary_linkable_only_at_head_api_level",
    structured_config_files = STRUCTURED_CONFIG_FILES,
)
