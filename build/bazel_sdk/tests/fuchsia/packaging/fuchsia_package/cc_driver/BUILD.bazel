# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

load(
    "@rules_fuchsia//fuchsia:defs.bzl",
    "fuchsia_bind_library",
    "fuchsia_cc_binary",
    "fuchsia_cc_driver",
    "fuchsia_component_manifest",
    "fuchsia_driver_bind_bytecode",
    "fuchsia_driver_component",
    "fuchsia_driver_tool",
    "fuchsia_package",
    "fuchsia_structured_config_cpp_elf_lib",
    "fuchsia_structured_config_values",
)
load("//test_utils:make_file.bzl", "make_file")

fuchsia_bind_library(
    name = "test.driver.bind",
    srcs = [
        "test.bind",
    ],
)

fuchsia_driver_bind_bytecode(
    name = "bind_bytecode",
    output = "test_driver.bindbc",
    rules = "meta/test_driver.bind",
    deps = [
        ":test.driver.bind",
    ],
)

# TODO: Try doing this with no srcs

fuchsia_cc_driver(
    name = "test_driver",
    srcs = [
        "cc_test_driver.cc",
        "cc_test_driver.h",
    ],

    # The linkopts and linkshared attributes are here to test for backwards
    # compatability because some older drivers passed these in when we were
    # still using cc_binary.
    linkopts = [],
    linkshared = False,

    # name the driver like this to make sure our extension stripping works
    output_name = "test_driver_so",

    # Make sure we are honoring the user's link flags they pass in.
    user_link_flags = [],
    deps = [
        ":driver-config",
        "@fuchsia_sdk//pkg/driver_component_cpp",
    ],
)

fuchsia_component_manifest(
    name = "manifest",
    src = "meta/test_driver.cml",
)

fuchsia_driver_component(
    name = "component",
    bind_bytecode = ":bind_bytecode",
    driver_lib = ":test_driver",
    manifest = ":manifest",
)

fuchsia_structured_config_cpp_elf_lib(
    name = "driver-config",
    cm_label = ":manifest",
)

fuchsia_structured_config_values(
    name = "sc-values",
    cm_label = ":manifest",
    cvf_output_name = "driver-config",
    values = {
        "enable_suspend": False,
        "device_path": "/dev/class/bt-hci/000",
    },
)

make_file(
    name = "cc_tool_main",
    content = "int main() { return 0; } \n",
    filename = "main.cc",
)

fuchsia_cc_binary(
    name = "ctl",
    srcs = [":cc_tool_main"],
)

fuchsia_driver_tool(
    name = "tool",
    binary = ":ctl",
)

fuchsia_package(
    name = "pkg_with_tool",
    package_name = "test_driver_with_tool",
    components = [
        ":component",
    ],
    fuchsia_api_level = "HEAD",
    resources = [":sc-values"],
    tools = [
        ":tool",
    ],
    visibility = ["//visibility:public"],
)

fuchsia_package(
    name = "pkg",
    package_name = "test_driver",
    components = [
        ":component",
    ],
    fuchsia_api_level = "HEAD",
    resources = [":sc-values"],
    visibility = ["//visibility:public"],
)
