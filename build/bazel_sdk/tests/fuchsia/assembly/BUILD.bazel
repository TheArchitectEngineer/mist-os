# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

load(
    "@rules_fuchsia//fuchsia:assembly.bzl",
    "PARTITION_TYPE",
    "SLOT",
    "fuchsia_board_configuration",
    "fuchsia_board_input_bundle",
    "fuchsia_board_input_bundle_set",
    "fuchsia_bootloader_partition",
    "fuchsia_bootstrap_partition",
    "fuchsia_gen_android_starnix_container",
    "fuchsia_hybrid_board_configuration",
    "fuchsia_hybrid_product_configuration",
    "fuchsia_package_with_configs",
    "fuchsia_partition",
    "fuchsia_partitions_configuration",
    "fuchsia_post_processing_script",
    "fuchsia_prebuilt_board_configuration",
    "fuchsia_prebuilt_board_input_bundle",
    "fuchsia_prebuilt_package",
    "fuchsia_prebuilt_product_configuration",
    "fuchsia_prebuilt_product_configuration_extract_package",
    "fuchsia_product_configuration",
    "fuchsia_product_ota_config",
    "fuchsia_virtual_device",
    "ota_realm",
    "tuf_repo",
    "tuf_repo_root",
)
load(
    "@rules_fuchsia//fuchsia:defs.bzl",
    "fuchsia_component",
    "fuchsia_component_manifest",
    "fuchsia_package",
    "get_fuchsia_api_levels",
)
load("//fuchsia/packaging/fuchsia_package:fuchsia_package_checker_test.bzl", "fuchsia_package_checker_test")
load(
    ":fuchsia_board_configuration_test.bzl",
    "fuchsia_board_configuration_test",
    "fuchsia_hybrid_board_configuration_test",
)
load(":fuchsia_board_input_bundle_test.bzl", "fuchsia_board_input_bundle_test")
load(":fuchsia_partitions_configuration_test.bzl", "fuchsia_partitions_configuration_test")
load(":fuchsia_product_configuration_test.bzl", "fuchsia_product_configuration_test", "fuchsia_product_ota_config_test")
load(":fuchsia_virtual_device_test.bzl", "fuchsia_virtual_device_test")

HEAD_ABI_REVISION = [
    level.abi_revision
    for level in get_fuchsia_api_levels()
    if level.api_level == "HEAD"
][0]

AMS_LIGHT_TEST_ABI_REVISION = "0xECCEA2F70ACD6FC0"

fuchsia_prebuilt_package(
    name = "prebuilt_ams_light",
    archive = ":test_data/ams-light-test-0.far",
)

fuchsia_prebuilt_package(
    name = "prebuilt_driver",
    archive = ":test_data/backlight_driver.far",
    drivers = [
        "meta/backlight_driver.cm",
    ],
)

fuchsia_board_input_bundle(
    name = "testing_board_input_bundle",
    base_packages = [
        ":prebuilt_ams_light",
    ],
    bootfs_driver_packages = [
        ":prebuilt_driver",
    ],
    cpu_manager_config = "test_data/config_data.json",
    thread_roles = [],
    version = "fake_version_123",
)

filegroup(
    name = "empty_bib_files",
    srcs = glob(["test_data/empty_bib/**"]),
)

fuchsia_prebuilt_board_input_bundle(
    name = "testing_prebuilt_board_input_bundle",
    files = ":empty_bib_files",
)

fuchsia_board_input_bundle_set(
    name = "testing_bib_set",
    board_input_bundles = [
        ":testing_board_input_bundle",
    ],
    version = "fake_version_123",
)

fuchsia_board_input_bundle_test(
    name = "board_input_bundle_golden_test",
    board_input_bundle = ":testing_board_input_bundle",
    golden_file = ":test_data/board_input_bundle_golden_file.json",
    visibility = ["//visibility:public"],
)

fuchsia_board_configuration(
    name = "testing_board_configuration",
    board_input_bundle_sets = [":testing_bib_set"],
    board_input_bundles = [
        ":testing_board_input_bundle",
        ":testing_prebuilt_board_input_bundle",
    ],
    board_name = "x64",
    devicetree = "test_data/test.dtb",
    kernel = {
        "contiguous_physical_pages": True,
    },
    partitions_configuration = ":my_partitions_config",
    platform = {
        "connectivity": {
            "network": {
                "netsvc_interface": "/dwmac-ff3f0000_group/dwmac/Designware-MAC/netdevice-migration/network-device",
            },
        },
        "development_support": {
            "enable_debug_access_port_for_soc": "amlogic-a311d",
        },
        "sysmem_defaults": {
            "contiguous_guard_pages_unused": False,
            "contiguous_memory_size": {
                "fixed": 209715200,
            },
            "protected_memory_size": {
                "fixed": 0,
            },
        },
    },
    post_processing_script = ":post_processing_script",
    tee_trusted_app_guids = [
        "67e55044-10b1-426f-9247-bb680e5fe0c8",
        "67e55044-10b1-426f-9247-bb680e5fe0c8",
    ],
    version = "fake_version_123",
)

fuchsia_post_processing_script(
    name = "post_processing_script",
    post_processing_script_args = [
        "-t",
        "mkbootimg",
        "-k",
        "linux-kola-boot-shim.bin",
        "-d",
        "kola.dtb",
        "-p",
        "fuchsia-vendored-python",
    ],
    post_processing_script_inputs = {
        "test_data/fake_dep": "fake_dep",
        "test_data/test.dtb": "test.dtb",
        "test_data/zbi_signing_script": "zbi_signing_script",
    },
    post_processing_script_path = "zbi_signing_script",
)

fuchsia_board_configuration_test(
    name = "board_configuration_golden_test",
    board_config = ":testing_board_configuration",
    golden_file = ":test_data/board_configuration_golden_file.json",
    visibility = ["//visibility:public"],
)

filegroup(
    name = "prebuilt_board_config_files",
    srcs = glob(["test_data/prebuilt_board_config/**/*"]),
)

fuchsia_prebuilt_board_configuration(
    name = "prebuilt_board_config",
    files = ":prebuilt_board_config_files",
)

filegroup(
    name = "prebuilt_nested_board_config_files",
    srcs = glob(["test_data/prebuilt_nested_board_config/**/*"]),
)

fuchsia_prebuilt_board_configuration(
    name = "prebuilt_nested_board_config",
    files = ":prebuilt_nested_board_config_files",
)

fuchsia_board_configuration_test(
    name = "nested_board_configuration_test",
    board_config = ":prebuilt_nested_board_config",
    golden_file = ":test_data/prebuilt_nested_board_config/nested/board_configuration.json",
    visibility = ["//visibility:public"],
)

filegroup(
    name = "prebuilt_replacement_board_config_files",
    srcs = glob(["test_data/prebuilt_replacement_board_config/**/*"]),
)

fuchsia_prebuilt_board_configuration(
    name = "prebuilt_replacement_board_config",
    files = ":prebuilt_replacement_board_config_files",
)

fuchsia_hybrid_board_configuration(
    name = "test_hybrid_board_config",
    board_configuration = ":prebuilt_board_config",
    replacement_board_input_bundle_sets = [
        ":testing_bib_set",
    ],
    replacement_board_input_bundles = ":prebuilt_replacement_board_config",
)

fuchsia_hybrid_board_configuration_test(
    name = "hybrid_board_configuration_golden_test",
    golden_bib = ":test_data/prebuilt_replacement_board_config/input_bundles/bib/board_input_bundle.json",
    hybrid_board_config = ":test_hybrid_board_config",
    relative_path_of_board_input_bundle = "input_bundles/bib",
    visibility = ["//visibility:public"],
)

fuchsia_hybrid_board_configuration_test(
    name = "hybrid_board_configuration_with_set_golden_test",
    golden_bib = ":test_data/board_input_bundle_from_hybrid_golden_file.json",
    hybrid_board_config = ":test_hybrid_board_config",
    relative_path_of_board_input_bundle = "input_bundles/testing_bib_set/testing_board_input_bundle",
    visibility = ["//visibility:public"],
)

fuchsia_package_with_configs(
    name = "assembled_ams_light",
    configs = {
        ":test_data/config_data.json": "destination.json",
    },
    package = ":prebuilt_ams_light",
)

_testing_product_config_json = {
    "platform": {
        "build_type": "user",
        "connectivity": {"wlan": {
            "legacy_privacy_support": True,
        }},
        "development_support": {"enabled": True},
        "diagnostics": {
            "archivist": "default",
            "additional_serial_log_components": [
                "/core/session-manager",
                "/core/session-manager/session:session",
            ],
        },
        "ui": {"supported_input_devices": [
            "button",
            "keyboard",
        ]},
    },
    "product": {
        "session": {
            "url": "fuchsia-pkg://fuchsia.com/test_session#meta/test_session.cm",
        },
    },
}

# buildifier: leave-alone
fuchsia_product_configuration(
    name = "testing_product_config",

    # Product configuration items
    base_packages = [
        ":assembled_ams_light",
    ],
    base_driver_packages = [
        ":prebuilt_driver",
    ],
    product_config_json = _testing_product_config_json,
)

fuchsia_product_configuration_test(
    name = "product_config_golden_test",
    golden_file = ":test_data/product_config_golden_file.json",
    product_config = ":testing_product_config",
    visibility = ["//visibility:public"],
)

fuchsia_product_configuration(
    name = "testing_product_config_with_labels",
    product_config_json = {
        "platform": {
            "build_type": "user",
            "ui": {
                "sensor_config": "LABEL(test_data/foo.txt)",
            },
        },
        "product": {
            "component_policy": {
                "product_policies": ["LABEL(test_data/bar.txt)"],
            },
        },
    },
)

fuchsia_prebuilt_product_configuration(
    name = "prebuilt_product_config",
    build_type = "userdebug",
    product_config_dir = "test_data/prebuilt_product_config",
)

fuchsia_hybrid_product_configuration(
    name = "hybrid_product_config",
    packages = [":prebuilt_ams_light"],
    product_configuration = ":prebuilt_product_config",
)

fuchsia_product_configuration_test(
    name = "product_config_with_labels_golden_test",
    golden_file = ":test_data/product_config_with_labels_golden_file.json",
    product_config = ":testing_product_config_with_labels",
    visibility = ["//visibility:public"],
)

fuchsia_product_configuration_test(
    name = "prebuilt_product_config_golden_test",
    golden_file = ":test_data/prebuilt_product_config_golden.json",
    product_config = ":prebuilt_product_config",
    visibility = ["//visibility:public"],
)

fuchsia_product_configuration_test(
    name = "hybrid_product_config_golden_test",
    golden_file = ":test_data/hybrid_product_config_golden.json",
    product_config = ":hybrid_product_config",
    visibility = ["//visibility:public"],
)

fuchsia_bootstrap_partition(
    name = "bootstrap_partition_3728",
    condition_value = "0xe9000000",
    condition_variable = "emmc-total-bytes",
    image = ":test_data/gpt.fuchsia.3728.bin",
    partition_name = "gpt",
)

fuchsia_bootstrap_partition(
    name = "bootstrap_partition_3776",
    condition_value = "0xe9000000",
    condition_variable = "emmc-total-bytes",
    image = ":test_data/gpt.fuchsia.3776.bin",
    partition_name = "gpt",
)

fuchsia_bootloader_partition(
    name = "my_bootloader_partition",
    image = ":test_data/u-boot.bin.signed.test-b4",
    partition_name = "bootloader",
    type = "skip_metadata",
)

fuchsia_partition(
    name = "zbi_partition",
    partition_name = "zircon_a",
    slot = SLOT.A,
    type = PARTITION_TYPE.ZBI,
)

fuchsia_partition(
    name = "vbmeta_partition",
    partition_name = "vbmeta_b",
    slot = SLOT.B,
    type = PARTITION_TYPE.VBMETA,
)

fuchsia_partition(
    name = "fvm_partition",
    partition_name = "fvm",
    type = PARTITION_TYPE.FVM,
)

fuchsia_partitions_configuration(
    name = "my_partitions_config",
    bootloader_partitions = [
        ":my_bootloader_partition",
    ],
    bootstrap_partitions = [
        ":bootstrap_partition_3776",
        ":bootstrap_partition_3728",
    ],
    hardware_revision = "x64",
    partitions = [
        ":zbi_partition",
        ":vbmeta_partition",
        ":fvm_partition",
    ],
    unlock_credentials = [
        ":test_data/unlock-creds.zip",
    ],
)

fuchsia_partitions_configuration_test(
    name = "partitions_config_golden_test",
    golden_file = ":test_data/partitions_config_golden_file.json",
    partitions_config = ":my_partitions_config",
    visibility = ["//visibility:public"],
)

fuchsia_virtual_device(
    name = "my_virtual_device",
    arch = "x64",
    device_name = "test",
    memory_quantity = 16,
    memory_unit = "gigabytes",
    storage_quantity = 8,
    storage_unit = "terabytes",
    window_height_px = 2160,
    window_width_px = 3840,
)

fuchsia_virtual_device_test(
    name = "virtual_device_golden_test",
    golden_file = ":test_data/virtual_device_golden_file.json",
    virtual_device = ":my_virtual_device",
    visibility = ["//visibility:public"],
)

test_ota_realm_a = ota_realm(
    name = "test_realm_a",
    app_id = "some_app_id_a",
    channels = [
        "channel_a",
        "channel_b",
        "channel_c",
        "channel_d",
    ],
    tuf = tuf_repo(
        hostnames =
            ["some.hostname.com"],
        mirror_url = "https://some.hostname.com",
        root = tuf_repo_root(
            signing_threshold = 1,
            type = "ed25519",
            value =
                "0000000000000000000000000000000000000000000000000000000000000000",
            version = 4,
        ),
    ),
)

test_ota_realm_b = ota_realm(
    name = "test_realm_b",
    app_id = "some_app_id_b",
    channels = [
        "channel_e",
        "channel_f",
        "channel_g",
        "channel_h",
    ],
    tuf = tuf_repo(
        hostnames =
            ["some.other_hostname.com"],
        mirror_url = "https://some.other_hostname.com",
        root = tuf_repo_root(
            signing_threshold = 1,
            type = "ed25519",
            value =
                "0000000000000000000000000000000000000000000000000000000000000000",
            version = 4,
        ),
    ),
)

fuchsia_product_ota_config(
    name = "test_ota_config",
    default_channel = "channel_b",
    realms = [
        test_ota_realm_a,
        test_ota_realm_b,
    ],
)

fuchsia_product_configuration(
    name = "test_product_configuration_with_ota_config",
    ota_configuration = ":test_ota_config",
    product_config_json = {
        "platform": {
            "build_type": "userdebug",
        },
    },
)

fuchsia_product_configuration_test(
    name = "product_ota_config_golden_test",
    golden_file = ":test_data/product_config_with_ota_golden_file.json",
    product_config = ":test_product_configuration_with_ota_config",
    visibility = ["//visibility:public"],
)

fuchsia_product_ota_config_test(
    name = "product_ota_config_golden_test_channel_config",
    golden_file = ":test_data/channel_config.json",
    path_in_config = "platform/software_delivery/update_checker/OmahaClient/channels_path/channel_config.json",
    product_config = ":test_product_configuration_with_ota_config",
    visibility = ["//visibility:public"],
)

fuchsia_product_ota_config_test(
    name = "product_ota_config_golden_test_realm_a_tuf_repo",
    golden_file = ":test_data/some.hostname.com.json",
    path_in_config = "platform/software_delivery/tuf_config_paths/0/some.hostname.com.json",
    product_config = ":test_product_configuration_with_ota_config",
    visibility = ["//visibility:public"],
)

fuchsia_product_ota_config_test(
    name = "product_ota_config_golden_test_realm_b_tuf_repo",
    golden_file = ":test_data/some.other_hostname.com.json",
    path_in_config = "platform/software_delivery/tuf_config_paths/1/some.other_hostname.com.json",
    product_config = ":test_product_configuration_with_ota_config",
    visibility = ["//visibility:public"],
)

fuchsia_component_manifest(
    name = "empty_component_manifest",
    component_name = "empty_component",
    content = "{}",
)

fuchsia_component(
    name = "empty_component",
    manifest = ":empty_component_manifest",
)

fuchsia_package(
    name = "container_base_pkg",
    package_name = "pkg_for_test",
    components = [
        ":empty_component",
    ],
    fuchsia_api_level = "HEAD",
    visibility = ["//visibility:public"],
)

fuchsia_gen_android_starnix_container(
    name = "fuchsia_android_starnix_container_for_test",
    base = ":container_base_pkg",
    base_files = [],
    system = "test_data/ext4.img",
)

fuchsia_package_checker_test(
    name = "fuchsia_gen_android_starnix_container_test",
    package_name = "fuchsia_android_starnix_container_for_test",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_generated_blobs = {
        ":test_data/container/odm/metadata.v1": "data/odm/metadata.v1",
        ":test_data/container/system/15": "data/system/15",
        ":test_data/container/system/metadata.v1": "data/system/metadata.v1",
    },
    manifests = [
        "meta/empty_component.cm",
    ],
    package_under_test = ":fuchsia_android_starnix_container_for_test",
    visibility = ["//visibility:public"],
)

fuchsia_product_configuration(
    name = "product_config_for_package_extraction",
    base_packages = [
        ":prebuilt_ams_light",  # This package is named "ams-light"
    ],
    product_config_json = {
        "platform": {
            "build_type": "eng",
        },
        "product": {},
    },
)

fuchsia_prebuilt_product_configuration_extract_package(
    name = "extracted_ams_light_from_product_config",
    package_name = "ams-light-test",  # Name of the package inside its manifest
    product_configuration = ":product_config_for_package_extraction",
)

fuchsia_package_checker_test(
    name = "prebuilt_product_config_extract_package_test",
    package_name = "ams-light-test",
    expected_abi_revision = AMS_LIGHT_TEST_ABI_REVISION,
    expected_generated_blobs = {
        ":test_data/ams-light-test/bee300a0aa26d798723ca029842a4b3f32ae02637d207f49b620fc4f371a0368": "lib/ld.so.1",
        ":test_data/ams-light-test/9cd2c26907d4a75a75d96d790358643266e02da97dd417c0ddfaa84f8751d33a": "lib/libasync-default.so",
        ":test_data/ams-light-test/ec8fec8d882d921269cb10895e6ef64838448a655dff87c4252359abbb9b4dee": "lib/libbackend_fuchsia_globals.so",
        ":test_data/ams-light-test/9fd9afd733a93aed961e3d0236d8d4db90fa4acff84d7148eacf379102875b2f": "lib/libc++.so.2",
        ":test_data/ams-light-test/a0bb87c87dcc662940b42826f0ba3e58a94348ca2c2f9a3fbdf299c82e53e789": "lib/libc++abi.so.1",
        ":test_data/ams-light-test/a282191611eccbf36c83a8d3d910807be279b41ecd3fb25a055e9286b0e6ba17": "lib/libfdio.so",
        ":test_data/ams-light-test/5cdf7cb150111850719bdf5aca1d2ca7ecf8e00b38fd86c351887c81a50e2745": "lib/libsyslog.so",
        ":test_data/ams-light-test/b35567ee375ed98c030fd2801a7bac1d3d0be34908be2d2266fc78e9a1dd0bb3": "lib/libtrace-engine.so",
        ":test_data/ams-light-test/bcbef09a907952bfaae44405e5aaff5e79d6388c5325e4d2c51e0fbfab4ed53c": "lib/libunwind.so.1",
        ":test_data/ams-light-test/b26642e3d5892d6cb8c64f940e1177c6db2893ec3f617f92c47fca0ab2520450": "test/ams-light-test",
    },
    manifests = ["meta/ams-light-test.cm"],
    package_under_test = ":extracted_ams_light_from_product_config",
    visibility = ["//visibility:public"],
)
