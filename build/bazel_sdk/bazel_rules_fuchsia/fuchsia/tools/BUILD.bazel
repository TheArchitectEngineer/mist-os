# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Tools supporting Fuchsia Bazel rules.

load("@platforms//host:constraints.bzl", "HOST_CONSTRAINTS")
load("@rules_python//python:defs.bzl", "py_binary", "py_library")

package(default_visibility = ["//visibility:public"])

py_binary(
    name = "unbuffer",
    srcs = ["unbuffer.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_library(
    name = "pylib_elf_info",
    srcs = ["pylib/elf_info.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "elf_strip",
    srcs = ["elf_strip.py"],
    target_compatible_with = HOST_CONSTRAINTS,
    deps = [":pylib_elf_info"],
)

py_binary(
    name = "generate_symbols_dir",
    srcs = ["generate_symbols_dir.py"],
    target_compatible_with = HOST_CONSTRAINTS,
    deps = [":pylib_elf_info"],
)

py_binary(
    name = "publish_packages",
    srcs = ["publish_packages.py"],
    target_compatible_with = HOST_CONSTRAINTS,
    deps = [":fuchsia_task_lib"],
)

py_binary(
    name = "meta_content_append",
    srcs = ["meta_content_append.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "rebase_package_manifest",
    srcs = ["rebase_package_manifest.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "create_package_manifest_list",
    srcs = ["create_package_manifest_list.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "validate_component_manifests",
    srcs = ["validate_component_manifests.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "create_platform_aibs_file",
    srcs = ["create_platform_aibs_file.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_library(
    name = "fuchsia_task_lib",
    srcs = ["fuchsia_task_lib.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "run_workflow",
    srcs = ["run_workflow.py"],
    target_compatible_with = HOST_CONSTRAINTS,
    deps = [":fuchsia_task_lib"],
)

py_binary(
    name = "fuchsia_shell_task",
    srcs = ["fuchsia_shell_task.py"],
    target_compatible_with = HOST_CONSTRAINTS,
    deps = [":fuchsia_task_lib"],
)

py_binary(
    name = "run_ffx",
    srcs = ["run_ffx.py"],
    target_compatible_with = HOST_CONSTRAINTS,
    deps = [":fuchsia_task_lib"],
)

py_binary(
    name = "register_debug_symbols",
    srcs = ["register_debug_symbols.py"],
    target_compatible_with = HOST_CONSTRAINTS,
    deps = [":fuchsia_task_lib"],
)

py_binary(
    name = "register_driver",
    srcs = ["register_driver.py"],
    target_compatible_with = HOST_CONSTRAINTS,
    deps = [":fuchsia_task_lib"],
)

py_binary(
    name = "run_test_component",
    srcs = ["run_test_component.py"],
    target_compatible_with = HOST_CONSTRAINTS,
    deps = [":fuchsia_task_lib"],
)

py_binary(
    name = "run_component",
    srcs = ["run_component.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "run_lacewing_test",
    srcs = ["run_lacewing_test.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "test_enumerated_components",
    srcs = ["test_enumerated_components.py"],
    target_compatible_with = HOST_CONSTRAINTS,
    deps = [":fuchsia_task_lib"],
)

py_binary(
    name = "development_status",
    srcs = ["development_status.py"],
    target_compatible_with = HOST_CONSTRAINTS,
    deps = [
        ":fuchsia_task_lib",
    ],
)

py_binary(
    name = "json_comparator",
    srcs = ["json_comparator.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "size_report_merger",
    srcs = ["size_report_merger.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "convert_size_limits",
    srcs = ["convert_size_limits.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "construct_budgets_file",
    srcs = ["construct_budgets_file.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "elf_sizes",
    srcs = ["elf_sizes.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "ensure_build_config",
    srcs = ["ensure_build_config.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)

py_binary(
    name = "check_restricted_symbols",
    srcs = ["check_restricted_symbols.py"],
    target_compatible_with = HOST_CONSTRAINTS,
)
