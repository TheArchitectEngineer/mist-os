# Copyright 2025 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/host.gni")
import("//build/product.gni")
import("//build/python/python_action.gni")

# Declares metadata for a set of tests and the product bundle to run them on.
#
# By default tests will run on the default product bundle from the build.
# With multi-product builds, we may want to target a specific non-default
# product bundle for a set of tests.

# We can now use this GN template for declaring this desire.

# product_bundle_test_group("target") {
#   product_bundle_name = "foo"
#   tests = [ ... ]
# }

# In order to declare one of these targets, you must make them available
# in your product.gni:
#   product_bundle_test_groups = [ "//path/to:target" ]

# This ensures that gn can "discover" the target and resolve the
# generated_file() at gn-time.
#
#
# Parameters:
#
#   tests (optional; default=[])
#     DEPRECATED: prefer target_tests or host_tests
#     [list] List of targets to walk to find test specs.
#
#   target_tests (optional; default=[])
#     [list] List of target targets to walk to find test specs.
#     Either this or host_tests must be defined.
#
#   host_tests (optional; default=[])
#     [list] List of host targets to walk to find test specs.
#     Either this or target_tests must be defined.
#
#   product_bundle_name (optional; default = target_name)
#     [str] The name of the product bundle to assign the tests to.
#
#   environments (optional; default = [])
#     [list of scopes] The environments to run these tests on.
#     See //docs/contribute/testing/environments.md.
#
template("product_bundle_test_group") {
  assert(defined(invoker.tests) || defined(invoker.target_tests) ||
             defined(invoker.host_tests),
         "Either 'tests' or 'target_tests' or 'host_tests' must be defined")

  # Ensure this template is only used in approved locations.
  # This ensures that they are resolved by gn-gen.
  # See root_patterns in the //.gn file.
  _valid_targets = product_bundle_test_groups
  if (!label_matches(":$target_name", _valid_targets)) {
    print("")
    print(
        "ERROR: All product_bundle_test_group()s must be added to the gn argument: product_bundle_test_groups")
    print("")
    assert(false)
  }

  # The test_spec should always be generate in the default toolchain even if
  # these are e2e (host) tests, because we want to avoid accidentally creating
  # two test specs for the same test.
  if (is_host) {
    group(target_name) {
      testonly = true
      not_needed(invoker, "*")
      public_deps = [ ":${target_name}($default_toolchain)" ]
    }
  } else {
    _product_bundle_name = target_name
    if (defined(invoker.product_bundle_name)) {
      _product_bundle_name = invoker.product_bundle_name
    }

    _environments = []
    if (defined(invoker.environments)) {
      _environments = invoker.environments
    }

    _tests_json = "${target_out_dir}/${target_name}/tests.json"

    generated_file(target_name) {
      testonly = true
      data_keys = [ "tests" ]
      walk_keys = [ "tests_barrier" ]
      outputs = [ _tests_json ]
      output_conversion = "json"

      deps = []
      if (defined(invoker.tests)) {
        deps += invoker.tests
      }
      if (defined(invoker.target_tests)) {
        deps += invoker.target_tests
      }
      if (defined(invoker.host_tests)) {
        foreach(host_test, invoker.host_tests) {
          host_test_label = get_label_info(host_test, "label_no_toolchain") +
                            "($host_toolchain)"
          deps += [ host_test_label ]
        }
      }

      metadata = {
        tests_barrier = []
        pb_test_groups = [
          {
            product_bundle_name = _product_bundle_name
            environments = _environments
            tests_json = rebase_path(_tests_json, root_build_dir)
          },
        ]
      }
    }
  }
}
