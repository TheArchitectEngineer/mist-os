# Copyright 2025 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Generate a manifest file that contains pre-build information about
# all sdk_atom() targets reachable from 'deps'.
#
# Arguments:
#  output: Output file GN path.
#  deps: List of sdk_atom() dependencies.
#  testonly: Usual GN meaning.
#
template("idk_prebuild_manifest") {
  # The manifest contains a list of JSON object, each one of them corresponding
  # to a single sdk_atom() target, with the following fields:
  #
  #   atom_id  (string)
  #     Unique ID for this atom (e.g. "sdk://pkg/fdio")
  #
  #   atom_type (string)
  #     The type of the underlying SDK atom. This is used to interpret the value
  #     of 'prebuild_info' to generate the final 'meta.json' file.
  #
  #   atom_files: (list)
  #     A list of objects with 'source' and 'dest' fields describing which files
  #     to copy to the final SDK export locations for this atom.
  #     Each 'source' path is relative to the Ninja build directory.
  #     Each 'dest' path is relative to the SDK export directory.
  #
  #   atom_meta: [object]
  #     The value of the sdk_atom() target's original 'meta' argument.
  #     Without 'source' or 'source_prebuild_info' values. See documentation
  #     in //build/sdk/sdk_atom.gni for schema details.
  #
  #   prebuild_info:
  #     Optional: the value of the target's original 'meta.source_prebuild_info' if
  #     it was defined. This should contain enough information to recreate the
  #     final meta.json file from the manifest only for this atom. Exact content
  #     will depend on the value of 'atom_type'. See below for exact schemas for
  #     each type.
  #
  #   atom_meta_json_file: (string)
  #     path to the meta.json file generated by the Ninja build system for this
  #     atom. Relative to the Ninja build directory. This can be used to verify that
  #     the meta.json generated by processing  prebuild_info matches its content.
  #
  # Now, the list of schemas for all supported 'atom_type' value:
  #
  # --------------------------------------------------------------------------------
  #
  #   "cc_source_library"
  #
  #   LINT.IfChange
  #
  #     include_dir (string)
  #        Directory path that must be added to the include search path at compile
  #        time to find the headers of this library. Relative to the SDK export dir
  #        (e.g. "pkg/magma_common/include")
  #
  #     headers  (list[string])
  #        List of C++ header file paths for this atom, relative to the SDK export
  #        directory. Thus they will always have 'include_dir' as a prefix.
  #
  #     sources  (list[string])
  #        List of C++ source file paths for this atom, relative to the SDK export
  #        directory.
  #
  #     deps  (list[string])
  #        List of labels to direct atom dependencies for the current atom.
  #
  #     sdk_name  (string)
  #        SDK name of library (e.g. "magma_common")
  #
  #   LINT.ThenChange(//build/cpp/sdk_source_set.gni)
  #
  # --------------------------------------------------------------------------------
  #
  #   "cc_prebuilt_library"
  #
  #   LINT.IfChange
  #
  #   generator_label  (string)
  #      GN label of the target that generates the corresponding prebuilt binary.
  #
  #   format  (string)
  #      Either "static" (for static library archives) or "shared" (for ELF shared libraries)
  #
  #   api_level  (string)
  #      API level, can be "PLATFORM" or a decimal string (e.g. "11").
  #
  #   binaries  (list)
  #      A list of scopes, each one describing one variant of the prebuilt library.
  #      Each scope having the following schema:
  #
  #          arch  (string)
  #              CPU architecture name of the binary (e.g. "x64" or "arm64").
  #
  #          link_lib  (string)
  #              Path of link-time prebuilt library file, relative to SDK export dir.
  #              E.g. "arch/x64/lib/libfdio.so". For "shared" prebuilts, this will usually
  #              be a small link-stub, not a real library.
  #
  #          dist_lib  (string)
  #              Only for "shared" prebuilts. Path of distributable (stripped) version of the
  #              library, relative to the SDK export dir (e.g. "arch/x64/dist/libfdio.so").
  #
  #          dist_path  (string)
  #              Only for "shared" prebuilts. Installation path of the library, relative to
  #              Fuchsia package root (e.g. "lib/fdio.so")
  #
  #          symbols_lib  (string)
  #              Only for "shared" prebuilts. Path of unstripped version of the prebuilt
  #              library, relative to SDK export dir (e.g. "arch/x64/symbols/libfdio.so")
  #
  #   deps         (list[string])
  #   include_dir  (string)
  #   headers      (list[string])
  #      Same as "cc_source_library"
  #
  #   LINT.ThenChange(//build/cpp/sdk_shared_library.gni)
  #
  #
  #
  #
  generated_file(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])
    outputs = [ invoker.output ]
    data_keys = [ "idk_atom_prebuild_info" ]
    walk_keys = [ "idk_atom_prebuild_info_barrier" ]
    output_conversion = "json"
    deps = invoker.deps
  }
}
