# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/cpp/library_headers.gni")

library_headers("headers") {
  headers = [
    "lib/concurrent/common.h",
    "lib/concurrent/copy.h",
    "lib/concurrent/seqlock.h",
    "lib/concurrent/seqlock.inc.h",
    "lib/concurrent/chainlock.h",
    "lib/concurrent/capability_token.h",
  ]
}

concurrent_base = {
  sources = [ "copy.cc" ]

  public_deps = [
    ":headers",
    "//src/performance/lib/fxt:headers",
    "//zircon/kernel/lib/arch:headers",
  ]
  deps = [ "//sdk/lib/stdcompat" ]
}

source_set("concurrent") {
  forward_variables_from(concurrent_base, "*")

  if (is_fuchsia && !is_kernel) {
    sources += [ "seqlock_usermode_fuchsia.cc" ]
  } else if (is_host) {
    sources += [ "seqlock_usermode_posix.cc" ]
  }
}

# TODO(b/398297232)
#
# If we are building for the VDSO, we need to enable an additional options.
#
# On ARM64, we cannot allow the compiler to generate the hooks needed to do
# runtime detection of LSE atomics support.  It has no place to put the init
# hook, and even if it did, there are no writable data segments for it to store
# its result.
#
source_set("concurrent_vdso") {
  forward_variables_from(concurrent_base, "*")

  if (current_cpu == "arm64") {
    public_configs = [ "//build/config/arm64:no-outline-atomics" ]
  }
}

group("tests") {
  testonly = true
  deps = [ "tests:tests" ]
}
