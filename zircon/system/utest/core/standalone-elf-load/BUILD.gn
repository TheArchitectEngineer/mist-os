# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/zircon/standard.gni")

test_module_cpus = standard_fuchsia_cpus + [ "arm" ]

test_module_list = ""
foreach(cpu, test_module_cpus) {
  test_module_list += "\"standalone-elf-load-test-module.$cpu.so\","
}

source_set("standalone-elf-load") {
  testonly = true

  sources = [ "standalone-elf-load.cc" ]
  defines = [ "TEST_MODULE_LIST=$test_module_list" ]

  deps = [
    "//src/lib/elfldltl",
    "//src/lib/elfldltl/testing:elfldltl-zxtest",
    "//src/lib/symbolizer-markup",
    "//zircon/system/ulib/zx",
    "//zircon/system/ulib/zxtest",
  ]

  # The test modules are built in the linux environment just to prove their
  # genericity, and because there is an arm version of that environment.
  # Modulo arm (vs arm64), the user.basic environment would work the same.
  data_deps = []
  foreach(cpu, test_module_cpus) {
    data_deps +=
        [ ":standalone-elf-load-test-module(//build/toolchain:linux_$cpu)" ]
  }
}

source_set("test-module-header") {
  visibility = [ ":*" ]
  testonly = true

  public = [ "test-module.h" ]
}

loadable_module("standalone-elf-load-test-module") {
  visibility = [ ":*" ]
  testonly = true

  sources = [ "test-module.cc" ]
  deps = [ ":test-module-header" ]
  ldflags = [
    "-Wl,-e,TestStart",
    "-nodefaultlibs",
  ]
  configs += [ "//build/config/zircon:nolibc" ]

  exclude_toolchain_tags = [ "instrumented" ]

  metadata = {
    # Place the test module in the package with the CPU-specific name.  The
    # test will use the fuchsia.ldsvc (userboot in the standalone case) to
    # acquire each as a VMO, which will look for them in lib/ (within the
    # package namespace for the component test, otherwise under /boot).
    distribution_entries = [
      {
        destination = "lib/$target_name.$current_cpu.so"
        source = rebase_path("$root_out_dir/$target_name.so", root_build_dir)
        label = get_label_info(":$target_name", "label_with_toolchain")
      },
    ]
  }
}
