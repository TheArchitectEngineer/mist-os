# Copyright 2020 The Fuchsia Authors
#
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT

import("//build/test.gni")
import("//build/zircon/c_utils.gni")

group("tests") {
  testonly = true
  deps = [
    ":arch-tests($host_toolchain)",
    ":asm-stack-sizes-test",
  ]
}

if (!is_kernel) {
  test("arch-tests") {
    sources = [
      "arm64-smccc-tests.cc",
      "arm64-system-tests.cc",
      "bug-tests.cc",
      "cpuid-basic-tests.cc",
      "cpuid-corpus-tests.cc",
      "fake-cpuid-tests.cc",
      "fake-msr-tests.cc",
      "nop-tests.cc",
      "paging-tests.cc",
      "power-tests.cc",
      "riscv64-feature-tests.cc",
      "speculation-tests.cc",
    ]
    deps = [
      "//src/lib/fxl/test:gtest_main",
      "//third_party/googletest:gmock",
      "//third_party/googletest:gtest",
      "//zircon/kernel/lib/arch",
      "//zircon/kernel/lib/arch/testing",
      "//zircon/system/ulib/hwreg",
      "//zircon/system/ulib/zx",
    ]
  }
} else {
  source_set("kernel-tests") {
    sources = [ "random-tests.cc" ]
    deps = [
      "//zircon/kernel/lib/arch",
      "//zircon/kernel/lib/unittest",
    ]
  }
}

test("asm-stack-sizes-test-code") {
  sources = [ "asm-stack-sizes-test.S" ]
  deps = [ "//zircon/kernel/lib/arch" ]
  configs += [ "//build/config/zircon:user-executable" ]

  # It's standalone assembly anyway.  Avoid extra link-time entanglements.
  exclude_toolchain_tags = [ "instrumented" ]
}

link_output_rspfile("asm-stack-sizes-test-code.rsp") {
  visibility = [ ":*" ]
  testonly = true
  outputs = [ "$target_gen_dir/$target_name" ]
  deps = [ ":asm-stack-sizes-test-code" ]
}

toolchain_utils_action("asm-stack-sizes-test") {
  testonly = true
  script = "asm-stack-sizes-test.py"
  utils = [ "llvm-readelf" ]
  deps = [ ":asm-stack-sizes-test-code.rsp" ]
  sources = get_target_outputs(deps[0])
  outputs = [ "$target_out_dir/$target_name.txt" ]
  depfile = "$target_gen_dir/$target_name.d"
  args = [
    "--output=" + rebase_path(outputs[0], root_build_dir),
    "--depfile=" + rebase_path(depfile, root_build_dir),
    "--rspfile=" + rebase_path(sources[0], root_build_dir),
  ]
}
